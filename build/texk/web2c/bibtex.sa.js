// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}

if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}

if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  Module['load'] = importScripts;
}

if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  BITSHIFT64_SHL: 0,
  BITSHIFT64_ASHR: 1,
  BITSHIFT64_LSHR: 2,
  bitshift64: function (low, high, op, bits) {
    var ret;
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
          break;
      }
    } else if (bits == 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [high, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high, 0];
          break;
      }
    } else { // bits > 32
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low << (bits - 32)];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high >>>  (bits - 32) , 0];
          break;
      }
    }
    assert(ret);
    HEAP32[tempDoublePtr>>2] = ret[0]; // cannot use utility functions since we are in runtime itself
    HEAP32[tempDoublePtr+4>>2] = ret[1];
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func, sig) {
    assert(sig);
    var table = FUNCTION_TABLE; // TODO: support asm
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



var CorrectionsMonitor = {
  MAX_ALLOWED: 0, // XXX
  corrections: 0,
  sigs: {},

  note: function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort('\n\nToo many corrections!');
    }
  },

  print: function() {
  }
};





//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((ptr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_NONE = 3; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    _memset(ret, 0, size);
    return ret;
  }

  if (singleType === 'i8') {
    HEAPU8.set(new Uint8Array(slab), ret);
    return ret;
  }

  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var utf8 = new Runtime.UTF8Processor();
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
  assert(i < TOTAL_MEMORY);
    t = HEAPU8[((ptr)+(i))];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
  assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
         'Cannot fallback to non-typed array case: Code is too specialized');

  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);

  // Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 255;
  assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = TOTAL_STACK; // we lose a little stack here, but TOTAL_STACK is nice and round so use that as the max

var tempDoublePtr = Runtime.alignMemory(allocate(12, 'i8', ALLOC_STACK), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code is increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

STATICTOP = STACK_MAX;
assert(STATICTOP < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY

var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STACK);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);

  // Print summary of correction activity
  CorrectionsMonitor.print();
}

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[((buffer)+(i))]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer)+(i))]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
  // TODO: clean up previous line
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

// === Body ===



assert(STATICTOP == STACK_MAX); assert(STACK_MAX == TOTAL_STACK);

STATICTOP += 29904;

assert(STATICTOP < TOTAL_MEMORY);




































var _stdout;
var _stdin;
var _stderr;






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































allocate(256, "i8", ALLOC_NONE, 5242880);
allocate(256, "i8", ALLOC_NONE, 5243136);
allocate(4, "i8", ALLOC_NONE, 5243392);
allocate(4, "i8", ALLOC_NONE, 5243396);
allocate(4, "i8", ALLOC_NONE, 5243400);
allocate(4, "i8", ALLOC_NONE, 5243404);
allocate(4, "i8", ALLOC_NONE, 5243408);
allocate(4, "i8", ALLOC_NONE, 5243412);
allocate(4, "i8", ALLOC_NONE, 5243416);
allocate(4, "i8", ALLOC_NONE, 5243420);
allocate(4, "i8", ALLOC_NONE, 5243424);
allocate(4, "i8", ALLOC_NONE, 5243428);
allocate(4, "i8", ALLOC_NONE, 5243432);
allocate(4, "i8", ALLOC_NONE, 5243436);
allocate(4, "i8", ALLOC_NONE, 5243440);
allocate(4, "i8", ALLOC_NONE, 5243444);
allocate(4, "i8", ALLOC_NONE, 5243448);
allocate(4, "i8", ALLOC_NONE, 5243452);
allocate(4, "i8", ALLOC_NONE, 5243456);
allocate(4, "i8", ALLOC_NONE, 5243460);
allocate(4, "i8", ALLOC_NONE, 5243464);
allocate(4, "i8", ALLOC_NONE, 5243468);
allocate(4, "i8", ALLOC_NONE, 5243472);
allocate(4, "i8", ALLOC_NONE, 5243476);
allocate(4, "i8", ALLOC_NONE, 5243480);
allocate(4, "i8", ALLOC_NONE, 5243484);
allocate(4, "i8", ALLOC_NONE, 5243488);
allocate(4, "i8", ALLOC_NONE, 5243492);
allocate(4, "i8", ALLOC_NONE, 5243496);
allocate(4, "i8", ALLOC_NONE, 5243500);
allocate(4, "i8", ALLOC_NONE, 5243504);
allocate(4, "i8", ALLOC_NONE, 5243508);
allocate(4, "i8", ALLOC_NONE, 5243512);
allocate(4, "i8", ALLOC_NONE, 5243516);
allocate(4, "i8", ALLOC_NONE, 5243520);
allocate(4, "i8", ALLOC_NONE, 5243524);
allocate(4, "i8", ALLOC_NONE, 5243528);
allocate(4, "i8", ALLOC_NONE, 5243532);
allocate(4, "i8", ALLOC_NONE, 5243536);
allocate(4, "i8", ALLOC_NONE, 5243540);
allocate(4, "i8", ALLOC_NONE, 5243544);
allocate(4, "i8", ALLOC_NONE, 5243548);
allocate(4, "i8", ALLOC_NONE, 5243552);
allocate(4, "i8", ALLOC_NONE, 5243556);
allocate(4, "i8", ALLOC_NONE, 5243560);
allocate(4, "i8", ALLOC_NONE, 5243564);
allocate(4, "i8", ALLOC_NONE, 5243568);
allocate(4, "i8", ALLOC_NONE, 5243572);
allocate(4, "i8", ALLOC_NONE, 5243576);
allocate(4, "i8", ALLOC_NONE, 5243580);
allocate(4, "i8", ALLOC_NONE, 5243584);
allocate(4, "i8", ALLOC_NONE, 5243588);
allocate(4, "i8", ALLOC_NONE, 5243592);
allocate(4, "i8", ALLOC_NONE, 5243596);
allocate(4, "i8", ALLOC_NONE, 5243600);
allocate(4, "i8", ALLOC_NONE, 5243604);
allocate(4, "i8", ALLOC_NONE, 5243608);
allocate(4, "i8", ALLOC_NONE, 5243612);
allocate(4, "i8", ALLOC_NONE, 5243616);
allocate(4, "i8", ALLOC_NONE, 5243620);
allocate(4, "i8", ALLOC_NONE, 5243624);
allocate(4, "i8", ALLOC_NONE, 5243628);
allocate(4, "i8", ALLOC_NONE, 5243632);
allocate(4, "i8", ALLOC_NONE, 5243636);
allocate(4, "i8", ALLOC_NONE, 5243640);
allocate(4, "i8", ALLOC_NONE, 5243644);
allocate(4, "i8", ALLOC_NONE, 5243648);
allocate(4, "i8", ALLOC_NONE, 5243652);
allocate(4, "i8", ALLOC_NONE, 5243656);
allocate(4, "i8", ALLOC_NONE, 5243660);
allocate(4, "i8", ALLOC_NONE, 5243664);
allocate(4, "i8", ALLOC_NONE, 5243668);
allocate(4, "i8", ALLOC_NONE, 5243672);
allocate(4, "i8", ALLOC_NONE, 5243676);
allocate(4, "i8", ALLOC_NONE, 5243680);
allocate(4, "i8", ALLOC_NONE, 5243684);
allocate(4, "i8", ALLOC_NONE, 5243688);
allocate(4, "i8", ALLOC_NONE, 5243692);
allocate(4, "i8", ALLOC_NONE, 5243696);
allocate(4, "i8", ALLOC_NONE, 5243700);
allocate(4, "i8", ALLOC_NONE, 5243704);
allocate(4, "i8", ALLOC_NONE, 5243708);
allocate(4, "i8", ALLOC_NONE, 5243712);
allocate(4, "i8", ALLOC_NONE, 5243716);
allocate(4, "i8", ALLOC_NONE, 5243720);
allocate(4, "i8", ALLOC_NONE, 5243724);
allocate([63,0,0,0], "i8", ALLOC_NONE, 5243728);
allocate([1,0,0,0], "i8", ALLOC_NONE, 5243732);
allocate([1,0,0,0], "i8", ALLOC_NONE, 5243736);
allocate(4, "i8", ALLOC_NONE, 5243740);
allocate(4, "i8", ALLOC_NONE, 5243744);
allocate(8, "i8", ALLOC_NONE, 5243748);
allocate(4, "i8", ALLOC_NONE, 5243756);
allocate(4, "i8", ALLOC_NONE, 5243760);
allocate(4, "i8", ALLOC_NONE, 5243764);
allocate(4, "i8", ALLOC_NONE, 5243768);
allocate(4, "i8", ALLOC_NONE, 5243772);
allocate(4, "i8", ALLOC_NONE, 5243776);
allocate(4, "i8", ALLOC_NONE, 5243780);
allocate(4, "i8", ALLOC_NONE, 5243784);
allocate(4, "i8", ALLOC_NONE, 5243788);
allocate(4, "i8", ALLOC_NONE, 5243792);
allocate(4, "i8", ALLOC_NONE, 5243796);
allocate(4, "i8", ALLOC_NONE, 5243800);
allocate(4, "i8", ALLOC_NONE, 5243804);
allocate(4, "i8", ALLOC_NONE, 5243808);
allocate(4, "i8", ALLOC_NONE, 5243812);
allocate(4, "i8", ALLOC_NONE, 5243816);
allocate(4, "i8", ALLOC_NONE, 5243820);
allocate(4, "i8", ALLOC_NONE, 5243824);
allocate(4, "i8", ALLOC_NONE, 5243828);
allocate(4, "i8", ALLOC_NONE, 5243832);
allocate(4, "i8", ALLOC_NONE, 5243836);
allocate(4, "i8", ALLOC_NONE, 5243840);
allocate(4, "i8", ALLOC_NONE, 5243844);
allocate(24, "i8", ALLOC_NONE, 5243848);
allocate(4, "i8", ALLOC_NONE, 5243872);
allocate(4, "i8", ALLOC_NONE, 5243876);
allocate(4, "i8", ALLOC_NONE, 5243880);
allocate(4, "i8", ALLOC_NONE, 5243884);
allocate(4, "i8", ALLOC_NONE, 5243888);
allocate(4, "i8", ALLOC_NONE, 5243892);
allocate(4, "i8", ALLOC_NONE, 5243896);
allocate(4, "i8", ALLOC_NONE, 5243900);
allocate(4, "i8", ALLOC_NONE, 5243904);
allocate(4, "i8", ALLOC_NONE, 5243908);
allocate(4, "i8", ALLOC_NONE, 5243912);
allocate(4, "i8", ALLOC_NONE, 5243916);
allocate(4, "i8", ALLOC_NONE, 5243920);
allocate(4, "i8", ALLOC_NONE, 5243924);
allocate(4, "i8", ALLOC_NONE, 5243928);
allocate(256, "i8", ALLOC_NONE, 5243932);
allocate(4, "i8", ALLOC_NONE, 5244188);
allocate(4, "i8", ALLOC_NONE, 5244192);
allocate(4, "i8", ALLOC_NONE, 5244196);
allocate(4, "i8", ALLOC_NONE, 5244200);
allocate(4, "i8", ALLOC_NONE, 5244204);
allocate(4, "i8", ALLOC_NONE, 5244208);
allocate(4, "i8", ALLOC_NONE, 5244212);
allocate(4168, "i8", ALLOC_NONE, 5244216);
allocate([56,5,80,0], "i8", ALLOC_NONE, 5248384);
allocate(4, "i8", ALLOC_NONE, 5248388);
allocate(4, "i8", ALLOC_NONE, 5248392);
allocate(40, "i8", ALLOC_NONE, 5248396);
allocate(40, "i8", ALLOC_NONE, 5248436);
allocate(4, "i8", ALLOC_NONE, 5248476);
allocate(4, "i8", ALLOC_NONE, 5248480);
allocate(4, "i8", ALLOC_NONE, 5248484);
allocate(256, "i8", ALLOC_NONE, 5248488);
allocate(4, "i8", ALLOC_NONE, 5248744);
allocate(4, "i8", ALLOC_NONE, 5248748);
allocate(4, "i8", ALLOC_NONE, 5248752);
allocate(4, "i8", ALLOC_NONE, 5248756);
allocate(4, "i8", ALLOC_NONE, 5248760);
allocate(4, "i8", ALLOC_NONE, 5248764);
allocate(4, "i8", ALLOC_NONE, 5248768);
allocate(4, "i8", ALLOC_NONE, 5248772);
allocate(4, "i8", ALLOC_NONE, 5248776);
allocate(4, "i8", ALLOC_NONE, 5248780);
allocate(4, "i8", ALLOC_NONE, 5248784);
allocate(4, "i8", ALLOC_NONE, 5248788);
allocate(4, "i8", ALLOC_NONE, 5248792);
allocate(4, "i8", ALLOC_NONE, 5248796);
allocate(4, "i8", ALLOC_NONE, 5248800);
allocate(4, "i8", ALLOC_NONE, 5248804);
allocate(4, "i8", ALLOC_NONE, 5248808);
allocate(4, "i8", ALLOC_NONE, 5248812);
allocate(4, "i8", ALLOC_NONE, 5248816);
allocate(4, "i8", ALLOC_NONE, 5248820);
allocate(4, "i8", ALLOC_NONE, 5248824);
allocate(4, "i8", ALLOC_NONE, 5248828);
allocate(4, "i8", ALLOC_NONE, 5248832);
allocate(4, "i8", ALLOC_NONE, 5248836);
allocate(4, "i8", ALLOC_NONE, 5248840);
allocate(4, "i8", ALLOC_NONE, 5248844);
allocate(2048, "i8", ALLOC_NONE, 5248848);
allocate(152, "i8", ALLOC_NONE, 5250896);
allocate(4, "i8", ALLOC_NONE, 5251048);
allocate(4, "i8", ALLOC_NONE, 5251052);
allocate(4, "i8", ALLOC_NONE, 5251056);
allocate(4, "i8", ALLOC_NONE, 5251060);
allocate(4, "i8", ALLOC_NONE, 5251064);
allocate(4, "i8", ALLOC_NONE, 5251068);
allocate(4, "i8", ALLOC_NONE, 5251072);
allocate(4, "i8", ALLOC_NONE, 5251076);
allocate(4, "i8", ALLOC_NONE, 5251080);
allocate(4, "i8", ALLOC_NONE, 5251084);
allocate(4, "i8", ALLOC_NONE, 5251088);
allocate(4, "i8", ALLOC_NONE, 5251092);
allocate(4, "i8", ALLOC_NONE, 5251096);
allocate(4, "i8", ALLOC_NONE, 5251100);
allocate(4, "i8", ALLOC_NONE, 5251104);
allocate(4, "i8", ALLOC_NONE, 5251108);
allocate(4, "i8", ALLOC_NONE, 5251112);
allocate(4, "i8", ALLOC_NONE, 5251116);
allocate(12, "i8", ALLOC_NONE, 5251120);
allocate(4, "i8", ALLOC_NONE, 5251132);
allocate(4, "i8", ALLOC_NONE, 5251136);
allocate(4, "i8", ALLOC_NONE, 5251140);
allocate(4, "i8", ALLOC_NONE, 5251144);
allocate(4, "i8", ALLOC_NONE, 5251148);
allocate(4, "i8", ALLOC_NONE, 5251152);
allocate(4, "i8", ALLOC_NONE, 5251156);
allocate(4, "i8", ALLOC_NONE, 5251160);
allocate(4, "i8", ALLOC_NONE, 5251164);
allocate(4, "i8", ALLOC_NONE, 5251168);
allocate(4, "i8", ALLOC_NONE, 5251172);
allocate(4, "i8", ALLOC_NONE, 5251176);
allocate(4, "i8", ALLOC_NONE, 5251180);
allocate(4, "i8", ALLOC_NONE, 5251184);
allocate(4, "i8", ALLOC_NONE, 5251188);
allocate(4, "i8", ALLOC_NONE, 5251192);
allocate(4, "i8", ALLOC_NONE, 5251196);
allocate(1024, "i8", ALLOC_NONE, 5251200);
allocate(4, "i8", ALLOC_NONE, 5252224);
allocate(4, "i8", ALLOC_NONE, 5252228);
allocate(4, "i8", ALLOC_NONE, 5252232);
allocate(4, "i8", ALLOC_NONE, 5252236);
allocate(4, "i8", ALLOC_NONE, 5252240);
allocate(4, "i8", ALLOC_NONE, 5252244);
allocate(4, "i8", ALLOC_NONE, 5252248);
allocate(4, "i8", ALLOC_NONE, 5252252);
allocate(4, "i8", ALLOC_NONE, 5252256);
allocate(4, "i8", ALLOC_NONE, 5252260);
allocate(4, "i8", ALLOC_NONE, 5252264);
allocate(4, "i8", ALLOC_NONE, 5252268);
allocate(4, "i8", ALLOC_NONE, 5252272);
allocate(4, "i8", ALLOC_NONE, 5252276);
allocate(4, "i8", ALLOC_NONE, 5252280);
allocate(4, "i8", ALLOC_NONE, 5252284);
allocate(4, "i8", ALLOC_NONE, 5252288);
allocate(4, "i8", ALLOC_NONE, 5252292);
allocate(4, "i8", ALLOC_NONE, 5252296);
allocate(4, "i8", ALLOC_NONE, 5252300);
allocate(4, "i8", ALLOC_NONE, 5252304);
allocate(4, "i8", ALLOC_NONE, 5252308);
allocate(4, "i8", ALLOC_NONE, 5252312);
allocate(4, "i8", ALLOC_NONE, 5252316);
allocate(4, "i8", ALLOC_NONE, 5252320);
allocate(4, "i8", ALLOC_NONE, 5252324);
allocate(4, "i8", ALLOC_NONE, 5252328);
allocate(4, "i8", ALLOC_NONE, 5252332);
allocate(4, "i8", ALLOC_NONE, 5252336);
allocate(4, "i8", ALLOC_NONE, 5252340);
allocate(4, "i8", ALLOC_NONE, 5252344);
allocate(152, "i8", ALLOC_NONE, 5252348);
allocate(4, "i8", ALLOC_NONE, 5252500);
allocate(4, "i8", ALLOC_NONE, 5252504);
allocate(4, "i8", ALLOC_NONE, 5252508);
allocate(4, "i8", ALLOC_NONE, 5252512);
allocate(4, "i8", ALLOC_NONE, 5252516);
allocate(4, "i8", ALLOC_NONE, 5252520);
allocate(4, "i8", ALLOC_NONE, 5252524);
allocate(4, "i8", ALLOC_NONE, 5252528);
allocate(4, "i8", ALLOC_NONE, 5252532);
allocate(4, "i8", ALLOC_NONE, 5252536);
allocate(4, "i8", ALLOC_NONE, 5252540);
allocate(4, "i8", ALLOC_NONE, 5252544);
allocate(4, "i8", ALLOC_NONE, 5252548);
allocate(4, "i8", ALLOC_NONE, 5252552);
allocate(4, "i8", ALLOC_NONE, 5252556);
allocate(4, "i8", ALLOC_NONE, 5252560);
allocate(4, "i8", ALLOC_NONE, 5252564);
allocate(4, "i8", ALLOC_NONE, 5252568);
allocate(4, "i8", ALLOC_NONE, 5252572);
allocate(4, "i8", ALLOC_NONE, 5252576);
allocate(4, "i8", ALLOC_NONE, 5252580);
allocate(4, "i8", ALLOC_NONE, 5252584);
allocate(4, "i8", ALLOC_NONE, 5252588);
allocate(4, "i8", ALLOC_NONE, 5252592);
allocate(4, "i8", ALLOC_NONE, 5252596);
allocate(4, "i8", ALLOC_NONE, 5252600);
allocate(4, "i8", ALLOC_NONE, 5252604);
allocate(4, "i8", ALLOC_NONE, 5252608);
allocate(84, "i8", ALLOC_NONE, 5252612);
allocate(84, "i8", ALLOC_NONE, 5252696);
allocate(84, "i8", ALLOC_NONE, 5252780);
allocate(4, "i8", ALLOC_NONE, 5252864);
allocate(4, "i8", ALLOC_NONE, 5252868);
allocate(4, "i8", ALLOC_NONE, 5252872);
allocate(4, "i8", ALLOC_NONE, 5252876);
allocate(4, "i8", ALLOC_NONE, 5252880);
allocate(4, "i8", ALLOC_NONE, 5252884);
allocate(4, "i8", ALLOC_NONE, 5252888);
allocate([107,100,101,98,117,103,58,0] /* kdebug:\00 */, "i8", ALLOC_NONE, 5252892);
allocate([46,118,112,108,0] /* .vpl\00 */, "i8", ALLOC_NONE, 5252900);
allocate([115,101,97,114,99,104,40,37,115,41,32,61,62,0] /* search(%s) =_\00 */, "i8", ALLOC_NONE, 5252908);
allocate([46,0] /* .\00 */, "i8", ALLOC_NONE, 5252924);
allocate([87,97,114,110,105,110,103,45,45,121,111,117,39,118,101,32,101,120,99,101,101,100,101,100,32,0] /* Warning--you've exce */, "i8", ALLOC_NONE, 5252928);
allocate([46,111,118,112,0] /* .ovp\00 */, "i8", ALLOC_NONE, 5252956);
allocate([46,10,0] /* .\0A\00 */, "i8", ALLOC_NONE, 5252964);
allocate([48,0] /* 0\00 */, "i8", ALLOC_NONE, 5252968);
allocate([37,108,100,10,0] /* %ld\0A\00 */, "i8", ALLOC_NONE, 5252972);
allocate([107,100,101,98,117,103,58,0] /* kdebug:\00 */, "i8", ALLOC_NONE, 5252980);
allocate([46,10,0] /* .\0A\00 */, "i8", ALLOC_NONE, 5252988);
allocate([79,86,80,70,79,78,84,83,0] /* OVPFONTS\00 */, "i8", ALLOC_NONE, 5252992);
allocate(1, "i8", ALLOC_NONE, 5253004);
allocate([39,32,105,115,32,97,32,109,105,115,115,105,110,103,32,102,105,101,108,100,0] /* ' is a missing field */, "i8", ALLOC_NONE, 5253008);
allocate([46,46,47,46,46,47,46,46,47,115,114,99,47,116,101,120,107,47,107,112,97,116,104,115,101,97,47,116,105,108,100,101,46,99,0] /* ../../../src/texk/kp */, "i8", ALLOC_NONE, 5253032);
allocate([111,118,112,0] /* ovp\00 */, "i8", ALLOC_NONE, 5253068);
allocate([84,69,88,95,72,85,83,72,0] /* TEX_HUSH\00 */, "i8", ALLOC_NONE, 5253072);
allocate([39,32,105,115,32,97,32,102,117,110,99,116,105,111,110,32,108,105,116,101,114,97,108,0] /* ' is a function lite */, "i8", ALLOC_NONE, 5253084);
allocate([46,118,102,0] /* .vf\00 */, "i8", ALLOC_NONE, 5253108);
allocate([34,32,105,115,32,97,32,115,116,114,105,110,103,32,108,105,116,101,114,97,108,0] /* \22 is a string lite */, "i8", ALLOC_NONE, 5253112);
allocate([114,101,97,100,97,98,108,101,0] /* readable\00 */, "i8", ALLOC_NONE, 5253136);
allocate([102,109,116,0] /* fmt\00 */, "i8", ALLOC_NONE, 5253148);
allocate([46,111,118,102,0] /* .ovf\00 */, "i8", ALLOC_NONE, 5253152);
allocate(1, "i8", ALLOC_NONE, 5253160);
allocate([37,115,58,32,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,45,45,32,37,99,10,0] /* %s: invalid option - */, "i8", ALLOC_NONE, 5253164);
allocate([32,105,115,32,97,110,32,105,110,116,101,103,101,114,32,108,105,116,101,114,97,108,0] /*  is an integer liter */, "i8", ALLOC_NONE, 5253192);
allocate([110,97,109,101,100,32,67,79,80,89,73,78,71,32,97,110,100,32,116,104,101,32,37,115,32,115,111,117,114,99,101,46,10,0] /* named COPYING and th */, "i8", ALLOC_NONE, 5253216);
allocate([80,87,68,32,37,115,10,0] /* PWD %s\0A\00 */, "i8", ALLOC_NONE, 5253252);
allocate([79,86,70,70,79,78,84,83,0] /* OVFFONTS\00 */, "i8", ALLOC_NONE, 5253260);
allocate([37,108,100,37,115,0] /* %ld%s\00 */, "i8", ALLOC_NONE, 5253272);
allocate([107,100,101,98,117,103,58,0] /* kdebug:\00 */, "i8", ALLOC_NONE, 5253280);
allocate([111,118,102,0] /* ovf\00 */, "i8", ALLOC_NONE, 5253288);
allocate([46,46,47,46,46,47,46,46,47,115,114,99,47,116,101,120,107,47,107,112,97,116,104,115,101,97,47,112,97,116,104,45,101,108,116,46,99,0] /* ../../../src/texk/kp */, "i8", ALLOC_NONE, 5253292);
allocate([85,110,107,110,111,119,110,32,108,105,116,101,114,97,108,32,116,121,112,101,0] /* Unknown literal type */, "i8", ALLOC_NONE, 5253332);
allocate([46,111,116,112,0] /* .otp\00 */, "i8", ALLOC_NONE, 5253356);
allocate([46,46,47,46,46,47,46,46,47,115,114,99,47,116,101,120,107,47,107,112,97,116,104,115,101,97,47,107,100,101,102,97,117,108,116,46,99,0] /* ../../../src/texk/kp */, "i8", ALLOC_NONE, 5253364);
allocate([73,108,108,101,103,97,108,32,108,105,116,101,114,97,108,32,116,121,112,101,0] /* Illegal literal type */, "i8", ALLOC_NONE, 5253404);
allocate([79,84,80,73,78,80,85,84,83,0] /* OTPINPUTS\00 */, "i8", ALLOC_NONE, 5253428);
allocate([89,111,117,32,99,97,110,39,116,32,109,101,115,115,32,119,105,116,104,32,101,110,116,114,105,101,115,32,104,101,114,101,0] /* You can't mess with  */, "i8", ALLOC_NONE, 5253440);
allocate([45,45,45,116,104,105,115,32,99,97,110,39,116,32,104,97,112,112,101,110,0] /* ---this can't happen */, "i8", ALLOC_NONE, 5253476);
allocate([107,100,101,98,117,103,58,0] /* kdebug:\00 */, "i8", ALLOC_NONE, 5253500);
allocate([111,116,112,0] /* otp\00 */, "i8", ALLOC_NONE, 5253508);
allocate([115,116,97,114,116,32,115,101,97,114,99,104,40,102,105,108,101,61,37,115,44,32,109,117,115,116,95,101,120,105,115,116,61,37,100,44,32,102,105,110,100,95,97,108,108,61,37,100,44,32,112,97,116,104,61,37,115,41,46,10,0] /* start search(file=%s */, "i8", ALLOC_NONE, 5253512);
allocate([119,104,105,108,101,32,101,120,101,99,117,116,105,110,103,0] /* while executing\00 */, "i8", ALLOC_NONE, 5253576);
allocate([107,112,97,116,104,115,101,97,58,32,37,115,58,37,117,58,32,70,111,110,116,110,97,109,101,32,97,108,105,97,115,32,109,105,115,115,105,110,103,32,102,111,114,32,102,105,108,101,110,97,109,101,32,96,37,115,39,0] /* kpathsea: %s:%u: Fon */, "i8", ALLOC_NONE, 5253592);
allocate([116,101,120,102,111,110,116,115,46,109,97,112,0] /* texfonts.map\00 */, "i8", ALLOC_NONE, 5253652);
allocate([46,112,108,0] /* .pl\00 */, "i8", ALLOC_NONE, 5253668);
allocate([107,112,97,116,104,115,101,97,58,32,37,115,58,32,78,111,32,117,115,97,98,108,101,32,101,110,116,114,105,101,115,32,105,110,32,108,115,45,82,0] /* kpathsea: %s: No usa */, "i8", ALLOC_NONE, 5253672);
allocate([75,80,65,84,72,83,69,65,95,87,65,82,78,73,78,71,0] /* KPATHSEA_WARNING\00 */, "i8", ALLOC_NONE, 5253712);
allocate([119,104,105,108,101,32,101,120,101,99,117,116,105,110,103,45,0] /* while executing-\00 */, "i8", ALLOC_NONE, 5253732);
allocate([107,112,97,116,104,115,101,97,58,32,37,115,58,32,78,111,32,109,97,116,99,104,105,110,103,32,125,32,102,111,114,32,36,123,0] /* kpathsea: %s: No mat */, "i8", ALLOC_NONE, 5253752);
allocate([46,46,47,46,46,47,46,46,47,115,114,99,47,116,101,120,107,47,107,112,97,116,104,115,101,97,47,102,110,46,99,0] /* ../../../src/texk/kp */, "i8", ALLOC_NONE, 5253788);
allocate([46,111,112,108,0] /* .opl\00 */, "i8", ALLOC_NONE, 5253820);
allocate([107,112,97,116,104,115,101,97,58,32,102,111,114,107,40,41,0] /* kpathsea: fork()\00 */, "i8", ALLOC_NONE, 5253828);
allocate([32,102,111,114,32,101,110,116,114,121,32,0] /*  for entry \00 */, "i8", ALLOC_NONE, 5253848);
allocate([79,80,76,70,79,78,84,83,0] /* OPLFONTS\00 */, "i8", ALLOC_NONE, 5253860);
allocate([58,0] /* :\00 */, "i8", ALLOC_NONE, 5253872);
allocate([87,97,114,110,105,110,103,45,45,73,32,100,105,100,110,39,116,32,102,105,110,100,32,97,32,100,97,116,97,98,97,115,101,32,101,110,116,114,121,32,102,111,114,32,34,0] /* Warning--I didn't fi */, "i8", ALLOC_NONE, 5253876);
allocate([107,100,101,98,117,103,58,0] /* kdebug:\00 */, "i8", ALLOC_NONE, 5253924);
allocate([111,112,108,0] /* opl\00 */, "i8", ALLOC_NONE, 5253932);
allocate([34,44,32,119,104,105,99,104,32,100,111,101,115,110,39,116,32,101,120,105,115,116,0] /* \22, which doesn't e */, "i8", ALLOC_NONE, 5253936);
allocate([116,102,109,0] /* tfm\00 */, "i8", ALLOC_NONE, 5253960);
allocate([46,111,102,109,0] /* .ofm\00 */, "i8", ALLOC_NONE, 5253964);
allocate([112,114,111,103,110,97,109,101,0] /* progname\00 */, "i8", ALLOC_NONE, 5253972);
allocate([37,115,58,32,105,108,108,101,103,97,108,32,111,112,116,105,111,110,32,45,45,32,37,99,10,0] /* %s: illegal option - */, "i8", ALLOC_NONE, 5253984);
allocate([65,32,98,97,100,32,99,114,111,115,115,32,114,101,102,101,114,101,110,99,101,45,0] /* A bad cross referenc */, "i8", ALLOC_NONE, 5254012);
allocate([97,108,105,97,115,101,115,0] /* aliases\00 */, "i8", ALLOC_NONE, 5254036);
allocate([70,111,114,32,109,111,114,101,32,105,110,102,111,114,109,97,116,105,111,110,32,97,98,111,117,116,32,116,104,101,115,101,32,109,97,116,116,101,114,115,44,32,115,101,101,32,116,104,101,32,102,105,108,101,0] /* For more information */, "i8", ALLOC_NONE, 5254044);
allocate([119,98,0] /* wb\00 */, "i8", ALLOC_NONE, 5254100);
allocate([79,70,77,70,79,78,84,83,0] /* OFMFONTS\00 */, "i8", ALLOC_NONE, 5254104);
allocate([114,101,102,101,114,115,32,116,111,32,101,110,116,114,121,32,34,0] /* refers to entry \22\ */, "i8", ALLOC_NONE, 5254116);
allocate([109,107,111,102,109,0] /* mkofm\00 */, "i8", ALLOC_NONE, 5254136);
allocate([46,46,47,46,46,47,46,46,47,115,114,99,47,116,101,120,107,47,107,112,97,116,104,115,101,97,47,99,110,102,46,99,0] /* ../../../src/texk/kp */, "i8", ALLOC_NONE, 5254144);
allocate([45,45,101,110,116,114,121,32,34,0] /* --entry \22\00 */, "i8", ALLOC_NONE, 5254180);
allocate([102,97,116,97,108,58,32,109,101,109,111,114,121,32,101,120,104,97,117,115,116,101,100,32,40,114,101,97,108,108,111,99,32,111,102,32,37,108,117,32,98,121,116,101,115,41,46,10,0] /* fatal: memory exhaus */, "i8", ALLOC_NONE, 5254192);
allocate([46,111,99,112,0] /* .ocp\00 */, "i8", ALLOC_NONE, 5254244);
allocate([61,0] /* =\00 */, "i8", ALLOC_NONE, 5254252);
allocate([65,32,99,105,116,101,32,107,101,121,32,100,105,115,97,112,112,101,97,114,101,100,0] /* A cite key disappear */, "i8", ALLOC_NONE, 5254256);
allocate([102,97,116,97,108,58,32,109,101,109,111,114,121,32,101,120,104,97,117,115,116,101,100,32,40,120,109,97,108,108,111,99,32,111,102,32,37,108,117,32,98,121,116,101,115,41,46,10,0] /* fatal: memory exhaus */, "i8", ALLOC_NONE, 5254280);
allocate([79,67,80,73,78,80,85,84,83,0] /* OCPINPUTS\00 */, "i8", ALLOC_NONE, 5254332);
allocate([37,115,58,32,0] /* %s: \00 */, "i8", ALLOC_NONE, 5254344);
allocate([85,110,107,110,111,119,110,32,100,97,116,97,98,97,115,101,45,102,105,108,101,32,99,111,109,109,97,110,100,0] /* Unknown database-fil */, "i8", ALLOC_NONE, 5254352);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 5254384);
allocate([46,46,47,46,46,47,46,46,47,115,114,99,47,116,101,120,107,47,107,112,97,116,104,115,101,97,47,120,102,111,112,101,110,46,99,0] /* ../../../src/texk/kp */, "i8", ALLOC_NONE, 5254388);
allocate([109,107,111,99,112,0] /* mkocp\00 */, "i8", ALLOC_NONE, 5254424);
allocate([46,0] /* .\00 */, "i8", ALLOC_NONE, 5254432);
allocate([37,108,117,32,37,115,10,0] /* %lu %s\0A\00 */, "i8", ALLOC_NONE, 5254436);
allocate([37,117,32,98,117,99,107,101,116,115,44,32,37,117,32,110,111,110,101,109,112,116,121,32,40,37,117,37,37,41,59,32,37,117,32,101,110,116,114,105,101,115,44,32,97,118,101,114,97,103,101,32,99,104,97,105,110,32,37,46,49,102,46,10,0] /* %u buckets, %u nonem */, "i8", ALLOC_NONE, 5254444);
allocate([34,32,105,109,109,101,100,105,97,116,101,108,121,32,102,111,108,108,111,119,115,32,0] /* \22 immediately foll */, "i8", ALLOC_NONE, 5254512);
allocate([107,112,97,116,104,115,101,97,58,32,37,115,58,37,117,58,32,67,97,110,39,116,32,102,105,110,100,32,102,111,110,116,110,97,109,101,32,105,110,99,108,117,100,101,32,102,105,108,101,32,96,37,115,39,0] /* kpathsea: %s:%u: Can */, "i8", ALLOC_NONE, 5254536);
allocate([77,80,83,85,80,80,79,82,84,0] /* MPSUPPORT\00 */, "i8", ALLOC_NONE, 5254592);
allocate([107,112,97,116,104,115,101,97,32,118,101,114,115,105,111,110,32,54,46,49,46,48,0] /* kpathsea version 6.1 */, "i8", ALLOC_NONE, 5254604);
allocate([119,97,114,110,105,110,103,58,32,0] /* warning: \00 */, "i8", ALLOC_NONE, 5254628);
allocate([46,10,0] /* .\0A\00 */, "i8", ALLOC_NONE, 5254640);
allocate([89,111,117,39,114,101,32,109,105,115,115,105,110,103,32,0] /* You're missing \00 */, "i8", ALLOC_NONE, 5254644);
allocate([119,97,114,110,105,110,103,58,32,0] /* warning: \00 */, "i8", ALLOC_NONE, 5254660);
allocate([77,101,116,97,80,111,115,116,32,115,117,112,112,111,114,116,0] /* MetaPost support\00 */, "i8", ALLOC_NONE, 5254672);
allocate([107,112,97,116,104,115,101,97,58,32,111,112,101,110,40,34,47,100,101,118,47,110,117,108,108,34,44,32,79,95,87,82,79,78,76,89,41,0] /* kpathsea: open(\22/d */, "i8", ALLOC_NONE, 5254692);
allocate([34,32,105,115,32,0] /* \22 is \00 */, "i8", ALLOC_NONE, 5254732);
allocate([46,46,47,46,46,47,46,46,47,115,114,99,47,116,101,120,107,47,107,112,97,116,104,115,101,97,47,118,97,114,105,97,98,108,101,46,99,0] /* ../../../src/texk/kp */, "i8", ALLOC_NONE, 5254740);
allocate([77,80,80,79,79,76,0] /* MPPOOL\00 */, "i8", ALLOC_NONE, 5254780);
allocate([87,97,114,110,105,110,103,45,45,115,116,114,105,110,103,32,110,97,109,101,32,34,0] /* Warning--string name */, "i8", ALLOC_NONE, 5254788);
allocate([109,112,112,111,111,108,0] /* mppool\00 */, "i8", ALLOC_NONE, 5254812);
allocate([32,99,104,97,114,97,99,116,101,114,115,0] /*  characters\00 */, "i8", ALLOC_NONE, 5254820);
allocate([116,101,120,0] /* tex\00 */, "i8", ALLOC_NONE, 5254832);
allocate([46,109,112,0] /* .mp\00 */, "i8", ALLOC_NONE, 5254836);
allocate([101,120,101,0] /* exe\00 */, "i8", ALLOC_NONE, 5254840);
allocate(1, "i8", ALLOC_NONE, 5254844);
allocate([89,111,117,114,32,102,105,101,108,100,32,105,115,32,109,111,114,101,32,116,104,97,110,32,0] /* Your field is more t */, "i8", ALLOC_NONE, 5254848);
allocate([116,104,101,32,76,101,115,115,101,114,32,71,78,85,32,71,101,110,101,114,97,108,32,80,117,98,108,105,99,32,76,105,99,101,110,115,101,46,0] /* the Lesser GNU Gener */, "i8", ALLOC_NONE, 5254876);
allocate([46,102,108,115,0] /* .fls\00 */, "i8", ALLOC_NONE, 5254916);
allocate([77,80,73,78,80,85,84,83,0] /* MPINPUTS\00 */, "i8", ALLOC_NONE, 5254924);
allocate([107,112,97,116,104,115,101,97,58,32,73,110,118,97,108,105,100,32,102,111,110,116,110,97,109,101,32,96,37,115,39,44,32,115,116,97,114,116,115,32,119,105,116,104,32,39,37,99,39,10,0] /* kpathsea: Invalid fo */, "i8", ALLOC_NONE, 5254936);
allocate([85,110,98,97,108,97,110,99,101,100,32,98,114,97,99,101,115,0] /* Unbalanced braces\00 */, "i8", ALLOC_NONE, 5254988);
allocate([109,112,0] /* mp\00 */, "i8", ALLOC_NONE, 5255008);
allocate([73,32,119,97,115,32,101,120,112,101,99,116,105,110,103,32,97,110,32,34,0] /* I was expecting an \ */, "i8", ALLOC_NONE, 5255012);
allocate([46,112,111,111,108,0] /* .pool\00 */, "i8", ALLOC_NONE, 5255036);
allocate([39,32,111,114,32,97,32,96,0] /* ' or a `\00 */, "i8", ALLOC_NONE, 5255044);
allocate([77,70,80,79,79,76,0] /* MFPOOL\00 */, "i8", ALLOC_NONE, 5255056);
allocate([73,32,119,97,115,32,101,120,112,101,99,116,105,110,103,32,97,32,96,0] /* I was expecting a `\ */, "i8", ALLOC_NONE, 5255064);
allocate([83,111,114,114,121,45,45,45,121,111,117,39,118,101,32,101,120,99,101,101,100,101,100,32,66,105,98,84,101,88,39,115,32,0] /* Sorry---you've excee */, "i8", ALLOC_NONE, 5255084);
allocate([73,83,95,68,73,82,95,83,69,80,95,67,72,32,40,101,108,116,91,101,108,116,95,108,101,110,103,116,104,32,45,32,49,93,41,32,124,124,32,73,83,95,68,69,86,73,67,69,95,83,69,80,32,40,101,108,116,91,101,108,116,95,108,101,110,103,116,104,32,45,32,49,93,41,0] /* IS_DIR_SEP_CH (elt[e */, "i8", ALLOC_NONE, 5255120);
allocate([109,102,112,111,111,108,0] /* mfpool\00 */, "i8", ALLOC_NONE, 5255196);
allocate([97,98,0] /* ab\00 */, "i8", ALLOC_NONE, 5255204);
allocate([32,37,115,61,62,37,115,0] /*  %s=_%s\00 */, "i8", ALLOC_NONE, 5255208);
allocate([37,115,37,99,37,115,37,99,37,99,0] /* %s%c%s%c%c\00 */, "i8", ALLOC_NONE, 5255216);
allocate([46,10,0] /* .\0A\00 */, "i8", ALLOC_NONE, 5255228);
allocate([46,109,102,116,0] /* .mft\00 */, "i8", ALLOC_NONE, 5255232);
allocate([97,108,105,97,115,32,104,97,115,104,32,116,97,98,108,101,58,0] /* alias hash table:\00 */, "i8", ALLOC_NONE, 5255240);
allocate([107,112,97,116,104,115,101,97,58,32,37,115,58,32,76,97,115,116,32,108,105,110,101,32,111,102,32,102,105,108,101,32,101,110,100,115,32,119,105,116,104,32,92,0] /* kpathsea: %s: Last l */, "i8", ALLOC_NONE, 5255260);
allocate([73,108,108,101,103,97,108,32,101,110,100,32,111,102,32,100,97,116,97,98,97,115,101,32,102,105,108,101,0] /* Illegal end of datab */, "i8", ALLOC_NONE, 5255304);
allocate([40,110,105,108,41,0] /* (nil)\00 */, "i8", ALLOC_NONE, 5255336);
allocate([77,70,84,73,78,80,85,84,83,0] /* MFTINPUTS\00 */, "i8", ALLOC_NONE, 5255344);
allocate([107,112,97,116,104,115,101,97,58,32,112,105,112,101,40,41,0] /* kpathsea: pipe()\00 */, "i8", ALLOC_NONE, 5255356);
allocate([102,105,101,108,100,95,105,110,102,111,0] /* field_info\00 */, "i8", ALLOC_NONE, 5255376);
allocate([109,102,116,0] /* mft\00 */, "i8", ALLOC_NONE, 5255388);
allocate([101,110,116,114,121,0] /* entry\00 */, "i8", ALLOC_NONE, 5255392);
allocate([46,109,102,0] /* .mf\00 */, "i8", ALLOC_NONE, 5255400);
allocate([34,32,102,117,110,99,116,105,111,110,32,110,97,109,101,0] /* \22 function name\00 */, "i8", ALLOC_NONE, 5255404);
allocate([109,102,0] /* mf\00 */, "i8", ALLOC_NONE, 5255420);
allocate([77,70,73,78,80,85,84,83,0] /* MFINPUTS\00 */, "i8", ALLOC_NONE, 5255424);
allocate([83,69,76,70,65,85,84,79,80,65,82,69,78,84,0] /* SELFAUTOPARENT\00 */, "i8", ALLOC_NONE, 5255436);
allocate([37,115,58,32,117,110,114,101,99,111,103,110,105,122,101,100,32,111,112,116,105,111,110,32,96,37,99,37,115,39,10,0] /* %s: unrecognized opt */, "i8", ALLOC_NONE, 5255452);
allocate([32,105,115,32,97,108,114,101,97,100,121,32,97,32,116,121,112,101,32,34,0] /*  is already a type \ */, "i8", ALLOC_NONE, 5255484);
allocate([98,111,116,104,32,116,104,101,32,37,115,32,99,111,112,121,114,105,103,104,116,32,97,110,100,10,0] /* both the %s copyrigh */, "i8", ALLOC_NONE, 5255508);
allocate([37,108,100,0] /* %ld\00 */, "i8", ALLOC_NONE, 5255536);
allocate([109,107,116,101,120,109,102,0] /* mktexmf\00 */, "i8", ALLOC_NONE, 5255540);
allocate([34,32,105,115,32,109,105,115,115,105,110,103,32,105,110,32,99,111,109,109,97,110,100,58,32,0] /* \22 is missing in co */, "i8", ALLOC_NONE, 5255548);
allocate([46,109,101,109,0] /* .mem\00 */, "i8", ALLOC_NONE, 5255576);
allocate([34,32,105,109,109,101,100,105,97,116,101,108,121,32,102,111,108,108,111,119,115,32,105,100,101,110,116,105,102,105,101,114,44,32,99,111,109,109,97,110,100,58,32,0] /* \22 immediately foll */, "i8", ALLOC_NONE, 5255584);
allocate([77,80,77,69,77,83,0] /* MPMEMS\00 */, "i8", ALLOC_NONE, 5255628);
allocate([34,32,98,101,103,105,110,115,32,105,100,101,110,116,105,102,105,101,114,44,32,99,111,109,109,97,110,100,58,32,0] /* \22 begins identifie */, "i8", ALLOC_NONE, 5255636);
allocate([109,101,109,0] /* mem\00 */, "i8", ALLOC_NONE, 5255668);
allocate([37,99,37,99,37,115,0] /* %c%c%s\00 */, "i8", ALLOC_NONE, 5255672);
allocate([45,118,101,114,115,105,111,110,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,111,117,116,112,117,116,32,118,101,114,115,105,111,110,32,105,110,102,111,114,109,97,116,105,111,110,32,97,110,100,32,101,120,105,116,0] /* -version             */, "i8", ALLOC_NONE, 5255680);
allocate([46,46,47,46,46,47,46,46,47,115,114,99,47,116,101,120,107,47,107,112,97,116,104,115,101,97,47,101,108,116,45,100,105,114,115,46,99,0] /* ../../../src/texk/kp */, "i8", ALLOC_NONE, 5255740);
allocate([72,79,77,69,0] /* HOME\00 */, "i8", ALLOC_NONE, 5255780);
allocate([46,109,97,112,0] /* .map\00 */, "i8", ALLOC_NONE, 5255788);
allocate([84,69,88,77,70,76,79,71,0] /* TEXMFLOG\00 */, "i8", ALLOC_NONE, 5255796);
allocate([58,37,45,53,100,0] /* :%-5d\00 */, "i8", ALLOC_NONE, 5255808);
allocate([73,100,101,110,116,105,102,105,101,114,32,115,99,97,110,110,105,110,103,32,101,114,114,111,114,0] /* Identifier scanning  */, "i8", ALLOC_NONE, 5255816);
allocate([107,112,97,116,104,115,101,97,58,32,37,115,58,37,117,58,32,70,105,108,101,110,97,109,101,32,97,114,103,117,109,101,110,116,32,102,111,114,32,105,110,99,108,117,100,101,32,100,105,114,101,99,116,105,118,101,32,109,105,115,115,105,110,103,0] /* kpathsea: %s:%u: Fil */, "i8", ALLOC_NONE, 5255844);
allocate([46,10,0] /* .\0A\00 */, "i8", ALLOC_NONE, 5255912);
allocate([84,69,88,70,79,78,84,77,65,80,83,0] /* TEXFONTMAPS\00 */, "i8", ALLOC_NONE, 5255916);
allocate([37,115,58,32,37,117,32,97,108,105,97,115,101,115,46,10,0] /* %s: %u aliases.\0A\0 */, "i8", ALLOC_NONE, 5255928);
allocate([119,97,114,110,105,110,103,58,32,0] /* warning: \00 */, "i8", ALLOC_NONE, 5255948);
allocate([115,116,114,105,110,103,45,103,108,111,98,97,108,45,118,97,114,105,97,98,108,101,0] /* string-global-variab */, "i8", ALLOC_NONE, 5255960);
allocate([118,97,114,105,97,98,108,101,58,32,37,115,32,61,32,37,115,10,0] /* variable: %s = %s\0A */, "i8", ALLOC_NONE, 5255984);
allocate([109,97,112,0] /* map\00 */, "i8", ALLOC_NONE, 5256004);
allocate([107,112,97,116,104,115,101,97,58,32,111,112,101,110,40,34,47,100,101,118,47,110,117,108,108,34,44,32,79,95,82,68,79,78,76,89,41,0] /* kpathsea: open(\22/d */, "i8", ALLOC_NONE, 5256008);
allocate([105,110,116,101,103,101,114,45,103,108,111,98,97,108,45,118,97,114,105,97,98,108,101,0] /* integer-global-varia */, "i8", ALLOC_NONE, 5256048);
allocate([46,102,109,116,0] /* .fmt\00 */, "i8", ALLOC_NONE, 5256072);
allocate([115,116,114,105,110,103,45,101,110,116,114,121,45,118,97,114,105,97,98,108,101,0] /* string-entry-variabl */, "i8", ALLOC_NONE, 5256080);
allocate([84,69,88,70,79,82,77,65,84,83,0] /* TEXFORMATS\00 */, "i8", ALLOC_NONE, 5256104);
allocate([105,110,116,101,103,101,114,45,101,110,116,114,121,45,118,97,114,105,97,98,108,101,0] /* integer-entry-variab */, "i8", ALLOC_NONE, 5256116);
allocate([112,107,0] /* pk\00 */, "i8", ALLOC_NONE, 5256140);
allocate([108,115,45,114,0] /* ls-r\00 */, "i8", ALLOC_NONE, 5256144);
allocate([83,69,76,70,65,85,84,79,68,73,82,0] /* SELFAUTODIR\00 */, "i8", ALLOC_NONE, 5256152);
allocate([37,115,58,32,117,110,114,101,99,111,103,110,105,122,101,100,32,111,112,116,105,111,110,32,96,45,45,37,115,39,10,0] /* %s: unrecognized opt */, "i8", ALLOC_NONE, 5256164);
allocate([102,105,101,108,100,0] /* field\00 */, "i8", ALLOC_NONE, 5256196);
allocate([99,111,118,101,114,101,100,32,98,121,32,116,104,101,32,116,101,114,109,115,32,111,102,32,0] /* covered by the terms */, "i8", ALLOC_NONE, 5256204);
allocate([37,115,32,37,115,10,0] /* %s %s\0A\00 */, "i8", ALLOC_NONE, 5256232);
allocate([84,69,88,77,70,68,66,83,0] /* TEXMFDBS\00 */, "i8", ALLOC_NONE, 5256240);
allocate([115,116,114,105,110,103,45,108,105,116,101,114,97,108,0] /* string-literal\00 */, "i8", ALLOC_NONE, 5256252);
allocate([108,115,45,82,0] /* ls-R\00 */, "i8", ALLOC_NONE, 5256268);
allocate([105,110,116,101,103,101,114,45,108,105,116,101,114,97,108,0] /* integer-literal\00 */, "i8", ALLOC_NONE, 5256276);
allocate([46,99,110,102,0] /* .cnf\00 */, "i8", ALLOC_NONE, 5256292);
allocate([119,105,122,97,114,100,45,100,101,102,105,110,101,100,0] /* wizard-defined\00 */, "i8", ALLOC_NONE, 5256300);
allocate([84,69,88,77,70,67,78,70,0] /* TEXMFCNF\00 */, "i8", ALLOC_NONE, 5256316);
allocate([98,117,105,108,116,45,105,110,0] /* built-in\00 */, "i8", ALLOC_NONE, 5256328);
allocate([45,104,101,108,112,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,100,105,115,112,108,97,121,32,116,104,105,115,32,104,101,108,112,32,97,110,100,32,101,120,105,116,0] /* -help                */, "i8", ALLOC_NONE, 5256340);
allocate([47,0] /* /\00 */, "i8", ALLOC_NONE, 5256392);
allocate([46,0] /* .\00 */, "i8", ALLOC_NONE, 5256396);
allocate([123,36,83,69,76,70,65,85,84,79,76,79,67,44,36,83,69,76,70,65,85,84,79,76,79,67,47,115,104,97,114,101,47,116,101,120,109,102,45,108,111,99,97,108,47,119,101,98,50,99,44,36,83,69,76,70,65,85,84,79,76,79,67,47,115,104,97,114,101,47,116,101,120,109,102,47,119,101,98,50,99,44,36,83,69,76,70,65,85,84,79,76,79,67,47,116,101,120,109,102,45,108,111,99,97,108,47,119,101,98,50,99,44,36,83,69,76,70,65,85,84,79,76,79,67,47,116,101,120,109,102,47,119,101,98,50,99,44,36,83,69,76,70,65,85,84,79,68,73,82,44,36,83,69,76,70,65,85,84,79,68,73,82,47,115,104,97,114,101,47,116,101,120,109,102,45,108,111,99,97,108,47,119,101,98,50,99,44,36,83,69,76,70,65,85,84,79,68,73,82,47,115,104,97,114,101,47,116,101,120,109,102,47,119,101,98,50,99,44,36,83,69,76,70,65,85,84,79,68,73,82,47,116,101,120,109,102,45,108,111,99,97,108,47,119,101,98,50,99,44,36,83,69,76,70,65,85,84,79,68,73,82,47,116,101,120,109,102,47,119,101,98,50,99,44,36,83,69,76,70,65,85,84,79,80,65,82,69,78,84,47,46,46,47,116,101,120,109,102,45,108,111,99,97,108,47,119,101,98,50,99,44,36,83,69,76,70,65,85,84,79,80,65,82,69,78,84,44,36,83,69,76,70,65,85,84,79,80,65,82,69,78,84,47,115,104,97,114,101,47,116,101,120,109,102,45,108,111,99,97,108,47,119,101,98,50,99,44,36,83,69,76,70,65,85,84,79,80,65,82,69,78,84,47,115,104,97,114,101,47,116,101,120,109,102,47,119,101,98,50,99,44,36,83,69,76,70,65,85,84,79,80,65,82,69,78,84,47,116,101,120,109,102,45,108,111,99,97,108,47,119,101,98,50,99,44,36,83,69,76,70,65,85,84,79,80,65,82,69,78,84,47,116,101,120,109,102,47,119,101,98,50,99,125,0] /* {$SELFAUTOLOC,$SELFA */, "i8", ALLOC_NONE, 5256400);
allocate([93,41,32,61,62,0] /* ]) =_\00 */, "i8", ALLOC_NONE, 5256868);
allocate([37,52,100,32,0] /* %4d \00 */, "i8", ALLOC_NONE, 5256876);
allocate([85,110,107,110,111,119,110,32,102,117,110,99,116,105,111,110,32,99,108,97,115,115,0] /* Unknown function cla */, "i8", ALLOC_NONE, 5256884);
allocate([119,97,114,110,105,110,103,58,32,0] /* warning: \00 */, "i8", ALLOC_NONE, 5256908);
allocate([107,112,97,116,104,115,101,97,58,32,37,115,58,32,85,110,109,97,116,99,104,101,100,32,123,0] /* kpathsea: %s: Unmatc */, "i8", ALLOC_NONE, 5256920);
allocate([99,110,102,0] /* cnf\00 */, "i8", ALLOC_NONE, 5256948);
allocate([114,0] /* r\00 */, "i8", ALLOC_NONE, 5256952);
allocate([114,0] /* r\00 */, "i8", ALLOC_NONE, 5256956);
allocate([73,108,108,101,103,97,108,32,101,110,100,32,111,102,32,115,116,121,108,101,32,102,105,108,101,32,105,110,32,99,111,109,109,97,110,100,58,32,0] /* Illegal end of style */, "i8", ALLOC_NONE, 5256960);
allocate([107,100,101,98,117,103,58,0] /* kdebug:\00 */, "i8", ALLOC_NONE, 5257000);
allocate([46,98,115,116,0] /* .bst\00 */, "i8", ALLOC_NONE, 5257008);
allocate([47,100,101,118,47,110,117,108,108,0] /* /dev/null\00 */, "i8", ALLOC_NONE, 5257016);
allocate([45,45,108,105,110,101,32,0] /* --line \00 */, "i8", ALLOC_NONE, 5257028);
allocate([66,83,84,73,78,80,85,84,83,0] /* BSTINPUTS\00 */, "i8", ALLOC_NONE, 5257036);
allocate([45,45,45,119,104,105,108,101,32,114,101,97,100,105,110,103,32,102,105,108,101,32,0] /* ---while reading fil */, "i8", ALLOC_NONE, 5257048);
allocate([98,115,116,0] /* bst\00 */, "i8", ALLOC_NONE, 5257072);
allocate([73,32,102,111,117,110,100,32,110,111,32,0] /* I found no \00 */, "i8", ALLOC_NONE, 5257076);
allocate([46,10,0] /* .\0A\00 */, "i8", ALLOC_NONE, 5257088);
allocate([46,98,105,98,0] /* .bib\00 */, "i8", ALLOC_NONE, 5257092);
allocate([83,69,76,70,65,85,84,79,76,79,67,0] /* SELFAUTOLOC\00 */, "i8", ALLOC_NONE, 5257100);
allocate([37,115,58,32,111,112,116,105,111,110,32,96,37,115,39,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,10,0] /* %s: option `%s' requ */, "i8", ALLOC_NONE, 5257112);
allocate([99,105,116,101,95,105,110,102,111,0] /* cite_info\00 */, "i8", ALLOC_NONE, 5257152);
allocate([84,104,101,114,101,32,105,115,32,78,79,32,119,97,114,114,97,110,116,121,46,32,32,82,101,100,105,115,116,114,105,98,117,116,105,111,110,32,111,102,32,116,104,105,115,32,115,111,102,116,119,97,114,101,32,105,115,0] /* There is NO warranty */, "i8", ALLOC_NONE, 5257164);
allocate([102,99,108,111,115,101,0] /* fclose\00 */, "i8", ALLOC_NONE, 5257224);
allocate([84,69,88,66,73,66,0] /* TEXBIB\00 */, "i8", ALLOC_NONE, 5257232);
allocate([80,65,84,72,0] /* PATH\00 */, "i8", ALLOC_NONE, 5257240);
allocate([101,110,116,114,121,95,101,120,105,115,116,115,0] /* entry_exists\00 */, "i8", ALLOC_NONE, 5257248);
allocate([66,73,66,73,78,80,85,84,83,0] /* BIBINPUTS\00 */, "i8", ALLOC_NONE, 5257264);
allocate([116,121,112,101,95,108,105,115,116,0] /* type_list\00 */, "i8", ALLOC_NONE, 5257276);
allocate([98,105,98,0] /* bib\00 */, "i8", ALLOC_NONE, 5257288);
allocate([45,45,0] /* --\00 */, "i8", ALLOC_NONE, 5257292);
allocate([99,105,116,101,95,108,105,115,116,0] /* cite_list\00 */, "i8", ALLOC_NONE, 5257296);
allocate([46,98,97,115,101,0] /* .base\00 */, "i8", ALLOC_NONE, 5257308);
allocate([32,40,87,101,98,50,67,32,50,48,49,50,41,0] /*  (Web2C 2012)\00 */, "i8", ALLOC_NONE, 5257316);
allocate([67,105,116,101,32,104,97,115,104,32,101,114,114,111,114,0] /* Cite hash error\00 */, "i8", ALLOC_NONE, 5257332);
allocate([45,116,101,114,115,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,100,111,32,110,111,116,32,112,114,105,110,116,32,112,114,111,103,114,101,115,115,32,114,101,112,111,114,116,115,0] /* -terse               */, "i8", ALLOC_NONE, 5257348);
allocate([46,10,0] /* .\0A\00 */, "i8", ALLOC_NONE, 5257404);
allocate([32,37,115,0] /*  %s\00 */, "i8", ALLOC_NONE, 5257408);
allocate(1, "i8", ALLOC_NONE, 5257412);
allocate([84,69,88,77,70,73,78,73,0] /* TEXMFINI\00 */, "i8", ALLOC_NONE, 5257416);
allocate([84,114,121,32,96,37,115,32,45,45,104,101,108,112,39,32,102,111,114,32,109,111,114,101,32,105,110,102,111,114,109,97,116,105,111,110,46,10,0] /* Try `%s --help' for  */, "i8", ALLOC_NONE, 5257428);
allocate([115,101,97,114,99,104,40,91,37,115,0] /* search([%s\00 */, "i8", ALLOC_NONE, 5257468);
allocate([37,108,100,0] /* %ld\00 */, "i8", ALLOC_NONE, 5257480);
allocate([87,104,105,116,101,32,115,112,97,99,101,32,105,110,32,97,114,103,117,109,101,110,116,0] /* White space in argum */, "i8", ALLOC_NONE, 5257484);
allocate([37,115,58,32,66,97,100,32,118,97,108,117,101,32,40,37,108,100,41,32,105,110,32,101,110,118,105,114,111,110,109,101,110,116,32,111,114,32,116,101,120,109,102,46,99,110,102,32,102,111,114,32,37,115,44,32,107,101,101,112,105,110,103,32,37,108,100,46,10,0] /* %s: Bad value (%ld)  */, "i8", ALLOC_NONE, 5257508);
allocate([105,110,99,108,117,100,101,0] /* include\00 */, "i8", ALLOC_NONE, 5257580);
allocate([119,97,114,110,105,110,103,58,32,0] /* warning: \00 */, "i8", ALLOC_NONE, 5257588);
allocate([77,70,66,65,83,69,83,0] /* MFBASES\00 */, "i8", ALLOC_NONE, 5257600);
allocate([100,98,58,109,97,116,99,104,40,37,115,44,37,115,41,32,61,32,37,100,10,0] /* db:match(%s,%s) = %d */, "i8", ALLOC_NONE, 5257608);
allocate([116,101,120,109,102,46,99,110,102,0] /* texmf.cnf\00 */, "i8", ALLOC_NONE, 5257632);
allocate([46,10,0] /* .\0A\00 */, "i8", ALLOC_NONE, 5257644);
allocate([102,0] /* f\00 */, "i8", ALLOC_NONE, 5257648);
allocate([83,116,117,102,102,32,97,102,116,101,114,32,34,0] /* Stuff after \22\00 */, "i8", ALLOC_NONE, 5257652);
allocate([95,0] /* _\00 */, "i8", ALLOC_NONE, 5257668);
allocate([46,46,47,46,46,47,46,46,47,46,46,47,115,114,99,47,116,101,120,107,47,119,101,98,50,99,47,108,105,98,47,112,114,105,110,116,118,101,114,115,105,111,110,46,99,0] /* ../../../../src/texk */, "i8", ALLOC_NONE, 5257672);
allocate([98,97,115,101,0] /* base\00 */, "i8", ALLOC_NONE, 5257720);
allocate([32,37,115,0] /*  %s\00 */, "i8", ALLOC_NONE, 5257728);
allocate([78,111,32,34,0] /* No \22\00 */, "i8", ALLOC_NONE, 5257732);
allocate([109,107,116,101,120,102,109,116,0] /* mktexfmt\00 */, "i8", ALLOC_NONE, 5257740);
allocate([47,0] /* /\00 */, "i8", ALLOC_NONE, 5257752);
allocate([37,115,37,99,37,99,0] /* %s%c%c\00 */, "i8", ALLOC_NONE, 5257756);
allocate([37,115,58,32,79,111,112,115,59,32,110,111,116,32,101,110,111,117,103,104,32,97,114,103,117,109,101,110,116,115,46,10,0] /* %s: Oops; not enough */, "i8", ALLOC_NONE, 5257764);
allocate([72,105,115,116,111,114,121,32,105,115,32,98,117,110,107,0] /* History is bunk\00 */, "i8", ALLOC_NONE, 5257800);
allocate([40,84,104,97,116,32,119,97,115,32,97,32,102,97,116,97,108,32,101,114,114,111,114,41,0] /* (That was a fatal er */, "i8", ALLOC_NONE, 5257816);
allocate([46,97,102,109,0] /* .afm\00 */, "i8", ALLOC_NONE, 5257844);
allocate([32,101,114,114,111,114,32,109,101,115,115,97,103,101,115,41,0] /*  error messages)\00 */, "i8", ALLOC_NONE, 5257852);
allocate([40,84,104,101,114,101,32,119,97,115,32,49,32,101,114,114,111,114,32,109,101,115,115,97,103,101,41,0] /* (There was 1 error m */, "i8", ALLOC_NONE, 5257872);
allocate([32,119,97,114,110,105,110,103,115,41,0] /*  warnings)\00 */, "i8", ALLOC_NONE, 5257900);
allocate([40,84,104,101,114,101,32,119,101,114,101,32,0] /* (There were \00 */, "i8", ALLOC_NONE, 5257912);
allocate([40,84,104,101,114,101,32,119,97,115,32,49,32,119,97,114,110,105,110,103,41,0] /* (There was 1 warning */, "i8", ALLOC_NONE, 5257928);
allocate([32,99,111,109,109,97,110,100,0] /*  command\00 */, "i8", ALLOC_NONE, 5257952);
allocate([65,98,111,114,116,101,100,32,97,116,32,108,105,110,101,32,0] /* Aborted at line \00 */, "i8", ALLOC_NONE, 5257964);
allocate([84,104,101,32,116,111,112,45,108,101,118,101,108,32,97,117,120,105,108,105,97,114,121,32,102,105,108,101,58,32,0] /* The top-level auxili */, "i8", ALLOC_NONE, 5257984);
allocate([44,32,104,97,115,104,95,112,114,105,109,101,61,0] /* , hash_prime=\00 */, "i8", ALLOC_NONE, 5258016);
allocate([44,32,104,97,115,104,95,115,105,122,101,61,0] /* , hash_size=\00 */, "i8", ALLOC_NONE, 5258032);
allocate([67,97,112,97,99,105,116,121,58,32,109,97,120,95,115,116,114,105,110,103,115,61,0] /* Capacity: max_string */, "i8", ALLOC_NONE, 5258048);
allocate([65,70,77,70,79,78,84,83,0] /* AFMFONTS\00 */, "i8", ALLOC_NONE, 5258072);
allocate([37,115,37,108,100,37,115,37,108,100,37,115,37,108,100,10,0] /* %s%ld%s%ld%s%ld\0A\0 */, "i8", ALLOC_NONE, 5258084);
allocate([75,80,65,84,72,83,69,65,95,68,69,66,85,71,0] /* KPATHSEA_DEBUG\00 */, "i8", ALLOC_NONE, 5258104);
allocate([98,105,98,116,101,120,58,32,78,101,101,100,32,101,120,97,99,116,108,121,32,111,110,101,32,102,105,108,101,32,97,114,103,117,109,101,110,116,46,0] /* bibtex: Need exactly */, "i8", ALLOC_NONE, 5258120);
allocate([79,114,101,110,32,80,97,116,97,115,104,110,105,107,0] /* Oren Patashnik\00 */, "i8", ALLOC_NONE, 5258160);
allocate([37,115,58,32,111,112,116,105,111,110,32,96,37,99,37,115,39,32,100,111,101,115,110,39,116,32,97,108,108,111,119,32,97,110,32,97,114,103,117,109,101,110,116,10,0] /* %s: option `%c%s' do */, "i8", ALLOC_NONE, 5258176);
allocate([84,104,105,115,32,105,115,32,66,105,98,84,101,88,44,32,86,101,114,115,105,111,110,32,48,46,57,57,100,0] /* This is BibTeX, Vers */, "i8", ALLOC_NONE, 5258224);
allocate(1, "i8", ALLOC_NONE, 5258256);
allocate([73,108,108,101,103,97,108,32,97,117,120,105,108,105,97,114,121,45,102,105,108,101,32,99,111,109,109,97,110,100,0] /* Illegal auxiliary-fi */, "i8", ALLOC_NONE, 5258260);
allocate([10,69,109,97,105,108,32,98,117,103,32,114,101,112,111,114,116,115,32,116,111,32,37,115,46,10,0] /* \0AEmail bug reports */, "i8", ALLOC_NONE, 5258292);
allocate([118,101,114,115,105,111,110,0] /* version\00 */, "i8", ALLOC_NONE, 5258320);
allocate([104,101,108,112,0] /* help\00 */, "i8", ALLOC_NONE, 5258328);
allocate([67,111,112,121,114,105,103,104,116,32,50,48,49,50,32,37,115,46,10,0] /* Copyright 2012 %s.\0 */, "i8", ALLOC_NONE, 5258336);
allocate([109,105,110,45,99,114,111,115,115,114,101,102,115,0] /* min-crossrefs\00 */, "i8", ALLOC_NONE, 5258356);
allocate([84,69,88,77,70,79,85,84,80,85,84,0] /* TEXMFOUTPUT\00 */, "i8", ALLOC_NONE, 5258372);
allocate([116,101,114,115,101,0] /* terse\00 */, "i8", ALLOC_NONE, 5258384);
allocate([32,105,115,32,97,32,98,97,100,32,98,97,100,0] /*  is a bad bad\00 */, "i8", ALLOC_NONE, 5258392);
allocate([97,102,109,0] /* afm\00 */, "i8", ALLOC_NONE, 5258408);
allocate([37,108,100,37,115,10,0] /* %ld%s\0A\00 */, "i8", ALLOC_NONE, 5258412);
allocate([109,97,120,95,115,116,114,105,110,103,115,0] /* max_strings\00 */, "i8", ALLOC_NONE, 5258420);
allocate([103,108,111,98,95,115,116,114,95,115,105,122,101,0] /* glob_str_size\00 */, "i8", ALLOC_NONE, 5258432);
allocate([101,110,116,95,115,116,114,95,115,105,122,101,0] /* ent_str_size\00 */, "i8", ALLOC_NONE, 5258448);
allocate([98,105,98,116,101,120,0] /* bibtex\00 */, "i8", ALLOC_NONE, 5258464);
allocate([115,116,121,108,101,0] /* style\00 */, "i8", ALLOC_NONE, 5258472);
allocate([85,110,107,110,111,119,110,32,115,116,121,108,101,45,102,105,108,101,32,99,111,109,109,97,110,100,0] /* Unknown style-file c */, "i8", ALLOC_NONE, 5258480);
allocate([32,105,115,32,97,110,32,105,108,108,101,103,97,108,32,115,116,121,108,101,45,102,105,108,101,32,99,111,109,109,97,110,100,0] /*  is an illegal style */, "i8", ALLOC_NONE, 5258508);
allocate([34,32,99,97,110,39,116,32,115,116,97,114,116,32,97,32,115,116,121,108,101,45,102,105,108,101,32,99,111,109,109,97,110,100,0] /* \22 can't start a st */, "i8", ALLOC_NONE, 5258544);
allocate([103,108,98,95,115,116,114,95,101,110,100,0] /* glb_str_end\00 */, "i8", ALLOC_NONE, 5258580);
allocate([103,108,111,98,97,108,95,115,116,114,115,0] /* global_strs\00 */, "i8", ALLOC_NONE, 5258592);
allocate([46,116,102,109,0] /* .tfm\00 */, "i8", ALLOC_NONE, 5258604);
allocate([103,108,98,95,115,116,114,95,112,116,114,0] /* glb_str_ptr\00 */, "i8", ALLOC_NONE, 5258612);
allocate([115,116,114,105,110,103,115,0] /* strings\00 */, "i8", ALLOC_NONE, 5258624);
allocate([73,108,108,101,103,97,108,44,32,115,111,114,116,32,99,111,109,109,97,110,100,32,98,101,102,111,114,101,32,114,101,97,100,32,99,111,109,109,97,110,100,0] /* Illegal, sort comman */, "i8", ALLOC_NONE, 5258632);
allocate([114,101,118,101,114,115,101,0] /* reverse\00 */, "i8", ALLOC_NONE, 5258676);
allocate([73,108,108,101,103,97,108,44,32,114,101,118,101,114,115,101,32,99,111,109,109,97,110,100,32,98,101,102,111,114,101,32,114,101,97,100,32,99,111,109,109,97,110,100,0] /* Illegal, reverse com */, "i8", ALLOC_NONE, 5258684);
allocate([100,97,116,97,0] /* data\00 */, "i8", ALLOC_NONE, 5258732);
allocate([34,44,32,119,104,105,99,104,32,97,108,115,111,32,114,101,102,101,114,115,32,116,111,32,115,111,109,101,116,104,105,110,103,0] /* \22, which also refe */, "i8", ALLOC_NONE, 5258740);
allocate([87,97,114,110,105,110,103,45,45,121,111,117,39,118,101,32,110,101,115,116,101,100,32,99,114,111,115,115,32,114,101,102,101,114,101,110,99,101,115,0] /* Warning--you've nest */, "i8", ALLOC_NONE, 5258776);
allocate([68,97,116,97,98,97,115,101,32,102,105,108,101,32,35,0] /* Database file #\00 */, "i8", ALLOC_NONE, 5258816);
allocate([73,108,108,101,103,97,108,44,32,114,101,97,100,32,99,111,109,109,97,110,100,32,98,101,102,111,114,101,32,101,110,116,114,121,32,99,111,109,109,97,110,100,0] /* Illegal, read comman */, "i8", ALLOC_NONE, 5258832);
allocate([73,108,108,101,103,97,108,44,32,97,110,111,116,104,101,114,32,114,101,97,100,32,99,111,109,109,97,110,100,0] /* Illegal, another rea */, "i8", ALLOC_NONE, 5258876);
allocate([84,70,77,70,79,78,84,83,0] /* TFMFONTS\00 */, "i8", ALLOC_NONE, 5258908);
allocate([97,32,102,105,101,108,100,32,110,97,109,101,0] /* a field name\00 */, "i8", ALLOC_NONE, 5258920);
allocate([34,32,105,115,110,39,116,32,115,116,121,108,101,45,102,105,108,101,32,100,101,102,105,110,101,100,0] /* \22 isn't style-file */, "i8", ALLOC_NONE, 5258936);
allocate([87,97,114,110,105,110,103,45,45,101,110,116,114,121,32,116,121,112,101,32,102,111,114,32,34,0] /* Warning--entry type  */, "i8", ALLOC_NONE, 5258964);
allocate([82,101,112,101,97,116,101,100,32,101,110,116,114,121,0] /* Repeated entry\00 */, "i8", ALLOC_NONE, 5258992);
allocate([84,104,101,32,99,105,116,101,32,108,105,115,116,32,105,115,32,109,101,115,115,101,100,32,117,112,0] /* The cite list is mes */, "i8", ALLOC_NONE, 5259008);
allocate([73,108,108,101,103,97,108,44,32,97,110,111,116,104,101,114,32,92,98,105,98,0] /* Illegal, another \5C */, "i8", ALLOC_NONE, 5259036);
allocate([34,32,105,110,32,115,116,114,105,110,103,32,99,111,109,109,97,110,100,0] /* \22 in string comman */, "i8", ALLOC_NONE, 5259060);
allocate([97,32,115,116,114,105,110,103,32,110,97,109,101,0] /* a string name\00 */, "i8", ALLOC_NONE, 5259080);
allocate([77,65,75,69,84,69,88,95,77,65,71,0] /* MAKETEX_MAG\00 */, "i8", ALLOC_NONE, 5259096);
allocate([34,32,105,110,32,112,114,101,97,109,98,108,101,32,99,111,109,109,97,110,100,0] /* \22 in preamble comm */, "i8", ALLOC_NONE, 5259108);
allocate([77,105,115,115,105,110,103,32,34,0] /* Missing \22\00 */, "i8", ALLOC_NONE, 5259132);
allocate([97,110,32,101,110,116,114,121,32,116,121,112,101,0] /* an entry type\00 */, "i8", ALLOC_NONE, 5259144);
allocate([109,107,116,101,120,116,102,109,0] /* mktextfm\00 */, "i8", ALLOC_NONE, 5259160);
allocate([34,32,100,105,115,97,112,112,101,97,114,101,100,0] /* \22 disappeared\00 */, "i8", ALLOC_NONE, 5259172);
allocate([65,110,32,34,0] /* An \22\00 */, "i8", ALLOC_NONE, 5259188);
allocate([39,32,116,111,32,101,110,100,32,109,97,99,114,111,32,100,101,102,105,110,105,116,105,111,110,0] /* ' to end macro defin */, "i8", ALLOC_NONE, 5259196);
allocate([84,104,101,114,101,39,115,32,110,111,32,96,0] /* There's no `\00 */, "i8", ALLOC_NONE, 5259224);
allocate([45,100,101,108,105,109,105,116,101,100,0] /* -delimited\00 */, "i8", ALLOC_NONE, 5259240);
allocate([99,111,109,109,97,110,100,0] /* command\00 */, "i8", ALLOC_NONE, 5259252);
allocate([45,109,105,110,45,99,114,111,115,115,114,101,102,115,61,78,85,77,66,69,82,32,32,105,110,99,108,117,100,101,32,105,116,101,109,32,97,102,116,101,114,32,78,85,77,66,69,82,32,99,114,111,115,115,45,114,101,102,115,59,32,100,101,102,97,117,108,116,32,50,0] /* -min-crossrefs=NUMBE */, "i8", ALLOC_NONE, 5259260);
allocate([99,108,111,115,101,100,105,114,32,102,97,105,108,101,100,0] /* closedir failed\00 */, "i8", ALLOC_NONE, 5259332);
allocate([65,32,109,97,99,114,111,32,100,101,102,105,110,105,116,105,111,110,32,109,117,115,116,32,98,101,32,0] /* A macro definition m */, "i8", ALLOC_NONE, 5259348);
allocate([112,97,116,104,32,101,108,101,109,101,110,116,32,37,115,32,61,62,0] /* path element %s =_\0 */, "i8", ALLOC_NONE, 5259376);
allocate([32,105,115,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,32,97,115,32,97,32,109,97,99,114,111,0] /*  is already defined  */, "i8", ALLOC_NONE, 5259396);
allocate([109,97,103,115,116,101,112,92,40,37,115,37,100,46,37,100,92,41,0] /* magstep\5C(%s%d.%d\5 */, "i8", ALLOC_NONE, 5259428);
allocate([33,33,0] /* !!\00 */, "i8", ALLOC_NONE, 5259448);
allocate([109,97,99,114,111,0] /* macro\00 */, "i8", ALLOC_NONE, 5259452);
allocate([110,111,110,101,0] /* none\00 */, "i8", ALLOC_NONE, 5259460);
allocate([73,108,108,101,103,97,108,44,32,109,97,99,114,111,32,99,111,109,109,97,110,100,32,97,102,116,101,114,32,114,101,97,100,32,99,111,109,109,97,110,100,0] /* Illegal, macro comma */, "i8", ALLOC_NONE, 5259468);
allocate([105,116,101,114,97,116,101,0] /* iterate\00 */, "i8", ALLOC_NONE, 5259512);
allocate([98,105,116,109,97,112,32,102,111,110,116,0] /* bitmap font\00 */, "i8", ALLOC_NONE, 5259520);
allocate([73,108,108,101,103,97,108,44,32,105,116,101,114,97,116,101,32,99,111,109,109,97,110,100,32,98,101,102,111,114,101,32,114,101,97,100,32,99,111,109,109,97,110,100,0] /* Illegal, iterate com */, "i8", ALLOC_NONE, 5259532);
allocate([93,44,32,109,117,115,116,95,101,120,105,115,116,61,37,100,44,32,102,105,110,100,95,97,108,108,61,37,100,44,32,112,97,116,104,61,37,115,41,46,10,0] /* ], must_exist=%d, fi */, "i8", ALLOC_NONE, 5259580);
allocate([105,110,116,101,103,101,114,115,0] /* integers\00 */, "i8", ALLOC_NONE, 5259624);
allocate([101,120,101,99,117,116,101,0] /* execute\00 */, "i8", ALLOC_NONE, 5259636);
allocate([73,108,108,101,103,97,108,44,32,101,120,101,99,117,116,101,32,99,111,109,109,97,110,100,32,98,101,102,111,114,101,32,114,101,97,100,32,99,111,109,109,97,110,100,0] /* Illegal, execute com */, "i8", ALLOC_NONE, 5259644);
allocate([32,104,97,115,32,98,97,100,32,102,117,110,99,116,105,111,110,32,116,121,112,101,32,0] /*  has bad function ty */, "i8", ALLOC_NONE, 5259692);
allocate([32,111,102,32,102,105,108,101,32,0] /*  of file \00 */, "i8", ALLOC_NONE, 5259716);
allocate([32,40,110,105,108,41,10,0] /*  (nil)\0A\00 */, "i8", ALLOC_NONE, 5259728);
allocate([87,97,114,110,105,110,103,45,45,73,32,100,105,100,110,39,116,32,102,105,110,100,32,97,110,121,32,102,105,101,108,100,115,0] /* Warning--I didn't fi */, "i8", ALLOC_NONE, 5259736);
allocate([64,99,0] /* @c\00 */, "i8", ALLOC_NONE, 5259772);
allocate([73,108,108,101,103,97,108,44,32,97,110,111,116,104,101,114,32,101,110,116,114,121,32,99,111,109,109,97,110,100,0] /* Illegal, another ent */, "i8", ALLOC_NONE, 5259776);
allocate([70,78,95,76,69,78,71,84,72,32,40,42,102,41,32,62,32,108,111,99,0] /* FN_LENGTH (_f) _ loc */, "i8", ALLOC_NONE, 5259808);
allocate([45,0] /* -\00 */, "i8", ALLOC_NONE, 5259832);
allocate([115,116,121,108,101,32,102,105,108,101,0] /* style file\00 */, "i8", ALLOC_NONE, 5259836);
allocate([47,0] /* /\00 */, "i8", ALLOC_NONE, 5259848);
allocate([102,99,108,111,115,101,40,48,120,37,108,120,41,32,61,62,32,37,100,10,0] /* fclose(0x%lx) =_ %d\ */, "i8", ALLOC_NONE, 5259852);
allocate([92,98,105,98,115,116,121,108,101,32,99,111,109,109,97,110,100,0] /* \5Cbibstyle command\ */, "i8", ALLOC_NONE, 5259876);
allocate([100,97,116,97,98,97,115,101,32,102,105,108,101,115,0] /* database files\00 */, "i8", ALLOC_NONE, 5259896);
allocate([84,69,88,80,75,83,0] /* TEXPKS\00 */, "i8", ALLOC_NONE, 5259912);
allocate([107,100,101,98,117,103,58,0] /* kdebug:\00 */, "i8", ALLOC_NONE, 5259920);
allocate([92,98,105,98,100,97,116,97,32,99,111,109,109,97,110,100,0] /* \5Cbibdata command\0 */, "i8", ALLOC_NONE, 5259928);
allocate([99,105,116,101,32,107,101,121,115,0] /* cite keys\00 */, "i8", ALLOC_NONE, 5259948);
allocate([46,0] /* .\00 */, "i8", ALLOC_NONE, 5259960);
allocate([92,99,105,116,97,116,105,111,110,32,99,111,109,109,97,110,100,115,0] /* \5Ccitation commands */, "i8", ALLOC_NONE, 5259964);
allocate([112,117,116,101,110,118,40,37,115,41,0] /* putenv(%s)\00 */, "i8", ALLOC_NONE, 5259984);
allocate([85,110,107,110,111,119,110,32,97,117,120,105,108,105,97,114,121,45,102,105,108,101,32,99,111,109,109,97,110,100,0] /* Unknown auxiliary-fi */, "i8", ALLOC_NONE, 5259996);
allocate([32,97,117,120,105,108,105,97,114,121,32,102,105,108,101,58,32,0] /*  auxiliary file: \00 */, "i8", ALLOC_NONE, 5260028);
allocate([45,45,45,108,105,110,101,32,0] /* ---line \00 */, "i8", ALLOC_NONE, 5260048);
allocate([37,115,58,32,0] /* %s: \00 */, "i8", ALLOC_NONE, 5260060);
allocate([65,32,108,101,118,101,108,45,0] /* A level-\00 */, "i8", ALLOC_NONE, 5260068);
allocate([73,32,99,111,117,108,100,110,39,116,32,111,112,101,110,32,97,117,120,105,108,105,97,114,121,32,102,105,108,101,32,0] /* I couldn't open auxi */, "i8", ALLOC_NONE, 5260080);
allocate([37,117,43,37,117,47,40,52,48,48,48,43,37,117,41,0] /* %u+%u/(4000+%u)\00 */, "i8", ALLOC_NONE, 5260112);
allocate([65,108,114,101,97,100,121,32,101,110,99,111,117,110,116,101,114,101,100,32,102,105,108,101,32,0] /* Already encountered  */, "i8", ALLOC_NONE, 5260128);
allocate([46,0] /* .\00 */, "i8", ALLOC_NONE, 5260156);
allocate([32,104,97,115,32,97,32,119,114,111,110,103,32,101,120,116,101,110,115,105,111,110,0] /*  has a wrong extensi */, "i8", ALLOC_NONE, 5260160);
allocate([97,117,120,105,108,105,97,114,121,32,102,105,108,101,32,100,101,112,116,104,32,0] /* auxiliary file depth */, "i8", ALLOC_NONE, 5260184);
allocate([80,75,70,79,78,84,83,0] /* PKFONTS\00 */, "i8", ALLOC_NONE, 5260208);
allocate([58,32,0] /* : \00 */, "i8", ALLOC_NONE, 5260216);
allocate([10,107,112,97,116,104,115,101,97,58,32,82,117,110,110,105,110,103,0] /* \0Akpathsea: Running */, "i8", ALLOC_NONE, 5260220);
allocate([32,97,110,100,32,0] /*  and \00 */, "i8", ALLOC_NONE, 5260240);
allocate([67,97,115,101,32,109,105,115,109,97,116,99,104,32,101,114,114,111,114,32,98,101,116,119,101,101,110,32,99,105,116,101,32,107,101,121,115,32,0] /* Case mismatch error  */, "i8", ALLOC_NONE, 5260248);
allocate([77,117,108,116,105,112,108,101,32,105,110,99,108,117,115,105,111,110,115,32,111,102,32,101,110,116,105,114,101,32,100,97,116,97,98,97,115,101,0] /* Multiple inclusions  */, "i8", ALLOC_NONE, 5260288);
allocate([97,112,112,108,105,99,97,116,105,111,110,32,111,118,101,114,114,105,100,101,32,118,97,114,105,97,98,108,101,0] /* application override */, "i8", ALLOC_NONE, 5260328);
allocate([84,104,101,32,115,116,121,108,101,32,102,105,108,101,58,32,0] /* The style file: \00 */, "i8", ALLOC_NONE, 5260360);
allocate([37,115,37,108,100,37,115,0] /* %s%ld%s\00 */, "i8", ALLOC_NONE, 5260380);
allocate([32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,0] /*  environment variabl */, "i8", ALLOC_NONE, 5260388);
allocate([73,32,99,111,117,108,100,110,39,116,32,111,112,101,110,32,115,116,121,108,101,32,102,105,108,101,32,0] /* I couldn't open styl */, "i8", ALLOC_NONE, 5260412);
allocate([112,114,111,103,114,97,109,32,99,111,110,102,105,103,32,102,105,108,101,0] /* program config file\ */, "i8", ALLOC_NONE, 5260440);
allocate([65,108,114,101,97,100,121,32,101,110,99,111,117,110,116,101,114,101,100,32,115,116,121,108,101,32,102,105,108,101,0] /* Already encountered  */, "i8", ALLOC_NONE, 5260460);
allocate([116,101,120,109,102,46,99,110,102,0] /* texmf.cnf\00 */, "i8", ALLOC_NONE, 5260492);
allocate([37,117,43,37,117,47,40,37,117,42,37,117,41,0] /* %u+%u/(%u_%u)\00 */, "i8", ALLOC_NONE, 5260504);
allocate([73,32,99,111,117,108,100,110,39,116,32,111,112,101,110,32,100,97,116,97,98,97,115,101,32,102,105,108,101,32,0] /* I couldn't open data */, "i8", ALLOC_NONE, 5260520);
allocate([99,111,109,112,105,108,101,45,116,105,109,101,32,112,97,116,104,115,46,104,0] /* compile-time paths.h */, "i8", ALLOC_NONE, 5260552);
allocate([84,104,105,115,32,100,97,116,97,98,97,115,101,32,102,105,108,101,32,97,112,112,101,97,114,115,32,109,111,114,101,32,116,104,97,110,32,111,110,99,101,58,32,0] /* This database file a */, "i8", ALLOC_NONE, 5260576);
allocate([95,0] /* _\00 */, "i8", ALLOC_NONE, 5260620);
allocate([115,95,112,114,101,97,109,98,108,101,0] /* s_preamble\00 */, "i8", ALLOC_NONE, 5260624);
allocate([36,75,80,65,84,72,83,69,65,95,68,80,73,0] /* $KPATHSEA_DPI\00 */, "i8", ALLOC_NONE, 5260636);
allocate([32,0] /*  \00 */, "i8", ALLOC_NONE, 5260652);
allocate([98,105,98,95,102,105,108,101,0] /* bib_file\00 */, "i8", ALLOC_NONE, 5260656);
allocate([119,114,105,116,105,110,103,32,116,111,0] /* writing to\00 */, "i8", ALLOC_NONE, 5260668);
allocate([98,105,98,95,108,105,115,116,0] /* bib_list\00 */, "i8", ALLOC_NONE, 5260680);
allocate([114,101,97,100,105,110,103,32,102,114,111,109,0] /* reading from\00 */, "i8", ALLOC_NONE, 5260692);
allocate([65,108,114,101,97,100,121,32,101,110,99,111,117,110,116,101,114,101,100,32,97,117,120,105,108,105,97,114,121,32,102,105,108,101,0] /* Already encountered  */, "i8", ALLOC_NONE, 5260708);
allocate([10,37,115,58,32,78,111,116,32,37,115,32,37,115,32,40,37,115,32,61,32,37,115,41,46,10,0] /* \0A%s: Not %s %s (%s */, "i8", ALLOC_NONE, 5260744);
allocate([119,98,0] /* wb\00 */, "i8", ALLOC_NONE, 5260772);
allocate([46,46,0] /* ..\00 */, "i8", ALLOC_NONE, 5260776);
allocate([114,98,0] /* rb\00 */, "i8", ALLOC_NONE, 5260780);
allocate([73,32,99,111,117,108,100,110,39,116,32,111,112,101,110,32,102,105,108,101,32,110,97,109,101,32,96,0] /* I couldn't open file */, "i8", ALLOC_NONE, 5260784);
allocate([84,69,88,77,70,79,85,84,80,85,84,0] /* TEXMFOUTPUT\00 */, "i8", ALLOC_NONE, 5260812);
allocate([46,97,117,120,0] /* .aux\00 */, "i8", ALLOC_NONE, 5260824);
allocate([112,0] /* p\00 */, "i8", ALLOC_NONE, 5260832);
allocate([85,110,107,110,111,119,110,32,98,117,105,108,116,45,105,110,32,102,117,110,99,116,105,111,110,0] /* Unknown built-in fun */, "i8", ALLOC_NONE, 5260836);
allocate([111,112,101,110,111,117,116,95,97,110,121,0] /* openout_any\00 */, "i8", ALLOC_NONE, 5260864);
allocate([37,117,43,37,117,47,40,37,117,42,37,117,43,37,117,41,0] /* %u+%u/(%u_%u+%u)\00 */, "i8", ALLOC_NONE, 5260876);
allocate([87,97,114,110,105,110,103,45,45,0] /* Warning--\00 */, "i8", ALLOC_NONE, 5260896);
allocate([32,105,115,110,39,116,32,118,97,108,105,100,32,65,83,67,73,73,0] /*  isn't valid ASCII\0 */, "i8", ALLOC_NONE, 5260908);
allocate([73,108,108,101,103,97,108,32,110,117,109,98,101,114,32,111,102,32,99,111,109,109,97,44,115,0] /* Illegal number of co */, "i8", ALLOC_NONE, 5260928);
allocate([45,45,100,112,105,0] /* --dpi\00 */, "i8", ALLOC_NONE, 5260956);
allocate([34,32,105,115,110,39,116,32,98,114,97,99,101,32,98,97,108,97,110,99,101,100,0] /* \22 isn't brace bala */, "i8", ALLOC_NONE, 5260964);
allocate([32,111,102,32,34,0] /*  of \22\00 */, "i8", ALLOC_NONE, 5260988);
allocate([84,111,111,32,109,97,110,121,32,99,111,109,109,97,115,32,105,110,32,110,97,109,101,32,0] /* Too many commas in n */, "i8", ALLOC_NONE, 5260996);
allocate([97,0] /* a\00 */, "i8", ALLOC_NONE, 5261024);
allocate([34,32,104,97,115,32,97,32,99,111,109,109,97,32,97,116,32,116,104,101,32,101,110,100,0] /* \22 has a comma at t */, "i8", ALLOC_NONE, 5261028);
allocate([111,112,101,110,105,110,95,97,110,121,0] /* openin_any\00 */, "i8", ALLOC_NONE, 5261056);
allocate([32,105,110,32,34,0] /*  in \22\00 */, "i8", ALLOC_NONE, 5261068);
allocate([39,32,105,115,32,116,111,111,32,108,111,110,103,0] /* ' is too long\00 */, "i8", ALLOC_NONE, 5261076);
allocate([116,114,121,95,115,116,100,95,101,120,116,101,110,115,105,111,110,95,102,105,114,115,116,0] /* try_std_extension_fi */, "i8", ALLOC_NONE, 5261092);
allocate([78,97,109,101,32,0] /* Name \00 */, "i8", ALLOC_NONE, 5261116);
allocate([107,112,115,101,95,102,105,110,100,95,102,105,108,101,58,32,115,101,97,114,99,104,105,110,103,32,102,111,114,32,37,115,32,111,102,32,116,121,112,101,32,37,115,32,40,102,114,111,109,32,37,115,41,10,0] /* kpse_find_file: sear */, "i8", ALLOC_NONE, 5261124);
allocate([32,110,97,109,101,115,32,105,110,32,34,0] /*  names in \22\00 */, "i8", ALLOC_NONE, 5261180);
allocate([99,111,110,115,116,95,110,97,109,101,0] /* const_name\00 */, "i8", ALLOC_NONE, 5261192);
allocate([37,117,43,37,117,47,37,117,0] /* %u+%u/%u\00 */, "i8", ALLOC_NONE, 5261204);
allocate([84,104,101,114,101,32,97,114,101,110,39,116,32,0] /* There aren't \00 */, "i8", ALLOC_NONE, 5261216);
allocate([46,46,47,46,46,47,46,46,47,115,114,99,47,116,101,120,107,47,107,112,97,116,104,115,101,97,47,116,101,120,45,102,105,108,101,46,99,0] /* ../../../src/texk/kp */, "i8", ALLOC_NONE, 5261232);
allocate([84,104,101,114,101,32,105,115,32,110,111,32,110,97,109,101,32,105,110,32,34,0] /* There is no name in  */, "i8", ALLOC_NONE, 5261272);
allocate([32,32,110,117,109,101,114,105,99,32,102,111,114,109,97,116,32,118,97,108,117,101,32,61,32,37,100,10,0] /*   numeric format val */, "i8", ALLOC_NONE, 5261296);
allocate([44,32,110,111,116,32,97,32,115,116,114,105,110,103,32,111,114,32,109,105,115,115,105,110,103,32,102,105,101,108,100,44,0] /* , not a string or mi */, "i8", ALLOC_NONE, 5261328);
allocate([36,77,65,75,69,84,69,88,95,77,65,71,0] /* $MAKETEX_MAG\00 */, "i8", ALLOC_NONE, 5261364);
allocate([32,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,98,105,110,97,114,121,32,109,111,100,101,32,61,32,37,100,10,0] /*   open files in bina */, "i8", ALLOC_NONE, 5261380);
allocate([34,32,105,115,110,39,116,32,97,32,115,105,110,103,108,101,32,99,104,97,114,97,99,116,101,114,0] /* \22 isn't a single c */, "i8", ALLOC_NONE, 5261416);
allocate([32,32,112,114,111,103,114,97,109,32,101,110,97,98,108,101,32,108,101,118,101,108,32,61,32,37,100,10,0] /*   program enable lev */, "i8", ALLOC_NONE, 5261444);
allocate([47,0] /* /\00 */, "i8", ALLOC_NONE, 5261476);
allocate([32,105,115,32,97,110,32,105,108,108,101,103,97,108,32,99,97,115,101,45,99,111,110,118,101,114,115,105,111,110,32,115,116,114,105,110,103,0] /*  is an illegal case- */, "i8", ALLOC_NONE, 5261480);
allocate([32,32,112,114,111,103,114,97,109,32,101,110,97,98,108,101,100,32,61,32,37,100,10,0] /*   program enabled =  */, "i8", ALLOC_NONE, 5261520);
allocate([44,32,97,32,110,111,110,118,97,114,105,97,98,108,101,32,102,117,110,99,116,105,111,110,32,99,108,97,115,115,0] /* , a nonvariable func */, "i8", ALLOC_NONE, 5261544);
allocate([32,32,114,117,110,116,105,109,101,32,103,101,110,101,114,97,116,105,111,110,32,99,111,109,109,97,110,100,32,61,0] /*   runtime generation */, "i8", ALLOC_NONE, 5261576);
allocate([37,115,58,32,111,112,116,105,111,110,32,96,45,45,37,115,39,32,100,111,101,115,110,39,116,32,97,108,108,111,119,32,97,110,32,97,114,103,117,109,101,110,116,10,0] /* %s: option `--%s' do */, "i8", ALLOC_NONE, 5261608);
allocate([89,111,117,32,99,97,110,39,116,32,97,115,115,105,103,110,32,116,111,32,116,121,112,101,32,0] /* You can't assign to  */, "i8", ALLOC_NONE, 5261656);
allocate([32,32,114,117,110,116,105,109,101,32,103,101,110,101,114,97,116,105,111,110,32,112,114,111,103,114,97,109,32,61,32,37,115,10,0] /*   runtime generation */, "i8", ALLOC_NONE, 5261684);
allocate([44,32,116,104,101,32,103,108,111,98,97,108,0] /* , the global\00 */, "i8", ALLOC_NONE, 5261720);
allocate([70,105,108,101,32,110,97,109,101,32,96,0] /* File name `\00 */, "i8", ALLOC_NONE, 5261736);
allocate([32,32,115,101,97,114,99,104,32,111,110,108,121,32,119,105,116,104,32,115,117,102,102,105,120,32,61,32,37,100,10,0] /*   search only with s */, "i8", ALLOC_NONE, 5261748);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 5261780);
allocate([44,32,116,104,101,32,101,110,116,114,121,0] /* , the entry\00 */, "i8", ALLOC_NONE, 5261784);
allocate([32,32,111,116,104,101,114,32,115,117,102,102,105,120,101,115,32,61,0] /*   other suffixes =\0 */, "i8", ALLOC_NONE, 5261796);
allocate([44,32,110,111,116,32,97,110,32,105,110,116,101,103,101,114,32,111,114,32,97,32,115,116,114,105,110,103,44,0] /* , not an integer or  */, "i8", ALLOC_NONE, 5261816);
allocate([37,115,32,37,115,37,115,10,0] /* %s %s%s\0A\00 */, "i8", ALLOC_NONE, 5261848);
allocate([32,40,110,111,110,101,41,10,0] /*  (none)\0A\00 */, "i8", ALLOC_NONE, 5261860);
allocate([100,112,105,32,33,61,32,48,32,38,38,32,98,100,112,105,32,33,61,32,48,0] /* dpi != 0 && bdpi !=  */, "i8", ALLOC_NONE, 5261872);
allocate([45,45,45,116,104,101,121,32,97,114,101,110,39,116,32,116,104,101,32,115,97,109,101,32,108,105,116,101,114,97,108,32,116,121,112,101,115,0] /* ---they aren't the s */, "i8", ALLOC_NONE, 5261896);
allocate([32,37,115,0] /*  %s\00 */, "i8", ALLOC_NONE, 5261936);
allocate([79,85,84,80,85,84,0] /* OUTPUT\00 */, "i8", ALLOC_NONE, 5261940);
allocate([44,32,0] /* , \00 */, "i8", ALLOC_NONE, 5261948);
allocate([32,32,100,101,102,97,117,108,116,32,115,117,102,102,105,120,101,115,32,61,0] /*   default suffixes = */, "i8", ALLOC_NONE, 5261952);
allocate([78,111,110,101,109,112,116,121,32,101,109,112,116,121,32,115,116,114,105,110,103,32,115,116,97,99,107,0] /* Nonempty empty strin */, "i8", ALLOC_NONE, 5261976);
allocate([45,45,109,97,103,0] /* --mag\00 */, "i8", ALLOC_NONE, 5262004);
allocate([32,32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,115,32,61,32,37,115,10,0] /*   environment variab */, "i8", ALLOC_NONE, 5262012);
allocate([45,45,45,116,104,101,32,108,105,116,101,114,97,108,32,115,116,97,99,107,32,105,115,110,39,116,32,101,109,112,116,121,0] /* ---the literal stack */, "i8", ALLOC_NONE, 5262044);
allocate([32,32,99,111,109,112,105,108,101,45,116,105,109,101,32,112,97,116,104,32,61,32,37,115,10,0] /*   compile-time path  */, "i8", ALLOC_NONE, 5262080);
allocate([44,32,115,116,97,99,107,61,0] /* , stack=\00 */, "i8", ALLOC_NONE, 5262108);
allocate([32,32,116,101,120,109,102,46,99,110,102,32,112,97,116,104,32,61,32,37,115,10,0] /*   texmf.cnf path = % */, "i8", ALLOC_NONE, 5262120);
allocate([112,116,114,61,0] /* ptr=\00 */, "i8", ALLOC_NONE, 5262144);
allocate([32,32,97,112,112,108,105,99,97,116,105,111,110,32,99,111,110,102,105,103,32,102,105,108,101,32,112,97,116,104,32,61,32,37,115,10,0] /*   application config */, "i8", ALLOC_NONE, 5262152);
allocate([69,109,112,116,121,32,108,105,116,101,114,97,108,0] /* Empty literal\00 */, "i8", ALLOC_NONE, 5262192);
allocate([40,110,111,110,101,41,0] /* (none)\00 */, "i8", ALLOC_NONE, 5262208);
allocate([44,32,110,111,116,32,97,32,102,117,110,99,116,105,111,110,44,0] /* , not a function,\00 */, "i8", ALLOC_NONE, 5262216);
allocate([73,39,109,32,115,107,105,112,112,105,110,103,32,119,104,97,116,101,118,101,114,32,114,101,109,97,105,110,115,32,111,102,32,116,104,105,115,32,0] /* I'm skipping whateve */, "i8", ALLOC_NONE, 5262236);
allocate([32,32,97,112,112,108,105,99,97,116,105,111,110,32,111,118,101,114,114,105,100,101,32,112,97,116,104,32,61,32,37,115,10,0] /*   application overri */, "i8", ALLOC_NONE, 5262276);
allocate([44,32,110,111,116,32,97,32,115,116,114,105,110,103,44,0] /* , not a string,\00 */, "i8", ALLOC_NONE, 5262312);
allocate([32,32,98,101,102,111,114,101,32,101,120,112,97,110,115,105,111,110,32,61,32,37,115,10,0] /*   before expansion = */, "i8", ALLOC_NONE, 5262328);
allocate([44,32,110,111,116,32,97,110,32,105,110,116,101,103,101,114,44,0] /* , not an integer,\00 */, "i8", ALLOC_NONE, 5262356);
allocate([32,32,61,32,37,115,10,0] /*   = %s\0A\00 */, "i8", ALLOC_NONE, 5262376);
allocate([46,46,47,46,46,47,46,46,47,115,114,99,47,116,101,120,107,47,107,112,97,116,104,115,101,97,47,116,101,120,45,109,97,107,101,46,99,0] /* ../../../src/texk/kp */, "i8", ALLOC_NONE, 5262384);
allocate([78,111,110,116,111,112,32,116,111,112,32,111,102,32,115,116,114,105,110,103,32,115,116,97,99,107,0] /* Nontop top of string */, "i8", ALLOC_NONE, 5262424);
allocate([83,101,97,114,99,104,32,112,97,116,104,32,102,111,114,32,37,115,32,102,105,108,101,115,32,40,102,114,111,109,32,37,115,41,10,0] /* Search path for %s f */, "i8", ALLOC_NONE, 5262452);
allocate([89,111,117,32,99,97,110,39,116,32,112,111,112,32,97,110,32,101,109,112,116,121,32,108,105,116,101,114,97,108,32,115,116,97,99,107,0] /* You can't pop an emp */, "i8", ALLOC_NONE, 5262488);
allocate([107,100,101,98,117,103,58,0] /* kdebug:\00 */, "i8", ALLOC_NONE, 5262528);
allocate([108,105,116,95,115,116,107,95,116,121,112,101,0] /* lit_stk_type\00 */, "i8", ALLOC_NONE, 5262536);
allocate([36,77,65,75,69,84,69,88,95,66,65,83,69,95,68,80,73,0] /* $MAKETEX_BASE_DPI\00 */, "i8", ALLOC_NONE, 5262552);
allocate([107,112,115,101,95,105,110,105,116,95,102,111,114,109,97,116,58,32,85,110,107,110,111,119,110,32,102,111,114,109,97,116,32,37,100,0] /* kpse_init_format: Un */, "i8", ALLOC_NONE, 5262572);
allocate([108,105,116,95,115,116,97,99,107,0] /* lit_stack\00 */, "i8", ALLOC_NONE, 5262608);
allocate([37,115,58,32,102,97,116,97,108,58,32,0] /* %s: fatal: \00 */, "i8", ALLOC_NONE, 5262620);
allocate([34,32,104,97,115,32,97,110,32,105,108,108,101,103,97,108,32,98,114,97,99,101,45,108,101,118,101,108,45,49,32,108,101,116,116,101,114,0] /* \22 has an illegal b */, "i8", ALLOC_NONE, 5262632);
allocate([46,98,108,116,120,109,108,0] /* .bltxml\00 */, "i8", ALLOC_NONE, 5262672);
allocate([84,104,101,32,102,111,114,109,97,116,32,115,116,114,105,110,103,32,34,0] /* The format string \2 */, "i8", ALLOC_NONE, 5262680);
allocate([66,76,84,88,77,76,73,78,80,85,84,83,0] /* BLTXMLINPUTS\00 */, "i8", ALLOC_NONE, 5262700);
allocate([67,111,110,116,114,111,108,45,115,101,113,117,101,110,99,101,32,104,97,115,104,32,101,114,114,111,114,0] /* Control-sequence has */, "i8", ALLOC_NONE, 5262716);
allocate([98,108,116,120,109,108,0] /* bltxml\00 */, "i8", ALLOC_NONE, 5262744);
allocate([34,32,102,105,101,108,100,0] /* \22 field\00 */, "i8", ALLOC_NONE, 5262752);
allocate([40,69,114,114,111,114,32,109,97,121,32,104,97,118,101,32,98,101,101,110,32,111,110,32,112,114,101,118,105,111,117,115,32,108,105,110,101,41,0] /* (Error may have been */, "i8", ALLOC_NONE, 5262760);
allocate([46,114,105,115,0] /* .ris\00 */, "i8", ALLOC_NONE, 5262800);
allocate([39,115,32,101,120,116,114,97,32,34,0] /* 's extra \22\00 */, "i8", ALLOC_NONE, 5262808);
allocate([82,73,83,73,78,80,85,84,83,0] /* RISINPUTS\00 */, "i8", ALLOC_NONE, 5262820);
allocate([87,97,114,110,105,110,103,45,45,73,39,109,32,105,103,110,111,114,105,110,103,32,0] /* Warning--I'm ignorin */, "i8", ALLOC_NONE, 5262832);
allocate([114,105,115,0] /* ris\00 */, "i8", ALLOC_NONE, 5262856);
allocate([77,65,75,69,84,69,88,95,66,65,83,69,95,68,80,73,0] /* MAKETEX_BASE_DPI\00 */, "i8", ALLOC_NONE, 5262860);
allocate([102,105,101,108,100,95,105,110,102,111,32,105,110,100,101,120,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* field_info index is  */, "i8", ALLOC_NONE, 5262880);
allocate([46,115,111,0] /* .so\00 */, "i8", ALLOC_NONE, 5262916);
allocate([117,110,100,101,102,105,110,101,100,0] /* undefined\00 */, "i8", ALLOC_NONE, 5262920);
allocate([46,100,108,108,0] /* .dll\00 */, "i8", ALLOC_NONE, 5262932);
allocate([117,115,101,100,32,105,110,32,105,116,115,32,111,119,110,32,100,101,102,105,110,105,116,105,111,110,0] /* used in its own defi */, "i8", ALLOC_NONE, 5262940);
allocate([45,45,98,100,112,105,0] /* --bdpi\00 */, "i8", ALLOC_NONE, 5262968);
allocate([67,76,85,65,73,78,80,85,84,83,0] /* CLUAINPUTS\00 */, "i8", ALLOC_NONE, 5262976);
allocate([97,32,102,105,101,108,100,32,112,97,114,116,0] /* a field part\00 */, "i8", ALLOC_NONE, 5262988);
allocate([46,58,36,83,69,76,70,65,85,84,79,76,79,67,47,108,105,98,47,123,36,112,114,111,103,110,97,109,101,44,36,101,110,103,105,110,101,44,125,47,108,117,97,47,47,0] /* .:$SELFAUTOLOC/lib/{ */, "i8", ALLOC_NONE, 5263004);
allocate([65,32,100,105,103,105,116,32,100,105,115,97,112,112,101,97,114,101,100,0] /* A digit disappeared\ */, "i8", ALLOC_NONE, 5263052);
allocate([99,108,117,97,0] /* clua\00 */, "i8", ALLOC_NONE, 5263072);
allocate([119,105,122,95,102,117,110,99,116,105,111,110,115,0] /* wiz_functions\00 */, "i8", ALLOC_NONE, 5263080);
allocate([46,109,108,98,115,116,0] /* .mlbst\00 */, "i8", ALLOC_NONE, 5263096);
allocate([65,108,114,101,97,100,121,32,101,110,99,111,117,110,116,101,114,101,100,32,105,109,112,108,105,99,105,116,32,102,117,110,99,116,105,111,110,0] /* Already encountered  */, "i8", ALLOC_NONE, 5263104);
allocate([77,76,66,83,84,73,78,80,85,84,83,0] /* MLBSTINPUTS\00 */, "i8", ALLOC_NONE, 5263144);
allocate([39,32,116,111,32,101,110,100,32,115,116,114,105,110,103,32,108,105,116,101,114,97,108,0] /* ' to end string lite */, "i8", ALLOC_NONE, 5263156);
allocate([32,58,32,0] /*  : \00 */, "i8", ALLOC_NONE, 5263180);
allocate([109,108,98,115,116,0] /* mlbst\00 */, "i8", ALLOC_NONE, 5263184);
allocate([78,111,32,96,0] /* No `\00 */, "i8", ALLOC_NONE, 5263192);
allocate([46,109,108,98,105,98,0] /* .mlbib\00 */, "i8", ALLOC_NONE, 5263200);
allocate([37,115,37,99,37,115,0] /* %s%c%s\00 */, "i8", ALLOC_NONE, 5263208);
allocate([77,76,66,73,66,73,78,80,85,84,83,0] /* MLBIBINPUTS\00 */, "i8", ALLOC_NONE, 5263216);
allocate([75,80,65,84,72,83,69,65,95,68,80,73,0] /* KPATHSEA_DPI\00 */, "i8", ALLOC_NONE, 5263228);
allocate([115,105,110,103,108,95,102,117,110,99,116,105,111,110,0] /* singl_function\00 */, "i8", ALLOC_NONE, 5263244);
allocate([109,108,98,105,98,0] /* mlbib\00 */, "i8", ALLOC_NONE, 5263260);
allocate([73,108,108,101,103,97,108,32,105,110,116,101,103,101,114,32,105,110,32,105,110,116,101,103,101,114,32,108,105,116,101,114,97,108,0] /* Illegal integer in i */, "i8", ALLOC_NONE, 5263268);
allocate([46,99,105,100,109,97,112,0] /* .cidmap\00 */, "i8", ALLOC_NONE, 5263304);
allocate([102,117,110,99,116,105,111,110,0] /* function\00 */, "i8", ALLOC_NONE, 5263312);
allocate([36,77,65,75,69,84,69,88,95,77,79,68,69,0] /* $MAKETEX_MODE\00 */, "i8", ALLOC_NONE, 5263324);
allocate([46,99,105,100,0] /* .cid\00 */, "i8", ALLOC_NONE, 5263340);
allocate([34,32,99,97,110,39,116,32,102,111,108,108,111,119,32,97,32,108,105,116,101,114,97,108,0] /* \22 can't follow a l */, "i8", ALLOC_NONE, 5263348);
allocate([70,79,78,84,67,73,68,77,65,80,83,0] /* FONTCIDMAPS\00 */, "i8", ALLOC_NONE, 5263376);
allocate([32,105,115,32,97,110,32,117,110,107,110,111,119,110,32,102,117,110,99,116,105,111,110,0] /*  is an unknown funct */, "i8", ALLOC_NONE, 5263388);
allocate([99,105,100,32,109,97,112,115,0] /* cid maps\00 */, "i8", ALLOC_NONE, 5263412);
allocate([32,105,115,32,105,108,108,101,103,97,108,32,105,110,32,105,116,115,32,111,119,110,32,100,101,102,105,110,105,116,105,111,110,0] /*  is illegal in its o */, "i8", ALLOC_NONE, 5263424);
allocate([46,102,101,97,0] /* .fea\00 */, "i8", ALLOC_NONE, 5263460);
allocate([102,117,110,99,116,105,111,110,32,0] /* function \00 */, "i8", ALLOC_NONE, 5263468);
allocate([70,79,78,84,70,69,65,84,85,82,69,83,0] /* FONTFEATURES\00 */, "i8", ALLOC_NONE, 5263480);
allocate([67,117,114,115,101,32,121,111,117,44,32,119,105,122,97,114,100,44,32,98,101,102,111,114,101,32,121,111,117,32,114,101,99,117,114,115,101,32,109,101,58,0] /* Curse you, wizard, b */, "i8", ALLOC_NONE, 5263496);
allocate([115,116,114,95,112,111,111,108,0] /* str_pool\00 */, "i8", ALLOC_NONE, 5263540);
allocate([32,32,97,108,111,110,103,32,119,105,116,104,32,97,32,108,111,103,32,102,105,108,101,32,65,85,88,70,73,76,69,46,98,108,103,46,0] /*   along with a log f */, "i8", ALLOC_NONE, 5263552);
allocate([102,111,110,116,32,102,101,97,116,117,114,101,32,102,105,108,101,115,0] /* font feature files\0 */, "i8", ALLOC_NONE, 5263592);
allocate([37,115,58,32,102,97,116,97,108,58,32,0] /* %s: fatal: \00 */, "i8", ALLOC_NONE, 5263612);
allocate([103,108,111,98,97,108,46,109,97,120,36,32,0] /* global.max$ \00 */, "i8", ALLOC_NONE, 5263624);
allocate([46,116,108,117,0] /* .tlu\00 */, "i8", ALLOC_NONE, 5263640);
allocate([107,112,115,101,95,110,111,114,109,97,108,105,122,101,95,112,97,116,104,32,40,37,115,41,32,61,62,32,37,117,10,0] /* kpse_normalize_path  */, "i8", ALLOC_NONE, 5263648);
allocate([101,110,116,114,121,46,109,97,120,36,32,32,0] /* entry.max$  \00 */, "i8", ALLOC_NONE, 5263680);
allocate([46,116,101,120,108,117,99,0] /* .texluc\00 */, "i8", ALLOC_NONE, 5263696);
allocate([107,112,97,116,104,115,101,97,58,32,65,112,112,101,110,100,105,110,103,32,102,111,110,116,32,99,114,101,97,116,105,111,110,32,99,111,109,109,97,110,100,115,32,116,111,32,37,115,46,10,0] /* kpathsea: Appending  */, "i8", ALLOC_NONE, 5263704);
allocate([110,97,109,101,0] /* name\00 */, "i8", ALLOC_NONE, 5263756);
allocate([115,111,114,116,46,107,101,121,36,32,32,32,0] /* sort.key$   \00 */, "i8", ALLOC_NONE, 5263764);
allocate([46,116,101,120,108,117,97,0] /* .texlua\00 */, "i8", ALLOC_NONE, 5263780);
allocate([97,108,108,0] /* all\00 */, "i8", ALLOC_NONE, 5263788);
allocate([99,114,111,115,115,114,101,102,32,32,32,32,0] /* crossref    \00 */, "i8", ALLOC_NONE, 5263792);
allocate([46,108,117,99,116,101,120,0] /* .luctex\00 */, "i8", ALLOC_NONE, 5263808);
allocate([115,115,32,32,32,32,32,32,32,32,32,32,0] /* ss          \00 */, "i8", ALLOC_NONE, 5263816);
allocate([45,45,109,102,109,111,100,101,0] /* --mfmode\00 */, "i8", ALLOC_NONE, 5263832);
allocate([46,108,117,99,0] /* .luc\00 */, "i8", ALLOC_NONE, 5263844);
allocate([76,32,32,32,32,32,32,32,32,32,32,32,0] /* L           \00 */, "i8", ALLOC_NONE, 5263852);
allocate([46,108,117,97,116,101,120,0] /* .luatex\00 */, "i8", ALLOC_NONE, 5263868);
allocate([115,116,97,114,116,32,115,101,97,114,99,104,40,102,105,108,101,115,61,91,37,115,0] /* start search(files=[ */, "i8", ALLOC_NONE, 5263876);
allocate([108,32,32,32,32,32,32,32,32,32,32,32,0] /* l           \00 */, "i8", ALLOC_NONE, 5263900);
allocate([46,108,117,97,0] /* .lua\00 */, "i8", ALLOC_NONE, 5263916);
allocate([107,112,115,101,45,62,112,97,116,104,0] /* kpse-_path\00 */, "i8", ALLOC_NONE, 5263924);
allocate([79,32,32,32,32,32,32,32,32,32,32,32,0] /* O           \00 */, "i8", ALLOC_NONE, 5263936);
allocate([76,85,65,73,78,80,85,84,83,0] /* LUAINPUTS\00 */, "i8", ALLOC_NONE, 5263952);
allocate([102,97,108,108,98,97,99,107,0] /* fallback\00 */, "i8", ALLOC_NONE, 5263964);
allocate([111,32,32,32,32,32,32,32,32,32,32,32,0] /* o           \00 */, "i8", ALLOC_NONE, 5263976);
allocate([108,117,97,0] /* lua\00 */, "i8", ALLOC_NONE, 5263992);
allocate([65,65,32,32,32,32,32,32,32,32,32,32,0] /* AA          \00 */, "i8", ALLOC_NONE, 5263996);
allocate([73,108,108,101,103,97,108,32,115,116,114,105,110,103,32,110,117,109,98,101,114,58,0] /* Illegal string numbe */, "i8", ALLOC_NONE, 5264012);
allocate([104,97,115,104,95,108,111,111,107,117,112,40,37,115,41,32,61,62,0] /* hash_lookup(%s) =_\0 */, "i8", ALLOC_NONE, 5264036);
allocate([84,69,88,77,70,83,67,82,73,80,84,83,0] /* TEXMFSCRIPTS\00 */, "i8", ALLOC_NONE, 5264056);
allocate([97,97,32,32,32,32,32,32,32,32,32,32,0] /* aa          \00 */, "i8", ALLOC_NONE, 5264072);
allocate([114,0] /* r\00 */, "i8", ALLOC_NONE, 5264088);
allocate([116,101,120,109,102,115,99,114,105,112,116,115,0] /* texmfscripts\00 */, "i8", ALLOC_NONE, 5264092);
allocate([65,69,32,32,32,32,32,32,32,32,32,32,0] /* AE          \00 */, "i8", ALLOC_NONE, 5264108);
allocate([70,78,95,83,84,82,73,78,71,32,40,42,102,41,32,33,61,32,78,85,76,76,0] /* FN_STRING (_f) != NU */, "i8", ALLOC_NONE, 5264124);
allocate([46,108,105,103,0] /* .lig\00 */, "i8", ALLOC_NONE, 5264148);
allocate([47,0] /* /\00 */, "i8", ALLOC_NONE, 5264156);
allocate([97,101,32,32,32,32,32,32,32,32,32,32,0] /* ae          \00 */, "i8", ALLOC_NONE, 5264160);
allocate([76,73,71,70,79,78,84,83,0] /* LIGFONTS\00 */, "i8", ALLOC_NONE, 5264176);
allocate([75,80,83,69,95,68,79,84,0] /* KPSE_DOT\00 */, "i8", ALLOC_NONE, 5264188);
allocate([79,69,32,32,32,32,32,32,32,32,32,32,0] /* OE          \00 */, "i8", ALLOC_NONE, 5264200);
allocate([102,111,112,101,110,40,37,115,44,32,37,115,41,32,61,62,32,48,120,37,108,120,10,0] /* fopen(%s, %s) =_ 0x% */, "i8", ALLOC_NONE, 5264216);
allocate([108,105,103,32,102,105,108,101,115,0] /* lig files\00 */, "i8", ALLOC_NONE, 5264240);
allocate([111,101,32,32,32,32,32,32,32,32,32,32,0] /* oe          \00 */, "i8", ALLOC_NONE, 5264252);
allocate([109,107,116,101,120,112,107,0] /* mktexpk\00 */, "i8", ALLOC_NONE, 5264268);
allocate([80,68,70,84,69,88,67,79,78,70,73,71,0] /* PDFTEXCONFIG\00 */, "i8", ALLOC_NONE, 5264276);
allocate([47,0] /* /\00 */, "i8", ALLOC_NONE, 5264292);
allocate([106,32,32,32,32,32,32,32,32,32,32,32,0] /* j           \00 */, "i8", ALLOC_NONE, 5264296);
allocate([112,100,102,116,101,120,32,99,111,110,102,105,103,0] /* pdftex config\00 */, "i8", ALLOC_NONE, 5264312);
allocate([105,32,32,32,32,32,32,32,32,32,32,32,0] /* i           \00 */, "i8", ALLOC_NONE, 5264328);
allocate([46,111,116,102,0] /* .otf\00 */, "i8", ALLOC_NONE, 5264344);
allocate([107,112,115,101,45,62,112,114,111,103,114,97,109,95,110,97,109,101,0] /* kpse-_program_name\0 */, "i8", ALLOC_NONE, 5264352);
allocate([100,101,102,97,117,108,116,46,116,121,112,101,0] /* default.type\00 */, "i8", ALLOC_NONE, 5264372);
allocate([79,80,69,78,84,89,80,69,70,79,78,84,83,0] /* OPENTYPEFONTS\00 */, "i8", ALLOC_NONE, 5264388);
allocate([37,115,58,32,102,97,116,97,108,58,32,0] /* %s: fatal: \00 */, "i8", ALLOC_NONE, 5264404);
allocate([119,114,105,116,101,36,32,32,32,32,32,32,0] /* write$      \00 */, "i8", ALLOC_NONE, 5264416);
allocate([111,112,101,110,116,121,112,101,32,102,111,110,116,115,0] /* opentype fonts\00 */, "i8", ALLOC_NONE, 5264432);
allocate([103,101,116,99,119,100,0] /* getcwd\00 */, "i8", ALLOC_NONE, 5264448);
allocate([119,105,100,116,104,36,32,32,32,32,32,32,0] /* width$      \00 */, "i8", ALLOC_NONE, 5264456);
allocate([37,115,37,108,100,0] /* %s%ld\00 */, "i8", ALLOC_NONE, 5264472);
allocate([102,105,108,101,110,97,109,101,32,38,38,32,109,111,100,101,0] /* filename && mode\00 */, "i8", ALLOC_NONE, 5264480);
allocate([46,115,102,100,0] /* .sfd\00 */, "i8", ALLOC_NONE, 5264500);
allocate([119,104,105,108,101,36,32,32,32,32,32,32,0] /* while$      \00 */, "i8", ALLOC_NONE, 5264508);
allocate([83,70,68,70,79,78,84,83,0] /* SFDFONTS\00 */, "i8", ALLOC_NONE, 5264524);
allocate([119,97,114,110,105,110,103,36,32,32,32,32,0] /* warning$    \00 */, "i8", ALLOC_NONE, 5264536);
allocate([115,117,98,102,111,110,116,32,100,101,102,105,110,105,116,105,111,110,32,102,105,108,101,115,0] /* subfont definition f */, "i8", ALLOC_NONE, 5264552);
allocate([84,69,88,77,70,79,85,84,80,85,84,0] /* TEXMFOUTPUT\00 */, "i8", ALLOC_NONE, 5264580);
allocate([116,121,112,101,36,32,32,32,32,32,32,32,0] /* type$       \00 */, "i8", ALLOC_NONE, 5264592);
allocate([107,112,115,101,45,62,112,114,111,103,114,97,109,95,110,97,109,101,0] /* kpse-_program_name\0 */, "i8", ALLOC_NONE, 5264608);
allocate([67,77,65,80,70,79,78,84,83,0] /* CMAPFONTS\00 */, "i8", ALLOC_NONE, 5264628);
allocate([116,111,112,36,32,32,32,32,32,32,32,32,0] /* top$        \00 */, "i8", ALLOC_NONE, 5264640);
allocate([99,109,97,112,32,102,105,108,101,115,0] /* cmap files\00 */, "i8", ALLOC_NONE, 5264656);
allocate([116,101,120,116,46,112,114,101,102,105,120,36,0] /* text.prefix$\00 */, "i8", ALLOC_NONE, 5264668);
allocate([84,69,88,70,79,78,84,83,0] /* TEXFONTS\00 */, "i8", ALLOC_NONE, 5264684);
allocate([46,101,110,99,0] /* .enc\00 */, "i8", ALLOC_NONE, 5264696);
allocate([37,115,32,61,61,32,37,115,37,115,37,115,10,0] /* %s == %s%s%s\0A\00 */, "i8", ALLOC_NONE, 5264704);
allocate([116,101,120,116,46,108,101,110,103,116,104,36,0] /* text.length$\00 */, "i8", ALLOC_NONE, 5264720);
allocate([69,78,67,70,79,78,84,83,0] /* ENCFONTS\00 */, "i8", ALLOC_NONE, 5264736);
allocate([107,112,97,116,104,115,101,97,58,32,73,110,118,97,108,105,100,32,102,111,110,116,110,97,109,101,32,96,37,115,39,44,32,99,111,110,116,97,105,110,115,32,39,37,99,39,10,0] /* kpathsea: Invalid fo */, "i8", ALLOC_NONE, 5264748);
allocate([115,119,97,112,36,32,32,32,32,32,32,32,0] /* swap$       \00 */, "i8", ALLOC_NONE, 5264796);
allocate([101,110,99,32,102,105,108,101,115,0] /* enc files\00 */, "i8", ALLOC_NONE, 5264812);
allocate([115,117,98,115,116,114,105,110,103,36,32,32,0] /* substring$  \00 */, "i8", ALLOC_NONE, 5264824);
allocate([46,119,0] /* .w\00 */, "i8", ALLOC_NONE, 5264840);
allocate([115,116,97,99,107,36,32,32,32,32,32,32,0] /* stack$      \00 */, "i8", ALLOC_NONE, 5264844);
allocate([67,87,69,66,73,78,80,85,84,83,0] /* CWEBINPUTS\00 */, "i8", ALLOC_NONE, 5264860);
allocate([115,107,105,112,36,32,32,32,32,32,32,32,0] /* skip$       \00 */, "i8", ALLOC_NONE, 5264872);
allocate([110,97,109,101,95,115,101,112,95,99,104,97,114,0] /* name_sep_char\00 */, "i8", ALLOC_NONE, 5264888);
allocate([99,119,101,98,0] /* cweb\00 */, "i8", ALLOC_NONE, 5264904);
allocate([113,117,111,116,101,36,32,32,32,32,32,32,0] /* quote$      \00 */, "i8", ALLOC_NONE, 5264912);
allocate([46,99,104,0] /* .ch\00 */, "i8", ALLOC_NONE, 5264928);
allocate([112,117,114,105,102,121,36,32,32,32,32,32,0] /* purify$     \00 */, "i8", ALLOC_NONE, 5264932);
allocate([46,119,101,98,0] /* .web\00 */, "i8", ALLOC_NONE, 5264948);
allocate([97,98,0] /* ab\00 */, "i8", ALLOC_NONE, 5264956);
allocate([112,114,101,97,109,98,108,101,36,32,32,32,0] /* preamble$   \00 */, "i8", ALLOC_NONE, 5264960);
allocate([87,69,66,73,78,80,85,84,83,0] /* WEBINPUTS\00 */, "i8", ALLOC_NONE, 5264976);
allocate([112,111,112,36,32,32,32,32,32,32,32,32,0] /* pop$        \00 */, "i8", ALLOC_NONE, 5264988);
allocate([119,101,98,0] /* web\00 */, "i8", ALLOC_NONE, 5265004);
allocate([110,117,109,46,110,97,109,101,115,36,32,32,0] /* num.names$  \00 */, "i8", ALLOC_NONE, 5265008);
allocate([71,76,89,80,72,70,79,78,84,83,0] /* GLYPHFONTS\00 */, "i8", ALLOC_NONE, 5265024);
allocate([77,73,83,67,70,79,78,84,83,0] /* MISCFONTS\00 */, "i8", ALLOC_NONE, 5265036);
allocate([37,115,32,61,61,32,37,115,37,115,37,115,37,115,37,115,10,0] /* %s == %s%s%s%s%s\0A\ */, "i8", ALLOC_NONE, 5265048);
allocate([110,101,119,108,105,110,101,36,32,32,32,32,0] /* newline$    \00 */, "i8", ALLOC_NONE, 5265068);
allocate([109,105,115,99,32,102,111,110,116,115,0] /* misc fonts\00 */, "i8", ALLOC_NONE, 5265084);
allocate([109,105,115,115,105,110,103,36,32,32,32,32,0] /* missing$    \00 */, "i8", ALLOC_NONE, 5265096);
allocate([111,116,104,101,114,32,98,105,110,97,114,121,32,102,105,108,101,115,0] /* other binary files\0 */, "i8", ALLOC_NONE, 5265112);
allocate([105,110,116,46,116,111,46,115,116,114,36,32,0] /* int.to.str$ \00 */, "i8", ALLOC_NONE, 5265132);
allocate([73,78,80,85,84,83,0] /* INPUTS\00 */, "i8", ALLOC_NONE, 5265148);
allocate([105,110,116,46,116,111,46,99,104,114,36,32,0] /* int.to.chr$ \00 */, "i8", ALLOC_NONE, 5265156);
allocate([47,47,0] /* //\00 */, "i8", ALLOC_NONE, 5265172);
allocate([105,102,36,32,32,32,32,32,32,32,32,32,0] /* if$         \00 */, "i8", ALLOC_NONE, 5265176);
allocate([110,97,109,101,95,116,111,107,0] /* name_tok\00 */, "i8", ALLOC_NONE, 5265192);
allocate([36,84,69,88,77,70,47,0] /* $TEXMF/\00 */, "i8", ALLOC_NONE, 5265204);
allocate([102,111,114,109,97,116,46,110,97,109,101,36,0] /* format.name$\00 */, "i8", ALLOC_NONE, 5265212);
allocate([58,0] /* :\00 */, "i8", ALLOC_NONE, 5265228);
allocate([101,109,112,116,121,36,32,32,32,32,32,32,0] /* empty$      \00 */, "i8", ALLOC_NONE, 5265232);
allocate([46,0] /* .\00 */, "i8", ALLOC_NONE, 5265248);
allocate([109,105,115,115,102,111,110,116,46,108,111,103,0] /* missfont.log\00 */, "i8", ALLOC_NONE, 5265252);
allocate([100,117,112,108,105,99,97,116,101,36,32,32,0] /* duplicate$  \00 */, "i8", ALLOC_NONE, 5265268);
allocate([111,116,104,101,114,32,116,101,120,116,32,102,105,108,101,115,0] /* other text files\00 */, "i8", ALLOC_NONE, 5265284);
allocate([99,105,116,101,36,32,32,32,32,32,32,32,0] /* cite$       \00 */, "i8", ALLOC_NONE, 5265304);
allocate([87,69,66,50,67,0] /* WEB2C\00 */, "i8", ALLOC_NONE, 5265320);
allocate([99,104,114,46,116,111,46,105,110,116,36,32,0] /* chr.to.int$ \00 */, "i8", ALLOC_NONE, 5265328);
allocate([71,70,70,79,78,84,83,0] /* GFFONTS\00 */, "i8", ALLOC_NONE, 5265344);
allocate([119,101,98,50,99,32,102,105,108,101,115,0] /* web2c files\00 */, "i8", ALLOC_NONE, 5265352);
allocate([47,46,46,0] /* /..\00 */, "i8", ALLOC_NONE, 5265364);
allocate([99,104,97,110,103,101,46,99,97,115,101,36,0] /* change.case$\00 */, "i8", ALLOC_NONE, 5265368);
allocate([46,84,52,50,0] /* .T42\00 */, "i8", ALLOC_NONE, 5265384);
allocate([99,97,108,108,46,116,121,112,101,36,32,32,0] /* call.type$  \00 */, "i8", ALLOC_NONE, 5265392);
allocate([46,116,52,50,0] /* .t42\00 */, "i8", ALLOC_NONE, 5265408);
allocate([97,100,100,46,112,101,114,105,111,100,36,32,0] /* add.period$ \00 */, "i8", ALLOC_NONE, 5265416);
allocate([84,52,50,70,79,78,84,83,0] /* T42FONTS\00 */, "i8", ALLOC_NONE, 5265432);
allocate([58,61,32,32,32,32,32,32,32,32,32,32,0] /* :=          \00 */, "i8", ALLOC_NONE, 5265444);
allocate([116,121,112,101,52,50,32,102,111,110,116,115,0] /* type42 fonts\00 */, "i8", ALLOC_NONE, 5265460);
allocate([42,32,32,32,32,32,32,32,32,32,32,32,0] /* _           \00 */, "i8", ALLOC_NONE, 5265476);
allocate([111,117,116,95,98,117,102,0] /* out_buf\00 */, "i8", ALLOC_NONE, 5265492);
allocate([46,100,102,111,110,116,0] /* .dfont\00 */, "i8", ALLOC_NONE, 5265500);
allocate([45,32,32,32,32,32,32,32,32,32,32,32,0] /* -           \00 */, "i8", ALLOC_NONE, 5265508);
allocate([46,84,84,67,0] /* .TTC\00 */, "i8", ALLOC_NONE, 5265524);
allocate([108,115,45,114,0] /* ls-r\00 */, "i8", ALLOC_NONE, 5265532);
allocate([43,32,32,32,32,32,32,32,32,32,32,32,0] /* +           \00 */, "i8", ALLOC_NONE, 5265540);
allocate([46,84,84,70,0] /* .TTF\00 */, "i8", ALLOC_NONE, 5265556);
allocate([77,73,83,83,70,79,78,84,95,76,79,71,0] /* MISSFONT_LOG\00 */, "i8", ALLOC_NONE, 5265564);
allocate([60,32,32,32,32,32,32,32,32,32,32,32,0] /* _           \00 */, "i8", ALLOC_NONE, 5265580);
allocate([46,116,116,99,0] /* .ttc\00 */, "i8", ALLOC_NONE, 5265596);
allocate([62,32,32,32,32,32,32,32,32,32,32,32,0] /* _           \00 */, "i8", ALLOC_NONE, 5265604);
allocate([46,116,116,102,0] /* .ttf\00 */, "i8", ALLOC_NONE, 5265620);
allocate([61,32,32,32,32,32,32,32,32,32,32,32,0] /* =           \00 */, "i8", ALLOC_NONE, 5265628);
allocate([47,110,111,110,101,115,117,99,104,0] /* /nonesuch\00 */, "i8", ALLOC_NONE, 5265644);
allocate([84,84,70,79,78,84,83,0] /* TTFONTS\00 */, "i8", ALLOC_NONE, 5265656);
allocate([46,46,0] /* ..\00 */, "i8", ALLOC_NONE, 5265664);
allocate([115,116,114,105,110,103,32,32,32,32,32,32,0] /* string      \00 */, "i8", ALLOC_NONE, 5265668);
allocate([116,114,117,101,116,121,112,101,32,102,111,110,116,115,0] /* truetype fonts\00 */, "i8", ALLOC_NONE, 5265684);
allocate([46,0] /* .\00 */, "i8", ALLOC_NONE, 5265700);
allocate([112,114,101,97,109,98,108,101,32,32,32,32,0] /* preamble    \00 */, "i8", ALLOC_NONE, 5265704);
allocate([46,105,115,116,0] /* .ist\00 */, "i8", ALLOC_NONE, 5265720);
allocate([99,111,109,109,101,110,116,32,32,32,32,32,0] /* comment     \00 */, "i8", ALLOC_NONE, 5265728);
allocate([73,78,68,69,88,83,84,89,76,69,0] /* INDEXSTYLE\00 */, "i8", ALLOC_NONE, 5265744);
allocate([37,115,58,32,111,112,116,105,111,110,32,96,37,115,39,32,105,115,32,97,109,98,105,103,117,111,117,115,10,0] /* %s: option `%s' is a */, "i8", ALLOC_NONE, 5265756);
allocate([115,116,114,105,110,103,115,32,32,32,32,32,0] /* strings     \00 */, "i8", ALLOC_NONE, 5265788);
allocate([84,69,88,73,78,68,69,88,83,84,89,76,69,0] /* TEXINDEXSTYLE\00 */, "i8", ALLOC_NONE, 5265804);
allocate([115,111,114,116,32,32,32,32,32,32,32,32,0] /* sort        \00 */, "i8", ALLOC_NONE, 5265820);
allocate([101,120,95,98,117,102,0] /* ex_buf\00 */, "i8", ALLOC_NONE, 5265836);
allocate([105,115,116,0] /* ist\00 */, "i8", ALLOC_NONE, 5265844);
allocate([116,101,120,45,107,64,116,117,103,46,111,114,103,0] /* tex-k@tug.org\00 */, "i8", ALLOC_NONE, 5265848);
allocate([114,101,118,101,114,115,101,32,32,32,32,32,0] /* reverse     \00 */, "i8", ALLOC_NONE, 5265864);
allocate([84,69,88,67,79,78,70,73,71,0] /* TEXCONFIG\00 */, "i8", ALLOC_NONE, 5265880);
allocate([108,115,45,82,0] /* ls-R\00 */, "i8", ALLOC_NONE, 5265892);
allocate([114,101,97,100,32,32,32,32,32,32,32,32,0] /* read        \00 */, "i8", ALLOC_NONE, 5265900);
allocate([112,114,111,103,95,110,97,109,101,95,101,110,100,32,38,38,32,112,114,111,103,95,118,101,114,115,105,111,110,0] /* prog_name_end && pro */, "i8", ALLOC_NONE, 5265916);
allocate([100,118,105,112,115,32,99,111,110,102,105,103,0] /* dvips config\00 */, "i8", ALLOC_NONE, 5265948);
allocate([46,10,0] /* .\0A\00 */, "i8", ALLOC_NONE, 5265964);
allocate([109,97,99,114,111,32,32,32,32,32,32,32,0] /* macro       \00 */, "i8", ALLOC_NONE, 5265968);
allocate([86,70,70,79,78,84,83,0] /* VFFONTS\00 */, "i8", ALLOC_NONE, 5265984);
allocate([73,78,80,85,84,0] /* INPUT\00 */, "i8", ALLOC_NONE, 5265992);
allocate([105,116,101,114,97,116,101,32,32,32,32,32,0] /* iterate     \00 */, "i8", ALLOC_NONE, 5266000);
allocate([118,102,0] /* vf\00 */, "i8", ALLOC_NONE, 5266016);
allocate([105,110,116,101,103,101,114,115,32,32,32,32,0] /* integers    \00 */, "i8", ALLOC_NONE, 5266020);
allocate([103,102,0] /* gf\00 */, "i8", ALLOC_NONE, 5266036);
allocate([46,112,102,98,0] /* .pfb\00 */, "i8", ALLOC_NONE, 5266040);
allocate([37,115,32,45,62,32,37,115,37,115,91,37,115,93,37,115,37,115,10,0] /* %s -_ %s%s[%s]%s%s\0 */, "i8", ALLOC_NONE, 5266048);
allocate([80,79,83,73,88,76,89,95,67,79,82,82,69,67,84,0] /* POSIXLY_CORRECT\00 */, "i8", ALLOC_NONE, 5266068);
allocate([102,117,110,99,116,105,111,110,32,32,32,32,0] /* function    \00 */, "i8", ALLOC_NONE, 5266084);
allocate([46,112,102,97,0] /* .pfa\00 */, "i8", ALLOC_NONE, 5266100);
allocate([101,120,101,99,117,116,101,32,32,32,32,32,0] /* execute     \00 */, "i8", ALLOC_NONE, 5266108);
allocate([84,49,73,78,80,85,84,83,0] /* T1INPUTS\00 */, "i8", ALLOC_NONE, 5266124);
allocate([101,110,116,114,121,32,32,32,32,32,32,32,0] /* entry       \00 */, "i8", ALLOC_NONE, 5266136);
allocate([84,49,70,79,78,84,83,0] /* T1FONTS\00 */, "i8", ALLOC_NONE, 5266152);
allocate([92,64,105,110,112,117,116,32,32,32,32,32,0] /* \5C@input     \00 */, "i8", ALLOC_NONE, 5266160);
allocate([116,121,112,101,49,32,102,111,110,116,115,0] /* type1 fonts\00 */, "i8", ALLOC_NONE, 5266176);
allocate([92,98,105,98,115,116,121,108,101,32,32,32,0] /* \5Cbibstyle   \00 */, "i8", ALLOC_NONE, 5266188);
allocate([115,118,95,98,117,102,102,101,114,0] /* sv_buffer\00 */, "i8", ALLOC_NONE, 5266204);
allocate([84,82,70,79,78,84,83,0] /* TRFONTS\00 */, "i8", ALLOC_NONE, 5266216);
allocate([92,98,105,98,100,97,116,97,32,32,32,32,0] /* \5Cbibdata    \00 */, "i8", ALLOC_NONE, 5266224);
allocate([47,117,115,114,123,47,108,111,99,97,108,44,125,47,115,104,97,114,101,47,103,114,111,102,102,47,123,99,117,114,114,101,110,116,47,102,111,110,116,44,115,105,116,101,45,102,111,110,116,125,47,100,101,118,112,115,0] /* /usr{/local,}/share/ */, "i8", ALLOC_NONE, 5266240);
allocate([108,115,45,82,32,104,97,115,104,32,116,97,98,108,101,58,0] /* ls-R hash table:\00 */, "i8", ALLOC_NONE, 5266300);
allocate([92,99,105,116,97,116,105,111,110,32,32,32,0] /* \5Ccitation   \00 */, "i8", ALLOC_NONE, 5266320);
allocate([84,114,111,102,102,32,102,111,110,116,115,0] /* Troff fonts\00 */, "i8", ALLOC_NONE, 5266336);
allocate([107,112,97,116,104,115,101,97,58,32,37,115,32,111,117,116,112,117,116,32,96,37,115,39,32,105,110,115,116,101,97,100,32,111,102,32,97,32,102,105,108,101,110,97,109,101,0] /* kpathsea: %s output  */, "i8", ALLOC_NONE, 5266348);
allocate([116,101,120,98,105,98,58,32,32,32,32,32,0] /* texbib:     \00 */, "i8", ALLOC_NONE, 5266396);
allocate([46,105,110,115,0] /* .ins\00 */, "i8", ALLOC_NONE, 5266412);
allocate([116,101,120,105,110,112,117,116,115,58,32,32,0] /* texinputs:  \00 */, "i8", ALLOC_NONE, 5266420);
allocate([46,100,116,120,0] /* .dtx\00 */, "i8", ALLOC_NONE, 5266436);
allocate([46,98,105,98,32,32,32,32,32,32,32,32,0] /* .bib        \00 */, "i8", ALLOC_NONE, 5266444);
allocate([84,69,88,83,79,85,82,67,69,83,0] /* TEXSOURCES\00 */, "i8", ALLOC_NONE, 5266460);
allocate([37,115,37,115,91,37,115,93,37,115,37,115,0] /* %s%s[%s]%s%s\00 */, "i8", ALLOC_NONE, 5266472);
allocate([37,115,58,32,111,112,116,105,111,110,32,96,45,87,32,37,115,39,32,100,111,101,115,110,39,116,32,97,108,108,111,119,32,97,110,32,97,114,103,117,109,101,110,116,10,0] /* %s: option `-W %s' d */, "i8", ALLOC_NONE, 5266488);
allocate([46,98,115,116,32,32,32,32,32,32,32,32,0] /* .bst        \00 */, "i8", ALLOC_NONE, 5266536);
allocate([84,101,88,32,115,121,115,116,101,109,32,115,111,117,114,99,101,115,0] /* TeX system sources\0 */, "i8", ALLOC_NONE, 5266552);
allocate([46,98,108,103,32,32,32,32,32,32,32,32,0] /* .blg        \00 */, "i8", ALLOC_NONE, 5266572);
allocate([84,69,88,80,79,79,76,0] /* TEXPOOL\00 */, "i8", ALLOC_NONE, 5266588);
allocate([46,98,98,108,32,32,32,32,32,32,32,32,0] /* .bbl        \00 */, "i8", ALLOC_NONE, 5266596);
allocate([116,101,120,112,111,111,108,0] /* texpool\00 */, "i8", ALLOC_NONE, 5266612);
allocate([46,97,117,120,32,32,32,32,32,32,32,32,0] /* .aux        \00 */, "i8", ALLOC_NONE, 5266620);
allocate([84,69,88,68,79,67,83,0] /* TEXDOCS\00 */, "i8", ALLOC_NONE, 5266636);
allocate([68,117,112,108,105,99,97,116,101,32,115,111,114,116,32,107,101,121,0] /* Duplicate sort key\0 */, "i8", ALLOC_NONE, 5266644);
allocate([98,117,102,102,101,114,0] /* buffer\00 */, "i8", ALLOC_NONE, 5266664);
allocate([84,101,88,32,115,121,115,116,101,109,32,100,111,99,117,109,101,110,116,97,116,105,111,110,0] /* TeX system documenta */, "i8", ALLOC_NONE, 5266672);
allocate([104,97,115,104,32,115,105,122,101,32,0] /* hash size \00 */, "i8", ALLOC_NONE, 5266700);
allocate([46,112,114,111,0] /* .pro\00 */, "i8", ALLOC_NONE, 5266712);
allocate([37,115,58,32,37,117,32,101,110,116,114,105,101,115,32,105,110,32,37,100,32,100,105,114,101,99,116,111,114,105,101,115,32,40,37,100,32,104,105,100,100,101,110,41,46,10,0] /* %s: %u entries in %d */, "i8", ALLOC_NONE, 5266720);
allocate([110,117,109,98,101,114,32,111,102,32,115,116,114,105,110,103,115,32,0] /* number of strings \0 */, "i8", ALLOC_NONE, 5266768);
allocate([107,112,97,116,104,115,101,97,58,32,118,97,114,105,97,98,108,101,32,96,37,115,39,32,114,101,102,101,114,101,110,99,101,115,32,105,116,115,101,108,102,32,40,101,118,101,110,116,117,97,108,108,121,41,0] /* kpathsea: variable ` */, "i8", ALLOC_NONE, 5266788);
allocate([80,83,72,69,65,68,69,82,83,0] /* PSHEADERS\00 */, "i8", ALLOC_NONE, 5266844);
allocate([119,97,114,110,105,110,103,58,32,0] /* warning: \00 */, "i8", ALLOC_NONE, 5266856);
allocate([32,45,45,32,0] /*  -- \00 */, "i8", ALLOC_NONE, 5266868);
allocate([84,69,88,80,83,72,69,65,68,69,82,83,0] /* TEXPSHEADERS\00 */, "i8", ALLOC_NONE, 5266876);
allocate([37,115,37,108,100,10,0] /* %s%ld\0A\00 */, "i8", ALLOC_NONE, 5266892);
allocate([80,111,115,116,83,99,114,105,112,116,32,104,101,97,100,101,114,0] /* PostScript header\00 */, "i8", ALLOC_NONE, 5266900);
allocate([32,105,110,32,97,108,108,44,32,97,114,101,58,0] /*  in all, are:\00 */, "i8", ALLOC_NONE, 5266920);
allocate([111,99,112,0] /* ocp\00 */, "i8", ALLOC_NONE, 5266936);
allocate([46,108,100,102,0] /* .ldf\00 */, "i8", ALLOC_NONE, 5266940);
allocate([91,37,115,93,37,115,37,115,32,45,62,32,91,37,115,93,37,115,37,115,10,0] /* [%s]%s%s -_ [%s]%s%s */, "i8", ALLOC_NONE, 5266948);
allocate([37,115,58,32,111,112,116,105,111,110,32,96,45,87,32,37,115,39,32,105,115,32,97,109,98,105,103,117,111,117,115,10,0] /* %s: option `-W %s' i */, "i8", ALLOC_NONE, 5266972);
allocate([97,110,100,32,116,104,101,32,98,117,105,108,116,95,105,110,32,102,117,110,99,116,105,111,110,45,99,97,108,108,32,99,111,117,110,116,115,44,32,0] /* and the built_in fun */, "i8", ALLOC_NONE, 5267008);
allocate([46,99,108,111,0] /* .clo\00 */, "i8", ALLOC_NONE, 5267048);
allocate([32,99,104,97,114,97,99,116,101,114,115,44,0] /*  characters,\00 */, "i8", ALLOC_NONE, 5267056);
allocate([46,100,101,102,0] /* .def\00 */, "i8", ALLOC_NONE, 5267072);
allocate([32,115,116,114,105,110,103,115,32,119,105,116,104,32,0] /*  strings with \00 */, "i8", ALLOC_NONE, 5267080);
allocate([46,98,98,108,0] /* .bbl\00 */, "i8", ALLOC_NONE, 5267096);
allocate([37,115,37,108,100,37,115,37,108,100,37,115,10,0] /* %s%ld%s%ld%s\0A\00 */, "i8", ALLOC_NONE, 5267104);
allocate([46,97,117,120,0] /* .aux\00 */, "i8", ALLOC_NONE, 5267120);
allocate([100,105,114,95,108,105,110,107,115,40,37,115,41,32,61,62,32,37,108,100,10,0] /* dir_links(%s) =_ %ld */, "i8", ALLOC_NONE, 5267128);
allocate([32,119,105,122,95,100,101,102,105,110,101,100,45,102,117,110,99,116,105,111,110,32,108,111,99,97,116,105,111,110,115,44,0] /*  wiz_defined-functio */, "i8", ALLOC_NONE, 5267152);
allocate([82,101,97,108,108,111,99,97,116,101,100,32,37,115,32,40,101,108,116,95,115,105,122,101,61,37,108,100,41,32,116,111,32,37,108,100,32,105,116,101,109,115,32,102,114,111,109,32,37,108,100,46,10,0] /* Reallocated %s (elt_ */, "i8", ALLOC_NONE, 5267188);
allocate([46,102,100,0] /* .fd\00 */, "i8", ALLOC_NONE, 5267244);
allocate([32,32,32,32,32,32,32,32,32,32,32,32,0] /*             \00 */, "i8", ALLOC_NONE, 5267248);
allocate([46,99,108,115,0] /* .cls\00 */, "i8", ALLOC_NONE, 5267264);
allocate([107,112,97,116,104,115,101,97,58,32,83,101,101,32,116,104,101,32,109,97,110,117,97,108,32,102,111,114,32,104,111,119,32,116,111,32,103,101,110,101,114,97,116,101,32,108,115,45,82,0] /* kpathsea: See the ma */, "i8", ALLOC_NONE, 5267272);
allocate([107,112,97,116,104,115,101,97,58,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,102,105,108,101,32,116,101,120,109,102,46,99,110,102,32,110,111,116,32,102,111,117,110,100,32,105,110,32,116,104,101,115,101,32,100,105,114,101,99,116,111,114,105,101,115,58,32,37,115,0] /* kpathsea: configurat */, "i8", ALLOC_NONE, 5267324);
allocate([37,115,37,108,100,37,115,10,0] /* %s%ld%s\0A\00 */, "i8", ALLOC_NONE, 5267400);
allocate([107,112,97,116,104,115,101,97,58,32,37,115,58,32,85,110,114,101,99,111,103,110,105,122,101,100,32,118,97,114,105,97,98,108,101,32,99,111,110,115,116,114,117,99,116,32,96,36,37,99,39,0] /* kpathsea: %s: Unreco */, "i8", ALLOC_NONE, 5267412);
allocate([46,115,116,121,0] /* .sty\00 */, "i8", ALLOC_NONE, 5267464);
allocate([107,112,97,116,104,115,101,97,58,32,114,101,97,100,40,41,0] /* kpathsea: read()\00 */, "i8", ALLOC_NONE, 5267472);
allocate([32,101,110,116,114,105,101,115,44,0] /*  entries,\00 */, "i8", ALLOC_NONE, 5267492);
allocate([46,116,101,120,0] /* .tex\00 */, "i8", ALLOC_NONE, 5267504);
allocate([32,101,110,116,114,121,44,0] /*  entry,\00 */, "i8", ALLOC_NONE, 5267512);
allocate([109,107,116,101,120,116,101,120,0] /* mktextex\00 */, "i8", ALLOC_NONE, 5267520);
allocate([89,111,117,39,118,101,32,117,115,101,100,32,0] /* You've used \00 */, "i8", ALLOC_NONE, 5267532);
allocate([111,102,109,0] /* ofm\00 */, "i8", ALLOC_NONE, 5267548);
allocate([46,101,112,115,105,0] /* .epsi\00 */, "i8", ALLOC_NONE, 5267552);
allocate([108,115,116,97,116,40,37,115,41,32,102,97,105,108,101,100,32,46,46,46,10,0] /* lstat(%s) failed ... */, "i8", ALLOC_NONE, 5267560);
allocate([37,115,58,32,111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,32,45,45,32,37,99,10,0] /* %s: option requires  */, "i8", ALLOC_NONE, 5267584);
allocate([85,110,107,110,111,119,110,32,116,121,112,101,32,111,102,32,99,97,115,101,32,99,111,110,118,101,114,115,105,111,110,0] /* Unknown type of case */, "i8", ALLOC_NONE, 5267624);
allocate([80,114,105,109,97,114,121,32,97,117,116,104,111,114,32,111,102,32,37,115,58,32,37,115,46,10,0] /* Primary author of %s */, "i8", ALLOC_NONE, 5267656);
allocate([46,101,112,115,0] /* .eps\00 */, "i8", ALLOC_NONE, 5267684);
allocate([34,32,105,115,110,39,116,32,97,32,98,114,97,99,101,45,98,97,108,97,110,99,101,100,32,115,116,114,105,110,103,0] /* \22 isn't a brace-ba */, "i8", ALLOC_NONE, 5267692);
allocate([84,69,88,73,78,80,85,84,83,0] /* TEXINPUTS\00 */, "i8", ALLOC_NONE, 5267724);
allocate([87,97,114,110,105,110,103,45,45,34,0] /* Warning--\22\00 */, "i8", ALLOC_NONE, 5267736);
allocate([84,69,88,80,73,67,84,83,0] /* TEXPICTS\00 */, "i8", ALLOC_NONE, 5267748);
allocate([42,80,108,101,97,115,101,32,110,111,116,105,102,121,32,116,104,101,32,98,105,98,115,116,121,108,101,32,100,101,115,105,103,110,101,114,42,0] /* _Please notify the b */, "i8", ALLOC_NONE, 5267760);
allocate([103,114,97,112,104,105,99,47,102,105,103,117,114,101,0] /* graphic/figure\00 */, "i8", ALLOC_NONE, 5267800);
allocate([45,115,116,114,105,110,103,45,115,105,122,101,44,0] /* -string-size,\00 */, "i8", ALLOC_NONE, 5267816);
allocate([42,80,108,101,97,115,101,32,110,111,116,105,102,121,32,116,104,101,32,66,105,98,84,101,88,32,109,97,105,110,116,97,105,110,101,114,42,0] /* _Please notify the B */, "i8", ALLOC_NONE, 5267832);
allocate([32,32,87,114,105,116,101,32,98,105,98,108,105,111,103,114,97,112,104,121,32,102,111,114,32,101,110,116,114,105,101,115,32,105,110,32,65,85,88,70,73,76,69,32,116,111,32,65,85,88,70,73,76,69,46,98,98,108,44,0] /*   Write bibliography */, "i8", ALLOC_NONE, 5267872);
allocate([85,115,97,103,101,58,32,98,105,98,116,101,120,32,91,79,80,84,73,79,78,93,46,46,46,32,65,85,88,70,73,76,69,91,46,97,117,120,93,0] /* Usage: bibtex [OPTIO */, "i8", ALLOC_NONE, 5267932);
allocate(468, "i8", ALLOC_NONE, 5267972);
allocate(4, "i8", ALLOC_NONE, 5268440);
allocate([120,102,111,112,101,110,0] /* xfopen\00 */, "i8", ALLOC_NONE, 5268444);
allocate([120,102,99,108,111,115,101,0] /* xfclose\00 */, "i8", ALLOC_NONE, 5268452);
allocate([115,101,116,95,109,97,107,101,116,101,120,95,109,97,103,0] /* set_maketex_mag\00 */, "i8", ALLOC_NONE, 5268460);
allocate([112,114,105,110,116,118,101,114,115,105,111,110,97,110,100,101,120,105,116,0] /* printversionandexit\ */, "i8", ALLOC_NONE, 5268476);
allocate([107,112,97,116,104,115,101,97,95,118,97,114,95,118,97,108,117,101,0] /* kpathsea_var_value\0 */, "i8", ALLOC_NONE, 5268496);
allocate([107,112,97,116,104,115,101,97,95,116,105,108,100,101,95,101,120,112,97,110,100,0] /* kpathsea_tilde_expan */, "i8", ALLOC_NONE, 5268516);
allocate([107,112,97,116,104,115,101,97,95,102,105,110,100,95,102,105,108,101,95,103,101,110,101,114,105,99,0] /* kpathsea_find_file_g */, "i8", ALLOC_NONE, 5268540);
allocate([107,112,97,116,104,115,101,97,95,101,120,112,97,110,100,95,100,101,102,97,117,108,116,0] /* kpathsea_expand_defa */, "i8", ALLOC_NONE, 5268568);
allocate([107,112,97,116,104,115,101,97,95,99,110,102,95,103,101,116,0] /* kpathsea_cnf_get\00 */, "i8", ALLOC_NONE, 5268592);
allocate([102,110,95,115,104,114,105,110,107,95,116,111,0] /* fn_shrink_to\00 */, "i8", ALLOC_NONE, 5268612);
allocate([102,110,95,102,114,101,101,0] /* fn_free\00 */, "i8", ALLOC_NONE, 5268628);
allocate([101,108,101,109,101,110,116,0] /* element\00 */, "i8", ALLOC_NONE, 5268636);
allocate([100,111,95,115,117,98,100,105,114,0] /* do_subdir\00 */, "i8", ALLOC_NONE, 5268644);
allocate(2048, "i8", ALLOC_NONE, 5268656);
allocate(2048, "i8", ALLOC_NONE, 5270704);
allocate(32, "i8", ALLOC_NONE, 5272752);
HEAP32[((5243416)>>2)]=((5257316)|0);
HEAP32[((5243748)>>2)]=((5260692)|0);
HEAP32[((5243752)>>2)]=((5260668)|0);
HEAP32[((5248388)>>2)]=((5254604)|0);
HEAP32[((5251120)>>2)]=((5265892)|0);
HEAP32[((5251124)>>2)]=((5265532)|0);
HEAP32[((5272752)>>2)]=((5267932)|0);
HEAP32[((5272756)>>2)]=((5267872)|0);
HEAP32[((5272760)>>2)]=((5263552)|0);
HEAP32[((5272764)>>2)]=((5259260)|0);
HEAP32[((5272768)>>2)]=((5257348)|0);
HEAP32[((5272772)>>2)]=((5256340)|0);
HEAP32[((5272776)>>2)]=((5255680)|0);

  
  
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var _stdin=allocate(1, "i32*", ALLOC_STACK);
  
  var _stdout=allocate(1, "i32*", ALLOC_STACK);
  
  var _stderr=allocate(1, "i32*", ALLOC_STACK);
  
  var __impure_ptr=allocate(1, "i32*", ALLOC_STACK);var FS={currentPath:"/",nextInode:2,streams:[null],checkStreams:function () {
        for (var i in FS.streams) if (FS.streams.hasOwnProperty(i)) assert(i >= 0 && i < FS.streams.length); // no keys not in dense span
        for (var i = 0; i < FS.streams.length; i++) assert(typeof FS.streams[i] == 'object'); // no non-null holes in dense span
      },ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
  
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function(chunkSize, length) {
            this.length = length;
            this.chunkSize = chunkSize;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % chunkSize;
            var chunkNum = Math.floor(idx / chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
    
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
          if (!hasByteServing) chunkSize = datalength;
    
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
    
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
    
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
    
          var lazyArray = new LazyUint8Array(chunkSize, datalength);
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * lazyArray.chunkSize;
            var end = (chunkNum+1) * lazyArray.chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.ensureObjects();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
  
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
  
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        assert(Math.max(_stdin, _stdout, _stderr) < 128); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        FS.checkStreams();
        assert(FS.streams.length < 1024); // at this early stage, we should not have a large set of file descriptors - just a few
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[((buf)+(i))];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[((buf)+(i))]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[(_fputc.ret)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return chr;
      }
    }var _putc;

  
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]|0 != 0) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }

  
  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],HEAPF64[(tempDoublePtr)>>3]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[(textIndex+1)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[(textIndex+1)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[(textIndex+1)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[(textIndex+1)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[(textIndex+1)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[(textIndex+1)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[(textIndex+1)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[(textIndex+1)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (argSize == 8 && i64Math) argText = (origArg[1]>>>0).toString(16) + (origArg[0]>>>0).toString(16); else
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || nullString;
            var argLength = _strlen(arg);
            if (precisionSet) argLength = Math.min(argLength, precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[(arg++)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  
  
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[(buf++)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        if (contents.subarray || contents.slice) { // typed array or normal array
          for (var i = 0; i < size; i++) {
            HEAP8[((buf)+(i))]=contents[offset + i]
          }
        } else {
          for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
            HEAP8[((buf)+(i))]=contents.get(offset + i)
          }
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[(buf++)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[((buf)+(i))]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!FS.streams[stream]) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _read(stream, _fgetc.ret, 1);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[(_fgetc.ret)];
      }
    }var _getc;

  function _longjmp(env, value) {
      throw { longjmp: true, id: HEAP32[((env)>>2)], value: value || 1 };
    }


  function _strcpy(pdest, psrc) {
      var i = 0;
      do {
        HEAP8[(pdest+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[((psrc)+(i-1))] != 0);
      return pdest;
    }

  
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[((px)+(i))];
        var y = HEAPU8[((py)+(i))];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }

  
  
  
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == '0'.charCodeAt(0)) {
          if (HEAP8[(str+1)] == 'x'.charCodeAt(0) ||
              HEAP8[(str+1)] == 'X'.charCodeAt(0)) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        return (tempRet0 = Math.min(Math.floor((ret)/4294967296), 4294967295)>>>0,ret>>>0);
      }
  
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }
var _setjmp; // stub for _setjmp

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      return Number(FS.streams[stream] && FS.streams[stream].eof);
    }

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      if (FS.streams[stream]) {
        c = unSign(c & 0xFF);
        FS.streams[stream].ungotten.push(c);
        return c;
      } else {
        return -1;
      }
    }

  
  
  var ___dirent_struct_layout={__size__:1040,d_ino:0,d_name:4,d_off:1028,d_reclen:1032,d_type:1036};function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather that strictly
      // following the POSIX standard.
  
      var mode = HEAP32[((varargs)>>2)];
  
      // Simplify flags.
      var accessMode = oflag & 3;
      var isWrite = accessMode != 0;
      var isRead = accessMode != 1;
      var isCreate = Boolean(oflag & 512);
      var isExistCheck = Boolean(oflag & 2048);
      var isTruncate = Boolean(oflag & 1024);
      var isAppend = Boolean(oflag & 8);
  
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
  
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isCreate || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id = FS.streams.length; // Keep dense
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        FS.streams[id] = {
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        };
      } else {
        FS.streams[id] = {
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        };
      }
      FS.checkStreams();
      return id;
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        FS.streams[fildes] = null;
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }

  
  function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc('\n'.charCodeAt(0), stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }
  
  
  
  var ERRNO_MESSAGES={1:"Operation not permitted",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"Input/output error",6:"No such device or address",8:"Exec format error",9:"Bad file descriptor",10:"No child processes",11:"Resource temporarily unavailable",12:"Cannot allocate memory",13:"Permission denied",14:"Bad address",16:"Device or resource busy",17:"File exists",18:"Invalid cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Inappropriate ioctl for device",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read-only file system",31:"Too many links",32:"Broken pipe",33:"Numerical argument out of domain",34:"Numerical result out of range",35:"Resource deadlock avoided",36:"File name too long",37:"No locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many levels of symbolic links",42:"No message of desired type",43:"Identifier removed",60:"Device not a stream",61:"No data available",62:"Timer expired",63:"Out of streams resources",67:"Link has been severed",71:"Protocol error",72:"Multihop attempted",74:"Bad message",75:"Value too large for defined data type",84:"Invalid or incomplete multibyte or wide character",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Protocol not supported",95:"Operation not supported",97:"Address family not supported by protocol",98:"Address already in use",99:"Cannot assign requested address",100:"Network is down",101:"Network is unreachable",102:"Network dropped connection on reset",103:"Software caused connection abort",104:"Connection reset by peer",105:"No buffer space available",106:"Transport endpoint is already connected",107:"Transport endpoint is not connected",110:"Connection timed out",111:"Connection refused",113:"No route to host",114:"Operation already in progress",115:"Operation now in progress",116:"Stale NFS file handle",122:"Disk quota exceeded",125:"Operation canceled",130:"Owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[((strerrbuf)+(i))]=msg.charCodeAt(i)
          }
          HEAP8[((strerrbuf)+(i))]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  
  function ___errno_location() {
      return ___setErrNo.ret;
    }function _perror(s) {
      // void perror(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
      if (s) {
        _puts(s);
        _putc(':'.charCodeAt(0));
        _putc(' '.charCodeAt(0));
      }
      var errnum = HEAP32[((___errno_location())>>2)];
      _puts(_strerror(errnum));
    }

  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      var flush = function(filedes) {
        // Right now we write all data directly, except for output devices.
        if (FS.streams[filedes] && FS.streams[filedes].object.output) {
          if (!FS.streams[filedes].isTerminal) { // don't flush terminals, it would cause a \n to also appear
            FS.streams[filedes].object.output(null);
          }
        }
      };
      try {
        if (stream === 0) {
          for (var i = 0; i < FS.streams.length; i++) if (FS.streams[i]) flush(i);
        } else {
          flush(stream);
        }
        return 0;
      } catch (e) {
        ___setErrNo(ERRNO_CODES.EIO);
        return -1;
      }
    }

  
  function _getgid() {
      // gid_t getgid(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getgid.html
      // We have just one process/group/user, all with ID 0.
      return 0;
    }var _getpid;

  
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[((s)+(i))]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[((s)+(i))]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  function _strcat(pdest, psrc) {
      var len = _strlen(pdest);
      var i = 0;
      do {
        HEAP8[(pdest+len+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[((psrc)+(i-1))] != 0);
      return pdest;
    }

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }

  function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP8[(ptr2)] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }

  function ___assert_func(filename, line, func, condition) {
      throw 'Assertion failed: ' + (condition ? Pointer_stringify(condition) : 'unknown condition') + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + new Error().stack;
    }

  function _strncpy(pdest, psrc, num) {
      var padding = false, curr;
      for (var i = 0; i < num; i++) {
        curr = padding ? 0 : HEAP8[((psrc)+(i))];
        HEAP8[((pdest)+(i))]=curr
        padding = padding || HEAP8[((psrc)+(i))] == 0;
      }
      return pdest;
    }

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }


  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
  
  
      exitRuntime();
      ABORT = true;
  
      throw 'exit(' + status + ') called, at ' + new Error().stack;
    }function _exit(status) {
      __exit(status);
    }


  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STACK);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        for (var j = 0; j < line.length; j++) {
          HEAP8[((poolPtr)+(j))]=line.charCodeAt(j);
        }
        HEAP8[((poolPtr)+(j))]=0;
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  
  var ___stat_struct_layout={__size__:72,st_dev:0,st_ino:4,st_mode:8,st_nlink:12,st_uid:16,st_gid:20,st_rdev:24,st_size:28,st_atime:32,st_spare1:36,st_mtime:40,st_spare2:44,st_ctime:48,st_spare3:52,st_blksize:56,st_blocks:60,st_spare4:64};function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      var obj = FS.findObject(Pointer_stringify(path), dontResolveLastLink);
      if (obj === null || !FS.forceLoadFile(obj)) return -1;
  
      var offsets = ___stat_struct_layout;
  
      // Constants.
      HEAP32[(((buf)+(offsets.st_nlink))>>2)]=1
      HEAP32[(((buf)+(offsets.st_uid))>>2)]=0
      HEAP32[(((buf)+(offsets.st_gid))>>2)]=0
      HEAP32[(((buf)+(offsets.st_blksize))>>2)]=4096
  
      // Variables.
      HEAP32[(((buf)+(offsets.st_ino))>>2)]=obj.inodeNumber
      var time = Math.floor(obj.timestamp / 1000);
      if (offsets.st_atime === undefined) {
        offsets.st_atime = offsets.st_atim.tv_sec;
        offsets.st_mtime = offsets.st_mtim.tv_sec;
        offsets.st_ctime = offsets.st_ctim.tv_sec;
        var nanosec = (obj.timestamp % 1000) * 1000;
        HEAP32[(((buf)+(offsets.st_atim.tv_nsec))>>2)]=nanosec
        HEAP32[(((buf)+(offsets.st_mtim.tv_nsec))>>2)]=nanosec
        HEAP32[(((buf)+(offsets.st_ctim.tv_nsec))>>2)]=nanosec
      }
      HEAP32[(((buf)+(offsets.st_atime))>>2)]=time
      HEAP32[(((buf)+(offsets.st_mtime))>>2)]=time
      HEAP32[(((buf)+(offsets.st_ctime))>>2)]=time
      var mode = 0;
      var size = 0;
      var blocks = 0;
      var dev = 0;
      var rdev = 0;
      if (obj.isDevice) {
        //  Device numbers reuse inode numbers.
        dev = rdev = obj.inodeNumber;
        size = blocks = 0;
        mode = 0x2000;  // S_IFCHR.
      } else {
        dev = 1;
        rdev = 0;
        // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
        //       but this is not required by the standard.
        if (obj.isFolder) {
          size = 4096;
          blocks = 1;
          mode = 0x4000;  // S_IFDIR.
        } else {
          var data = obj.contents || obj.link;
          size = data.length;
          blocks = Math.ceil(data.length / 4096);
          mode = obj.link === undefined ? 0x8000 : 0xA000;  // S_IFREG, S_IFLNK.
        }
      }
      HEAP32[(((buf)+(offsets.st_dev))>>2)]=dev;
      HEAP32[(((buf)+(offsets.st_rdev))>>2)]=rdev;
      HEAP32[(((buf)+(offsets.st_size))>>2)]=size
      HEAP32[(((buf)+(offsets.st_blocks))>>2)]=blocks
      if (obj.read) mode |= 0x16D;  // S_IRUSR | S_IXUSR | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH.
      if (obj.write) mode |= 0x92;  // S_IWUSR | S_IWGRP | S_IWOTH.
      HEAP32[(((buf)+(offsets.st_mode))>>2)]=mode
  
      return 0;
    }

  function _lstat(path, buf) {
      // int lstat(const char *path, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/lstat.html
      return _stat(path, buf, true);
    }

  function _readlink(path, buf, bufsize) {
      // ssize_t readlink(const char *restrict path, char *restrict buf, size_t bufsize);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/readlink.html
      var target = FS.findObject(Pointer_stringify(path), true);
      if (target === null) return -1;
      if (target.link !== undefined) {
        var length = Math.min(bufsize - 1, target.link.length);
        for (var i = 0; i < length; i++) {
          HEAP8[((buf)+(i))]=target.link.charCodeAt(i)
        }
        if (bufsize - 1 > length) HEAP8[((buf)+(i))]=0
        return i;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
    }
var _llvm_va_start; // stub for _llvm_va_start

  function _llvm_va_end() {}

  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[(ptr1++)];
        var curr2 = HEAP8[(check++)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }

  var _llvm_memcpy_p0i8_p0i8_i32;

  function _isalnum(chr) {
      return (chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0)) ||
             (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0));
    }



  function _pipe(fildes) {
      // int pipe(int fildes[2]);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/pipe.html
      // It is possible to implement this using two device streams, but pipes make
      // little sense in a single-threaded environment, so we do not support them.
      ___setErrNo(ERRNO_CODES.ENOSYS);
      return -1;
    }

  function _fork() {
      // pid_t fork(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fork.html
      // We don't support multiple processes.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }


  
  
  var ___flock_struct_layout=null;function _fcntl(fildes, cmd, varargs, dup2) {
      // int fcntl(int fildes, int cmd, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html
      if (!FS.streams[fildes]) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      var stream = FS.streams[fildes];
      switch (cmd) {
        case 0:
          var arg = HEAP32[((varargs)>>2)];
          if (arg < 0) {
            ___setErrNo(ERRNO_CODES.EINVAL);
            return -1;
          }
          var newStream = {};
          for (var member in stream) {
            newStream[member] = stream[member];
          }
          arg = dup2 ? arg : Math.max(arg, FS.streams.length); // dup2 wants exactly arg; fcntl wants a free descriptor >= arg
          for (var i = FS.streams.length; i < arg; i++) {
            FS.streams[i] = null; // Keep dense
          }
          FS.streams[arg] = newStream;
          FS.checkStreams();
          return arg;
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          var flags = 0;
          if (stream.isRead && stream.isWrite) flags = 2;
          else if (!stream.isRead && stream.isWrite) flags = 1;
          else if (stream.isRead && !stream.isWrite) flags = 0;
          if (stream.isAppend) flags |= 8;
          // Synchronization and blocking flags are irrelevant to us.
          return flags;
        case 4:
          var arg = HEAP32[((varargs)>>2)];
          stream.isAppend = Boolean(arg | 8);
          // Synchronization and blocking flags are irrelevant to us.
          return 0;
        case 7:
        case 20:
          var arg = HEAP32[((varargs)>>2)];
          var offset = ___flock_struct_layout.l_type;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=3
          return 0;
        case 8:
        case 9:
        case 21:
        case 22:
          // Pretend that the locking is successful.
          return 0;
        case 6:
        case 5:
          // These are for sockets. We don't have them fully implemented yet.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default:
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
      }
      // Should never be reached. Only to silence strict warnings.
      return -1;
    }function _dup(fildes) {
      // int dup(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/dup.html
      return _fcntl(fildes, 0, allocate([0, 0, 0, 0], 'i32', ALLOC_STACK));  // F_DUPFD.
    }

  
  function _execl(/* ... */) {
      // int execl(const char *path, const char *arg0, ... /*, (char *)0 */);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/exec.html
      // We don't support executing external code.
      ___setErrNo(ERRNO_CODES.ENOEXEC);
      return -1;
    }var _execvp;



  var ___errno;

  function _wait(stat_loc) {
      // pid_t wait(int *stat_loc);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/wait.html
      // Makes no sense in a single-process environment.
      ___setErrNo(ERRNO_CODES.ECHILD);
      return -1;
    }

  function _islower(chr) {
      return chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0);
    }

  function _toupper(chr) {
      if (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) {
        return chr - 'a'.charCodeAt(0) + 'A'.charCodeAt(0);
      } else {
        return chr;
      }
    }

  function _getcwd(buf, size) {
      // char *getcwd(char *buf, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getcwd.html
      if (size == 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      } else if (size < FS.currentPath.length + 1) {
        ___setErrNo(ERRNO_CODES.ERANGE);
        return 0;
      } else {
        for (var i = 0; i < FS.currentPath.length; i++) {
          HEAP8[((buf)+(i))]=FS.currentPath.charCodeAt(i)
        }
        HEAP8[((buf)+(i))]=0
        return buf;
      }
    }

  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }


  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  function _access(path, amode) {
      // int access(const char *path, int amode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/access.html
      path = Pointer_stringify(path);
      var target = FS.findObject(path);
      if (target === null) return -1;
      if ((amode & 2 && !target.write) ||  // W_OK.
          ((amode & 1 || amode & 4) && !target.read)) {  // X_OK, R_OK.
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else {
        return 0;
      }
    }

  function _getpwnam() { throw 'getpwnam: TODO' }

  
  function _memmove(dest, src, num, align) {
      if (src < dest && dest < src + num) {
        // Copy backwards in a safe manner
        src += num;
        dest += num;
        while (num--) {
          dest--;
          src--;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num);
      }
    }var _llvm_memmove_p0i8_p0i8_i32;

  function _opendir(dirname) {
      // DIR *opendir(const char *dirname);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/opendir.html
      // NOTE: Calculating absolute path redundantly since we need to associate it
      //       with the opened stream.
      var path = FS.absolutePath(Pointer_stringify(dirname));
      if (path === null) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      var target = FS.findObject(path);
      if (target === null) return 0;
      if (!target.isFolder) {
        ___setErrNo(ERRNO_CODES.ENOTDIR);
        return 0;
      } else if (!target.read) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return 0;
      }
      var id = FS.streams.length; // Keep dense
      var contents = [];
      for (var key in target.contents) contents.push(key);
      FS.streams[id] = {
        path: path,
        object: target,
        // An index into contents. Special values: -2 is ".", -1 is "..".
        position: -2,
        isRead: true,
        isWrite: false,
        isAppend: false,
        error: false,
        eof: false,
        ungotten: [],
        // Folder-specific properties:
        // Remember the contents at the time of opening in an array, so we can
        // seek between them relying on a single order.
        contents: contents,
        // Each stream has its own area for readdir() returns.
        currentEntry: _malloc(___dirent_struct_layout.__size__)
      };
      FS.checkStreams();
      return id;
    }

  
  function _readdir_r(dirp, entry, result) {
      // int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      if (!FS.streams[dirp] || !FS.streams[dirp].object.isFolder) {
        return ___setErrNo(ERRNO_CODES.EBADF);
      }
      var stream = FS.streams[dirp];
      var loc = stream.position;
      var entries = 0;
      for (var key in stream.contents) entries++;
      if (loc < -2 || loc >= entries) {
        HEAP32[((result)>>2)]=0
      } else {
        var name, inode, type;
        if (loc === -2) {
          name = '.';
          inode = 1;  // Really undefined.
          type = 4; //DT_DIR
        } else if (loc === -1) {
          name = '..';
          inode = 1;  // Really undefined.
          type = 4; //DT_DIR
        } else {
          var object;
          name = stream.contents[loc];
          object = stream.object.contents[name];
          inode = object.inodeNumber;
          type = object.isDevice ? 2 // DT_CHR, character device.
                : object.isFolder ? 4 // DT_DIR, directory.
                : object.link !== undefined ? 10 // DT_LNK, symbolic link.
                : 8; // DT_REG, regular file.
        }
        stream.position++;
        var offsets = ___dirent_struct_layout;
        HEAP32[(((entry)+(offsets.d_ino))>>2)]=inode
        HEAP32[(((entry)+(offsets.d_off))>>2)]=stream.position
        HEAP32[(((entry)+(offsets.d_reclen))>>2)]=name.length + 1
        for (var i = 0; i < name.length; i++) {
          HEAP8[((entry + offsets.d_name)+(i))]=name.charCodeAt(i)
        }
        HEAP8[((entry + offsets.d_name)+(i))]=0
        HEAP8[((entry)+(offsets.d_type))]=type
        HEAP32[((result)>>2)]=entry
      }
      return 0;
    }function _readdir(dirp) {
      // struct dirent *readdir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      if (!FS.streams[dirp] || !FS.streams[dirp].object.isFolder) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      } else {
        if (!_readdir.result) _readdir.result = _malloc(4);
        _readdir_r(dirp, FS.streams[dirp].currentEntry, _readdir.result);
        if (HEAP32[((_readdir.result)>>2)] === 0) {
          return 0;
        } else {
          return FS.streams[dirp].currentEntry;
        }
      }
    }

  function _closedir(dirp) {
      // int closedir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/closedir.html
      if (!FS.streams[dirp] || !FS.streams[dirp].object.isFolder) {
        return ___setErrNo(ERRNO_CODES.EBADF);
      } else {
        _free(FS.streams[dirp].currentEntry);
        FS.streams[dirp] = null;
        return 0;
      }
    }
var _llvm_expect_i32; // stub for _llvm_expect_i32

  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }


  function _memset(ptr, value, num, align) {
      // TODO: make these settings, and in memcpy, {{'s
      if (num >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        var stop = ptr + num;
        while (ptr % 4) { // no need to check for stop, since we have large num
          HEAP8[ptr++] = value;
        }
        if (value < 0) value += 256; // make it unsigned
        var ptr4 = ptr >> 2, stop4 = stop >> 2, value4 = value | (value << 8) | (value << 16) | (value << 24);
        while (ptr4 < stop4) {
          HEAP32[ptr4++] = value4;
        }
        ptr = ptr4 << 2;
        while (ptr < stop) {
          HEAP8[ptr++] = value;
        }
      } else {
        while (num--) {
          HEAP8[ptr++] = value;
        }
      }
    }



  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],ensureObjects:function () {
        if (Browser.ensured) return;
        Browser.ensured = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
  
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.jpg': 1, '.png': 1, '.bmp': 1 };
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
      },createContext:function (canvas, useWebGL, setInModule) {
        try {
          var ctx = canvas.getContext(useWebGL ? 'experimental-webgl' : '2d');
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },requestFullScreen:function () {
        var canvas = Module['canvas'];
        function fullScreenChange() {
          var isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.requestPointerLock();
            isFullScreen = true;
          }
          if (Module['onFullScreen']) Module['onFullScreen'](isFullScreen);
        }
  
        document.addEventListener('fullscreenchange', fullScreenChange, false);
        document.addEventListener('mozfullscreenchange', fullScreenChange, false);
        document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      }};
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___setErrNo(0);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
___buildEnvironment(ENV);
Module["requestFullScreen"] = function() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  


var FUNCTION_TABLE = [0, 0];

function _markfatal() {
  var label = 0;

  HEAP8[(5248744)]=3;

  return;
}


function _markwarning() {
  var label = 0;

  var $0=HEAP8[(5248744)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)==1;
  if ($cmp) {
    var $1=HEAP32[((5251068)>>2)];
    var $add=((($1)+(1))|0);
    HEAP32[((5251068)>>2)]=$add;

    return;
  }
  var $2=HEAP8[(5248744)];
  var $conv2=(($2)&255);
  var $cmp3=(($conv2)|0)==0;
  if ($cmp3) {
    HEAP8[(5248744)]=1;
    HEAP32[((5251068)>>2)]=1;
  }

  return;
}


function _markerror() {
  var label = 0;

  var $0=HEAP8[(5248744)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0) < 2;
  if ($cmp) {
    HEAP8[(5248744)]=2;
    HEAP32[((5251068)>>2)]=1;

    return;
  } else {
    var $1=HEAP32[((5251068)>>2)];
    var $add=((($1)+(1))|0);
    HEAP32[((5251068)>>2)]=$add;

    return;
  }
}


function _printanewline() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputc(10, $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputc(10, $1);

  return;
}


function _printoverflow() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5255084)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5255084)|0), $1);
  _markfatal();

  return;
}


function _printconfusion() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243908)>>2)];
  var $call=_fprintf($0, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5253476)|0),tempInt));
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fprintf($1, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5253476)|0),tempInt));
  var $2=HEAP32[((5243908)>>2)];
  var $call2=_fprintf($2, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5267832)|0),tempInt));
  var $3=HEAP32[((5243524)>>2)];
  var $call3=_fprintf($3, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5267832)|0),tempInt));
  _markfatal();
  STACKTOP = __stackBase__;
  return;
}


function _bufferoverflow() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243908)>>2)];
  var $1=HEAP32[((5252240)>>2)];
  var $add=((($1)+(20000))|0);
  var $2=HEAP32[((5252240)>>2)];
  var $call=_fprintf($0, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5266664)|0),HEAP32[(((tempInt)+(4))>>2)]=1,HEAP32[(((tempInt)+(8))>>2)]=$add,HEAP32[(((tempInt)+(12))>>2)]=$2,tempInt));
  var $3=HEAP32[((5252252)>>2)];
  var $4=HEAP32[((5252240)>>2)];
  var $add1=((($4)+(20000))|0);
  var $add2=((($add1)+(1))|0);
  var $mul=(($add2)&-1);
  var $call3=_xrealloc($3, $mul);
  HEAP32[((5252252)>>2)]=$call3;
  var $5=HEAP32[((5243908)>>2)];
  var $6=HEAP32[((5252240)>>2)];
  var $add4=((($6)+(20000))|0);
  var $7=HEAP32[((5252240)>>2)];
  var $call5=_fprintf($5, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5266204)|0),HEAP32[(((tempInt)+(4))>>2)]=1,HEAP32[(((tempInt)+(8))>>2)]=$add4,HEAP32[(((tempInt)+(12))>>2)]=$7,tempInt));
  var $8=HEAP32[((5243484)>>2)];
  var $9=HEAP32[((5252240)>>2)];
  var $add6=((($9)+(20000))|0);
  var $add7=((($add6)+(1))|0);
  var $mul8=(($add7)&-1);
  var $call9=_xrealloc($8, $mul8);
  HEAP32[((5243484)>>2)]=$call9;
  var $10=HEAP32[((5243908)>>2)];
  var $11=HEAP32[((5252240)>>2)];
  var $add10=((($11)+(20000))|0);
  var $12=HEAP32[((5252240)>>2)];
  var $call11=_fprintf($10, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5265836)|0),HEAP32[(((tempInt)+(4))>>2)]=1,HEAP32[(((tempInt)+(8))>>2)]=$add10,HEAP32[(((tempInt)+(12))>>2)]=$12,tempInt));
  var $13=HEAP32[((5251064)>>2)];
  var $14=HEAP32[((5252240)>>2)];
  var $add12=((($14)+(20000))|0);
  var $add13=((($add12)+(1))|0);
  var $mul14=(($add13)&-1);
  var $call15=_xrealloc($13, $mul14);
  HEAP32[((5251064)>>2)]=$call15;
  var $15=HEAP32[((5243908)>>2)];
  var $16=HEAP32[((5252240)>>2)];
  var $add16=((($16)+(20000))|0);
  var $17=HEAP32[((5252240)>>2)];
  var $call17=_fprintf($15, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5265492)|0),HEAP32[(((tempInt)+(4))>>2)]=1,HEAP32[(((tempInt)+(8))>>2)]=$add16,HEAP32[(((tempInt)+(12))>>2)]=$17,tempInt));
  var $18=HEAP32[((5243720)>>2)];
  var $19=HEAP32[((5252240)>>2)];
  var $add18=((($19)+(20000))|0);
  var $add19=((($add18)+(1))|0);
  var $mul20=(($add19)&-1);
  var $call21=_xrealloc($18, $mul20);
  HEAP32[((5243720)>>2)]=$call21;
  var $20=HEAP32[((5243908)>>2)];
  var $21=HEAP32[((5252240)>>2)];
  var $add22=((($21)+(20000))|0);
  var $22=HEAP32[((5252240)>>2)];
  var $call23=_fprintf($20, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5265192)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add22,HEAP32[(((tempInt)+(12))>>2)]=$22,tempInt));
  var $23=HEAP32[((5243816)>>2)];
  var $24=$23;
  var $25=HEAP32[((5252240)>>2)];
  var $add24=((($25)+(20000))|0);
  var $add25=((($add24)+(1))|0);
  var $mul26=((($add25<<2))&-1);
  var $call27=_xrealloc($24, $mul26);
  var $26=$call27;
  HEAP32[((5243816)>>2)]=$26;
  var $27=HEAP32[((5243908)>>2)];
  var $28=HEAP32[((5252240)>>2)];
  var $add28=((($28)+(20000))|0);
  var $29=HEAP32[((5252240)>>2)];
  var $call29=_fprintf($27, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264888)|0),HEAP32[(((tempInt)+(4))>>2)]=1,HEAP32[(((tempInt)+(8))>>2)]=$add28,HEAP32[(((tempInt)+(12))>>2)]=$29,tempInt));
  var $30=HEAP32[((5243820)>>2)];
  var $31=HEAP32[((5252240)>>2)];
  var $add30=((($31)+(20000))|0);
  var $add31=((($add30)+(1))|0);
  var $mul32=(($add31)&-1);
  var $call33=_xrealloc($30, $mul32);
  HEAP32[((5243820)>>2)]=$call33;
  var $32=HEAP32[((5252240)>>2)];
  var $add34=((($32)+(20000))|0);
  HEAP32[((5252240)>>2)]=$add34;
  STACKTOP = __stackBase__;
  return;
}
_bufferoverflow["X"]=1;

function _zinputln($f) {
  var label = 0;

  var $f_addr;
  var $Result;
  $f_addr=$f;
  HEAP32[((5244208)>>2)]=0;
  var $0=$f_addr;
  var $call=_eof($0);
  var $tobool=(($call)|0)!=0;
  if ($tobool) {
    $Result=0;
    var $16=$Result;

    return $16;
  }
  while(1) {
    var $1=$f_addr;
    var $call1=_eoln($1);
    var $tobool2=(($call1)|0)!=0;
    var $lnot=$tobool2 ^ 1;
    if (!($lnot)) {
      break;
    }
    var $2=HEAP32[((5244208)>>2)];
    var $3=HEAP32[((5252240)>>2)];
    var $cmp=(($2)|0) >= (($3)|0);
    if ($cmp) {
      _bufferoverflow();
    }
    var $4=$f_addr;
    var $call4=_fgetc($4);
    var $arrayidx=((5242880+$call4)|0);
    var $5=HEAP8[($arrayidx)];
    var $6=HEAP32[((5244208)>>2)];
    var $7=HEAP32[((5252252)>>2)];
    var $arrayidx5=(($7+$6)|0);
    HEAP8[($arrayidx5)]=$5;
    var $8=HEAP32[((5244208)>>2)];
    var $add=((($8)+(1))|0);
    HEAP32[((5244208)>>2)]=$add;
  }
  var $9=$f_addr;
  var $call6=_fgetc($9);
  while(1) {
    var $10=HEAP32[((5244208)>>2)];
    var $cmp8=(($10)|0) > 0;
    if (!($cmp8)) {
      label = 35;
      break;
    }
    var $11=HEAP32[((5244208)>>2)];
    var $sub=((($11)-(1))|0);
    var $12=HEAP32[((5252252)>>2)];
    var $arrayidx10=(($12+$sub)|0);
    var $13=HEAP8[($arrayidx10)];
    var $idxprom=(($13)&255);
    var $arrayidx11=((5243932+$idxprom)|0);
    var $14=HEAP8[($arrayidx11)];
    var $conv=(($14)&255);
    var $cmp12=(($conv)|0)==1;
    if (!($cmp12)) {
      label = 33;
      break;
    }
    var $15=HEAP32[((5244208)>>2)];
    var $sub15=((($15)-(1))|0);
    HEAP32[((5244208)>>2)]=$sub15;
  }
  if (label == 33) {
  }
  else if (label == 35) {
  }
  $Result=1;
  var $16=$Result;

  return $16;
}
_zinputln["X"]=1;

function _zprintapoolstr($s) {
  var label = 0;

  var $s_addr;
  $s_addr=$s;
  var $0=HEAP32[((5243524)>>2)];
  var $1=$s_addr;
  _zoutpoolstr($0, $1);
  var $2=HEAP32[((5243908)>>2)];
  var $3=$s_addr;
  _zoutpoolstr($2, $3);

  return;
}


function _pooloverflow() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243908)>>2)];
  var $1=HEAP32[((5243700)>>2)];
  var $add=((($1)+(65000))|0);
  var $2=HEAP32[((5243700)>>2)];
  var $call=_fprintf($0, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263540)|0),HEAP32[(((tempInt)+(4))>>2)]=1,HEAP32[(((tempInt)+(8))>>2)]=$add,HEAP32[(((tempInt)+(12))>>2)]=$2,tempInt));
  var $3=HEAP32[((5243496)>>2)];
  var $4=HEAP32[((5243700)>>2)];
  var $add1=((($4)+(65000))|0);
  var $add2=((($add1)+(1))|0);
  var $mul=(($add2)&-1);
  var $call3=_xrealloc($3, $mul);
  HEAP32[((5243496)>>2)]=$call3;
  var $5=HEAP32[((5243700)>>2)];
  var $add4=((($5)+(65000))|0);
  HEAP32[((5243700)>>2)]=$add4;
  STACKTOP = __stackBase__;
  return;
}


function _zouttoken($f) {
  var label = 0;

  var $f_addr;
  var $i;
  $f_addr=$f;
  var $0=HEAP32[((5252248)>>2)];
  $i=$0;
  while(1) {
    var $1=$i;
    var $2=HEAP32[((5252244)>>2)];
    var $cmp=(($1)|0) < (($2)|0);
    if (!($cmp)) {
      break;
    }
    var $3=$i;
    var $4=HEAP32[((5252252)>>2)];
    var $arrayidx=(($4+$3)|0);
    var $5=HEAP8[($arrayidx)];
    var $idxprom=(($5)&255);
    var $arrayidx1=((5243136+$idxprom)|0);
    var $6=HEAP8[($arrayidx1)];
    var $conv=(($6)&255);
    var $7=$f_addr;
    var $call=_fputc($conv, $7);
    var $8=$i;
    var $add=((($8)+(1))|0);
    $i=$add;
  }

  return;
}


function _printatoken() {
  var label = 0;

  var $0=HEAP32[((5243524)>>2)];
  _zouttoken($0);
  var $1=HEAP32[((5243908)>>2)];
  _zouttoken($1);

  return;
}


function _printbadinputline() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $bfptr;
  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5263180)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5263180)|0), $1);
  $bfptr=0;
  while(1) {
    var $2=$bfptr;
    var $3=HEAP32[((5252244)>>2)];
    var $cmp=(($2)|0) < (($3)|0);
    if (!($cmp)) {
      break;
    }
    var $4=$bfptr;
    var $5=HEAP32[((5252252)>>2)];
    var $arrayidx=(($5+$4)|0);
    var $6=HEAP8[($arrayidx)];
    var $idxprom=(($6)&255);
    var $arrayidx2=((5243932+$idxprom)|0);
    var $7=HEAP8[($arrayidx2)];
    var $conv=(($7)&255);
    var $cmp3=(($conv)|0)==1;
    if ($cmp3) {
      var $8=HEAP8[(((5243168)|0))];
      var $conv5=(($8)&255);
      var $9=HEAP32[((5243908)>>2)];
      var $call6=_fputc($conv5, $9);
      var $10=HEAP8[(((5243168)|0))];
      var $conv7=(($10)&255);
      var $11=HEAP32[((5243524)>>2)];
      var $call8=_fputc($conv7, $11);
    } else {
      var $12=$bfptr;
      var $13=HEAP32[((5252252)>>2)];
      var $arrayidx9=(($13+$12)|0);
      var $14=HEAP8[($arrayidx9)];
      var $idxprom10=(($14)&255);
      var $arrayidx11=((5243136+$idxprom10)|0);
      var $15=HEAP8[($arrayidx11)];
      var $conv12=(($15)&255);
      var $16=HEAP32[((5243908)>>2)];
      var $call13=_fputc($conv12, $16);
      var $17=$bfptr;
      var $18=HEAP32[((5252252)>>2)];
      var $arrayidx14=(($18+$17)|0);
      var $19=HEAP8[($arrayidx14)];
      var $idxprom15=(($19)&255);
      var $arrayidx16=((5243136+$idxprom15)|0);
      var $20=HEAP8[($arrayidx16)];
      var $conv17=(($20)&255);
      var $21=HEAP32[((5243524)>>2)];
      var $call18=_fputc($conv17, $21);
    }
    var $22=$bfptr;
    var $add=((($22)+(1))|0);
    $bfptr=$add;
  }
  _printanewline();
  var $23=HEAP32[((5243908)>>2)];
  var $call19=_fputs(((5263180)|0), $23);
  var $24=HEAP32[((5243524)>>2)];
  var $call20=_fputs(((5263180)|0), $24);
  $bfptr=0;
  while(1) {
    var $25=$bfptr;
    var $26=HEAP32[((5252244)>>2)];
    var $cmp22=(($25)|0) < (($26)|0);
    if (!($cmp22)) {
      break;
    }
    var $27=HEAP8[(((5243168)|0))];
    var $conv25=(($27)&255);
    var $28=HEAP32[((5243908)>>2)];
    var $call26=_fputc($conv25, $28);
    var $29=HEAP8[(((5243168)|0))];
    var $conv27=(($29)&255);
    var $30=HEAP32[((5243524)>>2)];
    var $call28=_fputc($conv27, $30);
    var $31=$bfptr;
    var $add29=((($31)+(1))|0);
    $bfptr=$add29;
  }
  var $32=HEAP32[((5252244)>>2)];
  $bfptr=$32;
  while(1) {
    var $33=$bfptr;
    var $34=HEAP32[((5244208)>>2)];
    var $cmp32=(($33)|0) < (($34)|0);
    if (!($cmp32)) {
      break;
    }
    var $35=$bfptr;
    var $36=HEAP32[((5252252)>>2)];
    var $arrayidx35=(($36+$35)|0);
    var $37=HEAP8[($arrayidx35)];
    var $idxprom36=(($37)&255);
    var $arrayidx37=((5243932+$idxprom36)|0);
    var $38=HEAP8[($arrayidx37)];
    var $conv38=(($38)&255);
    var $cmp39=(($conv38)|0)==1;
    if ($cmp39) {
      var $39=HEAP8[(((5243168)|0))];
      var $conv42=(($39)&255);
      var $40=HEAP32[((5243908)>>2)];
      var $call43=_fputc($conv42, $40);
      var $41=HEAP8[(((5243168)|0))];
      var $conv44=(($41)&255);
      var $42=HEAP32[((5243524)>>2)];
      var $call45=_fputc($conv44, $42);
    } else {
      var $43=$bfptr;
      var $44=HEAP32[((5252252)>>2)];
      var $arrayidx47=(($44+$43)|0);
      var $45=HEAP8[($arrayidx47)];
      var $idxprom48=(($45)&255);
      var $arrayidx49=((5243136+$idxprom48)|0);
      var $46=HEAP8[($arrayidx49)];
      var $conv50=(($46)&255);
      var $47=HEAP32[((5243908)>>2)];
      var $call51=_fputc($conv50, $47);
      var $48=$bfptr;
      var $49=HEAP32[((5252252)>>2)];
      var $arrayidx52=(($49+$48)|0);
      var $50=HEAP8[($arrayidx52)];
      var $idxprom53=(($50)&255);
      var $arrayidx54=((5243136+$idxprom53)|0);
      var $51=HEAP8[($arrayidx54)];
      var $conv55=(($51)&255);
      var $52=HEAP32[((5243524)>>2)];
      var $call56=_fputc($conv55, $52);
    }
    var $53=$bfptr;
    var $add58=((($53)+(1))|0);
    $bfptr=$add58;
  }
  _printanewline();
  $bfptr=0;
  while(1) {
    var $54=$bfptr;
    var $55=HEAP32[((5252244)>>2)];
    var $cmp61=(($54)|0) < (($55)|0);
    if ($cmp61) {
      var $56=$bfptr;
      var $57=HEAP32[((5252252)>>2)];
      var $arrayidx63=(($57+$56)|0);
      var $58=HEAP8[($arrayidx63)];
      var $idxprom64=(($58)&255);
      var $arrayidx65=((5243932+$idxprom64)|0);
      var $59=HEAP8[($arrayidx65)];
      var $conv66=(($59)&255);
      var $cmp67=(($conv66)|0)==1;
      var $60 = $cmp67;
    } else {
      var $60 = 0;
    }
    var $60;
    if (!($60)) {
      break;
    }
    var $61=$bfptr;
    var $add70=((($61)+(1))|0);
    $bfptr=$add70;
  }
  var $62=$bfptr;
  var $63=HEAP32[((5252244)>>2)];
  var $cmp72=(($62)|0)==(($63)|0);
  if (!($cmp72)) {
    _markerror();
    STACKTOP = __stackBase__;
    return;
  }
  var $64=HEAP32[((5243908)>>2)];
  var $call75=_fprintf($64, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262760)|0),tempInt));
  var $65=HEAP32[((5243524)>>2)];
  var $call76=_fprintf($65, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262760)|0),tempInt));
  _markerror();
  STACKTOP = __stackBase__;
  return;
}
_printbadinputline["X"]=1;

function _printskippingwhateverremains() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5262236)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5262236)|0), $1);

  return;
}


function _samtoolongfilenameprint() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243524)>>2)];
  var $call=_fputs(((5261736)|0), $0);
  HEAP32[((5243824)>>2)]=1;
  while(1) {
    var $1=HEAP32[((5243824)>>2)];
    var $2=HEAP32[((5252608)>>2)];
    var $cmp=(($1)|0) <= (($2)|0);
    if (!($cmp)) {
      break;
    }
    var $3=HEAP32[((5243824)>>2)];
    var $4=HEAP32[((5243828)>>2)];
    var $arrayidx=(($4+$3)|0);
    var $5=HEAP8[($arrayidx)];
    var $conv=(($5)&255);
    var $6=HEAP32[((5243524)>>2)];
    var $call1=_fputc($conv, $6);
    var $7=HEAP32[((5243824)>>2)];
    var $add=((($7)+(1))|0);
    HEAP32[((5243824)>>2)]=$add;
  }
  var $8=HEAP32[((5243524)>>2)];
  var $call2=_fprintf($8, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5261076)|0),tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _samwrongfilenameprint() {
  var label = 0;

  var $0=HEAP32[((5243524)>>2)];
  var $call=_fputs(((5260784)|0), $0);
  HEAP32[((5243824)>>2)]=1;
  while(1) {
    var $1=HEAP32[((5243824)>>2)];
    var $2=HEAP32[((5243832)>>2)];
    var $cmp=(($1)|0) <= (($2)|0);
    if (!($cmp)) {
      break;
    }
    var $3=HEAP32[((5243824)>>2)];
    var $4=HEAP32[((5243828)>>2)];
    var $arrayidx=(($4+$3)|0);
    var $5=HEAP8[($arrayidx)];
    var $conv=(($5)&255);
    var $6=HEAP32[((5243524)>>2)];
    var $call1=_fputc($conv, $6);
    var $7=HEAP32[((5243824)>>2)];
    var $add=((($7)+(1))|0);
    HEAP32[((5243824)>>2)]=$add;
  }
  var $8=HEAP32[((5243524)>>2)];
  var $call2=_fputc(39, $8);
  var $9=HEAP32[((5243524)>>2)];
  var $call3=_fputc(10, $9);

  return;
}


function _printauxname() {
  var label = 0;

  var $0=HEAP32[((5252604)>>2)];
  var $arrayidx=((5252696+($0<<2))|0);
  var $1=HEAP32[(($arrayidx)>>2)];
  _zprintapoolstr($1);
  _printanewline();

  return;
}


function _logprauxname() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $1=HEAP32[((5252604)>>2)];
  var $arrayidx=((5252696+($1<<2))|0);
  var $2=HEAP32[(($arrayidx)>>2)];
  _zoutpoolstr($0, $2);
  var $3=HEAP32[((5243908)>>2)];
  var $call=_fputc(10, $3);

  return;
}


function _auxerrprint() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243908)>>2)];
  var $1=HEAP32[((5252604)>>2)];
  var $arrayidx=((5252612+($1<<2))|0);
  var $2=HEAP32[(($arrayidx)>>2)];
  var $call=_fprintf($0, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5260048)|0),HEAP32[(((tempInt)+(4))>>2)]=$2,HEAP32[(((tempInt)+(8))>>2)]=((5259716)|0),tempInt));
  var $3=HEAP32[((5243524)>>2)];
  var $4=HEAP32[((5252604)>>2)];
  var $arrayidx1=((5252612+($4<<2))|0);
  var $5=HEAP32[(($arrayidx1)>>2)];
  var $call2=_fprintf($3, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5260048)|0),HEAP32[(((tempInt)+(4))>>2)]=$5,HEAP32[(((tempInt)+(8))>>2)]=((5259716)|0),tempInt));
  _printauxname();
  _printbadinputline();
  _printskippingwhateverremains();
  var $6=HEAP32[((5243908)>>2)];
  var $call3=_fprintf($6, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5259252)|0),tempInt));
  var $7=HEAP32[((5243524)>>2)];
  var $call4=_fprintf($7, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5259252)|0),tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _auxerrnorightbraceprint() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243908)>>2)];
  var $1=HEAP8[(((5243261)|0))];
  var $conv=(($1)&255);
  var $call=_fprintf($0, ((5257756)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257732)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv,HEAP32[(((tempInt)+(8))>>2)]=34,tempInt));
  var $2=HEAP32[((5243524)>>2)];
  var $3=HEAP8[(((5243261)|0))];
  var $conv1=(($3)&255);
  var $call2=_fprintf($2, ((5257756)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257732)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv1,HEAP32[(((tempInt)+(8))>>2)]=34,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _auxerrstuffafterrightbraceprint() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243908)>>2)];
  var $1=HEAP8[(((5243261)|0))];
  var $conv=(($1)&255);
  var $call=_fprintf($0, ((5257756)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257652)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv,HEAP32[(((tempInt)+(8))>>2)]=34,tempInt));
  var $2=HEAP32[((5243524)>>2)];
  var $3=HEAP8[(((5243261)|0))];
  var $conv1=(($3)&255);
  var $call2=_fprintf($2, ((5257756)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257652)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv1,HEAP32[(((tempInt)+(8))>>2)]=34,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _auxerrwhitespaceinargumentprint() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5257484)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5257484)|0), $1);

  return;
}


function _printbibname() {
  var label = 0;

  var $0=HEAP32[((5252520)>>2)];
  var $1=HEAP32[((5252524)>>2)];
  var $arrayidx=(($1+($0<<2))|0);
  var $2=HEAP32[(($arrayidx)>>2)];
  _zprintapoolstr($2);
  var $3=HEAP32[((5243596)>>2)];
  _zprintapoolstr($3);
  _printanewline();

  return;
}


function _logprbibname() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $1=HEAP32[((5252520)>>2)];
  var $2=HEAP32[((5252524)>>2)];
  var $arrayidx=(($2+($1<<2))|0);
  var $3=HEAP32[(($arrayidx)>>2)];
  _zoutpoolstr($0, $3);
  var $4=HEAP32[((5243908)>>2)];
  var $5=HEAP32[((5243596)>>2)];
  _zoutpoolstr($4, $5);
  var $6=HEAP32[((5243908)>>2)];
  var $call=_fputc(10, $6);

  return;
}


function _printbstname() {
  var label = 0;

  var $0=HEAP32[((5252280)>>2)];
  _zprintapoolstr($0);
  var $1=HEAP32[((5243588)>>2)];
  _zprintapoolstr($1);
  _printanewline();

  return;
}


function _logprbstname() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $1=HEAP32[((5252280)>>2)];
  _zoutpoolstr($0, $1);
  var $2=HEAP32[((5243908)>>2)];
  var $3=HEAP32[((5243588)>>2)];
  _zoutpoolstr($2, $3);
  var $4=HEAP32[((5243908)>>2)];
  var $call=_fputc(10, $4);

  return;
}


function _zcheckciteoverflow($lastcite) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $lastcite_addr;
  $lastcite_addr=$lastcite;
  var $0=$lastcite_addr;
  var $1=HEAP32[((5243892)>>2)];
  var $cmp=(($0)|0)==(($1)|0);
  if (!($cmp)) {
    STACKTOP = __stackBase__;
    return;
  }
  var $2=HEAP32[((5243908)>>2)];
  var $3=HEAP32[((5243892)>>2)];
  var $add=((($3)+(750))|0);
  var $4=HEAP32[((5243892)>>2)];
  var $call=_fprintf($2, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257296)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add,HEAP32[(((tempInt)+(12))>>2)]=$4,tempInt));
  var $5=HEAP32[((5251184)>>2)];
  var $6=$5;
  var $7=HEAP32[((5243892)>>2)];
  var $add1=((($7)+(750))|0);
  var $add2=((($add1)+(1))|0);
  var $mul=((($add2<<2))&-1);
  var $call3=_xrealloc($6, $mul);
  var $8=$call3;
  HEAP32[((5251184)>>2)]=$8;
  var $9=HEAP32[((5243908)>>2)];
  var $10=HEAP32[((5243892)>>2)];
  var $add4=((($10)+(750))|0);
  var $11=HEAP32[((5243892)>>2)];
  var $call5=_fprintf($9, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257276)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add4,HEAP32[(((tempInt)+(12))>>2)]=$11,tempInt));
  var $12=HEAP32[((5243432)>>2)];
  var $13=$12;
  var $14=HEAP32[((5243892)>>2)];
  var $add6=((($14)+(750))|0);
  var $add7=((($add6)+(1))|0);
  var $mul8=((($add7<<2))&-1);
  var $call9=_xrealloc($13, $mul8);
  var $15=$call9;
  HEAP32[((5243432)>>2)]=$15;
  var $16=HEAP32[((5243908)>>2)];
  var $17=HEAP32[((5243892)>>2)];
  var $add10=((($17)+(750))|0);
  var $18=HEAP32[((5243892)>>2)];
  var $call11=_fprintf($16, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257248)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add10,HEAP32[(((tempInt)+(12))>>2)]=$18,tempInt));
  var $19=HEAP32[((5251092)>>2)];
  var $20=$19;
  var $21=HEAP32[((5243892)>>2)];
  var $add12=((($21)+(750))|0);
  var $add13=((($add12)+(1))|0);
  var $mul14=((($add13<<2))&-1);
  var $call15=_xrealloc($20, $mul14);
  var $22=$call15;
  HEAP32[((5251092)>>2)]=$22;
  var $23=HEAP32[((5243908)>>2)];
  var $24=HEAP32[((5243892)>>2)];
  var $add16=((($24)+(750))|0);
  var $25=HEAP32[((5243892)>>2)];
  var $call17=_fprintf($23, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257152)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add16,HEAP32[(((tempInt)+(12))>>2)]=$25,tempInt));
  var $26=HEAP32[((5251188)>>2)];
  var $27=$26;
  var $28=HEAP32[((5243892)>>2)];
  var $add18=((($28)+(750))|0);
  var $add19=((($add18)+(1))|0);
  var $mul20=((($add19<<2))&-1);
  var $call21=_xrealloc($27, $mul20);
  var $29=$call21;
  HEAP32[((5251188)>>2)]=$29;
  var $30=HEAP32[((5243892)>>2)];
  var $add22=((($30)+(750))|0);
  HEAP32[((5243892)>>2)]=$add22;
  while(1) {
    var $31=$lastcite_addr;
    var $32=HEAP32[((5243892)>>2)];
    var $cmp23=(($31)|0) < (($32)|0);
    if (!($cmp23)) {
      break;
    }
    var $33=$lastcite_addr;
    var $34=HEAP32[((5243432)>>2)];
    var $arrayidx=(($34+($33<<2))|0);
    HEAP32[(($arrayidx)>>2)]=0;
    var $35=$lastcite_addr;
    var $36=HEAP32[((5251188)>>2)];
    var $arrayidx24=(($36+($35<<2))|0);
    HEAP32[(($arrayidx24)>>2)]=0;
    var $37=$lastcite_addr;
    var $add25=((($37)+(1))|0);
    $lastcite_addr=$add25;
  }
  STACKTOP = __stackBase__;
  return;
}
_zcheckciteoverflow["X"]=1;

function _zoutpoolstr($f, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $f_addr;
  var $s_addr;
  var $i;
  var $for_end;
  $f_addr=$f;
  $s_addr=$s;
  var $0=$s_addr;
  var $cmp=(($0)|0) < 0;
  do {
    if (!($cmp)) {
      var $1=$s_addr;
      var $2=HEAP32[((5243492)>>2)];
      var $add=((($2)+(3))|0);
      var $cmp1=(($1)|0) >= (($add)|0);
      if ($cmp1) {
        break;
      }
      var $3=$s_addr;
      var $4=HEAP32[((5243880)>>2)];
      var $cmp3=(($3)|0) >= (($4)|0);
      if ($cmp3) {
        break;
      }
      var $9=$s_addr;
      var $10=HEAP32[((5243488)>>2)];
      var $arrayidx=(($10+($9<<2))|0);
      var $11=HEAP32[(($arrayidx)>>2)];
      $i=$11;
      var $12=$s_addr;
      var $add5=((($12)+(1))|0);
      var $13=HEAP32[((5243488)>>2)];
      var $arrayidx6=(($13+($add5<<2))|0);
      var $14=HEAP32[(($arrayidx6)>>2)];
      var $sub=((($14)-(1))|0);
      $for_end=$sub;
      var $15=$i;
      var $16=$for_end;
      var $cmp7=(($15)|0) <= (($16)|0);
      if (!($cmp7)) {
        STACKTOP = __stackBase__;
        return;
      }
      while(1) {
        var $17=$i;
        var $18=HEAP32[((5243496)>>2)];
        var $arrayidx9=(($18+$17)|0);
        var $19=HEAP8[($arrayidx9)];
        var $idxprom=(($19)&255);
        var $arrayidx10=((5243136+$idxprom)|0);
        var $20=HEAP8[($arrayidx10)];
        var $conv=(($20)&255);
        var $21=$f_addr;
        var $call11=_fputc($conv, $21);
        var $22=$i;
        var $inc=((($22)+(1))|0);
        $i=$inc;
        var $23=$for_end;
        var $cmp12=(($22)|0) < (($23)|0);
        if (!($cmp12)) {
          break;
        }
      }
      STACKTOP = __stackBase__;
      return;
    }
  } while(0);
  var $5=HEAP32[((5243908)>>2)];
  var $6=$s_addr;
  var $call=_fprintf($5, ((5264472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264012)|0),HEAP32[(((tempInt)+(4))>>2)]=$6,tempInt));
  var $7=HEAP32[((5243524)>>2)];
  var $8=$s_addr;
  var $call4=_fprintf($7, ((5264472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264012)|0),HEAP32[(((tempInt)+(4))>>2)]=$8,tempInt));
  _printconfusion();
  _longjmp(((5248396)|0), 1);
  throw "Reached an unreachable!"
}
_zoutpoolstr["X"]=1;

function _zauxerrillegalanotherprint($cmdnum) {
  var label = 0;

  var $cmdnum_addr;
  $cmdnum_addr=$cmdnum;
  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5259036)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5259036)|0), $1);
  var $2=$cmdnum_addr;
  if ((($2)|0)==0) {
    var $3=HEAP32[((5243908)>>2)];
    var $call2=_fputs(((5258732)|0), $3);
    var $4=HEAP32[((5243524)>>2)];
    var $call3=_fputs(((5258732)|0), $4);
    var $9=HEAP32[((5243908)>>2)];
    var $call9=_fputs(((5257952)|0), $9);
    var $10=HEAP32[((5243524)>>2)];
    var $call10=_fputs(((5257952)|0), $10);

    return;
  } else if ((($2)|0)==1) {
    var $5=HEAP32[((5243908)>>2)];
    var $call5=_fputs(((5258472)|0), $5);
    var $6=HEAP32[((5243524)>>2)];
    var $call6=_fputs(((5258472)|0), $6);
    var $9=HEAP32[((5243908)>>2)];
    var $call9=_fputs(((5257952)|0), $9);
    var $10=HEAP32[((5243524)>>2)];
    var $call10=_fputs(((5257952)|0), $10);

    return;
  } else {
    var $7=HEAP32[((5243908)>>2)];
    var $call7=_fputs(((5258260)|0), $7);
    var $8=HEAP32[((5243524)>>2)];
    var $call8=_fputs(((5258260)|0), $8);
    _printconfusion();
    _longjmp(((5248396)|0), 1);
    throw "Reached an unreachable!"
  }
}


function _hashciteconfusion() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5257332)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5257332)|0), $1);
  _printconfusion();
  _longjmp(((5248396)|0), 1);
  throw "Reached an unreachable!"
}


function _auxend1errprint() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5257076)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5257076)|0), $1);

  return;
}


function _auxend2errprint() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5257048)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5257048)|0), $1);
  _printauxname();
  _markerror();

  return;
}


function _bstlnnumprint() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243908)>>2)];
  var $1=HEAP32[((5252288)>>2)];
  var $call=_fprintf($0, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257028)|0),HEAP32[(((tempInt)+(4))>>2)]=$1,HEAP32[(((tempInt)+(8))>>2)]=((5259716)|0),tempInt));
  var $2=HEAP32[((5243524)>>2)];
  var $3=HEAP32[((5252288)>>2)];
  var $call1=_fprintf($2, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257028)|0),HEAP32[(((tempInt)+(4))>>2)]=$3,HEAP32[(((tempInt)+(8))>>2)]=((5259716)|0),tempInt));
  _printbstname();
  STACKTOP = __stackBase__;
  return;
}


function _bstwarnprint() {
  var label = 0;

  _bstlnnumprint();
  _markwarning();

  return;
}


function _eatbstprint() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5256960)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5256960)|0), $1);

  return;
}


function _zprintfnclass($fnloc) {
  var label = 0;

  var $fnloc_addr;
  $fnloc_addr=$fnloc;
  var $0=$fnloc_addr;
  var $1=HEAP32[((5248804)>>2)];
  var $arrayidx=(($1+$0)|0);
  var $2=HEAP8[($arrayidx)];
  var $conv=(($2)&255);
  if ((($conv)|0)==3) {
    var $9=HEAP32[((5243908)>>2)];
    var $call9=_fputs(((5256252)|0), $9);
    var $10=HEAP32[((5243524)>>2)];
    var $call10=_fputs(((5256252)|0), $10);

    return;
  } else if ((($conv)|0)==4) {
    var $11=HEAP32[((5243908)>>2)];
    var $call12=_fputs(((5256196)|0), $11);
    var $12=HEAP32[((5243524)>>2)];
    var $call13=_fputs(((5256196)|0), $12);

    return;
  } else if ((($conv)|0)==2) {
    var $7=HEAP32[((5243908)>>2)];
    var $call6=_fputs(((5256276)|0), $7);
    var $8=HEAP32[((5243524)>>2)];
    var $call7=_fputs(((5256276)|0), $8);

    return;
  } else if ((($conv)|0)==5) {
    var $13=HEAP32[((5243908)>>2)];
    var $call15=_fputs(((5256116)|0), $13);
    var $14=HEAP32[((5243524)>>2)];
    var $call16=_fputs(((5256116)|0), $14);

    return;
  } else if ((($conv)|0)==6) {
    var $15=HEAP32[((5243908)>>2)];
    var $call18=_fputs(((5256080)|0), $15);
    var $16=HEAP32[((5243524)>>2)];
    var $call19=_fputs(((5256080)|0), $16);

    return;
  } else if ((($conv)|0)==7) {
    var $17=HEAP32[((5243908)>>2)];
    var $call21=_fputs(((5256048)|0), $17);
    var $18=HEAP32[((5243524)>>2)];
    var $call22=_fputs(((5256048)|0), $18);

    return;
  } else if ((($conv)|0)==0) {
    var $3=HEAP32[((5243908)>>2)];
    var $call=_fputs(((5256328)|0), $3);
    var $4=HEAP32[((5243524)>>2)];
    var $call1=_fputs(((5256328)|0), $4);

    return;
  } else if ((($conv)|0)==1) {
    var $5=HEAP32[((5243908)>>2)];
    var $call3=_fputs(((5256300)|0), $5);
    var $6=HEAP32[((5243524)>>2)];
    var $call4=_fputs(((5256300)|0), $6);

    return;
  } else if ((($conv)|0)==8) {
    var $19=HEAP32[((5243908)>>2)];
    var $call24=_fputs(((5255960)|0), $19);
    var $20=HEAP32[((5243524)>>2)];
    var $call25=_fputs(((5255960)|0), $20);

    return;
  } else {
    _unknwnfunctionclassconfusion();

    return;
  }
}
_zprintfnclass["X"]=1;

function _bstidprint() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP8[(5243584)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)==0;
  if ($cmp) {
    var $1=HEAP32[((5243908)>>2)];
    var $2=HEAP32[((5252244)>>2)];
    var $3=HEAP32[((5252252)>>2)];
    var $arrayidx=(($3+$2)|0);
    var $4=HEAP8[($arrayidx)];
    var $idxprom=(($4)&255);
    var $arrayidx2=((5243136+$idxprom)|0);
    var $5=HEAP8[($arrayidx2)];
    var $conv3=(($5)&255);
    var $call=_fprintf($1, ((5255672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=34,HEAP32[(((tempInt)+(4))>>2)]=$conv3,HEAP32[(((tempInt)+(8))>>2)]=((5255636)|0),tempInt));
    var $6=HEAP32[((5243524)>>2)];
    var $7=HEAP32[((5252244)>>2)];
    var $8=HEAP32[((5252252)>>2)];
    var $arrayidx4=(($8+$7)|0);
    var $9=HEAP8[($arrayidx4)];
    var $idxprom5=(($9)&255);
    var $arrayidx6=((5243136+$idxprom5)|0);
    var $10=HEAP8[($arrayidx6)];
    var $conv7=(($10)&255);
    var $call8=_fprintf($6, ((5255672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=34,HEAP32[(((tempInt)+(4))>>2)]=$conv7,HEAP32[(((tempInt)+(8))>>2)]=((5255636)|0),tempInt));
    STACKTOP = __stackBase__;
    return;
  }
  var $11=HEAP8[(5243584)];
  var $conv9=(($11)&255);
  var $cmp10=(($conv9)|0)==2;
  if ($cmp10) {
    var $12=HEAP32[((5243908)>>2)];
    var $13=HEAP32[((5252244)>>2)];
    var $14=HEAP32[((5252252)>>2)];
    var $arrayidx13=(($14+$13)|0);
    var $15=HEAP8[($arrayidx13)];
    var $idxprom14=(($15)&255);
    var $arrayidx15=((5243136+$idxprom14)|0);
    var $16=HEAP8[($arrayidx15)];
    var $conv16=(($16)&255);
    var $call17=_fprintf($12, ((5255672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=34,HEAP32[(((tempInt)+(4))>>2)]=$conv16,HEAP32[(((tempInt)+(8))>>2)]=((5255584)|0),tempInt));
    var $17=HEAP32[((5243524)>>2)];
    var $18=HEAP32[((5252244)>>2)];
    var $19=HEAP32[((5252252)>>2)];
    var $arrayidx18=(($19+$18)|0);
    var $20=HEAP8[($arrayidx18)];
    var $idxprom19=(($20)&255);
    var $arrayidx20=((5243136+$idxprom19)|0);
    var $21=HEAP8[($arrayidx20)];
    var $conv21=(($21)&255);
    var $call22=_fprintf($17, ((5255672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=34,HEAP32[(((tempInt)+(4))>>2)]=$conv21,HEAP32[(((tempInt)+(8))>>2)]=((5255584)|0),tempInt));
  } else {
    _idscanningconfusion();
  }
  STACKTOP = __stackBase__;
  return;
}
_bstidprint["X"]=1;

function _bstleftbraceprint() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243908)>>2)];
  var $1=HEAP8[(((5243259)|0))];
  var $conv=(($1)&255);
  var $call=_fprintf($0, ((5255672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=34,HEAP32[(((tempInt)+(4))>>2)]=$conv,HEAP32[(((tempInt)+(8))>>2)]=((5255548)|0),tempInt));
  var $2=HEAP32[((5243524)>>2)];
  var $3=HEAP8[(((5243259)|0))];
  var $conv1=(($3)&255);
  var $call2=_fprintf($2, ((5255672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=34,HEAP32[(((tempInt)+(4))>>2)]=$conv1,HEAP32[(((tempInt)+(8))>>2)]=((5255548)|0),tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _bstrightbraceprint() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243908)>>2)];
  var $1=HEAP8[(((5243261)|0))];
  var $conv=(($1)&255);
  var $call=_fprintf($0, ((5255672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=34,HEAP32[(((tempInt)+(4))>>2)]=$conv,HEAP32[(((tempInt)+(8))>>2)]=((5255548)|0),tempInt));
  var $2=HEAP32[((5243524)>>2)];
  var $3=HEAP8[(((5243261)|0))];
  var $conv1=(($3)&255);
  var $call2=_fprintf($2, ((5255672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=34,HEAP32[(((tempInt)+(4))>>2)]=$conv1,HEAP32[(((tempInt)+(8))>>2)]=((5255548)|0),tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _zalreadyseenfunctionprint($seenfnloc) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $seenfnloc_addr;
  $seenfnloc_addr=$seenfnloc;
  var $0=$seenfnloc_addr;
  var $1=HEAP32[((5248752)>>2)];
  var $arrayidx=(($1+($0<<2))|0);
  var $2=HEAP32[(($arrayidx)>>2)];
  _zprintapoolstr($2);
  var $3=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5255484)|0), $3);
  var $4=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5255484)|0), $4);
  var $5=$seenfnloc_addr;
  _zprintfnclass($5);
  var $6=HEAP32[((5243908)>>2)];
  var $call2=_fprintf($6, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255404)|0),tempInt));
  var $7=HEAP32[((5243524)>>2)];
  var $call3=_fprintf($7, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255404)|0),tempInt));
  _bsterrprintandlookforblankline();
  STACKTOP = __stackBase__;
  return;
}


function _biblnnumprint() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243908)>>2)];
  var $1=HEAP32[((5252528)>>2)];
  var $call=_fprintf($0, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257028)|0),HEAP32[(((tempInt)+(4))>>2)]=$1,HEAP32[(((tempInt)+(8))>>2)]=((5259716)|0),tempInt));
  var $2=HEAP32[((5243524)>>2)];
  var $3=HEAP32[((5252528)>>2)];
  var $call1=_fprintf($2, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257028)|0),HEAP32[(((tempInt)+(4))>>2)]=$3,HEAP32[(((tempInt)+(8))>>2)]=((5259716)|0),tempInt));
  _printbibname();
  STACKTOP = __stackBase__;
  return;
}


function _biberrprint() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputc(45, $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputc(45, $1);
  _biblnnumprint();
  _printbadinputline();
  _printskippingwhateverremains();
  var $2=HEAP32[((5252864)>>2)];
  var $tobool=(($2)|0)!=0;
  if ($tobool) {
    var $3=HEAP32[((5243908)>>2)];
    var $call2=_fprintf($3, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5259252)|0),tempInt));
    var $4=HEAP32[((5243524)>>2)];
    var $call3=_fprintf($4, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5259252)|0),tempInt));
    STACKTOP = __stackBase__;
    return;
  } else {
    var $5=HEAP32[((5243908)>>2)];
    var $call4=_fprintf($5, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255392)|0),tempInt));
    var $6=HEAP32[((5243524)>>2)];
    var $call5=_fprintf($6, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255392)|0),tempInt));
    STACKTOP = __stackBase__;
    return;
  }
}


function _bibwarnprint() {
  var label = 0;

  _biblnnumprint();
  _markwarning();

  return;
}


function _zcheckfieldoverflow($totalfields) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $totalfields_addr;
  var $fptr;
  var $startfields;
  var $for_end;
  $totalfields_addr=$totalfields;
  var $0=$totalfields_addr;
  var $1=HEAP32[((5243888)>>2)];
  var $cmp=(($0)|0) > (($1)|0);
  if (!($cmp)) {
    STACKTOP = __stackBase__;
    return;
  }
  var $2=HEAP32[((5243888)>>2)];
  $startfields=$2;
  var $3=HEAP32[((5243908)>>2)];
  var $4=$totalfields_addr;
  var $add=((($4)+(5000))|0);
  var $5=HEAP32[((5243888)>>2)];
  var $call=_fprintf($3, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255376)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add,HEAP32[(((tempInt)+(12))>>2)]=$5,tempInt));
  var $6=HEAP32[((5248840)>>2)];
  var $7=$6;
  var $8=$totalfields_addr;
  var $add1=((($8)+(5000))|0);
  var $add2=((($add1)+(1))|0);
  var $mul=((($add2<<2))&-1);
  var $call3=_xrealloc($7, $mul);
  var $9=$call3;
  HEAP32[((5248840)>>2)]=$9;
  var $10=$totalfields_addr;
  var $add4=((($10)+(5000))|0);
  HEAP32[((5243888)>>2)]=$add4;
  var $11=$startfields;
  $fptr=$11;
  var $12=HEAP32[((5243888)>>2)];
  var $sub=((($12)-(1))|0);
  $for_end=$sub;
  var $13=$fptr;
  var $14=$for_end;
  var $cmp5=(($13)|0) <= (($14)|0);
  if ($cmp5) {
    while(1) {
      var $15=$fptr;
      var $16=HEAP32[((5248840)>>2)];
      var $arrayidx=(($16+($15<<2))|0);
      HEAP32[(($arrayidx)>>2)]=0;
      var $17=$fptr;
      var $inc=((($17)+(1))|0);
      $fptr=$inc;
      var $18=$for_end;
      var $cmp8=(($17)|0) < (($18)|0);
      if (!($cmp8)) {
        break;
      }
    }
  }
  STACKTOP = __stackBase__;
  return;
}
_zcheckfieldoverflow["X"]=1;

function _eatbibprint() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5255304)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5255304)|0), $1);
  _biberrprint();

  return;
}


function _zbiboneoftwoprint($char1, $char2) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $char1_addr;
  var $char2_addr;
  $char1_addr=$char1;
  $char2_addr=$char2;
  var $0=HEAP32[((5243908)>>2)];
  var $1=$char1_addr;
  var $idxprom=(($1)&255);
  var $arrayidx=((5243136+$idxprom)|0);
  var $2=HEAP8[($arrayidx)];
  var $conv=(($2)&255);
  var $3=$char2_addr;
  var $idxprom1=(($3)&255);
  var $arrayidx2=((5243136+$idxprom1)|0);
  var $4=HEAP8[($arrayidx2)];
  var $conv3=(($4)&255);
  var $call=_fprintf($0, ((5255216)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255064)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv,HEAP32[(((tempInt)+(8))>>2)]=((5255044)|0),HEAP32[(((tempInt)+(12))>>2)]=$conv3,HEAP32[(((tempInt)+(16))>>2)]=39,tempInt));
  var $5=HEAP32[((5243524)>>2)];
  var $6=$char1_addr;
  var $idxprom4=(($6)&255);
  var $arrayidx5=((5243136+$idxprom4)|0);
  var $7=HEAP8[($arrayidx5)];
  var $conv6=(($7)&255);
  var $8=$char2_addr;
  var $idxprom7=(($8)&255);
  var $arrayidx8=((5243136+$idxprom7)|0);
  var $9=HEAP8[($arrayidx8)];
  var $conv9=(($9)&255);
  var $call10=_fprintf($5, ((5255216)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255064)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv6,HEAP32[(((tempInt)+(8))>>2)]=((5255044)|0),HEAP32[(((tempInt)+(12))>>2)]=$conv9,HEAP32[(((tempInt)+(16))>>2)]=39,tempInt));
  _biberrprint();
  STACKTOP = __stackBase__;
  return;
}


function _bibequalssignprint() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243908)>>2)];
  var $1=HEAP8[(((5243197)|0))];
  var $conv=(($1)&255);
  var $call=_fprintf($0, ((5257756)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255012)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv,HEAP32[(((tempInt)+(8))>>2)]=34,tempInt));
  var $2=HEAP32[((5243524)>>2)];
  var $3=HEAP8[(((5243197)|0))];
  var $conv1=(($3)&255);
  var $call2=_fprintf($2, ((5257756)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255012)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv1,HEAP32[(((tempInt)+(8))>>2)]=34,tempInt));
  _biberrprint();
  STACKTOP = __stackBase__;
  return;
}


function _bibunbalancedbracesprint() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5254988)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5254988)|0), $1);
  _biberrprint();

  return;
}


function _bibfieldtoolongprint() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243908)>>2)];
  var $1=HEAP32[((5252240)>>2)];
  var $call=_fprintf($0, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5254848)|0),HEAP32[(((tempInt)+(4))>>2)]=$1,HEAP32[(((tempInt)+(8))>>2)]=((5254820)|0),tempInt));
  var $2=HEAP32[((5243524)>>2)];
  var $3=HEAP32[((5252240)>>2)];
  var $call1=_fprintf($2, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5254848)|0),HEAP32[(((tempInt)+(4))>>2)]=$3,HEAP32[(((tempInt)+(8))>>2)]=((5254820)|0),tempInt));
  _biberrprint();
  STACKTOP = __stackBase__;
  return;
}


function _macrowarnprint() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5254788)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5254788)|0), $1);
  _printatoken();
  var $2=HEAP32[((5243908)>>2)];
  var $call2=_fputs(((5254732)|0), $2);
  var $3=HEAP32[((5243524)>>2)];
  var $call3=_fputs(((5254732)|0), $3);

  return;
}


function _bibidprint() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP8[(5243584)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)==0;
  if ($cmp) {
    var $1=HEAP32[((5243908)>>2)];
    var $call=_fputs(((5254644)|0), $1);
    var $2=HEAP32[((5243524)>>2)];
    var $call2=_fputs(((5254644)|0), $2);
    STACKTOP = __stackBase__;
    return;
  }
  var $3=HEAP8[(5243584)];
  var $conv3=(($3)&255);
  var $cmp4=(($conv3)|0)==2;
  if ($cmp4) {
    var $4=HEAP32[((5243908)>>2)];
    var $5=HEAP32[((5252244)>>2)];
    var $6=HEAP32[((5252252)>>2)];
    var $arrayidx=(($6+$5)|0);
    var $7=HEAP8[($arrayidx)];
    var $idxprom=(($7)&255);
    var $arrayidx7=((5243136+$idxprom)|0);
    var $8=HEAP8[($arrayidx7)];
    var $conv8=(($8)&255);
    var $call9=_fprintf($4, ((5255672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=34,HEAP32[(((tempInt)+(4))>>2)]=$conv8,HEAP32[(((tempInt)+(8))>>2)]=((5254512)|0),tempInt));
    var $9=HEAP32[((5243524)>>2)];
    var $10=HEAP32[((5252244)>>2)];
    var $11=HEAP32[((5252252)>>2)];
    var $arrayidx10=(($11+$10)|0);
    var $12=HEAP8[($arrayidx10)];
    var $idxprom11=(($12)&255);
    var $arrayidx12=((5243136+$idxprom11)|0);
    var $13=HEAP8[($arrayidx12)];
    var $conv13=(($13)&255);
    var $call14=_fprintf($9, ((5255672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=34,HEAP32[(((tempInt)+(4))>>2)]=$conv13,HEAP32[(((tempInt)+(8))>>2)]=((5254512)|0),tempInt));
  } else {
    _idscanningconfusion();
  }
  STACKTOP = __stackBase__;
  return;
}


function _zbadcrossreferenceprint($s) {
  var label = 0;

  var $s_addr;
  $s_addr=$s;
  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5254180)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5254180)|0), $1);
  var $2=HEAP32[((5251172)>>2)];
  var $3=HEAP32[((5251184)>>2)];
  var $arrayidx=(($3+($2<<2))|0);
  var $4=HEAP32[(($arrayidx)>>2)];
  _zprintapoolstr($4);
  var $5=HEAP32[((5243908)>>2)];
  var $call2=_fputc(34, $5);
  var $6=HEAP32[((5243908)>>2)];
  var $call3=_fputc(10, $6);
  var $7=HEAP32[((5243524)>>2)];
  var $call4=_fputc(34, $7);
  var $8=HEAP32[((5243524)>>2)];
  var $call5=_fputc(10, $8);
  var $9=HEAP32[((5243908)>>2)];
  var $call6=_fputs(((5254116)|0), $9);
  var $10=HEAP32[((5243524)>>2)];
  var $call7=_fputs(((5254116)|0), $10);
  var $11=$s_addr;
  _zprintapoolstr($11);

  return;
}


function _nonexistentcrossreferenceerror() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5254012)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5254012)|0), $1);
  var $2=HEAP32[((5248828)>>2)];
  var $3=HEAP32[((5248840)>>2)];
  var $arrayidx=(($3+($2<<2))|0);
  var $4=HEAP32[(($arrayidx)>>2)];
  _zbadcrossreferenceprint($4);
  var $5=HEAP32[((5243908)>>2)];
  var $call2=_fprintf($5, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5253936)|0),tempInt));
  var $6=HEAP32[((5243524)>>2)];
  var $call3=_fprintf($6, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5253936)|0),tempInt));
  _markerror();
  STACKTOP = __stackBase__;
  return;
}


function _zprintmissingentry($s) {
  var label = 0;

  var $s_addr;
  $s_addr=$s;
  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5253876)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5253876)|0), $1);
  var $2=$s_addr;
  _zprintapoolstr($2);
  var $3=HEAP32[((5243908)>>2)];
  var $call2=_fputc(34, $3);
  var $4=HEAP32[((5243908)>>2)];
  var $call3=_fputc(10, $4);
  var $5=HEAP32[((5243524)>>2)];
  var $call4=_fputc(34, $5);
  var $6=HEAP32[((5243524)>>2)];
  var $call5=_fputc(10, $6);
  _markwarning();

  return;
}


function _bstexwarnprint() {
  var label = 0;

  var $0=HEAP32[((5243876)>>2)];
  var $tobool=(($0)|0)!=0;
  if ($tobool) {
    var $1=HEAP32[((5243908)>>2)];
    var $call=_fputs(((5253848)|0), $1);
    var $2=HEAP32[((5243524)>>2)];
    var $call1=_fputs(((5253848)|0), $2);
    var $3=HEAP32[((5251172)>>2)];
    var $4=HEAP32[((5251184)>>2)];
    var $arrayidx=(($4+($3<<2))|0);
    var $5=HEAP32[(($arrayidx)>>2)];
    _zprintapoolstr($5);
  }
  _printanewline();
  var $6=HEAP32[((5243908)>>2)];
  var $call2=_fputs(((5253732)|0), $6);
  var $7=HEAP32[((5243524)>>2)];
  var $call3=_fputs(((5253732)|0), $7);
  _bstlnnumprint();
  _markerror();

  return;
}


function _bstmildexwarnprint() {
  var label = 0;

  var $0=HEAP32[((5243876)>>2)];
  var $tobool=(($0)|0)!=0;
  if ($tobool) {
    var $1=HEAP32[((5243908)>>2)];
    var $call=_fputs(((5253848)|0), $1);
    var $2=HEAP32[((5243524)>>2)];
    var $call1=_fputs(((5253848)|0), $2);
    var $3=HEAP32[((5251172)>>2)];
    var $4=HEAP32[((5251184)>>2)];
    var $arrayidx=(($4+($3<<2))|0);
    var $5=HEAP32[(($arrayidx)>>2)];
    _zprintapoolstr($5);
  }
  _printanewline();
  var $6=HEAP32[((5243908)>>2)];
  var $call2=_fputs(((5253576)|0), $6);
  var $7=HEAP32[((5243524)>>2)];
  var $call3=_fputs(((5253576)|0), $7);
  _bstwarnprint();

  return;
}


function _bstcantmesswithentriesprint() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5253440)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5253440)|0), $1);
  _bstexwarnprint();

  return;
}


function _zprintstklit($stklt, $stktp) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $stklt_addr;
  var $stktp_addr;
  $stklt_addr=$stklt;
  $stktp_addr=$stktp;
  var $0=$stktp_addr;
  var $conv=(($0)&255);
  if ((($conv)|0)==0) {
    var $1=HEAP32[((5243908)>>2)];
    var $2=$stklt_addr;
    var $call=_fprintf($1, ((5253272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$2,HEAP32[(((tempInt)+(4))>>2)]=((5253192)|0),tempInt));
    var $3=HEAP32[((5243524)>>2)];
    var $4=$stklt_addr;
    var $call1=_fprintf($3, ((5253272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$4,HEAP32[(((tempInt)+(4))>>2)]=((5253192)|0),tempInt));
    STACKTOP = __stackBase__;
    return;
  } else if ((($conv)|0)==1) {
    var $5=HEAP32[((5243908)>>2)];
    var $call3=_fputc(34, $5);
    var $6=HEAP32[((5243524)>>2)];
    var $call4=_fputc(34, $6);
    var $7=$stklt_addr;
    _zprintapoolstr($7);
    var $8=HEAP32[((5243908)>>2)];
    var $call5=_fputs(((5253112)|0), $8);
    var $9=HEAP32[((5243524)>>2)];
    var $call6=_fputs(((5253112)|0), $9);
    STACKTOP = __stackBase__;
    return;
  } else if ((($conv)|0)==2) {
    var $10=HEAP32[((5243908)>>2)];
    var $call8=_fputc(96, $10);
    var $11=HEAP32[((5243524)>>2)];
    var $call9=_fputc(96, $11);
    var $12=$stklt_addr;
    var $13=HEAP32[((5248752)>>2)];
    var $arrayidx=(($13+($12<<2))|0);
    var $14=HEAP32[(($arrayidx)>>2)];
    _zprintapoolstr($14);
    var $15=HEAP32[((5243908)>>2)];
    var $call10=_fputs(((5253084)|0), $15);
    var $16=HEAP32[((5243524)>>2)];
    var $call11=_fputs(((5253084)|0), $16);
    STACKTOP = __stackBase__;
    return;
  } else if ((($conv)|0)==3) {
    var $17=HEAP32[((5243908)>>2)];
    var $call13=_fputc(96, $17);
    var $18=HEAP32[((5243524)>>2)];
    var $call14=_fputc(96, $18);
    var $19=$stklt_addr;
    _zprintapoolstr($19);
    var $20=HEAP32[((5243908)>>2)];
    var $call15=_fputs(((5253008)|0), $20);
    var $21=HEAP32[((5243524)>>2)];
    var $call16=_fputs(((5253008)|0), $21);
    STACKTOP = __stackBase__;
    return;
  } else if ((($conv)|0)==4) {
    _illeglliteralconfusion();
    STACKTOP = __stackBase__;
    return;
  } else {
    _unknwnliteralconfusion();
    STACKTOP = __stackBase__;
    return;
  }
}
_zprintstklit["X"]=1;

function _zprintlit($stklt, $stktp) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $stklt_addr;
  var $stktp_addr;
  $stklt_addr=$stklt;
  $stktp_addr=$stktp;
  var $0=$stktp_addr;
  var $conv=(($0)&255);
  if ((($conv)|0)==0) {
    var $1=HEAP32[((5243908)>>2)];
    var $2=$stklt_addr;
    var $call=_fprintf($1, ((5252972)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$2,tempInt));
    var $3=HEAP32[((5243524)>>2)];
    var $4=$stklt_addr;
    var $call1=_fprintf($3, ((5252972)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$4,tempInt));
    STACKTOP = __stackBase__;
    return;
  } else if ((($conv)|0)==1) {
    var $5=$stklt_addr;
    _zprintapoolstr($5);
    _printanewline();
    STACKTOP = __stackBase__;
    return;
  } else if ((($conv)|0)==2) {
    var $6=$stklt_addr;
    var $7=HEAP32[((5248752)>>2)];
    var $arrayidx=(($7+($6<<2))|0);
    var $8=HEAP32[(($arrayidx)>>2)];
    _zprintapoolstr($8);
    _printanewline();
    STACKTOP = __stackBase__;
    return;
  } else if ((($conv)|0)==3) {
    var $9=$stklt_addr;
    _zprintapoolstr($9);
    _printanewline();
    STACKTOP = __stackBase__;
    return;
  } else if ((($conv)|0)==4) {
    _illeglliteralconfusion();
    STACKTOP = __stackBase__;
    return;
  } else {
    _unknwnliteralconfusion();
    STACKTOP = __stackBase__;
    return;
  }
}


function _bsterrprintandlookforblankline() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputc(45, $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputc(45, $1);
  _bstlnnumprint();
  _printbadinputline();
  while(1) {
    var $2=HEAP32[((5244208)>>2)];
    var $cmp=(($2)|0)!=0;
    if (!($cmp)) {
      label = 248;
      break;
    }
    var $3=HEAP32[((5252292)>>2)];
    var $call2=_zinputln($3);
    var $tobool=(($call2)|0)!=0;
    if (!($tobool)) {
      label = 245;
      break;
    }
    var $4=HEAP32[((5252288)>>2)];
    var $add=((($4)+(1))|0);
    HEAP32[((5252288)>>2)]=$add;
  }
  if (label == 245) {
    _longjmp(((5248436)|0), 1);
    throw "Reached an unreachable!"
  }
  else if (label == 248) {
    var $5=HEAP32[((5244208)>>2)];
    HEAP32[((5252244)>>2)]=$5;

    return;
  }
}


function _unknwnfunctionclassconfusion() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5256884)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5256884)|0), $1);
  _printconfusion();
  _longjmp(((5248396)|0), 1);
  throw "Reached an unreachable!"
}


function _idscanningconfusion() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5255816)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5255816)|0), $1);
  _printconfusion();
  _longjmp(((5248396)|0), 1);
  throw "Reached an unreachable!"
}


function _bibcmdconfusion() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5254352)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5254352)|0), $1);
  _printconfusion();
  _longjmp(((5248396)|0), 1);
  throw "Reached an unreachable!"
}


function _citekeydisappearedconfusion() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5254256)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5254256)|0), $1);
  _printconfusion();
  _longjmp(((5248396)|0), 1);
  throw "Reached an unreachable!"
}


function _illeglliteralconfusion() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5253404)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5253404)|0), $1);
  _printconfusion();
  _longjmp(((5248396)|0), 1);
  throw "Reached an unreachable!"
}


function _unknwnliteralconfusion() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5253332)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5253332)|0), $1);
  _printconfusion();
  _longjmp(((5248396)|0), 1);
  throw "Reached an unreachable!"
}


function _zaddextension($ext) {
  var label = 0;

  var $ext_addr;
  var $pptr;
  $ext_addr=$ext;
  var $0=HEAP32[((5243832)>>2)];
  var $add=((($0)+(1))|0);
  HEAP32[((5243824)>>2)]=$add;
  var $1=$ext_addr;
  var $2=HEAP32[((5243488)>>2)];
  var $arrayidx=(($2+($1<<2))|0);
  var $3=HEAP32[(($arrayidx)>>2)];
  $pptr=$3;
  while(1) {
    var $4=$pptr;
    var $5=$ext_addr;
    var $add1=((($5)+(1))|0);
    var $6=HEAP32[((5243488)>>2)];
    var $arrayidx2=(($6+($add1<<2))|0);
    var $7=HEAP32[(($arrayidx2)>>2)];
    var $cmp=(($4)|0) < (($7)|0);
    if (!($cmp)) {
      break;
    }
    var $8=$pptr;
    var $9=HEAP32[((5243496)>>2)];
    var $arrayidx3=(($9+$8)|0);
    var $10=HEAP8[($arrayidx3)];
    var $11=HEAP32[((5243824)>>2)];
    var $12=HEAP32[((5243828)>>2)];
    var $arrayidx4=(($12+$11)|0);
    HEAP8[($arrayidx4)]=$10;
    var $13=HEAP32[((5243824)>>2)];
    var $add5=((($13)+(1))|0);
    HEAP32[((5243824)>>2)]=$add5;
    var $14=$pptr;
    var $add6=((($14)+(1))|0);
    $pptr=$add6;
  }
  var $15=HEAP32[((5243832)>>2)];
  var $16=$ext_addr;
  var $add7=((($16)+(1))|0);
  var $17=HEAP32[((5243488)>>2)];
  var $arrayidx8=(($17+($add7<<2))|0);
  var $18=HEAP32[(($arrayidx8)>>2)];
  var $19=$ext_addr;
  var $20=HEAP32[((5243488)>>2)];
  var $arrayidx9=(($20+($19<<2))|0);
  var $21=HEAP32[(($arrayidx9)>>2)];
  var $sub=((($18)-($21))|0);
  var $add10=((($15)+($sub))|0);
  HEAP32[((5243832)>>2)]=$add10;
  var $22=HEAP32[((5243832)>>2)];
  var $add11=((($22)+(1))|0);
  var $23=HEAP32[((5243828)>>2)];
  var $arrayidx12=(($23+$add11)|0);
  HEAP8[($arrayidx12)]=0;

  return;
}
_zaddextension["X"]=1;

function _zstreqbuf($s, $buf, $bfptr, $len) {
  var label = 0;

  var $s_addr;
  var $buf_addr;
  var $bfptr_addr;
  var $len_addr;
  var $Result;
  var $i;
  var $j;
  $s_addr=$s;
  $buf_addr=$buf;
  $bfptr_addr=$bfptr;
  $len_addr=$len;
  var $0=$s_addr;
  var $add=((($0)+(1))|0);
  var $1=HEAP32[((5243488)>>2)];
  var $arrayidx=(($1+($add<<2))|0);
  var $2=HEAP32[(($arrayidx)>>2)];
  var $3=$s_addr;
  var $4=HEAP32[((5243488)>>2)];
  var $arrayidx1=(($4+($3<<2))|0);
  var $5=HEAP32[(($arrayidx1)>>2)];
  var $sub=((($2)-($5))|0);
  var $6=$len_addr;
  var $cmp=(($sub)|0)!=(($6)|0);
  if ($cmp) {
    $Result=0;
    var $23=$Result;

    return $23;
  }
  var $7=$bfptr_addr;
  $i=$7;
  var $8=$s_addr;
  var $9=HEAP32[((5243488)>>2)];
  var $arrayidx2=(($9+($8<<2))|0);
  var $10=HEAP32[(($arrayidx2)>>2)];
  $j=$10;
  while(1) {
    var $11=$j;
    var $12=$s_addr;
    var $add3=((($12)+(1))|0);
    var $13=HEAP32[((5243488)>>2)];
    var $arrayidx4=(($13+($add3<<2))|0);
    var $14=HEAP32[(($arrayidx4)>>2)];
    var $cmp5=(($11)|0) < (($14)|0);
    if (!($cmp5)) {
      label = 272;
      break;
    }
    var $15=$j;
    var $16=HEAP32[((5243496)>>2)];
    var $arrayidx6=(($16+$15)|0);
    var $17=HEAP8[($arrayidx6)];
    var $conv=(($17)&255);
    var $18=$i;
    var $19=$buf_addr;
    var $arrayidx7=(($19+$18)|0);
    var $20=HEAP8[($arrayidx7)];
    var $conv8=(($20)&255);
    var $cmp9=(($conv)|0)!=(($conv8)|0);
    if ($cmp9) {
      label = 270;
      break;
    }
    var $21=$i;
    var $add13=((($21)+(1))|0);
    $i=$add13;
    var $22=$j;
    var $add14=((($22)+(1))|0);
    $j=$add14;
  }
  if (label == 272) {
    $Result=1;
    var $23=$Result;

    return $23;
  }
  else if (label == 270) {
    $Result=0;
    var $23=$Result;

    return $23;
  }
}
_zstreqbuf["X"]=1;

function _zstreqstr($s1, $s2) {
  var label = 0;

  var $s1_addr;
  var $s2_addr;
  var $Result;
  $s1_addr=$s1;
  $s2_addr=$s2;
  var $0=$s1_addr;
  var $add=((($0)+(1))|0);
  var $1=HEAP32[((5243488)>>2)];
  var $arrayidx=(($1+($add<<2))|0);
  var $2=HEAP32[(($arrayidx)>>2)];
  var $3=$s1_addr;
  var $4=HEAP32[((5243488)>>2)];
  var $arrayidx1=(($4+($3<<2))|0);
  var $5=HEAP32[(($arrayidx1)>>2)];
  var $sub=((($2)-($5))|0);
  var $6=$s2_addr;
  var $add2=((($6)+(1))|0);
  var $7=HEAP32[((5243488)>>2)];
  var $arrayidx3=(($7+($add2<<2))|0);
  var $8=HEAP32[(($arrayidx3)>>2)];
  var $9=$s2_addr;
  var $10=HEAP32[((5243488)>>2)];
  var $arrayidx4=(($10+($9<<2))|0);
  var $11=HEAP32[(($arrayidx4)>>2)];
  var $sub5=((($8)-($11))|0);
  var $cmp=(($sub)|0)!=(($sub5)|0);
  if ($cmp) {
    $Result=0;
    var $30=$Result;

    return $30;
  }
  var $12=$s1_addr;
  var $13=HEAP32[((5243488)>>2)];
  var $arrayidx6=(($13+($12<<2))|0);
  var $14=HEAP32[(($arrayidx6)>>2)];
  HEAP32[((5243668)>>2)]=$14;
  var $15=$s2_addr;
  var $16=HEAP32[((5243488)>>2)];
  var $arrayidx7=(($16+($15<<2))|0);
  var $17=HEAP32[(($arrayidx7)>>2)];
  HEAP32[((5243664)>>2)]=$17;
  while(1) {
    var $18=HEAP32[((5243668)>>2)];
    var $19=$s1_addr;
    var $add8=((($19)+(1))|0);
    var $20=HEAP32[((5243488)>>2)];
    var $arrayidx9=(($20+($add8<<2))|0);
    var $21=HEAP32[(($arrayidx9)>>2)];
    var $cmp10=(($18)|0) < (($21)|0);
    if (!($cmp10)) {
      label = 284;
      break;
    }
    var $22=HEAP32[((5243668)>>2)];
    var $23=HEAP32[((5243496)>>2)];
    var $arrayidx11=(($23+$22)|0);
    var $24=HEAP8[($arrayidx11)];
    var $conv=(($24)&255);
    var $25=HEAP32[((5243664)>>2)];
    var $26=HEAP32[((5243496)>>2)];
    var $arrayidx12=(($26+$25)|0);
    var $27=HEAP8[($arrayidx12)];
    var $conv13=(($27)&255);
    var $cmp14=(($conv)|0)!=(($conv13)|0);
    if ($cmp14) {
      label = 282;
      break;
    }
    var $28=HEAP32[((5243668)>>2)];
    var $add18=((($28)+(1))|0);
    HEAP32[((5243668)>>2)]=$add18;
    var $29=HEAP32[((5243664)>>2)];
    var $add19=((($29)+(1))|0);
    HEAP32[((5243664)>>2)]=$add19;
  }
  if (label == 282) {
    $Result=0;
    var $30=$Result;

    return $30;
  }
  else if (label == 284) {
    $Result=1;
    var $30=$Result;

    return $30;
  }
}
_zstreqstr["X"]=1;

function _zlowercase($buf, $bfptr, $len) {
  var label = 0;

  var $buf_addr;
  var $bfptr_addr;
  var $len_addr;
  var $i;
  var $for_end;
  $buf_addr=$buf;
  $bfptr_addr=$bfptr;
  $len_addr=$len;
  var $0=$len_addr;
  var $cmp=(($0)|0) > 0;
  if (!($cmp)) {

    return;
  }
  var $1=$bfptr_addr;
  $i=$1;
  var $2=$bfptr_addr;
  var $3=$len_addr;
  var $add=((($2)+($3))|0);
  var $sub=((($add)-(1))|0);
  $for_end=$sub;
  var $4=$i;
  var $5=$for_end;
  var $cmp1=(($4)|0) <= (($5)|0);
  if ($cmp1) {
    while(1) {
      var $6=$i;
      var $7=$buf_addr;
      var $arrayidx=(($7+$6)|0);
      var $8=HEAP8[($arrayidx)];
      var $conv=(($8)&255);
      var $cmp3=(($conv)|0) >= 65;
      do {
        if ($cmp3) {
          var $9=$i;
          var $10=$buf_addr;
          var $arrayidx5=(($10+$9)|0);
          var $11=HEAP8[($arrayidx5)];
          var $conv6=(($11)&255);
          var $cmp7=(($conv6)|0) <= 90;
          if (!($cmp7)) {
            break;
          }
          var $12=$i;
          var $13=$buf_addr;
          var $arrayidx10=(($13+$12)|0);
          var $14=HEAP8[($arrayidx10)];
          var $conv11=(($14)&255);
          var $add12=((($conv11)+(32))|0);
          var $conv13=(($add12) & 255);
          var $15=$i;
          var $16=$buf_addr;
          var $arrayidx14=(($16+$15)|0);
          HEAP8[($arrayidx14)]=$conv13;
        }
      } while(0);
      var $17=$i;
      var $inc=((($17)+(1))|0);
      $i=$inc;
      var $18=$for_end;
      var $cmp15=(($17)|0) < (($18)|0);
      if (!($cmp15)) {
        break;
      }
    }
  }

  return;
}
_zlowercase["X"]=1;

function _zuppercase($buf, $bfptr, $len) {
  var label = 0;

  var $buf_addr;
  var $bfptr_addr;
  var $len_addr;
  var $i;
  var $for_end;
  $buf_addr=$buf;
  $bfptr_addr=$bfptr;
  $len_addr=$len;
  var $0=$len_addr;
  var $cmp=(($0)|0) > 0;
  if (!($cmp)) {

    return;
  }
  var $1=$bfptr_addr;
  $i=$1;
  var $2=$bfptr_addr;
  var $3=$len_addr;
  var $add=((($2)+($3))|0);
  var $sub=((($add)-(1))|0);
  $for_end=$sub;
  var $4=$i;
  var $5=$for_end;
  var $cmp1=(($4)|0) <= (($5)|0);
  if ($cmp1) {
    while(1) {
      var $6=$i;
      var $7=$buf_addr;
      var $arrayidx=(($7+$6)|0);
      var $8=HEAP8[($arrayidx)];
      var $conv=(($8)&255);
      var $cmp3=(($conv)|0) >= 97;
      do {
        if ($cmp3) {
          var $9=$i;
          var $10=$buf_addr;
          var $arrayidx5=(($10+$9)|0);
          var $11=HEAP8[($arrayidx5)];
          var $conv6=(($11)&255);
          var $cmp7=(($conv6)|0) <= 122;
          if (!($cmp7)) {
            break;
          }
          var $12=$i;
          var $13=$buf_addr;
          var $arrayidx10=(($13+$12)|0);
          var $14=HEAP8[($arrayidx10)];
          var $conv11=(($14)&255);
          var $sub12=((($conv11)-(32))|0);
          var $conv13=(($sub12) & 255);
          var $15=$i;
          var $16=$buf_addr;
          var $arrayidx14=(($16+$15)|0);
          HEAP8[($arrayidx14)]=$conv13;
        }
      } while(0);
      var $17=$i;
      var $inc=((($17)+(1))|0);
      $i=$inc;
      var $18=$for_end;
      var $cmp15=(($17)|0) < (($18)|0);
      if (!($cmp15)) {
        break;
      }
    }
  }

  return;
}
_zuppercase["X"]=1;

function _outputbblline() {
  var label = 0;

  var $0=HEAP32[((5243716)>>2)];
  var $cmp=(($0)|0)!=0;
  if ($cmp) {
    while(1) {
      var $1=HEAP32[((5243716)>>2)];
      var $cmp1=(($1)|0) > 0;
      if (!($cmp1)) {
        label = 322;
        break;
      }
      var $2=HEAP32[((5243716)>>2)];
      var $sub=((($2)-(1))|0);
      var $3=HEAP32[((5243720)>>2)];
      var $arrayidx=(($3+$sub)|0);
      var $4=HEAP8[($arrayidx)];
      var $idxprom=(($4)&255);
      var $arrayidx2=((5243932+$idxprom)|0);
      var $5=HEAP8[($arrayidx2)];
      var $conv=(($5)&255);
      var $cmp3=(($conv)|0)==1;
      if (!($cmp3)) {
        label = 320;
        break;
      }
      var $6=HEAP32[((5243716)>>2)];
      var $sub6=((($6)-(1))|0);
      HEAP32[((5243716)>>2)]=$sub6;
    }
    if (label == 320) {
    }
    else if (label == 322) {
    }
    var $7=HEAP32[((5243716)>>2)];
    var $cmp7=(($7)|0)==0;
    if ($cmp7) {

      return;
    }
    HEAP32[((5243712)>>2)]=0;
    while(1) {
      var $8=HEAP32[((5243712)>>2)];
      var $9=HEAP32[((5243716)>>2)];
      var $cmp12=(($8)|0) < (($9)|0);
      if (!($cmp12)) {
        break;
      }
      var $10=HEAP32[((5243712)>>2)];
      var $11=HEAP32[((5243720)>>2)];
      var $arrayidx15=(($11+$10)|0);
      var $12=HEAP8[($arrayidx15)];
      var $idxprom16=(($12)&255);
      var $arrayidx17=((5243136+$idxprom16)|0);
      var $13=HEAP8[($arrayidx17)];
      var $conv18=(($13)&255);
      var $14=HEAP32[((5252592)>>2)];
      var $call=_fputc($conv18, $14);
      var $15=HEAP32[((5243712)>>2)];
      var $add=((($15)+(1))|0);
      HEAP32[((5243712)>>2)]=$add;
    }
  }
  var $16=HEAP32[((5252592)>>2)];
  var $call21=_fputc(10, $16);
  var $17=HEAP32[((5252588)>>2)];
  var $add22=((($17)+(1))|0);
  HEAP32[((5252588)>>2)]=$add22;
  HEAP32[((5243716)>>2)]=0;

  return;
}
_outputbblline["X"]=1;

function _bst1printstringsizeexceeded() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5252928)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5252928)|0), $1);

  return;
}


function _bst2printstringsizeexceeded() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5267816)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5267816)|0), $1);
  _bstmildexwarnprint();
  var $2=HEAP32[((5243908)>>2)];
  var $call2=_fprintf($2, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5267760)|0),tempInt));
  var $3=HEAP32[((5243524)>>2)];
  var $call3=_fprintf($3, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5267760)|0),tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _zbracesunbalancedcomplaint($poplitvar) {
  var label = 0;

  var $poplitvar_addr;
  $poplitvar_addr=$poplitvar;
  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5267736)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5267736)|0), $1);
  var $2=$poplitvar_addr;
  _zprintapoolstr($2);
  var $3=HEAP32[((5243908)>>2)];
  var $call2=_fputs(((5267692)|0), $3);
  var $4=HEAP32[((5243524)>>2)];
  var $call3=_fputs(((5267692)|0), $4);
  _bstmildexwarnprint();

  return;
}


function _traceandstatprinting() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243908)>>2)];
  var $1=HEAP32[((5243800)>>2)];
  var $call=_fprintf($0, ((5264472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5267532)|0),HEAP32[(((tempInt)+(4))>>2)]=$1,tempInt));
  var $2=HEAP32[((5243800)>>2)];
  var $cmp=(($2)|0)==1;
  if ($cmp) {
    var $3=HEAP32[((5243908)>>2)];
    var $call1=_fprintf($3, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5267512)|0),tempInt));
  } else {
    var $4=HEAP32[((5243908)>>2)];
    var $call2=_fprintf($4, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5267492)|0),tempInt));
  }
  var $5=HEAP32[((5243908)>>2)];
  var $6=HEAP32[((5243404)>>2)];
  var $call3=_fprintf($5, ((5267400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5267248)|0),HEAP32[(((tempInt)+(4))>>2)]=$6,HEAP32[(((tempInt)+(8))>>2)]=((5267152)|0),tempInt));
  var $7=HEAP32[((5243908)>>2)];
  var $8=HEAP32[((5243492)>>2)];
  var $9=HEAP32[((5243492)>>2)];
  var $10=HEAP32[((5243488)>>2)];
  var $arrayidx=(($10+($9<<2))|0);
  var $11=HEAP32[(($arrayidx)>>2)];
  var $call4=_fprintf($7, ((5267104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5267248)|0),HEAP32[(((tempInt)+(4))>>2)]=$8,HEAP32[(((tempInt)+(8))>>2)]=((5267080)|0),HEAP32[(((tempInt)+(12))>>2)]=$11,HEAP32[(((tempInt)+(16))>>2)]=((5267056)|0),tempInt));
  HEAP32[((5252344)>>2)]=0;
  HEAP32[((5243440)>>2)]=0;
  while(1) {
    var $12=HEAP32[((5252344)>>2)];
    var $cmp5=(($12)|0) < 37;
    if (!($cmp5)) {
      break;
    }
    var $13=HEAP32[((5243440)>>2)];
    var $14=HEAP32[((5252344)>>2)];
    var $arrayidx6=((5250896+($14<<2))|0);
    var $15=HEAP32[(($arrayidx6)>>2)];
    var $add=((($13)+($15))|0);
    HEAP32[((5243440)>>2)]=$add;
    var $16=HEAP32[((5252344)>>2)];
    var $add7=((($16)+(1))|0);
    HEAP32[((5252344)>>2)]=$add7;
  }
  var $17=HEAP32[((5243908)>>2)];
  var $18=HEAP32[((5243440)>>2)];
  var $call8=_fprintf($17, ((5267400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5267008)|0),HEAP32[(((tempInt)+(4))>>2)]=$18,HEAP32[(((tempInt)+(8))>>2)]=((5266920)|0),tempInt));
  HEAP32[((5252344)>>2)]=0;
  while(1) {
    var $19=HEAP32[((5252344)>>2)];
    var $cmp10=(($19)|0) < 37;
    if (!($cmp10)) {
      break;
    }
    var $20=HEAP32[((5243908)>>2)];
    var $21=HEAP32[((5252344)>>2)];
    var $arrayidx12=((5252348+($21<<2))|0);
    var $22=HEAP32[(($arrayidx12)>>2)];
    var $23=HEAP32[((5248752)>>2)];
    var $arrayidx13=(($23+($22<<2))|0);
    var $24=HEAP32[(($arrayidx13)>>2)];
    _zoutpoolstr($20, $24);
    var $25=HEAP32[((5243908)>>2)];
    var $26=HEAP32[((5252344)>>2)];
    var $arrayidx14=((5250896+($26<<2))|0);
    var $27=HEAP32[(($arrayidx14)>>2)];
    var $call15=_fprintf($25, ((5266892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5266868)|0),HEAP32[(((tempInt)+(4))>>2)]=$27,tempInt));
    var $28=HEAP32[((5252344)>>2)];
    var $add16=((($28)+(1))|0);
    HEAP32[((5252344)>>2)]=$add16;
  }
  STACKTOP = __stackBase__;
  return;
}
_traceandstatprinting["X"]=1;

function _zstartname($filename) {
  var label = 0;

  var $filename_addr;
  var $pptr;
  $filename_addr=$filename;
  var $0=HEAP32[((5243828)>>2)];
  _free($0);
  var $1=$filename_addr;
  var $add=((($1)+(1))|0);
  var $2=HEAP32[((5243488)>>2)];
  var $arrayidx=(($2+($add<<2))|0);
  var $3=HEAP32[(($arrayidx)>>2)];
  var $4=$filename_addr;
  var $5=HEAP32[((5243488)>>2)];
  var $arrayidx1=(($5+($4<<2))|0);
  var $6=HEAP32[(($arrayidx1)>>2)];
  var $sub=((($3)-($6))|0);
  var $add2=((($sub)+(1))|0);
  var $add3=((($add2)+(1))|0);
  var $mul=(($add3)&-1);
  var $call=_xmalloc($mul);
  HEAP32[((5243828)>>2)]=$call;
  HEAP32[((5243824)>>2)]=1;
  var $7=$filename_addr;
  var $8=HEAP32[((5243488)>>2)];
  var $arrayidx4=(($8+($7<<2))|0);
  var $9=HEAP32[(($arrayidx4)>>2)];
  $pptr=$9;
  while(1) {
    var $10=$pptr;
    var $11=$filename_addr;
    var $add5=((($11)+(1))|0);
    var $12=HEAP32[((5243488)>>2)];
    var $arrayidx6=(($12+($add5<<2))|0);
    var $13=HEAP32[(($arrayidx6)>>2)];
    var $cmp=(($10)|0) < (($13)|0);
    if (!($cmp)) {
      break;
    }
    var $14=$pptr;
    var $15=HEAP32[((5243496)>>2)];
    var $arrayidx7=(($15+$14)|0);
    var $16=HEAP8[($arrayidx7)];
    var $17=HEAP32[((5243824)>>2)];
    var $18=HEAP32[((5243828)>>2)];
    var $arrayidx8=(($18+$17)|0);
    HEAP8[($arrayidx8)]=$16;
    var $19=HEAP32[((5243824)>>2)];
    var $add9=((($19)+(1))|0);
    HEAP32[((5243824)>>2)]=$add9;
    var $20=$pptr;
    var $add10=((($20)+(1))|0);
    $pptr=$add10;
  }
  var $21=$filename_addr;
  var $add11=((($21)+(1))|0);
  var $22=HEAP32[((5243488)>>2)];
  var $arrayidx12=(($22+($add11<<2))|0);
  var $23=HEAP32[(($arrayidx12)>>2)];
  var $24=$filename_addr;
  var $25=HEAP32[((5243488)>>2)];
  var $arrayidx13=(($25+($24<<2))|0);
  var $26=HEAP32[(($arrayidx13)>>2)];
  var $sub14=((($23)-($26))|0);
  HEAP32[((5243832)>>2)]=$sub14;
  var $27=HEAP32[((5243832)>>2)];
  var $add15=((($27)+(1))|0);
  var $28=HEAP32[((5243828)>>2)];
  var $arrayidx16=(($28+$add15)|0);
  HEAP8[($arrayidx16)]=0;

  return;
}
_zstartname["X"]=1;

function _caseconversionconfusion() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5267624)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5267624)|0), $1);
  _printconfusion();
  _longjmp(((5248396)|0), 1);
  throw "Reached an unreachable!"
}


function _makestring() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $Result;
  var $0=HEAP32[((5243492)>>2)];
  var $1=HEAP32[((5243880)>>2)];
  var $cmp=(($0)|0)==(($1)|0);
  if ($cmp) {
    _printoverflow();
    var $2=HEAP32[((5243908)>>2)];
    var $3=HEAP32[((5243880)>>2)];
    var $call=_fprintf($2, ((5266892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5266768)|0),HEAP32[(((tempInt)+(4))>>2)]=$3,tempInt));
    var $4=HEAP32[((5243524)>>2)];
    var $5=HEAP32[((5243880)>>2)];
    var $call1=_fprintf($4, ((5266892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5266768)|0),HEAP32[(((tempInt)+(4))>>2)]=$5,tempInt));
    _longjmp(((5248396)|0), 1);
    throw "Reached an unreachable!"
  } else {
    var $6=HEAP32[((5243492)>>2)];
    var $add=((($6)+(1))|0);
    HEAP32[((5243492)>>2)]=$add;
    var $7=HEAP32[((5243704)>>2)];
    var $8=HEAP32[((5243492)>>2)];
    var $9=HEAP32[((5243488)>>2)];
    var $arrayidx=(($9+($8<<2))|0);
    HEAP32[(($arrayidx)>>2)]=$7;
    var $10=HEAP32[((5243492)>>2)];
    var $sub=((($10)-(1))|0);
    $Result=$sub;
    var $11=$Result;
    STACKTOP = __stackBase__;
    return $11;
  }
}


function _zswap($swap1, $swap2) {
  var label = 0;

  var $swap1_addr;
  var $swap2_addr;
  var $innocentbystander;
  $swap1_addr=$swap1;
  $swap2_addr=$swap2;
  var $0=$swap2_addr;
  var $1=HEAP32[((5251188)>>2)];
  var $arrayidx=(($1+($0<<2))|0);
  var $2=HEAP32[(($arrayidx)>>2)];
  $innocentbystander=$2;
  var $3=$swap1_addr;
  var $4=HEAP32[((5251188)>>2)];
  var $arrayidx1=(($4+($3<<2))|0);
  var $5=HEAP32[(($arrayidx1)>>2)];
  var $6=$swap2_addr;
  var $7=HEAP32[((5251188)>>2)];
  var $arrayidx2=(($7+($6<<2))|0);
  HEAP32[(($arrayidx2)>>2)]=$5;
  var $8=$innocentbystander;
  var $9=$swap1_addr;
  var $10=HEAP32[((5251188)>>2)];
  var $arrayidx3=(($10+($9<<2))|0);
  HEAP32[(($arrayidx3)>>2)]=$8;

  return;
}


function _zpredefine($pds, $len, $ilk) {
  var label = 0;

  var $pds_addr;
  var $len_addr;
  var $ilk_addr;
  var $i;
  var $for_end;
  $pds_addr=$pds;
  $len_addr=$len;
  $ilk_addr=$ilk;
  $i=1;
  var $0=$len_addr;
  var $conv=(($0)&255);
  $for_end=$conv;
  var $1=$i;
  var $conv1=(($1)&255);
  var $2=$for_end;
  var $cmp=(($conv1)|0) <= (($2)|0);
  if (!($cmp)) {
    var $11=HEAP32[((5252252)>>2)];
    var $12=$len_addr;
    var $conv10=(($12)&255);
    var $13=$ilk_addr;
    var $call=_zstrlookup($11, 1, $conv10, $13, 1);
    HEAP32[((5243652)>>2)]=$call;

    return;
  }
  while(1) {
    var $3=$i;
    var $conv3=(($3)&255);
    var $sub=((($conv3)-(1))|0);
    var $4=$pds_addr;
    var $arrayidx=(($4+$sub)|0);
    var $5=HEAP8[($arrayidx)];
    var $idxprom=(($5)&255);
    var $arrayidx4=((5242880+$idxprom)|0);
    var $6=HEAP8[($arrayidx4)];
    var $7=$i;
    var $idxprom5=(($7)&255);
    var $8=HEAP32[((5252252)>>2)];
    var $arrayidx6=(($8+$idxprom5)|0);
    HEAP8[($arrayidx6)]=$6;
    var $9=$i;
    var $inc=((($9)+(1))&255);
    $i=$inc;
    var $conv7=(($9)&255);
    var $10=$for_end;
    var $cmp8=(($conv7)|0) < (($10)|0);
    if (!($cmp8)) {
      break;
    }
  }
  var $11=HEAP32[((5252252)>>2)];
  var $12=$len_addr;
  var $conv10=(($12)&255);
  var $13=$ilk_addr;
  var $call=_zstrlookup($11, 1, $conv10, $13, 1);
  HEAP32[((5243652)>>2)]=$call;

  return;
}


function _zzinttoASCII($theint, $intbuf, $intbegin, $intend) {
  var label = 0;

  var $theint_addr;
  var $intbuf_addr;
  var $intbegin_addr;
  var $intend_addr;
  var $intptr;
  var $intxptr;
  var $inttmpval;
  $theint_addr=$theint;
  $intbuf_addr=$intbuf;
  $intbegin_addr=$intbegin;
  $intend_addr=$intend;
  var $0=$intbegin_addr;
  $intptr=$0;
  var $1=$theint_addr;
  var $cmp=(($1)|0) < 0;
  if ($cmp) {
    var $2=$intptr;
    var $3=HEAP32[((5252240)>>2)];
    var $cmp1=(($2)|0)==(($3)|0);
    if ($cmp1) {
      _bufferoverflow();
    }
    var $4=$intptr;
    var $5=$intbuf_addr;
    var $arrayidx=(($5+$4)|0);
    HEAP8[($arrayidx)]=45;
    var $6=$intptr;
    var $add=((($6)+(1))|0);
    $intptr=$add;
    var $7=$theint_addr;
    var $sub=(((-$7))|0);
    $theint_addr=$sub;
  }
  var $8=$intptr;
  $intxptr=$8;
  while(1) {
    var $9=$intptr;
    var $10=HEAP32[((5252240)>>2)];
    var $cmp4=(($9)|0)==(($10)|0);
    if ($cmp4) {
      _bufferoverflow();
    }
    var $11=$theint_addr;
    var $rem=((($11)|0))%(10);
    var $add7=((($rem)+(48))|0);
    var $conv=(($add7) & 255);
    var $12=$intptr;
    var $13=$intbuf_addr;
    var $arrayidx8=(($13+$12)|0);
    HEAP8[($arrayidx8)]=$conv;
    var $14=$intptr;
    var $add9=((($14)+(1))|0);
    $intptr=$add9;
    var $15=$theint_addr;
    var $div=((((($15)|0))/(10))&-1);
    $theint_addr=$div;
    var $16=$theint_addr;
    var $cmp10=(($16)|0)==0;
    var $lnot=$cmp10 ^ 1;
    if (!($lnot)) {
      break;
    }
  }
  var $17=$intptr;
  var $18=$intend_addr;
  HEAP32[(($18)>>2)]=$17;
  var $19=$intptr;
  var $sub12=((($19)-(1))|0);
  $intptr=$sub12;
  while(1) {
    var $20=$intxptr;
    var $21=$intptr;
    var $cmp13=(($20)|0) < (($21)|0);
    if (!($cmp13)) {
      break;
    }
    var $22=$intxptr;
    var $23=$intbuf_addr;
    var $arrayidx15=(($23+$22)|0);
    var $24=HEAP8[($arrayidx15)];
    $inttmpval=$24;
    var $25=$intptr;
    var $26=$intbuf_addr;
    var $arrayidx16=(($26+$25)|0);
    var $27=HEAP8[($arrayidx16)];
    var $28=$intxptr;
    var $29=$intbuf_addr;
    var $arrayidx17=(($29+$28)|0);
    HEAP8[($arrayidx17)]=$27;
    var $30=$inttmpval;
    var $31=$intptr;
    var $32=$intbuf_addr;
    var $arrayidx18=(($32+$31)|0);
    HEAP8[($arrayidx18)]=$30;
    var $33=$intptr;
    var $sub19=((($33)-(1))|0);
    $intptr=$sub19;
    var $34=$intxptr;
    var $add20=((($34)+(1))|0);
    $intxptr=$add20;
  }

  return;
}
_zzinttoASCII["X"]=1;

function _zzadddatabasecite($newcite) {
  var label = 0;

  var $newcite_addr;
  $newcite_addr=$newcite;
  var $0=$newcite_addr;
  var $1=HEAP32[(($0)>>2)];
  _zcheckciteoverflow($1);
  var $2=HEAP32[((5243784)>>2)];
  var $3=$newcite_addr;
  var $4=HEAP32[(($3)>>2)];
  var $add=((($4)+(1))|0);
  var $mul=((($2)*($add))&-1);
  _zcheckfieldoverflow($mul);
  var $5=HEAP32[((5251180)>>2)];
  var $6=HEAP32[((5248752)>>2)];
  var $arrayidx=(($6+($5<<2))|0);
  var $7=HEAP32[(($arrayidx)>>2)];
  var $8=$newcite_addr;
  var $9=HEAP32[(($8)>>2)];
  var $10=HEAP32[((5251184)>>2)];
  var $arrayidx1=(($10+($9<<2))|0);
  HEAP32[(($arrayidx1)>>2)]=$7;
  var $11=$newcite_addr;
  var $12=HEAP32[(($11)>>2)];
  var $13=HEAP32[((5251180)>>2)];
  var $14=HEAP32[((5248484)>>2)];
  var $arrayidx2=(($14+($13<<2))|0);
  HEAP32[(($arrayidx2)>>2)]=$12;
  var $15=HEAP32[((5251180)>>2)];
  var $16=HEAP32[((5244192)>>2)];
  var $17=HEAP32[((5248484)>>2)];
  var $arrayidx3=(($17+($16<<2))|0);
  HEAP32[(($arrayidx3)>>2)]=$15;
  var $18=$newcite_addr;
  var $19=HEAP32[(($18)>>2)];
  var $add4=((($19)+(1))|0);
  var $20=$newcite_addr;
  HEAP32[(($20)>>2)]=$add4;

  return;
}


function _zfindcitelocsforthiscitekey($citestr) {
  var label = 0;

  var $citestr_addr;
  var $Result;
  $citestr_addr=$citestr;
  HEAP32[((5251056)>>2)]=0;
  var $0=$citestr_addr;
  var $1=HEAP32[((5243488)>>2)];
  var $arrayidx=(($1+($0<<2))|0);
  var $2=HEAP32[(($arrayidx)>>2)];
  HEAP32[((5243460)>>2)]=$2;
  var $3=$citestr_addr;
  var $add=((($3)+(1))|0);
  var $4=HEAP32[((5243488)>>2)];
  var $arrayidx1=(($4+($add<<2))|0);
  var $5=HEAP32[(($arrayidx1)>>2)];
  HEAP32[((5243464)>>2)]=$5;
  while(1) {
    var $6=HEAP32[((5243460)>>2)];
    var $7=HEAP32[((5243464)>>2)];
    var $cmp=(($6)|0) < (($7)|0);
    if (!($cmp)) {
      break;
    }
    var $8=HEAP32[((5243460)>>2)];
    var $9=HEAP32[((5243496)>>2)];
    var $arrayidx2=(($9+$8)|0);
    var $10=HEAP8[($arrayidx2)];
    var $11=HEAP32[((5251056)>>2)];
    var $12=HEAP32[((5251064)>>2)];
    var $arrayidx3=(($12+$11)|0);
    HEAP8[($arrayidx3)]=$10;
    var $13=HEAP32[((5251056)>>2)];
    var $add4=((($13)+(1))|0);
    HEAP32[((5251056)>>2)]=$add4;
    var $14=HEAP32[((5243460)>>2)];
    var $add5=((($14)+(1))|0);
    HEAP32[((5243460)>>2)]=$add5;
  }
  var $15=HEAP32[((5251064)>>2)];
  var $16=$citestr_addr;
  var $add6=((($16)+(1))|0);
  var $17=HEAP32[((5243488)>>2)];
  var $arrayidx7=(($17+($add6<<2))|0);
  var $18=HEAP32[(($arrayidx7)>>2)];
  var $19=$citestr_addr;
  var $20=HEAP32[((5243488)>>2)];
  var $arrayidx8=(($20+($19<<2))|0);
  var $21=HEAP32[(($arrayidx8)>>2)];
  var $sub=((($18)-($21))|0);
  var $call=_zstrlookup($15, 0, $sub, 9, 0);
  HEAP32[((5251180)>>2)]=$call;
  var $22=HEAP32[((5248776)>>2)];
  HEAP32[((5251192)>>2)]=$22;
  var $23=HEAP32[((5251064)>>2)];
  var $24=$citestr_addr;
  var $add9=((($24)+(1))|0);
  var $25=HEAP32[((5243488)>>2)];
  var $arrayidx10=(($25+($add9<<2))|0);
  var $26=HEAP32[(($arrayidx10)>>2)];
  var $27=$citestr_addr;
  var $28=HEAP32[((5243488)>>2)];
  var $arrayidx11=(($28+($27<<2))|0);
  var $29=HEAP32[(($arrayidx11)>>2)];
  var $sub12=((($26)-($29))|0);
  _zlowercase($23, 0, $sub12);
  var $30=HEAP32[((5251064)>>2)];
  var $31=$citestr_addr;
  var $add13=((($31)+(1))|0);
  var $32=HEAP32[((5243488)>>2)];
  var $arrayidx14=(($32+($add13<<2))|0);
  var $33=HEAP32[(($arrayidx14)>>2)];
  var $34=$citestr_addr;
  var $35=HEAP32[((5243488)>>2)];
  var $arrayidx15=(($35+($34<<2))|0);
  var $36=HEAP32[(($arrayidx15)>>2)];
  var $sub16=((($33)-($36))|0);
  var $call17=_zstrlookup($30, 0, $sub16, 10, 0);
  HEAP32[((5244192)>>2)]=$call17;
  var $37=HEAP32[((5248776)>>2)];
  var $tobool=(($37)|0)!=0;
  if ($tobool) {
    $Result=1;
    var $38=$Result;

    return $38;
  } else {
    $Result=0;
    var $38=$Result;

    return $38;
  }
}
_zfindcitelocsforthiscitekey["X"]=1;

function _zstrlookup($buf, $j, $l, $ilk, $insertit) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $buf_addr;
  var $j_addr;
  var $l_addr;
  var $ilk_addr;
  var $insertit_addr;
  var $Result;
  var $h;
  var $p;
  var $k;
  var $strnum;
  $buf_addr=$buf;
  $j_addr=$j;
  $l_addr=$l;
  $ilk_addr=$ilk;
  $insertit_addr=$insertit;
  $h=0;
  var $0=$j_addr;
  $k=$0;
  while(1) {
    var $1=$k;
    var $2=$j_addr;
    var $3=$l_addr;
    var $add=((($2)+($3))|0);
    var $cmp=(($1)|0) < (($add)|0);
    if (!($cmp)) {
      break;
    }
    var $4=$h;
    var $5=$h;
    var $add1=((($4)+($5))|0);
    var $6=$k;
    var $7=$buf_addr;
    var $arrayidx=(($7+$6)|0);
    var $8=HEAP8[($arrayidx)];
    var $conv=(($8)&255);
    var $add2=((($add1)+($conv))|0);
    $h=$add2;
    while(1) {
      var $9=$h;
      var $10=HEAP32[((5248760)>>2)];
      var $cmp4=(($9)|0) >= (($10)|0);
      if (!($cmp4)) {
        break;
      }
      var $11=$h;
      var $12=HEAP32[((5248760)>>2)];
      var $sub=((($11)-($12))|0);
      $h=$sub;
    }
    var $13=$k;
    var $add7=((($13)+(1))|0);
    $k=$add7;
  }
  var $14=$h;
  var $add9=((($14)+(1))|0);
  $p=$add9;
  HEAP32[((5248776)>>2)]=0;
  $strnum=0;
  while(1) {
    var $15=$p;
    var $16=HEAP32[((5248752)>>2)];
    var $arrayidx12=(($16+($15<<2))|0);
    var $17=HEAP32[(($arrayidx12)>>2)];
    var $cmp13=(($17)|0) > 0;
    if ($cmp13) {
      var $18=$p;
      var $19=HEAP32[((5248752)>>2)];
      var $arrayidx15=(($19+($18<<2))|0);
      var $20=HEAP32[(($arrayidx15)>>2)];
      var $21=$buf_addr;
      var $22=$j_addr;
      var $23=$l_addr;
      var $call=_zstreqbuf($20, $21, $22, $23);
      var $tobool=(($call)|0)!=0;
      if ($tobool) {
        var $24=$p;
        var $25=HEAP32[((5248772)>>2)];
        var $arrayidx17=(($25+$24)|0);
        var $26=HEAP8[($arrayidx17)];
        var $conv18=(($26)&255);
        var $27=$ilk_addr;
        var $conv19=(($27)&255);
        var $cmp20=(($conv18)|0)==(($conv19)|0);
        if ($cmp20) {
          label = 397;
          break;
        }
        var $28=$p;
        var $29=HEAP32[((5248752)>>2)];
        var $arrayidx23=(($29+($28<<2))|0);
        var $30=HEAP32[(($arrayidx23)>>2)];
        $strnum=$30;
      }
    }
    var $31=$p;
    var $32=HEAP32[((5248764)>>2)];
    var $arrayidx26=(($32+($31<<2))|0);
    var $33=HEAP32[(($arrayidx26)>>2)];
    var $cmp27=(($33)|0)==0;
    if ($cmp27) {
      break;
    }
    var $74=$p;
    var $75=HEAP32[((5248764)>>2)];
    var $arrayidx75=(($75+($74<<2))|0);
    var $76=HEAP32[(($arrayidx75)>>2)];
    $p=$76;
  }
  if (label == 397) {
    HEAP32[((5248776)>>2)]=1;
    var $77=$p;
    $Result=$77;
    var $78=$Result;
    STACKTOP = __stackBase__;
    return $78;
  }
  var $34=$insertit_addr;
  var $tobool30=(($34)|0)!=0;
  if (!($tobool30)) {
    var $77=$p;
    $Result=$77;
    var $78=$Result;
    STACKTOP = __stackBase__;
    return $78;
  }
  var $35=$p;
  var $36=HEAP32[((5248752)>>2)];
  var $arrayidx33=(($36+($35<<2))|0);
  var $37=HEAP32[(($arrayidx33)>>2)];
  var $cmp34=(($37)|0) > 0;
  do {
    if ($cmp34) {
      while(1) {
        var $38=HEAP32[((5248748)>>2)];
        var $cmp37=(($38)|0)==1;
        if ($cmp37) {
          label = 407;
          break;
        }
        var $43=HEAP32[((5248748)>>2)];
        var $sub43=((($43)-(1))|0);
        HEAP32[((5248748)>>2)]=$sub43;
        var $44=HEAP32[((5248748)>>2)];
        var $45=HEAP32[((5248752)>>2)];
        var $arrayidx44=(($45+($44<<2))|0);
        var $46=HEAP32[(($arrayidx44)>>2)];
        var $cmp45=(($46)|0)==0;
        var $lnot=$cmp45 ^ 1;
        if (!($lnot)) {
          label = 410;
          break;
        }
      }
      if (label == 410) {
        var $47=HEAP32[((5248748)>>2)];
        var $48=$p;
        var $49=HEAP32[((5248764)>>2)];
        var $arrayidx47=(($49+($48<<2))|0);
        HEAP32[(($arrayidx47)>>2)]=$47;
        var $50=HEAP32[((5248748)>>2)];
        $p=$50;
        break;
      }
      else if (label == 407) {
        _printoverflow();
        var $39=HEAP32[((5243908)>>2)];
        var $40=HEAP32[((5248756)>>2)];
        var $call40=_fprintf($39, ((5266892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5266700)|0),HEAP32[(((tempInt)+(4))>>2)]=$40,tempInt));
        var $41=HEAP32[((5243524)>>2)];
        var $42=HEAP32[((5248756)>>2)];
        var $call41=_fprintf($41, ((5266892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5266700)|0),HEAP32[(((tempInt)+(4))>>2)]=$42,tempInt));
        _longjmp(((5248396)|0), 1);
        throw "Reached an unreachable!"
      }
    }
  } while(0);
  var $51=$strnum;
  var $cmp49=(($51)|0) > 0;
  if ($cmp49) {
    var $52=$strnum;
    var $53=$p;
    var $54=HEAP32[((5248752)>>2)];
    var $arrayidx52=(($54+($53<<2))|0);
    HEAP32[(($arrayidx52)>>2)]=$52;
  } else {
    while(1) {
      var $55=HEAP32[((5243704)>>2)];
      var $56=$l_addr;
      var $add55=((($55)+($56))|0);
      var $57=HEAP32[((5243700)>>2)];
      var $cmp56=(($add55)|0) > (($57)|0);
      if (!($cmp56)) {
        break;
      }
      _pooloverflow();
    }
    var $58=$j_addr;
    $k=$58;
    while(1) {
      var $59=$k;
      var $60=$j_addr;
      var $61=$l_addr;
      var $add61=((($60)+($61))|0);
      var $cmp62=(($59)|0) < (($add61)|0);
      if (!($cmp62)) {
        break;
      }
      var $62=$k;
      var $63=$buf_addr;
      var $arrayidx65=(($63+$62)|0);
      var $64=HEAP8[($arrayidx65)];
      var $65=HEAP32[((5243704)>>2)];
      var $66=HEAP32[((5243496)>>2)];
      var $arrayidx66=(($66+$65)|0);
      HEAP8[($arrayidx66)]=$64;
      var $67=HEAP32[((5243704)>>2)];
      var $add67=((($67)+(1))|0);
      HEAP32[((5243704)>>2)]=$add67;
      var $68=$k;
      var $add68=((($68)+(1))|0);
      $k=$add68;
    }
    var $call70=_makestring();
    var $69=$p;
    var $70=HEAP32[((5248752)>>2)];
    var $arrayidx71=(($70+($69<<2))|0);
    HEAP32[(($arrayidx71)>>2)]=$call70;
  }
  var $71=$ilk_addr;
  var $72=$p;
  var $73=HEAP32[((5248772)>>2)];
  var $arrayidx73=(($73+$72)|0);
  HEAP8[($arrayidx73)]=$71;
  var $77=$p;
  $Result=$77;
  var $78=$Result;
  STACKTOP = __stackBase__;
  return $78;
}
_zstrlookup["X"]=1;

function _zlessthan($arg1, $arg2) {
  var label = 0;

  var $arg1_addr;
  var $arg2_addr;
  var $Result;
  var $charptr;
  var $ptr1;
  var $ptr2;
  var $char1;
  var $char2;
  $arg1_addr=$arg1;
  $arg2_addr=$arg2;
  var $0=$arg1_addr;
  var $1=HEAP32[((5243788)>>2)];
  var $mul=((($0)*($1))&-1);
  var $2=HEAP32[((5243564)>>2)];
  var $add=((($mul)+($2))|0);
  $ptr1=$add;
  var $3=$arg2_addr;
  var $4=HEAP32[((5243788)>>2)];
  var $mul1=((($3)*($4))&-1);
  var $5=HEAP32[((5243564)>>2)];
  var $add2=((($mul1)+($5))|0);
  $ptr2=$add2;
  $charptr=0;
  while(1) {
    var $6=$ptr1;
    var $7=HEAP32[((5251072)>>2)];
    var $add3=((($7)+(1))|0);
    var $mul4=((($6)*($add3))&-1);
    var $8=$charptr;
    var $add5=((($mul4)+($8))|0);
    var $9=HEAP32[((5251080)>>2)];
    var $arrayidx=(($9+$add5)|0);
    var $10=HEAP8[($arrayidx)];
    $char1=$10;
    var $11=$ptr2;
    var $12=HEAP32[((5251072)>>2)];
    var $add6=((($12)+(1))|0);
    var $mul7=((($11)*($add6))&-1);
    var $13=$charptr;
    var $add8=((($mul7)+($13))|0);
    var $14=HEAP32[((5251080)>>2)];
    var $arrayidx9=(($14+$add8)|0);
    var $15=HEAP8[($arrayidx9)];
    $char2=$15;
    var $16=$char1;
    var $conv=(($16)&255);
    var $cmp=(($conv)|0)==127;
    if ($cmp) {
      label = 429;
      break;
    }
    var $24=$char2;
    var $conv25=(($24)&255);
    var $cmp26=(($conv25)|0)==127;
    if ($cmp26) {
      label = 437;
      break;
    }
    var $25=$char1;
    var $conv30=(($25)&255);
    var $26=$char2;
    var $conv31=(($26)&255);
    var $cmp32=(($conv30)|0) < (($conv31)|0);
    if ($cmp32) {
      label = 439;
      break;
    }
    var $27=$char1;
    var $conv36=(($27)&255);
    var $28=$char2;
    var $conv37=(($28)&255);
    var $cmp38=(($conv36)|0) > (($conv37)|0);
    if ($cmp38) {
      label = 441;
      break;
    }
    var $29=$charptr;
    var $add44=((($29)+(1))|0);
    $charptr=$add44;
  }
  if (label == 437) {
    $Result=0;
    var $30=$Result;

    return $30;
  }
  else if (label == 441) {
    $Result=0;
    var $30=$Result;

    return $30;
  }
  else if (label == 429) {
    var $17=$char2;
    var $conv11=(($17)&255);
    var $cmp12=(($conv11)|0)==127;
    if (!($cmp12)) {
      $Result=1;
      var $30=$Result;

      return $30;
    }
    var $18=$arg1_addr;
    var $19=$arg2_addr;
    var $cmp15=(($18)|0) < (($19)|0);
    if ($cmp15) {
      $Result=1;
      var $30=$Result;

      return $30;
    }
    var $20=$arg1_addr;
    var $21=$arg2_addr;
    var $cmp18=(($20)|0) > (($21)|0);
    if (!($cmp18)) {
      var $22=HEAP32[((5243908)>>2)];
      var $call=_fputs(((5266644)|0), $22);
      var $23=HEAP32[((5243524)>>2)];
      var $call22=_fputs(((5266644)|0), $23);
      _printconfusion();
      _longjmp(((5248396)|0), 1);
      throw "Reached an unreachable!"
    }
    $Result=0;
    var $30=$Result;

    return $30;
  }
  else if (label == 439) {
    $Result=1;
    var $30=$Result;

    return $30;
  }
}
_zlessthan["X"]=1;

function _zscan1($char1) {
  var label = 0;

  var $char1_addr;
  var $Result;
  $char1_addr=$char1;
  var $0=HEAP32[((5252244)>>2)];
  HEAP32[((5252248)>>2)]=$0;
  while(1) {
    var $1=HEAP32[((5252244)>>2)];
    var $2=HEAP32[((5252252)>>2)];
    var $arrayidx=(($2+$1)|0);
    var $3=HEAP8[($arrayidx)];
    var $conv=(($3)&255);
    var $4=$char1_addr;
    var $conv1=(($4)&255);
    var $cmp=(($conv)|0)!=(($conv1)|0);
    if ($cmp) {
      var $5=HEAP32[((5252244)>>2)];
      var $6=HEAP32[((5244208)>>2)];
      var $cmp3=(($5)|0) < (($6)|0);
      var $7 = $cmp3;
    } else {
      var $7 = 0;
    }
    var $7;
    if (!($7)) {
      break;
    }
    var $8=HEAP32[((5252244)>>2)];
    var $add=((($8)+(1))|0);
    HEAP32[((5252244)>>2)]=$add;
  }
  var $9=HEAP32[((5252244)>>2)];
  var $10=HEAP32[((5244208)>>2)];
  var $cmp5=(($9)|0) < (($10)|0);
  if ($cmp5) {
    $Result=1;
    var $11=$Result;

    return $11;
  } else {
    $Result=0;
    var $11=$Result;

    return $11;
  }
}


function _zscan1white($char1) {
  var label = 0;

  var $char1_addr;
  var $Result;
  $char1_addr=$char1;
  var $0=HEAP32[((5252244)>>2)];
  HEAP32[((5252248)>>2)]=$0;
  while(1) {
    var $1=HEAP32[((5252244)>>2)];
    var $2=HEAP32[((5252252)>>2)];
    var $arrayidx=(($2+$1)|0);
    var $3=HEAP8[($arrayidx)];
    var $idxprom=(($3)&255);
    var $arrayidx1=((5243932+$idxprom)|0);
    var $4=HEAP8[($arrayidx1)];
    var $conv=(($4)&255);
    var $cmp=(($conv)|0)!=1;
    do {
      if ($cmp) {
        var $5=HEAP32[((5252244)>>2)];
        var $6=HEAP32[((5252252)>>2)];
        var $arrayidx3=(($6+$5)|0);
        var $7=HEAP8[($arrayidx3)];
        var $conv4=(($7)&255);
        var $8=$char1_addr;
        var $conv5=(($8)&255);
        var $cmp6=(($conv4)|0)!=(($conv5)|0);
        if (!($cmp6)) {
          var $11 = 0;
          break;
        }
        var $9=HEAP32[((5252244)>>2)];
        var $10=HEAP32[((5244208)>>2)];
        var $cmp8=(($9)|0) < (($10)|0);
        var $11 = $cmp8;
      } else {
        var $11 = 0;
      }
    } while(0);
    var $11;
    if (!($11)) {
      break;
    }
    var $12=HEAP32[((5252244)>>2)];
    var $add=((($12)+(1))|0);
    HEAP32[((5252244)>>2)]=$add;
  }
  var $13=HEAP32[((5252244)>>2)];
  var $14=HEAP32[((5244208)>>2)];
  var $cmp10=(($13)|0) < (($14)|0);
  if ($cmp10) {
    $Result=1;
    var $15=$Result;

    return $15;
  } else {
    $Result=0;
    var $15=$Result;

    return $15;
  }
}


function _zscan2($char1, $char2) {
  var label = 0;

  var $char1_addr;
  var $char2_addr;
  var $Result;
  $char1_addr=$char1;
  $char2_addr=$char2;
  var $0=HEAP32[((5252244)>>2)];
  HEAP32[((5252248)>>2)]=$0;
  while(1) {
    var $1=HEAP32[((5252244)>>2)];
    var $2=HEAP32[((5252252)>>2)];
    var $arrayidx=(($2+$1)|0);
    var $3=HEAP8[($arrayidx)];
    var $conv=(($3)&255);
    var $4=$char1_addr;
    var $conv1=(($4)&255);
    var $cmp=(($conv)|0)!=(($conv1)|0);
    do {
      if ($cmp) {
        var $5=HEAP32[((5252244)>>2)];
        var $6=HEAP32[((5252252)>>2)];
        var $arrayidx3=(($6+$5)|0);
        var $7=HEAP8[($arrayidx3)];
        var $conv4=(($7)&255);
        var $8=$char2_addr;
        var $conv5=(($8)&255);
        var $cmp6=(($conv4)|0)!=(($conv5)|0);
        if (!($cmp6)) {
          var $11 = 0;
          break;
        }
        var $9=HEAP32[((5252244)>>2)];
        var $10=HEAP32[((5244208)>>2)];
        var $cmp8=(($9)|0) < (($10)|0);
        var $11 = $cmp8;
      } else {
        var $11 = 0;
      }
    } while(0);
    var $11;
    if (!($11)) {
      break;
    }
    var $12=HEAP32[((5252244)>>2)];
    var $add=((($12)+(1))|0);
    HEAP32[((5252244)>>2)]=$add;
  }
  var $13=HEAP32[((5252244)>>2)];
  var $14=HEAP32[((5244208)>>2)];
  var $cmp10=(($13)|0) < (($14)|0);
  if ($cmp10) {
    $Result=1;
    var $15=$Result;

    return $15;
  } else {
    $Result=0;
    var $15=$Result;

    return $15;
  }
}


function _zscan2white($char1, $char2) {
  var label = 0;

  var $char1_addr;
  var $char2_addr;
  var $Result;
  $char1_addr=$char1;
  $char2_addr=$char2;
  var $0=HEAP32[((5252244)>>2)];
  HEAP32[((5252248)>>2)]=$0;
  while(1) {
    var $1=HEAP32[((5252244)>>2)];
    var $2=HEAP32[((5252252)>>2)];
    var $arrayidx=(($2+$1)|0);
    var $3=HEAP8[($arrayidx)];
    var $conv=(($3)&255);
    var $4=$char1_addr;
    var $conv1=(($4)&255);
    var $cmp=(($conv)|0)!=(($conv1)|0);
    do {
      if ($cmp) {
        var $5=HEAP32[((5252244)>>2)];
        var $6=HEAP32[((5252252)>>2)];
        var $arrayidx3=(($6+$5)|0);
        var $7=HEAP8[($arrayidx3)];
        var $conv4=(($7)&255);
        var $8=$char2_addr;
        var $conv5=(($8)&255);
        var $cmp6=(($conv4)|0)!=(($conv5)|0);
        if (!($cmp6)) {
          var $15 = 0;
          break;
        }
        var $9=HEAP32[((5252244)>>2)];
        var $10=HEAP32[((5252252)>>2)];
        var $arrayidx9=(($10+$9)|0);
        var $11=HEAP8[($arrayidx9)];
        var $idxprom=(($11)&255);
        var $arrayidx10=((5243932+$idxprom)|0);
        var $12=HEAP8[($arrayidx10)];
        var $conv11=(($12)&255);
        var $cmp12=(($conv11)|0)!=1;
        if (!($cmp12)) {
          var $15 = 0;
          break;
        }
        var $13=HEAP32[((5252244)>>2)];
        var $14=HEAP32[((5244208)>>2)];
        var $cmp14=(($13)|0) < (($14)|0);
        var $15 = $cmp14;
      } else {
        var $15 = 0;
      }
    } while(0);
    var $15;
    if (!($15)) {
      break;
    }
    var $16=HEAP32[((5252244)>>2)];
    var $add=((($16)+(1))|0);
    HEAP32[((5252244)>>2)]=$add;
  }
  var $17=HEAP32[((5252244)>>2)];
  var $18=HEAP32[((5244208)>>2)];
  var $cmp16=(($17)|0) < (($18)|0);
  if ($cmp16) {
    $Result=1;
    var $19=$Result;

    return $19;
  } else {
    $Result=0;
    var $19=$Result;

    return $19;
  }
}
_zscan2white["X"]=1;

function _zquicksort($leftend, $rightend) {
  var label = 0;

  var $leftend_addr;
  var $rightend_addr;
  var $left;
  var $right;
  var $insertptr;
  var $middle;
  var $partition;
  var $for_end;
  var $for_end3;
  $leftend_addr=$leftend;
  $rightend_addr=$rightend;
  var $0=$rightend_addr;
  var $1=$leftend_addr;
  var $sub=((($0)-($1))|0);
  var $cmp=(($sub)|0) < 10;
  if ($cmp) {
    var $2=$leftend_addr;
    var $add=((($2)+(1))|0);
    $insertptr=$add;
    var $3=$rightend_addr;
    $for_end=$3;
    var $4=$insertptr;
    var $5=$for_end;
    var $cmp1=(($4)|0) <= (($5)|0);
    if ($cmp1) {
      while(1) {
        var $6=$insertptr;
        $right=$6;
        var $7=$leftend_addr;
        var $add4=((($7)+(1))|0);
        $for_end3=$add4;
        var $8=$right;
        var $9=$for_end3;
        var $cmp5=(($8)|0) >= (($9)|0);
        do {
          if ($cmp5) {
            while(1) {
              var $10=$right;
              var $sub8=((($10)-(1))|0);
              var $11=HEAP32[((5251188)>>2)];
              var $arrayidx=(($11+($sub8<<2))|0);
              var $12=HEAP32[(($arrayidx)>>2)];
              var $13=$right;
              var $14=HEAP32[((5251188)>>2)];
              var $arrayidx9=(($14+($13<<2))|0);
              var $15=HEAP32[(($arrayidx9)>>2)];
              var $call=_zlessthan($12, $15);
              var $tobool=(($call)|0)!=0;
              if ($tobool) {
                label = 507;
                break;
              }
              var $16=$right;
              var $sub11=((($16)-(1))|0);
              var $17=$right;
              _zswap($sub11, $17);
              var $18=$right;
              var $dec=((($18)-(1))|0);
              $right=$dec;
              var $19=$for_end3;
              var $cmp12=(($18)|0) > (($19)|0);
              if (!($cmp12)) {
                label = 510;
                break;
              }
            }
            if (label == 510) {
              label = 0;
              label = 511;
              break;
            }
            else if (label == 507) {
              label = 0;
              break;
            }
          } else {
            label = 511;
          }
        } while(0);
        if (label == 511) {
          label = 0;
        }
        var $20=$insertptr;
        var $inc=((($20)+(1))|0);
        $insertptr=$inc;
        var $21=$for_end;
        var $cmp15=(($20)|0) < (($21)|0);
        if (!($cmp15)) {
          break;
        }
      }
    }

    return;
  }
  var $22=$leftend_addr;
  var $add18=((($22)+(4))|0);
  $left=$add18;
  var $23=$leftend_addr;
  var $24=$rightend_addr;
  var $add19=((($23)+($24))|0);
  var $div=((((($add19)|0))/(2))&-1);
  $middle=$div;
  var $25=$rightend_addr;
  var $sub20=((($25)-(4))|0);
  $right=$sub20;
  var $26=$left;
  var $27=HEAP32[((5251188)>>2)];
  var $arrayidx21=(($27+($26<<2))|0);
  var $28=HEAP32[(($arrayidx21)>>2)];
  var $29=$middle;
  var $30=HEAP32[((5251188)>>2)];
  var $arrayidx22=(($30+($29<<2))|0);
  var $31=HEAP32[(($arrayidx22)>>2)];
  var $call23=_zlessthan($28, $31);
  var $tobool24=(($call23)|0)!=0;
  if ($tobool24) {
    var $32=$middle;
    var $33=HEAP32[((5251188)>>2)];
    var $arrayidx26=(($33+($32<<2))|0);
    var $34=HEAP32[(($arrayidx26)>>2)];
    var $35=$right;
    var $36=HEAP32[((5251188)>>2)];
    var $arrayidx27=(($36+($35<<2))|0);
    var $37=HEAP32[(($arrayidx27)>>2)];
    var $call28=_zlessthan($34, $37);
    var $tobool29=(($call28)|0)!=0;
    if ($tobool29) {
      var $38=$leftend_addr;
      var $39=$middle;
      _zswap($38, $39);
    } else {
      var $40=$left;
      var $41=HEAP32[((5251188)>>2)];
      var $arrayidx32=(($41+($40<<2))|0);
      var $42=HEAP32[(($arrayidx32)>>2)];
      var $43=$right;
      var $44=HEAP32[((5251188)>>2)];
      var $arrayidx33=(($44+($43<<2))|0);
      var $45=HEAP32[(($arrayidx33)>>2)];
      var $call34=_zlessthan($42, $45);
      var $tobool35=(($call34)|0)!=0;
      if ($tobool35) {
        var $46=$leftend_addr;
        var $47=$right;
        _zswap($46, $47);
      } else {
        var $48=$leftend_addr;
        var $49=$left;
        _zswap($48, $49);
      }
    }
  } else {
    var $50=$right;
    var $51=HEAP32[((5251188)>>2)];
    var $arrayidx41=(($51+($50<<2))|0);
    var $52=HEAP32[(($arrayidx41)>>2)];
    var $53=$middle;
    var $54=HEAP32[((5251188)>>2)];
    var $arrayidx42=(($54+($53<<2))|0);
    var $55=HEAP32[(($arrayidx42)>>2)];
    var $call43=_zlessthan($52, $55);
    var $tobool44=(($call43)|0)!=0;
    if ($tobool44) {
      var $56=$leftend_addr;
      var $57=$middle;
      _zswap($56, $57);
    } else {
      var $58=$right;
      var $59=HEAP32[((5251188)>>2)];
      var $arrayidx47=(($59+($58<<2))|0);
      var $60=HEAP32[(($arrayidx47)>>2)];
      var $61=$left;
      var $62=HEAP32[((5251188)>>2)];
      var $arrayidx48=(($62+($61<<2))|0);
      var $63=HEAP32[(($arrayidx48)>>2)];
      var $call49=_zlessthan($60, $63);
      var $tobool50=(($call49)|0)!=0;
      if ($tobool50) {
        var $64=$leftend_addr;
        var $65=$right;
        _zswap($64, $65);
      } else {
        var $66=$leftend_addr;
        var $67=$left;
        _zswap($66, $67);
      }
    }
  }
  var $68=$leftend_addr;
  var $69=HEAP32[((5251188)>>2)];
  var $arrayidx56=(($69+($68<<2))|0);
  var $70=HEAP32[(($arrayidx56)>>2)];
  $partition=$70;
  var $71=$leftend_addr;
  var $add57=((($71)+(1))|0);
  $left=$add57;
  var $72=$rightend_addr;
  $right=$72;
  while(1) {
    while(1) {
      var $73=$left;
      var $74=HEAP32[((5251188)>>2)];
      var $arrayidx59=(($74+($73<<2))|0);
      var $75=HEAP32[(($arrayidx59)>>2)];
      var $76=$partition;
      var $call60=_zlessthan($75, $76);
      var $tobool61=(($call60)|0)!=0;
      if (!($tobool61)) {
        break;
      }
      var $77=$left;
      var $add62=((($77)+(1))|0);
      $left=$add62;
    }
    while(1) {
      var $78=$partition;
      var $79=$right;
      var $80=HEAP32[((5251188)>>2)];
      var $arrayidx64=(($80+($79<<2))|0);
      var $81=HEAP32[(($arrayidx64)>>2)];
      var $call65=_zlessthan($78, $81);
      var $tobool66=(($call65)|0)!=0;
      if (!($tobool66)) {
        break;
      }
      var $82=$right;
      var $sub68=((($82)-(1))|0);
      $right=$sub68;
    }
    var $83=$left;
    var $84=$right;
    var $cmp70=(($83)|0) < (($84)|0);
    if ($cmp70) {
      var $85=$left;
      var $86=$right;
      _zswap($85, $86);
      var $87=$left;
      var $add72=((($87)+(1))|0);
      $left=$add72;
      var $88=$right;
      var $sub73=((($88)-(1))|0);
      $right=$sub73;
    }
    var $89=$left;
    var $90=$right;
    var $add76=((($90)+(1))|0);
    var $cmp77=(($89)|0)==(($add76)|0);
    var $lnot=$cmp77 ^ 1;
    if (!($lnot)) {
      break;
    }
  }
  var $91=$leftend_addr;
  var $92=$right;
  _zswap($91, $92);
  var $93=$leftend_addr;
  var $94=$right;
  var $sub79=((($94)-(1))|0);
  _zquicksort($93, $sub79);
  var $95=$left;
  var $96=$rightend_addr;
  _zquicksort($95, $96);

  return;
}
_zquicksort["X"]=1;

function _zzbuildin($pds, $len, $fnhashloc, $bltinnum) {
  var label = 0;

  var $pds_addr;
  var $len_addr;
  var $fnhashloc_addr;
  var $bltinnum_addr;
  $pds_addr=$pds;
  $len_addr=$len;
  $fnhashloc_addr=$fnhashloc;
  $bltinnum_addr=$bltinnum;
  var $0=$pds_addr;
  var $1=$len_addr;
  _zpredefine($0, $1, 11);
  var $2=HEAP32[((5243652)>>2)];
  var $3=$fnhashloc_addr;
  HEAP32[(($3)>>2)]=$2;
  var $4=$fnhashloc_addr;
  var $5=HEAP32[(($4)>>2)];
  var $6=HEAP32[((5248804)>>2)];
  var $arrayidx=(($6+$5)|0);
  HEAP8[($arrayidx)]=0;
  var $7=$bltinnum_addr;
  var $8=$fnhashloc_addr;
  var $9=HEAP32[(($8)>>2)];
  var $10=HEAP32[((5248484)>>2)];
  var $arrayidx1=(($10+($9<<2))|0);
  HEAP32[(($arrayidx1)>>2)]=$7;
  var $11=$fnhashloc_addr;
  var $12=HEAP32[(($11)>>2)];
  var $13=$bltinnum_addr;
  var $arrayidx2=((5252348+($13<<2))|0);
  HEAP32[(($arrayidx2)>>2)]=$12;
  var $14=$bltinnum_addr;
  var $arrayidx3=((5250896+($14<<2))|0);
  HEAP32[(($arrayidx3)>>2)]=0;

  return;
}


function _predefcertainstrings() {
  var label = 0;

  _zpredefine(((5266620)|0), 4, 7);
  var $0=HEAP32[((5243652)>>2)];
  var $1=HEAP32[((5248752)>>2)];
  var $arrayidx=(($1+($0<<2))|0);
  var $2=HEAP32[(($arrayidx)>>2)];
  HEAP32[((5243608)>>2)]=$2;
  _zpredefine(((5266596)|0), 4, 7);
  var $3=HEAP32[((5243652)>>2)];
  var $4=HEAP32[((5248752)>>2)];
  var $arrayidx1=(($4+($3<<2))|0);
  var $5=HEAP32[(($arrayidx1)>>2)];
  HEAP32[((5243604)>>2)]=$5;
  _zpredefine(((5266572)|0), 4, 7);
  var $6=HEAP32[((5243652)>>2)];
  var $7=HEAP32[((5248752)>>2)];
  var $arrayidx2=(($7+($6<<2))|0);
  var $8=HEAP32[(($arrayidx2)>>2)];
  HEAP32[((5243576)>>2)]=$8;
  _zpredefine(((5266536)|0), 4, 7);
  var $9=HEAP32[((5243652)>>2)];
  var $10=HEAP32[((5248752)>>2)];
  var $arrayidx3=(($10+($9<<2))|0);
  var $11=HEAP32[(($arrayidx3)>>2)];
  HEAP32[((5243588)>>2)]=$11;
  _zpredefine(((5266444)|0), 4, 7);
  var $12=HEAP32[((5243652)>>2)];
  var $13=HEAP32[((5248752)>>2)];
  var $arrayidx4=(($13+($12<<2))|0);
  var $14=HEAP32[(($arrayidx4)>>2)];
  HEAP32[((5243596)>>2)]=$14;
  _zpredefine(((5266420)|0), 10, 8);
  var $15=HEAP32[((5243652)>>2)];
  var $16=HEAP32[((5248752)>>2)];
  var $arrayidx5=(($16+($15<<2))|0);
  var $17=HEAP32[(($arrayidx5)>>2)];
  HEAP32[((5243592)>>2)]=$17;
  _zpredefine(((5266396)|0), 7, 8);
  var $18=HEAP32[((5243652)>>2)];
  var $19=HEAP32[((5248752)>>2)];
  var $arrayidx6=(($19+($18<<2))|0);
  var $20=HEAP32[(($arrayidx6)>>2)];
  HEAP32[((5243600)>>2)]=$20;
  _zpredefine(((5266320)|0), 9, 2);
  var $21=HEAP32[((5243652)>>2)];
  var $22=HEAP32[((5248484)>>2)];
  var $arrayidx7=(($22+($21<<2))|0);
  HEAP32[(($arrayidx7)>>2)]=2;
  _zpredefine(((5266224)|0), 8, 2);
  var $23=HEAP32[((5243652)>>2)];
  var $24=HEAP32[((5248484)>>2)];
  var $arrayidx8=(($24+($23<<2))|0);
  HEAP32[(($arrayidx8)>>2)]=0;
  _zpredefine(((5266188)|0), 9, 2);
  var $25=HEAP32[((5243652)>>2)];
  var $26=HEAP32[((5248484)>>2)];
  var $arrayidx9=(($26+($25<<2))|0);
  HEAP32[(($arrayidx9)>>2)]=1;
  _zpredefine(((5266160)|0), 7, 2);
  var $27=HEAP32[((5243652)>>2)];
  var $28=HEAP32[((5248484)>>2)];
  var $arrayidx10=(($28+($27<<2))|0);
  HEAP32[(($arrayidx10)>>2)]=3;
  _zpredefine(((5266136)|0), 5, 4);
  var $29=HEAP32[((5243652)>>2)];
  var $30=HEAP32[((5248484)>>2)];
  var $arrayidx11=(($30+($29<<2))|0);
  HEAP32[(($arrayidx11)>>2)]=0;
  _zpredefine(((5266108)|0), 7, 4);
  var $31=HEAP32[((5243652)>>2)];
  var $32=HEAP32[((5248484)>>2)];
  var $arrayidx12=(($32+($31<<2))|0);
  HEAP32[(($arrayidx12)>>2)]=1;
  _zpredefine(((5266084)|0), 8, 4);
  var $33=HEAP32[((5243652)>>2)];
  var $34=HEAP32[((5248484)>>2)];
  var $arrayidx13=(($34+($33<<2))|0);
  HEAP32[(($arrayidx13)>>2)]=2;
  _zpredefine(((5266020)|0), 8, 4);
  var $35=HEAP32[((5243652)>>2)];
  var $36=HEAP32[((5248484)>>2)];
  var $arrayidx14=(($36+($35<<2))|0);
  HEAP32[(($arrayidx14)>>2)]=3;
  _zpredefine(((5266000)|0), 7, 4);
  var $37=HEAP32[((5243652)>>2)];
  var $38=HEAP32[((5248484)>>2)];
  var $arrayidx15=(($38+($37<<2))|0);
  HEAP32[(($arrayidx15)>>2)]=4;
  _zpredefine(((5265968)|0), 5, 4);
  var $39=HEAP32[((5243652)>>2)];
  var $40=HEAP32[((5248484)>>2)];
  var $arrayidx16=(($40+($39<<2))|0);
  HEAP32[(($arrayidx16)>>2)]=5;
  _zpredefine(((5265900)|0), 4, 4);
  var $41=HEAP32[((5243652)>>2)];
  var $42=HEAP32[((5248484)>>2)];
  var $arrayidx17=(($42+($41<<2))|0);
  HEAP32[(($arrayidx17)>>2)]=6;
  _zpredefine(((5265864)|0), 7, 4);
  var $43=HEAP32[((5243652)>>2)];
  var $44=HEAP32[((5248484)>>2)];
  var $arrayidx18=(($44+($43<<2))|0);
  HEAP32[(($arrayidx18)>>2)]=7;
  _zpredefine(((5265820)|0), 4, 4);
  var $45=HEAP32[((5243652)>>2)];
  var $46=HEAP32[((5248484)>>2)];
  var $arrayidx19=(($46+($45<<2))|0);
  HEAP32[(($arrayidx19)>>2)]=8;
  _zpredefine(((5265788)|0), 7, 4);
  var $47=HEAP32[((5243652)>>2)];
  var $48=HEAP32[((5248484)>>2)];
  var $arrayidx20=(($48+($47<<2))|0);
  HEAP32[(($arrayidx20)>>2)]=9;
  _zpredefine(((5265728)|0), 7, 12);
  var $49=HEAP32[((5243652)>>2)];
  var $50=HEAP32[((5248484)>>2)];
  var $arrayidx21=(($50+($49<<2))|0);
  HEAP32[(($arrayidx21)>>2)]=0;
  _zpredefine(((5265704)|0), 8, 12);
  var $51=HEAP32[((5243652)>>2)];
  var $52=HEAP32[((5248484)>>2)];
  var $arrayidx22=(($52+($51<<2))|0);
  HEAP32[(($arrayidx22)>>2)]=1;
  _zpredefine(((5265668)|0), 6, 12);
  var $53=HEAP32[((5243652)>>2)];
  var $54=HEAP32[((5248484)>>2)];
  var $arrayidx23=(($54+($53<<2))|0);
  HEAP32[(($arrayidx23)>>2)]=2;
  _zzbuildin(((5265628)|0), 1, 5252552, 0);
  _zzbuildin(((5265604)|0), 1, 5252540, 1);
  _zzbuildin(((5265580)|0), 1, 5252500, 2);
  _zzbuildin(((5265540)|0), 1, 5252324, 3);
  _zzbuildin(((5265508)|0), 1, 5252340, 4);
  _zzbuildin(((5265476)|0), 1, 5252568, 5);
  _zzbuildin(((5265444)|0), 2, 5252544, 6);
  _zzbuildin(((5265416)|0), 11, 5252596, 7);
  _zzbuildin(((5265392)|0), 10, 5252584, 8);
  _zzbuildin(((5265368)|0), 12, 5252580, 9);
  _zzbuildin(((5265328)|0), 11, 5252576, 10);
  _zzbuildin(((5265304)|0), 5, 5252572, 11);
  _zzbuildin(((5265268)|0), 10, 5252560, 12);
  _zzbuildin(((5265232)|0), 6, 5252556, 13);
  _zzbuildin(((5265212)|0), 12, 5252548, 14);
  _zzbuildin(((5265176)|0), 3, 5252512, 15);
  _zzbuildin(((5265156)|0), 11, 5252508, 16);
  _zzbuildin(((5265132)|0), 11, 5252504, 17);
  _zzbuildin(((5265096)|0), 8, 5252336, 18);
  _zzbuildin(((5265068)|0), 8, 5252332, 19);
  _zzbuildin(((5265008)|0), 10, 5252328, 20);
  _zzbuildin(((5264988)|0), 4, 5252320, 21);
  _zzbuildin(((5264960)|0), 9, 5252316, 22);
  _zzbuildin(((5264932)|0), 7, 5252312, 23);
  _zzbuildin(((5264912)|0), 6, 5252308, 24);
  _zzbuildin(((5264872)|0), 5, 5252300, 25);
  _zzbuildin(((5264844)|0), 6, 5252296, 26);
  _zzbuildin(((5264824)|0), 10, 5252276, 27);
  _zzbuildin(((5264796)|0), 5, 5252272, 28);
  _zzbuildin(((5264720)|0), 12, 5252268, 29);
  _zzbuildin(((5264668)|0), 12, 5252264, 30);
  _zzbuildin(((5264640)|0), 4, 5252260, 31);
  _zzbuildin(((5264592)|0), 5, 5252256, 32);
  _zzbuildin(((5264536)|0), 8, 5252236, 33);
  _zzbuildin(((5264508)|0), 6, 5252232, 34);
  _zzbuildin(((5264456)|0), 6, 5252228, 35);
  _zzbuildin(((5264416)|0), 6, 5252224, 36);
  _zpredefine(((5267248)|0), 0, 0);
  var $55=HEAP32[((5243652)>>2)];
  var $56=HEAP32[((5248752)>>2)];
  var $arrayidx24=(($56+($55<<2))|0);
  var $57=HEAP32[(($arrayidx24)>>2)];
  HEAP32[((5243572)>>2)]=$57;
  var $58=HEAP32[((5243652)>>2)];
  var $59=HEAP32[((5248804)>>2)];
  var $arrayidx25=(($59+$58)|0);
  HEAP8[($arrayidx25)]=3;
  _zpredefine(((5264372)|0), 12, 0);
  var $60=HEAP32[((5243652)>>2)];
  var $61=HEAP32[((5248752)>>2)];
  var $arrayidx26=(($61+($60<<2))|0);
  var $62=HEAP32[(($arrayidx26)>>2)];
  HEAP32[((5243580)>>2)]=$62;
  var $63=HEAP32[((5243652)>>2)];
  var $64=HEAP32[((5248804)>>2)];
  var $arrayidx27=(($64+$63)|0);
  HEAP8[($arrayidx27)]=3;
  var $65=HEAP32[((5252300)>>2)];
  HEAP32[((5252564)>>2)]=$65;
  HEAP32[((5243660)>>2)]=0;
  _zpredefine(((5264328)|0), 1, 14);
  var $66=HEAP32[((5243652)>>2)];
  var $67=HEAP32[((5248484)>>2)];
  var $arrayidx28=(($67+($66<<2))|0);
  HEAP32[(($arrayidx28)>>2)]=0;
  _zpredefine(((5264296)|0), 1, 14);
  var $68=HEAP32[((5243652)>>2)];
  var $69=HEAP32[((5248484)>>2)];
  var $arrayidx29=(($69+($68<<2))|0);
  HEAP32[(($arrayidx29)>>2)]=1;
  _zpredefine(((5264252)|0), 2, 14);
  var $70=HEAP32[((5243652)>>2)];
  var $71=HEAP32[((5248484)>>2)];
  var $arrayidx30=(($71+($70<<2))|0);
  HEAP32[(($arrayidx30)>>2)]=2;
  _zpredefine(((5264200)|0), 2, 14);
  var $72=HEAP32[((5243652)>>2)];
  var $73=HEAP32[((5248484)>>2)];
  var $arrayidx31=(($73+($72<<2))|0);
  HEAP32[(($arrayidx31)>>2)]=3;
  _zpredefine(((5264160)|0), 2, 14);
  var $74=HEAP32[((5243652)>>2)];
  var $75=HEAP32[((5248484)>>2)];
  var $arrayidx32=(($75+($74<<2))|0);
  HEAP32[(($arrayidx32)>>2)]=4;
  _zpredefine(((5264108)|0), 2, 14);
  var $76=HEAP32[((5243652)>>2)];
  var $77=HEAP32[((5248484)>>2)];
  var $arrayidx33=(($77+($76<<2))|0);
  HEAP32[(($arrayidx33)>>2)]=5;
  _zpredefine(((5264072)|0), 2, 14);
  var $78=HEAP32[((5243652)>>2)];
  var $79=HEAP32[((5248484)>>2)];
  var $arrayidx34=(($79+($78<<2))|0);
  HEAP32[(($arrayidx34)>>2)]=6;
  _zpredefine(((5263996)|0), 2, 14);
  var $80=HEAP32[((5243652)>>2)];
  var $81=HEAP32[((5248484)>>2)];
  var $arrayidx35=(($81+($80<<2))|0);
  HEAP32[(($arrayidx35)>>2)]=7;
  _zpredefine(((5263976)|0), 1, 14);
  var $82=HEAP32[((5243652)>>2)];
  var $83=HEAP32[((5248484)>>2)];
  var $arrayidx36=(($83+($82<<2))|0);
  HEAP32[(($arrayidx36)>>2)]=8;
  _zpredefine(((5263936)|0), 1, 14);
  var $84=HEAP32[((5243652)>>2)];
  var $85=HEAP32[((5248484)>>2)];
  var $arrayidx37=(($85+($84<<2))|0);
  HEAP32[(($arrayidx37)>>2)]=9;
  _zpredefine(((5263900)|0), 1, 14);
  var $86=HEAP32[((5243652)>>2)];
  var $87=HEAP32[((5248484)>>2)];
  var $arrayidx38=(($87+($86<<2))|0);
  HEAP32[(($arrayidx38)>>2)]=10;
  _zpredefine(((5263852)|0), 1, 14);
  var $88=HEAP32[((5243652)>>2)];
  var $89=HEAP32[((5248484)>>2)];
  var $arrayidx39=(($89+($88<<2))|0);
  HEAP32[(($arrayidx39)>>2)]=11;
  _zpredefine(((5263816)|0), 2, 14);
  var $90=HEAP32[((5243652)>>2)];
  var $91=HEAP32[((5248484)>>2)];
  var $arrayidx40=(($91+($90<<2))|0);
  HEAP32[(($arrayidx40)>>2)]=12;
  _zpredefine(((5263792)|0), 8, 11);
  var $92=HEAP32[((5243652)>>2)];
  var $93=HEAP32[((5248804)>>2)];
  var $arrayidx41=(($93+$92)|0);
  HEAP8[($arrayidx41)]=4;
  var $94=HEAP32[((5243784)>>2)];
  var $95=HEAP32[((5243652)>>2)];
  var $96=HEAP32[((5248484)>>2)];
  var $arrayidx42=(($96+($95<<2))|0);
  HEAP32[(($arrayidx42)>>2)]=$94;
  var $97=HEAP32[((5243784)>>2)];
  HEAP32[((5251140)>>2)]=$97;
  var $98=HEAP32[((5243784)>>2)];
  var $add=((($98)+(1))|0);
  HEAP32[((5243784)>>2)]=$add;
  var $99=HEAP32[((5243784)>>2)];
  HEAP32[((5243768)>>2)]=$99;
  _zpredefine(((5263764)|0), 9, 11);
  var $100=HEAP32[((5243652)>>2)];
  var $101=HEAP32[((5248804)>>2)];
  var $arrayidx43=(($101+$100)|0);
  HEAP8[($arrayidx43)]=6;
  var $102=HEAP32[((5243788)>>2)];
  var $103=HEAP32[((5243652)>>2)];
  var $104=HEAP32[((5248484)>>2)];
  var $arrayidx44=(($104+($103<<2))|0);
  HEAP32[(($arrayidx44)>>2)]=$102;
  var $105=HEAP32[((5243788)>>2)];
  HEAP32[((5243564)>>2)]=$105;
  var $106=HEAP32[((5243788)>>2)];
  var $add45=((($106)+(1))|0);
  HEAP32[((5243788)>>2)]=$add45;
  _zpredefine(((5263680)|0), 10, 11);
  var $107=HEAP32[((5243652)>>2)];
  var $108=HEAP32[((5248804)>>2)];
  var $arrayidx46=(($108+$107)|0);
  HEAP8[($arrayidx46)]=7;
  var $109=HEAP32[((5251072)>>2)];
  var $110=HEAP32[((5243652)>>2)];
  var $111=HEAP32[((5248484)>>2)];
  var $arrayidx47=(($111+($110<<2))|0);
  HEAP32[(($arrayidx47)>>2)]=$109;
  _zpredefine(((5263624)|0), 11, 11);
  var $112=HEAP32[((5243652)>>2)];
  var $113=HEAP32[((5248804)>>2)];
  var $arrayidx48=(($113+$112)|0);
  HEAP8[($arrayidx48)]=7;
  var $114=HEAP32[((5248780)>>2)];
  var $115=HEAP32[((5243652)>>2)];
  var $116=HEAP32[((5248484)>>2)];
  var $arrayidx49=(($116+($115<<2))|0);
  HEAP32[(($arrayidx49)>>2)]=$114;

  return;
}
_predefcertainstrings["X"]=1;

function _zscan3($char1, $char2, $char3) {
  var label = 0;

  var $char1_addr;
  var $char2_addr;
  var $char3_addr;
  var $Result;
  $char1_addr=$char1;
  $char2_addr=$char2;
  $char3_addr=$char3;
  var $0=HEAP32[((5252244)>>2)];
  HEAP32[((5252248)>>2)]=$0;
  while(1) {
    var $1=HEAP32[((5252244)>>2)];
    var $2=HEAP32[((5252252)>>2)];
    var $arrayidx=(($2+$1)|0);
    var $3=HEAP8[($arrayidx)];
    var $conv=(($3)&255);
    var $4=$char1_addr;
    var $conv1=(($4)&255);
    var $cmp=(($conv)|0)!=(($conv1)|0);
    do {
      if ($cmp) {
        var $5=HEAP32[((5252244)>>2)];
        var $6=HEAP32[((5252252)>>2)];
        var $arrayidx3=(($6+$5)|0);
        var $7=HEAP8[($arrayidx3)];
        var $conv4=(($7)&255);
        var $8=$char2_addr;
        var $conv5=(($8)&255);
        var $cmp6=(($conv4)|0)!=(($conv5)|0);
        if (!($cmp6)) {
          var $15 = 0;
          break;
        }
        var $9=HEAP32[((5252244)>>2)];
        var $10=HEAP32[((5252252)>>2)];
        var $arrayidx9=(($10+$9)|0);
        var $11=HEAP8[($arrayidx9)];
        var $conv10=(($11)&255);
        var $12=$char3_addr;
        var $conv11=(($12)&255);
        var $cmp12=(($conv10)|0)!=(($conv11)|0);
        if (!($cmp12)) {
          var $15 = 0;
          break;
        }
        var $13=HEAP32[((5252244)>>2)];
        var $14=HEAP32[((5244208)>>2)];
        var $cmp14=(($13)|0) < (($14)|0);
        var $15 = $cmp14;
      } else {
        var $15 = 0;
      }
    } while(0);
    var $15;
    if (!($15)) {
      break;
    }
    var $16=HEAP32[((5252244)>>2)];
    var $add=((($16)+(1))|0);
    HEAP32[((5252244)>>2)]=$add;
  }
  var $17=HEAP32[((5252244)>>2)];
  var $18=HEAP32[((5244208)>>2)];
  var $cmp16=(($17)|0) < (($18)|0);
  if ($cmp16) {
    $Result=1;
    var $19=$Result;

    return $19;
  } else {
    $Result=0;
    var $19=$Result;

    return $19;
  }
}
_zscan3["X"]=1;

function _scanalpha() {
  var label = 0;

  var $Result;
  var $0=HEAP32[((5252244)>>2)];
  HEAP32[((5252248)>>2)]=$0;
  while(1) {
    var $1=HEAP32[((5252244)>>2)];
    var $2=HEAP32[((5252252)>>2)];
    var $arrayidx=(($2+$1)|0);
    var $3=HEAP8[($arrayidx)];
    var $idxprom=(($3)&255);
    var $arrayidx1=((5243932+$idxprom)|0);
    var $4=HEAP8[($arrayidx1)];
    var $conv=(($4)&255);
    var $cmp=(($conv)|0)==2;
    if ($cmp) {
      var $5=HEAP32[((5252244)>>2)];
      var $6=HEAP32[((5244208)>>2)];
      var $cmp3=(($5)|0) < (($6)|0);
      var $7 = $cmp3;
    } else {
      var $7 = 0;
    }
    var $7;
    if (!($7)) {
      break;
    }
    var $8=HEAP32[((5252244)>>2)];
    var $add=((($8)+(1))|0);
    HEAP32[((5252244)>>2)]=$add;
  }
  var $9=HEAP32[((5252244)>>2)];
  var $10=HEAP32[((5252248)>>2)];
  var $sub=((($9)-($10))|0);
  var $cmp5=(($sub)|0)==0;
  if ($cmp5) {
    $Result=0;
    var $11=$Result;

    return $11;
  } else {
    $Result=1;
    var $11=$Result;

    return $11;
  }
}


function _zscanidentifier($char1, $char2, $char3) {
  var label = 0;

  var $char1_addr;
  var $char2_addr;
  var $char3_addr;
  $char1_addr=$char1;
  $char2_addr=$char2;
  $char3_addr=$char3;
  var $0=HEAP32[((5252244)>>2)];
  HEAP32[((5252248)>>2)]=$0;
  var $1=HEAP32[((5252244)>>2)];
  var $2=HEAP32[((5252252)>>2)];
  var $arrayidx=(($2+$1)|0);
  var $3=HEAP8[($arrayidx)];
  var $idxprom=(($3)&255);
  var $arrayidx1=((5243932+$idxprom)|0);
  var $4=HEAP8[($arrayidx1)];
  var $conv=(($4)&255);
  var $cmp=(($conv)|0)!=3;
  if ($cmp) {
    while(1) {
      var $5=HEAP32[((5252244)>>2)];
      var $6=HEAP32[((5252252)>>2)];
      var $arrayidx3=(($6+$5)|0);
      var $7=HEAP8[($arrayidx3)];
      var $idxprom4=(($7)&255);
      var $arrayidx5=((5248488+$idxprom4)|0);
      var $8=HEAP8[($arrayidx5)];
      var $conv6=(($8)&255);
      var $cmp7=(($conv6)|0)==1;
      if ($cmp7) {
        var $9=HEAP32[((5252244)>>2)];
        var $10=HEAP32[((5244208)>>2)];
        var $cmp9=(($9)|0) < (($10)|0);
        var $11 = $cmp9;
      } else {
        var $11 = 0;
      }
      var $11;
      if (!($11)) {
        break;
      }
      var $12=HEAP32[((5252244)>>2)];
      var $add=((($12)+(1))|0);
      HEAP32[((5252244)>>2)]=$add;
    }
  }
  var $13=HEAP32[((5252244)>>2)];
  var $14=HEAP32[((5252248)>>2)];
  var $sub=((($13)-($14))|0);
  var $cmp11=(($sub)|0)==0;
  if ($cmp11) {
    HEAP8[(5243584)]=0;

    return;
  }
  var $15=HEAP32[((5252244)>>2)];
  var $16=HEAP32[((5252252)>>2)];
  var $arrayidx14=(($16+$15)|0);
  var $17=HEAP8[($arrayidx14)];
  var $idxprom15=(($17)&255);
  var $arrayidx16=((5243932+$idxprom15)|0);
  var $18=HEAP8[($arrayidx16)];
  var $conv17=(($18)&255);
  var $cmp18=(($conv17)|0)==1;
  do {
    if ($cmp18) {
      label = 583;
    } else {
      var $19=HEAP32[((5252244)>>2)];
      var $20=HEAP32[((5244208)>>2)];
      var $cmp20=(($19)|0)==(($20)|0);
      if ($cmp20) {
        label = 583;
        break;
      }
      var $21=HEAP32[((5252244)>>2)];
      var $22=HEAP32[((5252252)>>2)];
      var $arrayidx24=(($22+$21)|0);
      var $23=HEAP8[($arrayidx24)];
      var $conv25=(($23)&255);
      var $24=$char1_addr;
      var $conv26=(($24)&255);
      var $cmp27=(($conv25)|0)==(($conv26)|0);
      do {
        if ($cmp27) {
          label = 587;
        } else {
          var $25=HEAP32[((5252244)>>2)];
          var $26=HEAP32[((5252252)>>2)];
          var $arrayidx30=(($26+$25)|0);
          var $27=HEAP8[($arrayidx30)];
          var $conv31=(($27)&255);
          var $28=$char2_addr;
          var $conv32=(($28)&255);
          var $cmp33=(($conv31)|0)==(($conv32)|0);
          if ($cmp33) {
            label = 587;
            break;
          }
          var $29=HEAP32[((5252244)>>2)];
          var $30=HEAP32[((5252252)>>2)];
          var $arrayidx36=(($30+$29)|0);
          var $31=HEAP8[($arrayidx36)];
          var $conv37=(($31)&255);
          var $32=$char3_addr;
          var $conv38=(($32)&255);
          var $cmp39=(($conv37)|0)==(($conv38)|0);
          if ($cmp39) {
            label = 587;
            break;
          }
          HEAP8[(5243584)]=2;
          break;
        }
      } while(0);
      if (label == 587) {
        HEAP8[(5243584)]=1;
      }
      break;
    }
  } while(0);
  if (label == 583) {
    HEAP8[(5243584)]=3;
  }

  return;
}
_zscanidentifier["X"]=1;

function _scannonneginteger() {
  var label = 0;

  var $Result;
  var $0=HEAP32[((5252244)>>2)];
  HEAP32[((5252248)>>2)]=$0;
  HEAP32[((5243448)>>2)]=0;
  while(1) {
    var $1=HEAP32[((5252244)>>2)];
    var $2=HEAP32[((5252252)>>2)];
    var $arrayidx=(($2+$1)|0);
    var $3=HEAP8[($arrayidx)];
    var $idxprom=(($3)&255);
    var $arrayidx1=((5243932+$idxprom)|0);
    var $4=HEAP8[($arrayidx1)];
    var $conv=(($4)&255);
    var $cmp=(($conv)|0)==3;
    if ($cmp) {
      var $5=HEAP32[((5252244)>>2)];
      var $6=HEAP32[((5244208)>>2)];
      var $cmp3=(($5)|0) < (($6)|0);
      var $7 = $cmp3;
    } else {
      var $7 = 0;
    }
    var $7;
    if (!($7)) {
      break;
    }
    var $8=HEAP32[((5243448)>>2)];
    var $mul=((($8)*(10))&-1);
    var $9=HEAP32[((5252244)>>2)];
    var $10=HEAP32[((5252252)>>2)];
    var $arrayidx5=(($10+$9)|0);
    var $11=HEAP8[($arrayidx5)];
    var $conv6=(($11)&255);
    var $sub=((($conv6)-(48))|0);
    var $add=((($mul)+($sub))|0);
    HEAP32[((5243448)>>2)]=$add;
    var $12=HEAP32[((5252244)>>2)];
    var $add7=((($12)+(1))|0);
    HEAP32[((5252244)>>2)]=$add7;
  }
  var $13=HEAP32[((5252244)>>2)];
  var $14=HEAP32[((5252248)>>2)];
  var $sub8=((($13)-($14))|0);
  var $cmp9=(($sub8)|0)==0;
  if ($cmp9) {
    $Result=0;
    var $15=$Result;

    return $15;
  } else {
    $Result=1;
    var $15=$Result;

    return $15;
  }
}


function _scaninteger() {
  var label = 0;

  var $Result;
  var $signlength;
  var $0=HEAP32[((5252244)>>2)];
  HEAP32[((5252248)>>2)]=$0;
  var $1=HEAP32[((5252244)>>2)];
  var $2=HEAP32[((5252252)>>2)];
  var $arrayidx=(($2+$1)|0);
  var $3=HEAP8[($arrayidx)];
  var $conv=(($3)&255);
  var $cmp=(($conv)|0)==45;
  if ($cmp) {
    $signlength=1;
    var $4=HEAP32[((5252244)>>2)];
    var $add=((($4)+(1))|0);
    HEAP32[((5252244)>>2)]=$add;
  } else {
    $signlength=0;
  }
  HEAP32[((5243448)>>2)]=0;
  while(1) {
    var $5=HEAP32[((5252244)>>2)];
    var $6=HEAP32[((5252252)>>2)];
    var $arrayidx2=(($6+$5)|0);
    var $7=HEAP8[($arrayidx2)];
    var $idxprom=(($7)&255);
    var $arrayidx3=((5243932+$idxprom)|0);
    var $8=HEAP8[($arrayidx3)];
    var $conv4=(($8)&255);
    var $cmp5=(($conv4)|0)==3;
    if ($cmp5) {
      var $9=HEAP32[((5252244)>>2)];
      var $10=HEAP32[((5244208)>>2)];
      var $cmp7=(($9)|0) < (($10)|0);
      var $11 = $cmp7;
    } else {
      var $11 = 0;
    }
    var $11;
    if (!($11)) {
      break;
    }
    var $12=HEAP32[((5243448)>>2)];
    var $mul=((($12)*(10))&-1);
    var $13=HEAP32[((5252244)>>2)];
    var $14=HEAP32[((5252252)>>2)];
    var $arrayidx9=(($14+$13)|0);
    var $15=HEAP8[($arrayidx9)];
    var $conv10=(($15)&255);
    var $sub=((($conv10)-(48))|0);
    var $add11=((($mul)+($sub))|0);
    HEAP32[((5243448)>>2)]=$add11;
    var $16=HEAP32[((5252244)>>2)];
    var $add12=((($16)+(1))|0);
    HEAP32[((5252244)>>2)]=$add12;
  }
  var $17=$signlength;
  var $conv13=(($17)&255);
  var $cmp14=(($conv13)|0)==1;
  if ($cmp14) {
    var $18=HEAP32[((5243448)>>2)];
    var $sub17=(((-$18))|0);
    HEAP32[((5243448)>>2)]=$sub17;
  }
  var $19=HEAP32[((5252244)>>2)];
  var $20=HEAP32[((5252248)>>2)];
  var $sub19=((($19)-($20))|0);
  var $21=$signlength;
  var $conv20=(($21)&255);
  var $cmp21=(($sub19)|0)==(($conv20)|0);
  if ($cmp21) {
    $Result=0;
    var $22=$Result;

    return $22;
  } else {
    $Result=1;
    var $22=$Result;

    return $22;
  }
}
_scaninteger["X"]=1;

function _scanwhitespace() {
  var label = 0;

  var $Result;
  while(1) {
    var $0=HEAP32[((5252244)>>2)];
    var $1=HEAP32[((5252252)>>2)];
    var $arrayidx=(($1+$0)|0);
    var $2=HEAP8[($arrayidx)];
    var $idxprom=(($2)&255);
    var $arrayidx1=((5243932+$idxprom)|0);
    var $3=HEAP8[($arrayidx1)];
    var $conv=(($3)&255);
    var $cmp=(($conv)|0)==1;
    if ($cmp) {
      var $4=HEAP32[((5252244)>>2)];
      var $5=HEAP32[((5244208)>>2)];
      var $cmp3=(($4)|0) < (($5)|0);
      var $6 = $cmp3;
    } else {
      var $6 = 0;
    }
    var $6;
    if (!($6)) {
      break;
    }
    var $7=HEAP32[((5252244)>>2)];
    var $add=((($7)+(1))|0);
    HEAP32[((5252244)>>2)]=$add;
  }
  var $8=HEAP32[((5252244)>>2)];
  var $9=HEAP32[((5244208)>>2)];
  var $cmp5=(($8)|0) < (($9)|0);
  if ($cmp5) {
    $Result=1;
    var $10=$Result;

    return $10;
  } else {
    $Result=0;
    var $10=$Result;

    return $10;
  }
}


function _eatbstwhitespace() {
  var label = 0;

  var $Result;
  while(1) {
    var $call=_scanwhitespace();
    var $tobool=(($call)|0)!=0;
    if ($tobool) {
      var $0=HEAP32[((5252244)>>2)];
      var $1=HEAP32[((5252252)>>2)];
      var $arrayidx=(($1+$0)|0);
      var $2=HEAP8[($arrayidx)];
      var $conv=(($2)&255);
      var $cmp=(($conv)|0)!=37;
      if ($cmp) {
        label = 635;
        break;
      }
    }
    var $3=HEAP32[((5252292)>>2)];
    var $call4=_zinputln($3);
    var $tobool5=(($call4)|0)!=0;
    if (!($tobool5)) {
      label = 638;
      break;
    }
    var $4=HEAP32[((5252288)>>2)];
    var $add=((($4)+(1))|0);
    HEAP32[((5252288)>>2)]=$add;
    HEAP32[((5252244)>>2)]=0;
  }
  if (label == 638) {
    $Result=0;
    var $5=$Result;

    return $5;
  }
  else if (label == 635) {
    $Result=1;
    var $5=$Result;

    return $5;
  }
}


function _skiptokenprint() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputc(45, $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputc(45, $1);
  _bstlnnumprint();
  _markerror();
  var $call2=_zscan2white(125, 37);
  var $tobool=(($call2)|0)!=0;
  if (!($tobool)) {

    return;
  }

  return;
}


function _printrecursionillegal() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243908)>>2)];
  var $call=_fprintf($0, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263496)|0),tempInt));
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fprintf($1, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263496)|0),tempInt));
  var $2=HEAP32[((5243908)>>2)];
  var $call2=_fputs(((5263468)|0), $2);
  var $3=HEAP32[((5243524)>>2)];
  var $call3=_fputs(((5263468)|0), $3);
  _printatoken();
  var $4=HEAP32[((5243908)>>2)];
  var $call4=_fprintf($4, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263424)|0),tempInt));
  var $5=HEAP32[((5243524)>>2)];
  var $call5=_fprintf($5, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263424)|0),tempInt));
  _skiptokenprint();
  STACKTOP = __stackBase__;
  return;
}


function _skptokenunknownfunctionprint() {
  var label = 0;

  _printatoken();
  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5263388)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5263388)|0), $1);
  _skiptokenprint();

  return;
}


function _skipillegalstuffaftertokenprint() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243908)>>2)];
  var $1=HEAP32[((5252244)>>2)];
  var $2=HEAP32[((5252252)>>2)];
  var $arrayidx=(($2+$1)|0);
  var $3=HEAP8[($arrayidx)];
  var $idxprom=(($3)&255);
  var $arrayidx1=((5243136+$idxprom)|0);
  var $4=HEAP8[($arrayidx1)];
  var $conv=(($4)&255);
  var $call=_fprintf($0, ((5255672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=34,HEAP32[(((tempInt)+(4))>>2)]=$conv,HEAP32[(((tempInt)+(8))>>2)]=((5263348)|0),tempInt));
  var $5=HEAP32[((5243524)>>2)];
  var $6=HEAP32[((5252244)>>2)];
  var $7=HEAP32[((5252252)>>2)];
  var $arrayidx2=(($7+$6)|0);
  var $8=HEAP8[($arrayidx2)];
  var $idxprom3=(($8)&255);
  var $arrayidx4=((5243136+$idxprom3)|0);
  var $9=HEAP8[($arrayidx4)];
  var $conv5=(($9)&255);
  var $call6=_fprintf($5, ((5255672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=34,HEAP32[(((tempInt)+(4))>>2)]=$conv5,HEAP32[(((tempInt)+(8))>>2)]=((5263348)|0),tempInt));
  _skiptokenprint();
  STACKTOP = __stackBase__;
  return;
}


function _eatbibwhitespace() {
  var label = 0;

  var $Result;
  while(1) {
    var $call=_scanwhitespace();
    var $tobool=(($call)|0)!=0;
    var $lnot=$tobool ^ 1;
    if (!($lnot)) {
      label = 656;
      break;
    }
    var $0=HEAP32[((5252520)>>2)];
    var $1=HEAP32[((5252532)>>2)];
    var $arrayidx=(($1+($0<<2))|0);
    var $2=HEAP32[(($arrayidx)>>2)];
    var $call1=_zinputln($2);
    var $tobool2=(($call1)|0)!=0;
    if (!($tobool2)) {
      label = 654;
      break;
    }
    var $3=HEAP32[((5252528)>>2)];
    var $add=((($3)+(1))|0);
    HEAP32[((5252528)>>2)]=$add;
    HEAP32[((5252244)>>2)]=0;
  }
  if (label == 656) {
    $Result=1;
    var $4=$Result;

    return $4;
  }
  else if (label == 654) {
    $Result=0;
    var $4=$Result;

    return $4;
  }
}


function _compressbibwhite() {
  var label = 0;

  var $Result;
  $Result=0;
  var $0=HEAP32[((5251056)>>2)];
  var $1=HEAP32[((5252240)>>2)];
  var $cmp=(($0)|0)==(($1)|0);
  if ($cmp) {
    _bibfieldtoolongprint();
    var $9=$Result;

    return $9;
  }
  var $2=HEAP32[((5251056)>>2)];
  var $3=HEAP32[((5251064)>>2)];
  var $arrayidx=(($3+$2)|0);
  HEAP8[($arrayidx)]=32;
  var $4=HEAP32[((5251056)>>2)];
  var $add=((($4)+(1))|0);
  HEAP32[((5251056)>>2)]=$add;
  while(1) {
    var $call=_scanwhitespace();
    var $tobool=(($call)|0)!=0;
    var $lnot=$tobool ^ 1;
    if (!($lnot)) {
      label = 668;
      break;
    }
    var $5=HEAP32[((5252520)>>2)];
    var $6=HEAP32[((5252532)>>2)];
    var $arrayidx1=(($6+($5<<2))|0);
    var $7=HEAP32[(($arrayidx1)>>2)];
    var $call2=_zinputln($7);
    var $tobool3=(($call2)|0)!=0;
    if (!($tobool3)) {
      label = 666;
      break;
    }
    var $8=HEAP32[((5252528)>>2)];
    var $add6=((($8)+(1))|0);
    HEAP32[((5252528)>>2)]=$add6;
    HEAP32[((5252244)>>2)]=0;
  }
  if (label == 668) {
    $Result=1;
    var $9=$Result;

    return $9;
  }
  else if (label == 666) {
    _eatbibprint();
    var $9=$Result;

    return $9;
  }
}


function _zscanfndef($fnhashloc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $fnhashloc_addr;
  var $singlfunction;
  var $singlefnspace;
  var $singleptr;
  var $copyptr;
  var $endofnum=__stackBase__;
  var $implfnloc;
  $fnhashloc_addr=$fnhashloc;
  $singlefnspace=50;
  var $0=$singlefnspace;
  var $add=((($0)+(1))|0);
  var $mul=((($add<<2))&-1);
  var $call=_xmalloc($mul);
  var $1=$call;
  $singlfunction=$1;
  var $call1=_eatbstwhitespace();
  var $tobool=(($call1)|0)!=0;
  if (!($tobool)) {
    _eatbstprint();
    var $2=HEAP32[((5243908)>>2)];
    var $call2=_fputs(((5263312)|0), $2);
    var $3=HEAP32[((5243524)>>2)];
    var $call3=_fputs(((5263312)|0), $3);
    _bsterrprintandlookforblankline();
    var $231=$singlfunction;
    var $232=$231;
    _free($232);
    STACKTOP = __stackBase__;
    return;
  }
  $singleptr=0;
  L785: while(1) {
    var $4=HEAP32[((5252244)>>2)];
    var $5=HEAP32[((5252252)>>2)];
    var $arrayidx=(($5+$4)|0);
    var $6=HEAP8[($arrayidx)];
    var $conv=(($6)&255);
    var $cmp=(($conv)|0)!=125;
    if (!($cmp)) {
      label = 749;
      break;
    }
    var $7=HEAP32[((5252244)>>2)];
    var $8=HEAP32[((5252252)>>2)];
    var $arrayidx5=(($8+$7)|0);
    var $9=HEAP8[($arrayidx5)];
    var $conv6=(($9)&255);
    L788: do {
      if ((($conv6)|0)==39) {
        var $87=HEAP32[((5252244)>>2)];
        var $add103=((($87)+(1))|0);
        HEAP32[((5252244)>>2)]=$add103;
        var $call104=_zscan2white(125, 37);
        var $tobool105=(($call104)|0)!=0;
        if ($tobool105) {
        }
        var $88=HEAP32[((5252252)>>2)];
        var $89=HEAP32[((5252248)>>2)];
        var $90=HEAP32[((5252244)>>2)];
        var $91=HEAP32[((5252248)>>2)];
        var $sub108=((($90)-($91))|0);
        _zlowercase($88, $89, $sub108);
        var $92=HEAP32[((5252252)>>2)];
        var $93=HEAP32[((5252248)>>2)];
        var $94=HEAP32[((5252244)>>2)];
        var $95=HEAP32[((5252248)>>2)];
        var $sub109=((($94)-($95))|0);
        var $call110=_zstrlookup($92, $93, $sub109, 11, 0);
        HEAP32[((5248808)>>2)]=$call110;
        var $96=HEAP32[((5248776)>>2)];
        var $tobool111=(($96)|0)!=0;
        if (!($tobool111)) {
          _skptokenunknownfunctionprint();
          break;
        }
        var $97=HEAP32[((5248808)>>2)];
        var $98=HEAP32[((5243392)>>2)];
        var $cmp113=(($97)|0)==(($98)|0);
        if ($cmp113) {
          _printrecursionillegal();
          break;
        }
        var $99=$singleptr;
        var $100=$singlfunction;
        var $arrayidx117=(($100+($99<<2))|0);
        HEAP32[(($arrayidx117)>>2)]=0;
        var $101=$singleptr;
        var $102=$singlefnspace;
        var $cmp118=(($101)|0)==(($102)|0);
        if ($cmp118) {
          var $103=HEAP32[((5243908)>>2)];
          var $104=$singlefnspace;
          var $add122=((($104)+(50))|0);
          var $105=$singlefnspace;
          var $call123=_fprintf($103, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263244)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add122,HEAP32[(((tempInt)+(12))>>2)]=$105,tempInt));
          var $106=$singlfunction;
          var $107=$106;
          var $108=$singlefnspace;
          var $add124=((($108)+(50))|0);
          var $add125=((($add124)+(1))|0);
          var $mul126=((($add125<<2))&-1);
          var $call127=_xrealloc($107, $mul126);
          var $109=$call127;
          $singlfunction=$109;
          var $110=$singlefnspace;
          var $add128=((($110)+(50))|0);
          $singlefnspace=$add128;
        }
        var $111=$singleptr;
        var $add131=((($111)+(1))|0);
        $singleptr=$add131;
        var $112=HEAP32[((5248808)>>2)];
        var $113=$singleptr;
        var $114=$singlfunction;
        var $arrayidx132=(($114+($113<<2))|0);
        HEAP32[(($arrayidx132)>>2)]=$112;
        var $115=$singleptr;
        var $116=$singlefnspace;
        var $cmp133=(($115)|0)==(($116)|0);
        if ($cmp133) {
          var $117=HEAP32[((5243908)>>2)];
          var $118=$singlefnspace;
          var $add137=((($118)+(50))|0);
          var $119=$singlefnspace;
          var $call138=_fprintf($117, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263244)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add137,HEAP32[(((tempInt)+(12))>>2)]=$119,tempInt));
          var $120=$singlfunction;
          var $121=$120;
          var $122=$singlefnspace;
          var $add139=((($122)+(50))|0);
          var $add140=((($add139)+(1))|0);
          var $mul141=((($add140<<2))&-1);
          var $call142=_xrealloc($121, $mul141);
          var $123=$call142;
          $singlfunction=$123;
          var $124=$singlefnspace;
          var $add143=((($124)+(50))|0);
          $singlefnspace=$add143;
        }
        var $125=$singleptr;
        var $add146=((($125)+(1))|0);
        $singleptr=$add146;
        label = 745;
        break;
      } else if ((($conv6)|0)==35) {
        var $10=HEAP32[((5252244)>>2)];
        var $add7=((($10)+(1))|0);
        HEAP32[((5252244)>>2)]=$add7;
        var $call8=_scaninteger();
        var $tobool9=(($call8)|0)!=0;
        if (!($tobool9)) {
          var $11=HEAP32[((5243908)>>2)];
          var $call11=_fputs(((5263268)|0), $11);
          var $12=HEAP32[((5243524)>>2)];
          var $call12=_fputs(((5263268)|0), $12);
          _skiptokenprint();
          break;
        }
        var $13=HEAP32[((5252252)>>2)];
        var $14=HEAP32[((5252248)>>2)];
        var $15=HEAP32[((5252244)>>2)];
        var $16=HEAP32[((5252248)>>2)];
        var $sub=((($15)-($16))|0);
        var $call14=_zstrlookup($13, $14, $sub, 1, 1);
        HEAP32[((5243928)>>2)]=$call14;
        var $17=HEAP32[((5248776)>>2)];
        var $tobool15=(($17)|0)!=0;
        if (!($tobool15)) {
          var $18=HEAP32[((5243928)>>2)];
          var $19=HEAP32[((5248804)>>2)];
          var $arrayidx17=(($19+$18)|0);
          HEAP8[($arrayidx17)]=2;
          var $20=HEAP32[((5243448)>>2)];
          var $21=HEAP32[((5243928)>>2)];
          var $22=HEAP32[((5248484)>>2)];
          var $arrayidx18=(($22+($21<<2))|0);
          HEAP32[(($arrayidx18)>>2)]=$20;
        }
        var $23=HEAP32[((5252244)>>2)];
        var $24=HEAP32[((5252252)>>2)];
        var $arrayidx20=(($24+$23)|0);
        var $25=HEAP8[($arrayidx20)];
        var $idxprom=(($25)&255);
        var $arrayidx21=((5243932+$idxprom)|0);
        var $26=HEAP8[($arrayidx21)];
        var $conv22=(($26)&255);
        var $cmp23=(($conv22)|0)!=1;
        do {
          if ($cmp23) {
            var $27=HEAP32[((5252244)>>2)];
            var $28=HEAP32[((5244208)>>2)];
            var $cmp25=(($27)|0) < (($28)|0);
            if (!($cmp25)) {
              break;
            }
            var $29=HEAP32[((5252244)>>2)];
            var $30=HEAP32[((5252252)>>2)];
            var $arrayidx28=(($30+$29)|0);
            var $31=HEAP8[($arrayidx28)];
            var $conv29=(($31)&255);
            var $cmp30=(($conv29)|0)!=125;
            if (!($cmp30)) {
              break;
            }
            var $32=HEAP32[((5252244)>>2)];
            var $33=HEAP32[((5252252)>>2)];
            var $arrayidx33=(($33+$32)|0);
            var $34=HEAP8[($arrayidx33)];
            var $conv34=(($34)&255);
            var $cmp35=(($conv34)|0)!=37;
            if (!($cmp35)) {
              break;
            }
            _skipillegalstuffaftertokenprint();
            break L788;
          }
        } while(0);
        var $35=HEAP32[((5243928)>>2)];
        var $36=$singleptr;
        var $37=$singlfunction;
        var $arrayidx39=(($37+($36<<2))|0);
        HEAP32[(($arrayidx39)>>2)]=$35;
        var $38=$singleptr;
        var $39=$singlefnspace;
        var $cmp40=(($38)|0)==(($39)|0);
        if ($cmp40) {
          var $40=HEAP32[((5243908)>>2)];
          var $41=$singlefnspace;
          var $add43=((($41)+(50))|0);
          var $42=$singlefnspace;
          var $call44=_fprintf($40, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263244)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add43,HEAP32[(((tempInt)+(12))>>2)]=$42,tempInt));
          var $43=$singlfunction;
          var $44=$43;
          var $45=$singlefnspace;
          var $add45=((($45)+(50))|0);
          var $add46=((($add45)+(1))|0);
          var $mul47=((($add46<<2))&-1);
          var $call48=_xrealloc($44, $mul47);
          var $46=$call48;
          $singlfunction=$46;
          var $47=$singlefnspace;
          var $add49=((($47)+(50))|0);
          $singlefnspace=$add49;
        }
        var $48=$singleptr;
        var $add51=((($48)+(1))|0);
        $singleptr=$add51;
        label = 745;
        break;
      } else if ((($conv6)|0)==34) {
        var $49=HEAP32[((5252244)>>2)];
        var $add53=((($49)+(1))|0);
        HEAP32[((5252244)>>2)]=$add53;
        var $call54=_zscan1(34);
        var $tobool55=(($call54)|0)!=0;
        if (!($tobool55)) {
          var $50=HEAP32[((5243908)>>2)];
          var $51=HEAP8[(((5243170)|0))];
          var $conv57=(($51)&255);
          var $call58=_fprintf($50, ((5263208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263192)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv57,HEAP32[(((tempInt)+(8))>>2)]=((5263156)|0),tempInt));
          var $52=HEAP32[((5243524)>>2)];
          var $53=HEAP8[(((5243170)|0))];
          var $conv59=(($53)&255);
          var $call60=_fprintf($52, ((5263208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263192)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv59,HEAP32[(((tempInt)+(8))>>2)]=((5263156)|0),tempInt));
          _skiptokenprint();
          break;
        }
        var $54=HEAP32[((5252252)>>2)];
        var $55=HEAP32[((5252248)>>2)];
        var $56=HEAP32[((5252244)>>2)];
        var $57=HEAP32[((5252248)>>2)];
        var $sub62=((($56)-($57))|0);
        var $call63=_zstrlookup($54, $55, $sub62, 0, 1);
        HEAP32[((5243928)>>2)]=$call63;
        var $58=HEAP32[((5243928)>>2)];
        var $59=HEAP32[((5248804)>>2)];
        var $arrayidx64=(($59+$58)|0);
        HEAP8[($arrayidx64)]=3;
        var $60=HEAP32[((5252244)>>2)];
        var $add65=((($60)+(1))|0);
        HEAP32[((5252244)>>2)]=$add65;
        var $61=HEAP32[((5252244)>>2)];
        var $62=HEAP32[((5252252)>>2)];
        var $arrayidx66=(($62+$61)|0);
        var $63=HEAP8[($arrayidx66)];
        var $idxprom67=(($63)&255);
        var $arrayidx68=((5243932+$idxprom67)|0);
        var $64=HEAP8[($arrayidx68)];
        var $conv69=(($64)&255);
        var $cmp70=(($conv69)|0)!=1;
        do {
          if ($cmp70) {
            var $65=HEAP32[((5252244)>>2)];
            var $66=HEAP32[((5244208)>>2)];
            var $cmp73=(($65)|0) < (($66)|0);
            if (!($cmp73)) {
              break;
            }
            var $67=HEAP32[((5252244)>>2)];
            var $68=HEAP32[((5252252)>>2)];
            var $arrayidx76=(($68+$67)|0);
            var $69=HEAP8[($arrayidx76)];
            var $conv77=(($69)&255);
            var $cmp78=(($conv77)|0)!=125;
            if (!($cmp78)) {
              break;
            }
            var $70=HEAP32[((5252244)>>2)];
            var $71=HEAP32[((5252252)>>2)];
            var $arrayidx81=(($71+$70)|0);
            var $72=HEAP8[($arrayidx81)];
            var $conv82=(($72)&255);
            var $cmp83=(($conv82)|0)!=37;
            if (!($cmp83)) {
              break;
            }
            _skipillegalstuffaftertokenprint();
            break L788;
          }
        } while(0);
        var $73=HEAP32[((5243928)>>2)];
        var $74=$singleptr;
        var $75=$singlfunction;
        var $arrayidx87=(($75+($74<<2))|0);
        HEAP32[(($arrayidx87)>>2)]=$73;
        var $76=$singleptr;
        var $77=$singlefnspace;
        var $cmp88=(($76)|0)==(($77)|0);
        if ($cmp88) {
          var $78=HEAP32[((5243908)>>2)];
          var $79=$singlefnspace;
          var $add92=((($79)+(50))|0);
          var $80=$singlefnspace;
          var $call93=_fprintf($78, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263244)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add92,HEAP32[(((tempInt)+(12))>>2)]=$80,tempInt));
          var $81=$singlfunction;
          var $82=$81;
          var $83=$singlefnspace;
          var $add94=((($83)+(50))|0);
          var $add95=((($add94)+(1))|0);
          var $mul96=((($add95<<2))&-1);
          var $call97=_xrealloc($82, $mul96);
          var $84=$call97;
          $singlfunction=$84;
          var $85=$singlefnspace;
          var $add98=((($85)+(50))|0);
          $singlefnspace=$add98;
        }
        var $86=$singleptr;
        var $add101=((($86)+(1))|0);
        $singleptr=$add101;
        label = 745;
        break;
      } else if ((($conv6)|0)==123) {
        var $126=HEAP32[((5251064)>>2)];
        var $arrayidx150=(($126)|0);
        HEAP8[($arrayidx150)]=39;
        var $127=HEAP32[((5248480)>>2)];
        var $128=HEAP32[((5251064)>>2)];
        _zzinttoASCII($127, $128, 1, $endofnum);
        var $129=HEAP32[((5251064)>>2)];
        var $130=HEAP32[(($endofnum)>>2)];
        var $call151=_zstrlookup($129, 0, $130, 11, 1);
        $implfnloc=$call151;
        var $131=HEAP32[((5248776)>>2)];
        var $tobool152=(($131)|0)!=0;
        if ($tobool152) {
          label = 722;
          break L785;
        }
        var $134=HEAP32[((5248480)>>2)];
        var $add157=((($134)+(1))|0);
        HEAP32[((5248480)>>2)]=$add157;
        var $135=$implfnloc;
        var $136=HEAP32[((5248804)>>2)];
        var $arrayidx158=(($136+$135)|0);
        HEAP8[($arrayidx158)]=1;
        var $137=$singleptr;
        var $138=$singlfunction;
        var $arrayidx159=(($138+($137<<2))|0);
        HEAP32[(($arrayidx159)>>2)]=0;
        var $139=$singleptr;
        var $140=$singlefnspace;
        var $cmp160=(($139)|0)==(($140)|0);
        if ($cmp160) {
          var $141=HEAP32[((5243908)>>2)];
          var $142=$singlefnspace;
          var $add164=((($142)+(50))|0);
          var $143=$singlefnspace;
          var $call165=_fprintf($141, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263244)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add164,HEAP32[(((tempInt)+(12))>>2)]=$143,tempInt));
          var $144=$singlfunction;
          var $145=$144;
          var $146=$singlefnspace;
          var $add166=((($146)+(50))|0);
          var $add167=((($add166)+(1))|0);
          var $mul168=((($add167<<2))&-1);
          var $call169=_xrealloc($145, $mul168);
          var $147=$call169;
          $singlfunction=$147;
          var $148=$singlefnspace;
          var $add170=((($148)+(50))|0);
          $singlefnspace=$add170;
        }
        var $149=$singleptr;
        var $add173=((($149)+(1))|0);
        $singleptr=$add173;
        var $150=$implfnloc;
        var $151=$singleptr;
        var $152=$singlfunction;
        var $arrayidx174=(($152+($151<<2))|0);
        HEAP32[(($arrayidx174)>>2)]=$150;
        var $153=$singleptr;
        var $154=$singlefnspace;
        var $cmp175=(($153)|0)==(($154)|0);
        if ($cmp175) {
          var $155=HEAP32[((5243908)>>2)];
          var $156=$singlefnspace;
          var $add179=((($156)+(50))|0);
          var $157=$singlefnspace;
          var $call180=_fprintf($155, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263244)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add179,HEAP32[(((tempInt)+(12))>>2)]=$157,tempInt));
          var $158=$singlfunction;
          var $159=$158;
          var $160=$singlefnspace;
          var $add181=((($160)+(50))|0);
          var $add182=((($add181)+(1))|0);
          var $mul183=((($add182<<2))&-1);
          var $call184=_xrealloc($159, $mul183);
          var $161=$call184;
          $singlfunction=$161;
          var $162=$singlefnspace;
          var $add185=((($162)+(50))|0);
          $singlefnspace=$add185;
        }
        var $163=$singleptr;
        var $add188=((($163)+(1))|0);
        $singleptr=$add188;
        var $164=HEAP32[((5252244)>>2)];
        var $add189=((($164)+(1))|0);
        HEAP32[((5252244)>>2)]=$add189;
        var $165=$implfnloc;
        _zscanfndef($165);
        label = 745;
        break;
      } else {
        var $call190=_zscan2white(125, 37);
        var $tobool191=(($call190)|0)!=0;
        if ($tobool191) {
        }
        var $166=HEAP32[((5252252)>>2)];
        var $167=HEAP32[((5252248)>>2)];
        var $168=HEAP32[((5252244)>>2)];
        var $169=HEAP32[((5252248)>>2)];
        var $sub194=((($168)-($169))|0);
        _zlowercase($166, $167, $sub194);
        var $170=HEAP32[((5252252)>>2)];
        var $171=HEAP32[((5252248)>>2)];
        var $172=HEAP32[((5252244)>>2)];
        var $173=HEAP32[((5252248)>>2)];
        var $sub195=((($172)-($173))|0);
        var $call196=_zstrlookup($170, $171, $sub195, 11, 0);
        HEAP32[((5248808)>>2)]=$call196;
        var $174=HEAP32[((5248776)>>2)];
        var $tobool197=(($174)|0)!=0;
        if (!($tobool197)) {
          _skptokenunknownfunctionprint();
          break;
        }
        var $175=HEAP32[((5248808)>>2)];
        var $176=HEAP32[((5243392)>>2)];
        var $cmp200=(($175)|0)==(($176)|0);
        if ($cmp200) {
          _printrecursionillegal();
          break;
        }
        var $177=HEAP32[((5248808)>>2)];
        var $178=$singleptr;
        var $179=$singlfunction;
        var $arrayidx204=(($179+($178<<2))|0);
        HEAP32[(($arrayidx204)>>2)]=$177;
        var $180=$singleptr;
        var $181=$singlefnspace;
        var $cmp205=(($180)|0)==(($181)|0);
        if ($cmp205) {
          var $182=HEAP32[((5243908)>>2)];
          var $183=$singlefnspace;
          var $add209=((($183)+(50))|0);
          var $184=$singlefnspace;
          var $call210=_fprintf($182, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263244)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add209,HEAP32[(((tempInt)+(12))>>2)]=$184,tempInt));
          var $185=$singlfunction;
          var $186=$185;
          var $187=$singlefnspace;
          var $add211=((($187)+(50))|0);
          var $add212=((($add211)+(1))|0);
          var $mul213=((($add212<<2))&-1);
          var $call214=_xrealloc($186, $mul213);
          var $188=$call214;
          $singlfunction=$188;
          var $189=$singlefnspace;
          var $add215=((($189)+(50))|0);
          $singlefnspace=$add215;
        }
        var $190=$singleptr;
        var $add218=((($190)+(1))|0);
        $singleptr=$add218;
        label = 745;
        break;
      }
    } while(0);
    if (label == 745) {
      label = 0;
    }
    var $call221=_eatbstwhitespace();
    var $tobool222=(($call221)|0)!=0;
    if (!($tobool222)) {
      label = 747;
      break;
    }
  }
  if (label == 722) {
    var $132=HEAP32[((5243908)>>2)];
    var $call154=_fputs(((5263104)|0), $132);
    var $133=HEAP32[((5243524)>>2)];
    var $call155=_fputs(((5263104)|0), $133);
    _printconfusion();
    _longjmp(((5248396)|0), 1);
    throw "Reached an unreachable!"
  }
  else if (label == 747) {
    _eatbstprint();
    var $191=HEAP32[((5243908)>>2)];
    var $call224=_fputs(((5263312)|0), $191);
    var $192=HEAP32[((5243524)>>2)];
    var $call225=_fputs(((5263312)|0), $192);
    _bsterrprintandlookforblankline();
    var $231=$singlfunction;
    var $232=$231;
    _free($232);
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 749) {
    var $193=HEAP32[((5251108)>>2)];
    var $194=$singleptr;
    var $195=$singlfunction;
    var $arrayidx227=(($195+($194<<2))|0);
    HEAP32[(($arrayidx227)>>2)]=$193;
    var $196=$singleptr;
    var $197=$singlefnspace;
    var $cmp228=(($196)|0)==(($197)|0);
    if ($cmp228) {
      var $198=HEAP32[((5243908)>>2)];
      var $199=$singlefnspace;
      var $add232=((($199)+(50))|0);
      var $200=$singlefnspace;
      var $call233=_fprintf($198, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263244)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add232,HEAP32[(((tempInt)+(12))>>2)]=$200,tempInt));
      var $201=$singlfunction;
      var $202=$201;
      var $203=$singlefnspace;
      var $add234=((($203)+(50))|0);
      var $add235=((($add234)+(1))|0);
      var $mul236=((($add235<<2))&-1);
      var $call237=_xrealloc($202, $mul236);
      var $204=$call237;
      $singlfunction=$204;
      var $205=$singlefnspace;
      var $add238=((($205)+(50))|0);
      $singlefnspace=$add238;
    }
    var $206=$singleptr;
    var $add241=((($206)+(1))|0);
    $singleptr=$add241;
    while(1) {
      var $207=$singleptr;
      var $208=HEAP32[((5243404)>>2)];
      var $add243=((($207)+($208))|0);
      var $209=HEAP32[((5243400)>>2)];
      var $cmp244=(($add243)|0) > (($209)|0);
      if (!($cmp244)) {
        break;
      }
      var $210=HEAP32[((5243908)>>2)];
      var $211=HEAP32[((5243400)>>2)];
      var $add248=((($211)+(3000))|0);
      var $212=HEAP32[((5243400)>>2)];
      var $call249=_fprintf($210, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263080)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add248,HEAP32[(((tempInt)+(12))>>2)]=$212,tempInt));
      var $213=HEAP32[((5243396)>>2)];
      var $214=$213;
      var $215=HEAP32[((5243400)>>2)];
      var $add250=((($215)+(3000))|0);
      var $add251=((($add250)+(1))|0);
      var $mul252=((($add251<<2))&-1);
      var $call253=_xrealloc($214, $mul252);
      var $216=$call253;
      HEAP32[((5243396)>>2)]=$216;
      var $217=HEAP32[((5243400)>>2)];
      var $add254=((($217)+(3000))|0);
      HEAP32[((5243400)>>2)]=$add254;
    }
    var $218=HEAP32[((5243404)>>2)];
    var $219=$fnhashloc_addr;
    var $220=HEAP32[((5248484)>>2)];
    var $arrayidx257=(($220+($219<<2))|0);
    HEAP32[(($arrayidx257)>>2)]=$218;
    $copyptr=0;
    while(1) {
      var $221=$copyptr;
      var $222=$singleptr;
      var $cmp259=(($221)|0) < (($222)|0);
      if (!($cmp259)) {
        break;
      }
      var $223=$copyptr;
      var $224=$singlfunction;
      var $arrayidx262=(($224+($223<<2))|0);
      var $225=HEAP32[(($arrayidx262)>>2)];
      var $226=HEAP32[((5243404)>>2)];
      var $227=HEAP32[((5243396)>>2)];
      var $arrayidx263=(($227+($226<<2))|0);
      HEAP32[(($arrayidx263)>>2)]=$225;
      var $228=$copyptr;
      var $add264=((($228)+(1))|0);
      $copyptr=$add264;
      var $229=HEAP32[((5243404)>>2)];
      var $add265=((($229)+(1))|0);
      HEAP32[((5243404)>>2)]=$add265;
    }
    var $230=HEAP32[((5252244)>>2)];
    var $add267=((($230)+(1))|0);
    HEAP32[((5252244)>>2)]=$add267;
    var $231=$singlfunction;
    var $232=$231;
    _free($232);
    STACKTOP = __stackBase__;
    return;
  }
}
_zscanfndef["X"]=1;

function _scanbalancedbraces() {
  var label = 0;

  var $Result;
  $Result=0;
  var $0=HEAP32[((5252244)>>2)];
  var $add=((($0)+(1))|0);
  HEAP32[((5252244)>>2)]=$add;
  var $1=HEAP32[((5252244)>>2)];
  var $2=HEAP32[((5252252)>>2)];
  var $arrayidx=(($2+$1)|0);
  var $3=HEAP8[($arrayidx)];
  var $idxprom=(($3)&255);
  var $arrayidx1=((5243932+$idxprom)|0);
  var $4=HEAP8[($arrayidx1)];
  var $conv=(($4)&255);
  var $cmp=(($conv)|0)==1;
  do {
    if ($cmp) {
      label = 768;
    } else {
      var $5=HEAP32[((5252244)>>2)];
      var $6=HEAP32[((5244208)>>2)];
      var $cmp3=(($5)|0)==(($6)|0);
      if ($cmp3) {
        label = 768;
        break;
      } else {
        break;
      }
    }
  } while(0);
  do {
    if (label == 768) {
      var $call=_compressbibwhite();
      var $tobool=(($call)|0)!=0;
      if ($tobool) {
        break;
      }
      var $123=$Result;

      return $123;
    }
  } while(0);
  var $7=HEAP32[((5251056)>>2)];
  var $cmp7=(($7)|0) > 1;
  if ($cmp7) {
    var $8=HEAP32[((5251056)>>2)];
    var $sub=((($8)-(1))|0);
    var $9=HEAP32[((5251064)>>2)];
    var $arrayidx10=(($9+$sub)|0);
    var $10=HEAP8[($arrayidx10)];
    var $conv11=(($10)&255);
    var $cmp12=(($conv11)|0)==32;
    if ($cmp12) {
      var $11=HEAP32[((5251056)>>2)];
      var $sub15=((($11)-(2))|0);
      var $12=HEAP32[((5251064)>>2)];
      var $arrayidx16=(($12+$sub15)|0);
      var $13=HEAP8[($arrayidx16)];
      var $conv17=(($13)&255);
      var $cmp18=(($conv17)|0)==32;
      if ($cmp18) {
        var $14=HEAP32[((5251056)>>2)];
        var $sub21=((($14)-(1))|0);
        HEAP32[((5251056)>>2)]=$sub21;
      }
    }
  }
  HEAP32[((5252536)>>2)]=0;
  var $15=HEAP32[((5243516)>>2)];
  var $tobool25=(($15)|0)!=0;
  do {
    if ($tobool25) {
      L919: while(1) {
        var $16=HEAP32[((5252244)>>2)];
        var $17=HEAP32[((5252252)>>2)];
        var $arrayidx27=(($17+$16)|0);
        var $18=HEAP8[($arrayidx27)];
        var $conv28=(($18)&255);
        var $19=HEAP8[(5243612)];
        var $conv29=(($19)&255);
        var $cmp30=(($conv28)|0)!=(($conv29)|0);
        if (!($cmp30)) {
          label = 833;
          break;
        }
        var $20=HEAP32[((5252244)>>2)];
        var $21=HEAP32[((5252252)>>2)];
        var $arrayidx32=(($21+$20)|0);
        var $22=HEAP8[($arrayidx32)];
        var $conv33=(($22)&255);
        if ((($conv33)|0)==123) {
          var $23=HEAP32[((5252536)>>2)];
          var $add34=((($23)+(1))|0);
          HEAP32[((5252536)>>2)]=$add34;
          var $24=HEAP32[((5251056)>>2)];
          var $25=HEAP32[((5252240)>>2)];
          var $cmp35=(($24)|0)==(($25)|0);
          if ($cmp35) {
            label = 782;
            break;
          }
          var $26=HEAP32[((5251056)>>2)];
          var $27=HEAP32[((5251064)>>2)];
          var $arrayidx38=(($27+$26)|0);
          HEAP8[($arrayidx38)]=123;
          var $28=HEAP32[((5251056)>>2)];
          var $add39=((($28)+(1))|0);
          HEAP32[((5251056)>>2)]=$add39;
          var $29=HEAP32[((5252244)>>2)];
          var $add41=((($29)+(1))|0);
          HEAP32[((5252244)>>2)]=$add41;
          var $30=HEAP32[((5252244)>>2)];
          var $31=HEAP32[((5252252)>>2)];
          var $arrayidx42=(($31+$30)|0);
          var $32=HEAP8[($arrayidx42)];
          var $idxprom43=(($32)&255);
          var $arrayidx44=((5243932+$idxprom43)|0);
          var $33=HEAP8[($arrayidx44)];
          var $conv45=(($33)&255);
          var $cmp46=(($conv45)|0)==1;
          do {
            if ($cmp46) {
              label = 786;
            } else {
              var $34=HEAP32[((5252244)>>2)];
              var $35=HEAP32[((5244208)>>2)];
              var $cmp49=(($34)|0)==(($35)|0);
              if ($cmp49) {
                label = 786;
                break;
              } else {
                break;
              }
            }
          } while(0);
          if (label == 786) {
            label = 0;
            var $call52=_compressbibwhite();
            var $tobool53=(($call52)|0)!=0;
            if (!($tobool53)) {
              label = 787;
              break;
            }
          }
          while(1) {
            var $36=HEAP32[((5252244)>>2)];
            var $37=HEAP32[((5252252)>>2)];
            var $arrayidx59=(($37+$36)|0);
            var $38=HEAP8[($arrayidx59)];
            var $conv60=(($38)&255);
            if ((($conv60)|0)==123) {
              var $53=HEAP32[((5252536)>>2)];
              var $add91=((($53)+(1))|0);
              HEAP32[((5252536)>>2)]=$add91;
              var $54=HEAP32[((5251056)>>2)];
              var $55=HEAP32[((5252240)>>2)];
              var $cmp92=(($54)|0)==(($55)|0);
              if ($cmp92) {
                label = 803;
                break L919;
              }
              var $56=HEAP32[((5251056)>>2)];
              var $57=HEAP32[((5251064)>>2)];
              var $arrayidx96=(($57+$56)|0);
              HEAP8[($arrayidx96)]=123;
              var $58=HEAP32[((5251056)>>2)];
              var $add97=((($58)+(1))|0);
              HEAP32[((5251056)>>2)]=$add97;
              var $59=HEAP32[((5252244)>>2)];
              var $add99=((($59)+(1))|0);
              HEAP32[((5252244)>>2)]=$add99;
              var $60=HEAP32[((5252244)>>2)];
              var $61=HEAP32[((5252252)>>2)];
              var $arrayidx100=(($61+$60)|0);
              var $62=HEAP8[($arrayidx100)];
              var $idxprom101=(($62)&255);
              var $arrayidx102=((5243932+$idxprom101)|0);
              var $63=HEAP8[($arrayidx102)];
              var $conv103=(($63)&255);
              var $cmp104=(($conv103)|0)==1;
              do {
                if ($cmp104) {
                  label = 807;
                } else {
                  var $64=HEAP32[((5252244)>>2)];
                  var $65=HEAP32[((5244208)>>2)];
                  var $cmp107=(($64)|0)==(($65)|0);
                  if ($cmp107) {
                    label = 807;
                    break;
                  } else {
                    break;
                  }
                }
              } while(0);
              if (label == 807) {
                label = 0;
                var $call110=_compressbibwhite();
                var $tobool111=(($call110)|0)!=0;
                if (!($tobool111)) {
                  label = 808;
                  break L919;
                }
              }
            } else if ((($conv60)|0)==125) {
              var $39=HEAP32[((5252536)>>2)];
              var $sub62=((($39)-(1))|0);
              HEAP32[((5252536)>>2)]=$sub62;
              var $40=HEAP32[((5251056)>>2)];
              var $41=HEAP32[((5252240)>>2)];
              var $cmp63=(($40)|0)==(($41)|0);
              if ($cmp63) {
                label = 792;
                break L919;
              }
              var $42=HEAP32[((5251056)>>2)];
              var $43=HEAP32[((5251064)>>2)];
              var $arrayidx67=(($43+$42)|0);
              HEAP8[($arrayidx67)]=125;
              var $44=HEAP32[((5251056)>>2)];
              var $add68=((($44)+(1))|0);
              HEAP32[((5251056)>>2)]=$add68;
              var $45=HEAP32[((5252244)>>2)];
              var $add70=((($45)+(1))|0);
              HEAP32[((5252244)>>2)]=$add70;
              var $46=HEAP32[((5252244)>>2)];
              var $47=HEAP32[((5252252)>>2)];
              var $arrayidx71=(($47+$46)|0);
              var $48=HEAP8[($arrayidx71)];
              var $idxprom72=(($48)&255);
              var $arrayidx73=((5243932+$idxprom72)|0);
              var $49=HEAP8[($arrayidx73)];
              var $conv74=(($49)&255);
              var $cmp75=(($conv74)|0)==1;
              do {
                if ($cmp75) {
                  label = 796;
                } else {
                  var $50=HEAP32[((5252244)>>2)];
                  var $51=HEAP32[((5244208)>>2)];
                  var $cmp78=(($50)|0)==(($51)|0);
                  if ($cmp78) {
                    label = 796;
                    break;
                  } else {
                    break;
                  }
                }
              } while(0);
              if (label == 796) {
                label = 0;
                var $call81=_compressbibwhite();
                var $tobool82=(($call81)|0)!=0;
                if (!($tobool82)) {
                  label = 797;
                  break L919;
                }
              }
              var $52=HEAP32[((5252536)>>2)];
              var $cmp86=(($52)|0)==0;
              if ($cmp86) {
                break;
              }
            } else {
              var $66=HEAP32[((5251056)>>2)];
              var $67=HEAP32[((5252240)>>2)];
              var $cmp115=(($66)|0)==(($67)|0);
              if ($cmp115) {
                label = 812;
                break L919;
              }
              var $68=HEAP32[((5252244)>>2)];
              var $69=HEAP32[((5252252)>>2)];
              var $arrayidx119=(($69+$68)|0);
              var $70=HEAP8[($arrayidx119)];
              var $71=HEAP32[((5251056)>>2)];
              var $72=HEAP32[((5251064)>>2)];
              var $arrayidx120=(($72+$71)|0);
              HEAP8[($arrayidx120)]=$70;
              var $73=HEAP32[((5251056)>>2)];
              var $add121=((($73)+(1))|0);
              HEAP32[((5251056)>>2)]=$add121;
              var $74=HEAP32[((5252244)>>2)];
              var $add123=((($74)+(1))|0);
              HEAP32[((5252244)>>2)]=$add123;
              var $75=HEAP32[((5252244)>>2)];
              var $76=HEAP32[((5252252)>>2)];
              var $arrayidx124=(($76+$75)|0);
              var $77=HEAP8[($arrayidx124)];
              var $idxprom125=(($77)&255);
              var $arrayidx126=((5243932+$idxprom125)|0);
              var $78=HEAP8[($arrayidx126)];
              var $conv127=(($78)&255);
              var $cmp128=(($conv127)|0)==1;
              do {
                if ($cmp128) {
                  label = 816;
                } else {
                  var $79=HEAP32[((5252244)>>2)];
                  var $80=HEAP32[((5244208)>>2)];
                  var $cmp131=(($79)|0)==(($80)|0);
                  if ($cmp131) {
                    label = 816;
                    break;
                  } else {
                    break;
                  }
                }
              } while(0);
              if (label == 816) {
                label = 0;
                var $call134=_compressbibwhite();
                var $tobool135=(($call134)|0)!=0;
                if (!($tobool135)) {
                  label = 817;
                  break L919;
                }
              }
            }
          }
        } else if ((($conv33)|0)==125) {
          label = 822;
          break;
        } else {
          var $81=HEAP32[((5251056)>>2)];
          var $82=HEAP32[((5252240)>>2)];
          var $cmp141=(($81)|0)==(($82)|0);
          if ($cmp141) {
            label = 824;
            break;
          }
          var $83=HEAP32[((5252244)>>2)];
          var $84=HEAP32[((5252252)>>2)];
          var $arrayidx145=(($84+$83)|0);
          var $85=HEAP8[($arrayidx145)];
          var $86=HEAP32[((5251056)>>2)];
          var $87=HEAP32[((5251064)>>2)];
          var $arrayidx146=(($87+$86)|0);
          HEAP8[($arrayidx146)]=$85;
          var $88=HEAP32[((5251056)>>2)];
          var $add147=((($88)+(1))|0);
          HEAP32[((5251056)>>2)]=$add147;
          var $89=HEAP32[((5252244)>>2)];
          var $add149=((($89)+(1))|0);
          HEAP32[((5252244)>>2)]=$add149;
          var $90=HEAP32[((5252244)>>2)];
          var $91=HEAP32[((5252252)>>2)];
          var $arrayidx150=(($91+$90)|0);
          var $92=HEAP8[($arrayidx150)];
          var $idxprom151=(($92)&255);
          var $arrayidx152=((5243932+$idxprom151)|0);
          var $93=HEAP8[($arrayidx152)];
          var $conv153=(($93)&255);
          var $cmp154=(($conv153)|0)==1;
          do {
            if ($cmp154) {
              label = 828;
            } else {
              var $94=HEAP32[((5252244)>>2)];
              var $95=HEAP32[((5244208)>>2)];
              var $cmp157=(($94)|0)==(($95)|0);
              if ($cmp157) {
                label = 828;
                break;
              } else {
                break;
              }
            }
          } while(0);
          if (label == 828) {
            label = 0;
            var $call160=_compressbibwhite();
            var $tobool161=(($call160)|0)!=0;
            if (!($tobool161)) {
              label = 829;
              break;
            }
          }
        }
      }
      if (label == 797) {
        var $123=$Result;

        return $123;
      }
      else if (label == 824) {
        _bibfieldtoolongprint();
        var $123=$Result;

        return $123;
      }
      else if (label == 787) {
        var $123=$Result;

        return $123;
      }
      else if (label == 782) {
        _bibfieldtoolongprint();
        var $123=$Result;

        return $123;
      }
      else if (label == 803) {
        _bibfieldtoolongprint();
        var $123=$Result;

        return $123;
      }
      else if (label == 792) {
        _bibfieldtoolongprint();
        var $123=$Result;

        return $123;
      }
      else if (label == 829) {
        var $123=$Result;

        return $123;
      }
      else if (label == 833) {
        break;
      }
      else if (label == 817) {
        var $123=$Result;

        return $123;
      }
      else if (label == 822) {
        _bibunbalancedbracesprint();
        var $123=$Result;

        return $123;
      }
      else if (label == 808) {
        var $123=$Result;

        return $123;
      }
      else if (label == 812) {
        _bibfieldtoolongprint();
        var $123=$Result;

        return $123;
      }
    } else {
      L1001: while(1) {
        var $96=HEAP32[((5252244)>>2)];
        var $97=HEAP32[((5252252)>>2)];
        var $arrayidx168=(($97+$96)|0);
        var $98=HEAP8[($arrayidx168)];
        var $conv169=(($98)&255);
        var $99=HEAP8[(5243612)];
        var $conv170=(($99)&255);
        var $cmp171=(($conv169)|0)!=(($conv170)|0);
        if (!($cmp171)) {
          label = 866;
          break;
        }
        var $100=HEAP32[((5252244)>>2)];
        var $101=HEAP32[((5252252)>>2)];
        var $arrayidx174=(($101+$100)|0);
        var $102=HEAP8[($arrayidx174)];
        var $conv175=(($102)&255);
        var $cmp176=(($conv175)|0)==123;
        if ($cmp176) {
          var $103=HEAP32[((5252536)>>2)];
          var $add179=((($103)+(1))|0);
          HEAP32[((5252536)>>2)]=$add179;
          var $104=HEAP32[((5252244)>>2)];
          var $add180=((($104)+(1))|0);
          HEAP32[((5252244)>>2)]=$add180;
          var $call181=_eatbibwhitespace();
          var $tobool182=(($call181)|0)!=0;
          if (!($tobool182)) {
            label = 838;
            break;
          }
          while(1) {
            var $105=HEAP32[((5252536)>>2)];
            var $cmp186=(($105)|0) > 0;
            if (!($cmp186)) {
              break;
            }
            var $106=HEAP32[((5252244)>>2)];
            var $107=HEAP32[((5252252)>>2)];
            var $arrayidx189=(($107+$106)|0);
            var $108=HEAP8[($arrayidx189)];
            var $conv190=(($108)&255);
            var $cmp191=(($conv190)|0)==125;
            if ($cmp191) {
              var $109=HEAP32[((5252536)>>2)];
              var $sub194=((($109)-(1))|0);
              HEAP32[((5252536)>>2)]=$sub194;
              var $110=HEAP32[((5252244)>>2)];
              var $add195=((($110)+(1))|0);
              HEAP32[((5252244)>>2)]=$add195;
              var $call196=_eatbibwhitespace();
              var $tobool197=(($call196)|0)!=0;
              if (!($tobool197)) {
                label = 843;
                break L1001;
              }
            } else {
              var $111=HEAP32[((5252244)>>2)];
              var $112=HEAP32[((5252252)>>2)];
              var $arrayidx201=(($112+$111)|0);
              var $113=HEAP8[($arrayidx201)];
              var $conv202=(($113)&255);
              var $cmp203=(($conv202)|0)==123;
              if ($cmp203) {
                var $114=HEAP32[((5252536)>>2)];
                var $add206=((($114)+(1))|0);
                HEAP32[((5252536)>>2)]=$add206;
                var $115=HEAP32[((5252244)>>2)];
                var $add207=((($115)+(1))|0);
                HEAP32[((5252244)>>2)]=$add207;
                var $call208=_eatbibwhitespace();
                var $tobool209=(($call208)|0)!=0;
                if (!($tobool209)) {
                  label = 847;
                  break L1001;
                }
              } else {
                var $116=HEAP32[((5252244)>>2)];
                var $add213=((($116)+(1))|0);
                HEAP32[((5252244)>>2)]=$add213;
                var $call214=_zscan2(125, 123);
                var $tobool215=(($call214)|0)!=0;
                if (!($tobool215)) {
                  var $call217=_eatbibwhitespace();
                  var $tobool218=(($call217)|0)!=0;
                  if (!($tobool218)) {
                    label = 851;
                    break L1001;
                  }
                }
              }
            }
          }
        } else {
          var $117=HEAP32[((5252244)>>2)];
          var $118=HEAP32[((5252252)>>2)];
          var $arrayidx226=(($118+$117)|0);
          var $119=HEAP8[($arrayidx226)];
          var $conv227=(($119)&255);
          var $cmp228=(($conv227)|0)==125;
          if ($cmp228) {
            label = 858;
            break;
          }
          var $120=HEAP32[((5252244)>>2)];
          var $add232=((($120)+(1))|0);
          HEAP32[((5252244)>>2)]=$add232;
          var $121=HEAP8[(5243612)];
          var $call233=_zscan3($121, 123, 125);
          var $tobool234=(($call233)|0)!=0;
          if (!($tobool234)) {
            var $call236=_eatbibwhitespace();
            var $tobool237=(($call236)|0)!=0;
            if (!($tobool237)) {
              label = 861;
              break;
            }
          }
        }
      }
      if (label == 838) {
        _eatbibprint();
        var $123=$Result;

        return $123;
      }
      else if (label == 843) {
        _eatbibprint();
        var $123=$Result;

        return $123;
      }
      else if (label == 847) {
        _eatbibprint();
        var $123=$Result;

        return $123;
      }
      else if (label == 851) {
        _eatbibprint();
        var $123=$Result;

        return $123;
      }
      else if (label == 858) {
        _bibunbalancedbracesprint();
        var $123=$Result;

        return $123;
      }
      else if (label == 861) {
        _eatbibprint();
        var $123=$Result;

        return $123;
      }
      else if (label == 866) {
        break;
      }
    }
  } while(0);
  var $122=HEAP32[((5252244)>>2)];
  var $add245=((($122)+(1))|0);
  HEAP32[((5252244)>>2)]=$add245;
  $Result=1;
  var $123=$Result;

  return $123;
}
_scanbalancedbraces["X"]=1;

function _zdecrbracelevel($poplitvar) {
  var label = 0;

  var $poplitvar_addr;
  $poplitvar_addr=$poplitvar;
  var $0=HEAP32[((5252304)>>2)];
  var $cmp=(($0)|0)==0;
  if ($cmp) {
    var $1=$poplitvar_addr;
    _zbracesunbalancedcomplaint($1);

    return;
  } else {
    var $2=HEAP32[((5252304)>>2)];
    var $sub=((($2)-(1))|0);
    HEAP32[((5252304)>>2)]=$sub;

    return;
  }
}


function _zcheckbracelevel($poplitvar) {
  var label = 0;

  var $poplitvar_addr;
  $poplitvar_addr=$poplitvar;
  var $0=HEAP32[((5252304)>>2)];
  var $cmp=(($0)|0) > 0;
  if (!($cmp)) {

    return;
  }
  var $1=$poplitvar_addr;
  _zbracesunbalancedcomplaint($1);

  return;
}


function _scanafieldtokenandeatwhite() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $Result;
  $Result=0;
  var $0=HEAP32[((5252244)>>2)];
  var $1=HEAP32[((5252252)>>2)];
  var $arrayidx=(($1+$0)|0);
  var $2=HEAP8[($arrayidx)];
  var $conv=(($2)&255);
  do {
    if ((($conv)|0)==48 | (($conv)|0)==49 | (($conv)|0)==50 | (($conv)|0)==51 | (($conv)|0)==52 | (($conv)|0)==53 | (($conv)|0)==54 | (($conv)|0)==55 | (($conv)|0)==56 | (($conv)|0)==57) {
      var $call7=_scannonneginteger();
      var $tobool8=(($call7)|0)!=0;
      if (!($tobool8)) {
        var $3=HEAP32[((5243908)>>2)];
        var $call10=_fputs(((5263052)|0), $3);
        var $4=HEAP32[((5243524)>>2)];
        var $call11=_fputs(((5263052)|0), $4);
        _printconfusion();
        _longjmp(((5248396)|0), 1);
        throw "Reached an unreachable!"
      }
      var $5=HEAP32[((5243516)>>2)];
      var $tobool13=(($5)|0)!=0;
      do {
        if ($tobool13) {
          var $6=HEAP32[((5252248)>>2)];
          HEAP32[((5243460)>>2)]=$6;
          while(1) {
            var $7=HEAP32[((5243460)>>2)];
            var $8=HEAP32[((5252244)>>2)];
            var $cmp=(($7)|0) < (($8)|0);
            if (!($cmp)) {
              label = 915;
              break;
            }
            var $9=HEAP32[((5251056)>>2)];
            var $10=HEAP32[((5252240)>>2)];
            var $cmp16=(($9)|0)==(($10)|0);
            if ($cmp16) {
              break;
            }
            var $11=HEAP32[((5243460)>>2)];
            var $12=HEAP32[((5252252)>>2)];
            var $arrayidx19=(($12+$11)|0);
            var $13=HEAP8[($arrayidx19)];
            var $14=HEAP32[((5251056)>>2)];
            var $15=HEAP32[((5251064)>>2)];
            var $arrayidx20=(($15+$14)|0);
            HEAP8[($arrayidx20)]=$13;
            var $16=HEAP32[((5251056)>>2)];
            var $add=((($16)+(1))|0);
            HEAP32[((5251056)>>2)]=$add;
            var $17=HEAP32[((5243460)>>2)];
            var $add22=((($17)+(1))|0);
            HEAP32[((5243460)>>2)]=$add22;
          }
          if (label == 915) {
            break;
          }
          _bibfieldtoolongprint();
          var $96=$Result;
          STACKTOP = __stackBase__;
          return $96;
        }
      } while(0);
    } else if ((($conv)|0)==123) {
      HEAP8[(5243612)]=125;
      var $call=_scanbalancedbraces();
      var $tobool=(($call)|0)!=0;
      if ($tobool) {
        break;
      }
      var $96=$Result;
      STACKTOP = __stackBase__;
      return $96;
    } else if ((($conv)|0)==34) {
      HEAP8[(5243612)]=34;
      var $call2=_scanbalancedbraces();
      var $tobool3=(($call2)|0)!=0;
      if ($tobool3) {
        break;
      }
      var $96=$Result;
      STACKTOP = __stackBase__;
      return $96;
    } else {
      var $18=HEAP8[(5243616)];
      _zscanidentifier(44, $18, 35);
      var $19=HEAP8[(5243584)];
      var $conv24=(($19)&255);
      var $cmp25=(($conv24)|0)==3;
      do {
        if (!($cmp25)) {
          var $20=HEAP8[(5243584)];
          var $conv27=(($20)&255);
          var $cmp28=(($conv27)|0)==1;
          if ($cmp28) {
            break;
          }
          _bibidprint();
          var $21=HEAP32[((5243908)>>2)];
          var $call32=_fputs(((5262988)|0), $21);
          var $22=HEAP32[((5243524)>>2)];
          var $call33=_fputs(((5262988)|0), $22);
          _biberrprint();
          var $96=$Result;
          STACKTOP = __stackBase__;
          return $96;
        }
      } while(0);
      var $23=HEAP32[((5243516)>>2)];
      var $tobool35=(($23)|0)!=0;
      if ($tobool35) {
        var $24=HEAP32[((5252252)>>2)];
        var $25=HEAP32[((5252248)>>2)];
        var $26=HEAP32[((5252244)>>2)];
        var $27=HEAP32[((5252248)>>2)];
        var $sub=((($26)-($27))|0);
        _zlowercase($24, $25, $sub);
        var $28=HEAP32[((5252252)>>2)];
        var $29=HEAP32[((5252248)>>2)];
        var $30=HEAP32[((5252244)>>2)];
        var $31=HEAP32[((5252248)>>2)];
        var $sub37=((($30)-($31))|0);
        var $call38=_zstrlookup($28, $29, $sub37, 13, 0);
        HEAP32[((5243900)>>2)]=$call38;
        HEAP32[((5243512)>>2)]=1;
        var $32=HEAP32[((5252864)>>2)];
        var $tobool39=(($32)|0)!=0;
        if ($tobool39) {
          var $33=HEAP32[((5251152)>>2)];
          var $cmp41=(($33)|0)==2;
          if ($cmp41) {
            var $34=HEAP32[((5243900)>>2)];
            var $35=HEAP32[((5251136)>>2)];
            var $cmp44=(($34)|0)==(($35)|0);
            if ($cmp44) {
              HEAP32[((5243512)>>2)]=0;
              _macrowarnprint();
              var $36=HEAP32[((5243908)>>2)];
              var $call47=_fprintf($36, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262940)|0),tempInt));
              var $37=HEAP32[((5243524)>>2)];
              var $call48=_fprintf($37, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262940)|0),tempInt));
              _bibwarnprint();
            }
          }
        }
        var $38=HEAP32[((5248776)>>2)];
        var $tobool52=(($38)|0)!=0;
        if (!($tobool52)) {
          HEAP32[((5243512)>>2)]=0;
          _macrowarnprint();
          var $39=HEAP32[((5243908)>>2)];
          var $call54=_fprintf($39, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262920)|0),tempInt));
          var $40=HEAP32[((5243524)>>2)];
          var $call55=_fprintf($40, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262920)|0),tempInt));
          _bibwarnprint();
        }
        var $41=HEAP32[((5243512)>>2)];
        var $tobool57=(($41)|0)!=0;
        do {
          if ($tobool57) {
            var $42=HEAP32[((5243900)>>2)];
            var $43=HEAP32[((5248484)>>2)];
            var $arrayidx59=(($43+($42<<2))|0);
            var $44=HEAP32[(($arrayidx59)>>2)];
            var $45=HEAP32[((5243488)>>2)];
            var $arrayidx60=(($45+($44<<2))|0);
            var $46=HEAP32[(($arrayidx60)>>2)];
            HEAP32[((5243460)>>2)]=$46;
            var $47=HEAP32[((5243900)>>2)];
            var $48=HEAP32[((5248484)>>2)];
            var $arrayidx61=(($48+($47<<2))|0);
            var $49=HEAP32[(($arrayidx61)>>2)];
            var $add62=((($49)+(1))|0);
            var $50=HEAP32[((5243488)>>2)];
            var $arrayidx63=(($50+($add62<<2))|0);
            var $51=HEAP32[(($arrayidx63)>>2)];
            HEAP32[((5243464)>>2)]=$51;
            var $52=HEAP32[((5251056)>>2)];
            var $cmp64=(($52)|0)==0;
            if ($cmp64) {
              var $53=HEAP32[((5243460)>>2)];
              var $54=HEAP32[((5243496)>>2)];
              var $arrayidx67=(($54+$53)|0);
              var $55=HEAP8[($arrayidx67)];
              var $idxprom=(($55)&255);
              var $arrayidx68=((5243932+$idxprom)|0);
              var $56=HEAP8[($arrayidx68)];
              var $conv69=(($56)&255);
              var $cmp70=(($conv69)|0)==1;
              do {
                if ($cmp70) {
                  var $57=HEAP32[((5243460)>>2)];
                  var $58=HEAP32[((5243464)>>2)];
                  var $cmp72=(($57)|0) < (($58)|0);
                  if (!($cmp72)) {
                    break;
                  }
                  var $59=HEAP32[((5251056)>>2)];
                  var $60=HEAP32[((5252240)>>2)];
                  var $cmp75=(($59)|0)==(($60)|0);
                  if ($cmp75) {
                    _bibfieldtoolongprint();
                    var $96=$Result;
                    STACKTOP = __stackBase__;
                    return $96;
                  }
                  var $61=HEAP32[((5251056)>>2)];
                  var $62=HEAP32[((5251064)>>2)];
                  var $arrayidx79=(($62+$61)|0);
                  HEAP8[($arrayidx79)]=32;
                  var $63=HEAP32[((5251056)>>2)];
                  var $add80=((($63)+(1))|0);
                  HEAP32[((5251056)>>2)]=$add80;
                  var $64=HEAP32[((5243460)>>2)];
                  var $add82=((($64)+(1))|0);
                  HEAP32[((5243460)>>2)]=$add82;
                  while(1) {
                    var $65=HEAP32[((5243460)>>2)];
                    var $66=HEAP32[((5243496)>>2)];
                    var $arrayidx84=(($66+$65)|0);
                    var $67=HEAP8[($arrayidx84)];
                    var $idxprom85=(($67)&255);
                    var $arrayidx86=((5243932+$idxprom85)|0);
                    var $68=HEAP8[($arrayidx86)];
                    var $conv87=(($68)&255);
                    var $cmp88=(($conv87)|0)==1;
                    if ($cmp88) {
                      var $69=HEAP32[((5243460)>>2)];
                      var $70=HEAP32[((5243464)>>2)];
                      var $cmp90=(($69)|0) < (($70)|0);
                      var $71 = $cmp90;
                    } else {
                      var $71 = 0;
                    }
                    var $71;
                    if (!($71)) {
                      break;
                    }
                    var $72=HEAP32[((5243460)>>2)];
                    var $add93=((($72)+(1))|0);
                    HEAP32[((5243460)>>2)]=$add93;
                  }
                }
              } while(0);
            }
            while(1) {
              var $73=HEAP32[((5243460)>>2)];
              var $74=HEAP32[((5243464)>>2)];
              var $cmp98=(($73)|0) < (($74)|0);
              if (!($cmp98)) {
                label = 958;
                break;
              }
              var $75=HEAP32[((5243460)>>2)];
              var $76=HEAP32[((5243496)>>2)];
              var $arrayidx101=(($76+$75)|0);
              var $77=HEAP8[($arrayidx101)];
              var $idxprom102=(($77)&255);
              var $arrayidx103=((5243932+$idxprom102)|0);
              var $78=HEAP8[($arrayidx103)];
              var $conv104=(($78)&255);
              var $cmp105=(($conv104)|0)!=1;
              if ($cmp105) {
                var $79=HEAP32[((5251056)>>2)];
                var $80=HEAP32[((5252240)>>2)];
                var $cmp108=(($79)|0)==(($80)|0);
                if ($cmp108) {
                  label = 948;
                  break;
                }
                var $81=HEAP32[((5243460)>>2)];
                var $82=HEAP32[((5243496)>>2)];
                var $arrayidx112=(($82+$81)|0);
                var $83=HEAP8[($arrayidx112)];
                var $84=HEAP32[((5251056)>>2)];
                var $85=HEAP32[((5251064)>>2)];
                var $arrayidx113=(($85+$84)|0);
                HEAP8[($arrayidx113)]=$83;
                var $86=HEAP32[((5251056)>>2)];
                var $add114=((($86)+(1))|0);
                HEAP32[((5251056)>>2)]=$add114;
              } else {
                var $87=HEAP32[((5251056)>>2)];
                var $sub117=((($87)-(1))|0);
                var $88=HEAP32[((5251064)>>2)];
                var $arrayidx118=(($88+$sub117)|0);
                var $89=HEAP8[($arrayidx118)];
                var $conv119=(($89)&255);
                var $cmp120=(($conv119)|0)!=32;
                if ($cmp120) {
                  var $90=HEAP32[((5251056)>>2)];
                  var $91=HEAP32[((5252240)>>2)];
                  var $cmp123=(($90)|0)==(($91)|0);
                  if ($cmp123) {
                    label = 953;
                    break;
                  }
                  var $92=HEAP32[((5251056)>>2)];
                  var $93=HEAP32[((5251064)>>2)];
                  var $arrayidx127=(($93+$92)|0);
                  HEAP8[($arrayidx127)]=32;
                  var $94=HEAP32[((5251056)>>2)];
                  var $add128=((($94)+(1))|0);
                  HEAP32[((5251056)>>2)]=$add128;
                }
              }
              var $95=HEAP32[((5243460)>>2)];
              var $add132=((($95)+(1))|0);
              HEAP32[((5243460)>>2)]=$add132;
            }
            if (label == 948) {
              _bibfieldtoolongprint();
              var $96=$Result;
              STACKTOP = __stackBase__;
              return $96;
            }
            else if (label == 953) {
              _bibfieldtoolongprint();
              var $96=$Result;
              STACKTOP = __stackBase__;
              return $96;
            }
            else if (label == 958) {
              break;
            }
          }
        } while(0);
      }
    }
  } while(0);
  var $call136=_eatbibwhitespace();
  var $tobool137=(($call136)|0)!=0;
  if ($tobool137) {
    $Result=1;
    var $96=$Result;
    STACKTOP = __stackBase__;
    return $96;
  } else {
    _eatbibprint();
    var $96=$Result;
    STACKTOP = __stackBase__;
    return $96;
  }
}
_scanafieldtokenandeatwhite["X"]=1;

function _scanandstorethefieldvalueandeatwhite() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $Result;
  $Result=0;
  HEAP32[((5251056)>>2)]=0;
  var $call=_scanafieldtokenandeatwhite();
  var $tobool=(($call)|0)!=0;
  if (!($tobool)) {
    var $111=$Result;
    STACKTOP = __stackBase__;
    return $111;
  }
  while(1) {
    var $0=HEAP32[((5252244)>>2)];
    var $1=HEAP32[((5252252)>>2)];
    var $arrayidx=(($1+$0)|0);
    var $2=HEAP8[($arrayidx)];
    var $conv=(($2)&255);
    var $cmp=(($conv)|0)==35;
    if (!($cmp)) {
      label = 983;
      break;
    }
    var $3=HEAP32[((5252244)>>2)];
    var $add=((($3)+(1))|0);
    HEAP32[((5252244)>>2)]=$add;
    var $call2=_eatbibwhitespace();
    var $tobool3=(($call2)|0)!=0;
    if (!($tobool3)) {
      label = 979;
      break;
    }
    var $call6=_scanafieldtokenandeatwhite();
    var $tobool7=(($call6)|0)!=0;
    if (!($tobool7)) {
      label = 981;
      break;
    }
  }
  if (label == 979) {
    _eatbibprint();
    var $111=$Result;
    STACKTOP = __stackBase__;
    return $111;
  }
  else if (label == 981) {
    var $111=$Result;
    STACKTOP = __stackBase__;
    return $111;
  }
  else if (label == 983) {
    var $4=HEAP32[((5243516)>>2)];
    var $tobool10=(($4)|0)!=0;
    if ($tobool10) {
      var $5=HEAP32[((5252864)>>2)];
      var $tobool12=(($5)|0)!=0;
      if (!($tobool12)) {
        var $6=HEAP32[((5251056)>>2)];
        var $cmp14=(($6)|0) > 0;
        if ($cmp14) {
          var $7=HEAP32[((5251056)>>2)];
          var $sub=((($7)-(1))|0);
          var $8=HEAP32[((5251064)>>2)];
          var $arrayidx17=(($8+$sub)|0);
          var $9=HEAP8[($arrayidx17)];
          var $conv18=(($9)&255);
          var $cmp19=(($conv18)|0)==32;
          if ($cmp19) {
            var $10=HEAP32[((5251056)>>2)];
            var $sub22=((($10)-(1))|0);
            HEAP32[((5251056)>>2)]=$sub22;
          }
        }
      }
      var $11=HEAP32[((5252864)>>2)];
      var $tobool26=(($11)|0)!=0;
      do {
        if ($tobool26) {
          label = 994;
        } else {
          var $12=HEAP32[((5251064)>>2)];
          var $arrayidx27=(($12)|0);
          var $13=HEAP8[($arrayidx27)];
          var $conv28=(($13)&255);
          var $cmp29=(($conv28)|0)==32;
          if (!($cmp29)) {
            label = 994;
            break;
          }
          var $14=HEAP32[((5251056)>>2)];
          var $cmp32=(($14)|0) > 0;
          if (!($cmp32)) {
            label = 994;
            break;
          }
          HEAP32[((5251052)>>2)]=1;
          break;
        }
      } while(0);
      if (label == 994) {
        HEAP32[((5251052)>>2)]=0;
      }
      var $15=HEAP32[((5251064)>>2)];
      var $16=HEAP32[((5251052)>>2)];
      var $17=HEAP32[((5251056)>>2)];
      var $18=HEAP32[((5251052)>>2)];
      var $sub36=((($17)-($18))|0);
      var $call37=_zstrlookup($15, $16, $sub36, 0, 1);
      HEAP32[((5248824)>>2)]=$call37;
      var $19=HEAP32[((5248824)>>2)];
      var $20=HEAP32[((5248804)>>2)];
      var $arrayidx38=(($20+$19)|0);
      HEAP8[($arrayidx38)]=3;
      var $21=HEAP32[((5252864)>>2)];
      var $tobool39=(($21)|0)!=0;
      if ($tobool39) {
        var $22=HEAP32[((5251152)>>2)];
        if ((($22)|0)==1) {
          var $23=HEAP32[((5248824)>>2)];
          var $24=HEAP32[((5248752)>>2)];
          var $arrayidx41=(($24+($23<<2))|0);
          var $25=HEAP32[(($arrayidx41)>>2)];
          var $26=HEAP32[((5243660)>>2)];
          var $27=HEAP32[((5243540)>>2)];
          var $arrayidx42=(($27+($26<<2))|0);
          HEAP32[(($arrayidx42)>>2)]=$25;
          var $28=HEAP32[((5243660)>>2)];
          var $add43=((($28)+(1))|0);
          HEAP32[((5243660)>>2)]=$add43;
        } else if ((($22)|0)==2) {
          var $29=HEAP32[((5248824)>>2)];
          var $30=HEAP32[((5248752)>>2)];
          var $arrayidx45=(($30+($29<<2))|0);
          var $31=HEAP32[(($arrayidx45)>>2)];
          var $32=HEAP32[((5251136)>>2)];
          var $33=HEAP32[((5248484)>>2)];
          var $arrayidx46=(($33+($32<<2))|0);
          HEAP32[(($arrayidx46)>>2)]=$31;
        } else {
          _bibcmdconfusion();
        }
      } else {
        var $34=HEAP32[((5251096)>>2)];
        var $35=HEAP32[((5243784)>>2)];
        var $mul=((($34)*($35))&-1);
        var $36=HEAP32[((5248836)>>2)];
        var $37=HEAP32[((5248484)>>2)];
        var $arrayidx48=(($37+($36<<2))|0);
        var $38=HEAP32[(($arrayidx48)>>2)];
        var $add49=((($mul)+($38))|0);
        HEAP32[((5248828)>>2)]=$add49;
        var $39=HEAP32[((5248828)>>2)];
        var $40=HEAP32[((5243888)>>2)];
        var $cmp50=(($39)|0) >= (($40)|0);
        if ($cmp50) {
          var $41=HEAP32[((5243908)>>2)];
          var $call53=_fputs(((5262880)|0), $41);
          var $42=HEAP32[((5243524)>>2)];
          var $call54=_fputs(((5262880)|0), $42);
          _printconfusion();
          _longjmp(((5248396)|0), 1);
          throw "Reached an unreachable!"
        }
        var $43=HEAP32[((5248828)>>2)];
        var $44=HEAP32[((5248840)>>2)];
        var $arrayidx56=(($44+($43<<2))|0);
        var $45=HEAP32[(($arrayidx56)>>2)];
        var $cmp57=(($45)|0)!=0;
        if ($cmp57) {
          var $46=HEAP32[((5243908)>>2)];
          var $call60=_fputs(((5262832)|0), $46);
          var $47=HEAP32[((5243524)>>2)];
          var $call61=_fputs(((5262832)|0), $47);
          var $48=HEAP32[((5251096)>>2)];
          var $49=HEAP32[((5251184)>>2)];
          var $arrayidx62=(($49+($48<<2))|0);
          var $50=HEAP32[(($arrayidx62)>>2)];
          _zprintapoolstr($50);
          var $51=HEAP32[((5243908)>>2)];
          var $call63=_fputs(((5262808)|0), $51);
          var $52=HEAP32[((5243524)>>2)];
          var $call64=_fputs(((5262808)|0), $52);
          var $53=HEAP32[((5248836)>>2)];
          var $54=HEAP32[((5248752)>>2)];
          var $arrayidx65=(($54+($53<<2))|0);
          var $55=HEAP32[(($arrayidx65)>>2)];
          _zprintapoolstr($55);
          var $56=HEAP32[((5243908)>>2)];
          var $call66=_fprintf($56, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262752)|0),tempInt));
          var $57=HEAP32[((5243524)>>2)];
          var $call67=_fprintf($57, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262752)|0),tempInt));
          _bibwarnprint();
        } else {
          var $58=HEAP32[((5248824)>>2)];
          var $59=HEAP32[((5248752)>>2)];
          var $arrayidx69=(($59+($58<<2))|0);
          var $60=HEAP32[(($arrayidx69)>>2)];
          var $61=HEAP32[((5248828)>>2)];
          var $62=HEAP32[((5248840)>>2)];
          var $arrayidx70=(($62+($61<<2))|0);
          HEAP32[(($arrayidx70)>>2)]=$60;
          var $63=HEAP32[((5248836)>>2)];
          var $64=HEAP32[((5248484)>>2)];
          var $arrayidx71=(($64+($63<<2))|0);
          var $65=HEAP32[(($arrayidx71)>>2)];
          var $66=HEAP32[((5251140)>>2)];
          var $cmp72=(($65)|0)==(($66)|0);
          do {
            if ($cmp72) {
              var $67=HEAP32[((5252888)>>2)];
              var $tobool75=(($67)|0)!=0;
              if ($tobool75) {
                break;
              }
              var $68=HEAP32[((5251052)>>2)];
              HEAP32[((5243460)>>2)]=$68;
              while(1) {
                var $69=HEAP32[((5243460)>>2)];
                var $70=HEAP32[((5251056)>>2)];
                var $cmp78=(($69)|0) < (($70)|0);
                if (!($cmp78)) {
                  break;
                }
                var $71=HEAP32[((5243460)>>2)];
                var $72=HEAP32[((5251064)>>2)];
                var $arrayidx81=(($72+$71)|0);
                var $73=HEAP8[($arrayidx81)];
                var $74=HEAP32[((5243460)>>2)];
                var $75=HEAP32[((5243720)>>2)];
                var $arrayidx82=(($75+$74)|0);
                HEAP8[($arrayidx82)]=$73;
                var $76=HEAP32[((5243460)>>2)];
                var $add83=((($76)+(1))|0);
                HEAP32[((5243460)>>2)]=$add83;
              }
              var $77=HEAP32[((5243720)>>2)];
              var $78=HEAP32[((5251052)>>2)];
              var $79=HEAP32[((5251056)>>2)];
              var $80=HEAP32[((5251052)>>2)];
              var $sub85=((($79)-($80))|0);
              _zlowercase($77, $78, $sub85);
              var $81=HEAP32[((5243720)>>2)];
              var $82=HEAP32[((5251052)>>2)];
              var $83=HEAP32[((5251056)>>2)];
              var $84=HEAP32[((5251052)>>2)];
              var $sub86=((($83)-($84))|0);
              var $call87=_zstrlookup($81, $82, $sub86, 10, 1);
              HEAP32[((5244192)>>2)]=$call87;
              var $85=HEAP32[((5248776)>>2)];
              var $tobool88=(($85)|0)!=0;
              if ($tobool88) {
                var $86=HEAP32[((5244192)>>2)];
                var $87=HEAP32[((5248484)>>2)];
                var $arrayidx90=(($87+($86<<2))|0);
                var $88=HEAP32[(($arrayidx90)>>2)];
                HEAP32[((5251180)>>2)]=$88;
                var $89=HEAP32[((5251180)>>2)];
                var $90=HEAP32[((5248484)>>2)];
                var $arrayidx91=(($90+($89<<2))|0);
                var $91=HEAP32[(($arrayidx91)>>2)];
                var $92=HEAP32[((5243744)>>2)];
                var $cmp92=(($91)|0) >= (($92)|0);
                if ($cmp92) {
                  var $93=HEAP32[((5251180)>>2)];
                  var $94=HEAP32[((5248484)>>2)];
                  var $arrayidx95=(($94+($93<<2))|0);
                  var $95=HEAP32[(($arrayidx95)>>2)];
                  var $96=HEAP32[((5251188)>>2)];
                  var $arrayidx96=(($96+($95<<2))|0);
                  var $97=HEAP32[(($arrayidx96)>>2)];
                  var $add97=((($97)+(1))|0);
                  var $98=HEAP32[((5251180)>>2)];
                  var $99=HEAP32[((5248484)>>2)];
                  var $arrayidx98=(($99+($98<<2))|0);
                  var $100=HEAP32[(($arrayidx98)>>2)];
                  var $101=HEAP32[((5251188)>>2)];
                  var $arrayidx99=(($101+($100<<2))|0);
                  HEAP32[(($arrayidx99)>>2)]=$add97;
                }
              } else {
                var $102=HEAP32[((5251064)>>2)];
                var $103=HEAP32[((5251052)>>2)];
                var $104=HEAP32[((5251056)>>2)];
                var $105=HEAP32[((5251052)>>2)];
                var $sub102=((($104)-($105))|0);
                var $call103=_zstrlookup($102, $103, $sub102, 9, 1);
                HEAP32[((5251180)>>2)]=$call103;
                var $106=HEAP32[((5248776)>>2)];
                var $tobool104=(($106)|0)!=0;
                if ($tobool104) {
                  _hashciteconfusion();
                }
                _zzadddatabasecite(5251172);
                var $107=HEAP32[((5251180)>>2)];
                var $108=HEAP32[((5248484)>>2)];
                var $arrayidx107=(($108+($107<<2))|0);
                var $109=HEAP32[(($arrayidx107)>>2)];
                var $110=HEAP32[((5251188)>>2)];
                var $arrayidx108=(($110+($109<<2))|0);
                HEAP32[(($arrayidx108)>>2)]=1;
              }
            }
          } while(0);
        }
      }
    }
    $Result=1;
    var $111=$Result;
    STACKTOP = __stackBase__;
    return $111;
  }
}
_scanandstorethefieldvalueandeatwhite["X"]=1;

function _skipstuffatspbracelevelgreaterthanone() {
  var label = 0;

  while(1) {
    var $0=HEAP32[((5243556)>>2)];
    var $cmp=(($0)|0) > 1;
    if ($cmp) {
      var $1=HEAP32[((5243544)>>2)];
      var $2=HEAP32[((5243552)>>2)];
      var $cmp1=(($1)|0) < (($2)|0);
      var $3 = $cmp1;
    } else {
      var $3 = 0;
    }
    var $3;
    if (!($3)) {
      break;
    }
    var $4=HEAP32[((5243544)>>2)];
    var $5=HEAP32[((5243496)>>2)];
    var $arrayidx=(($5+$4)|0);
    var $6=HEAP8[($arrayidx)];
    var $conv=(($6)&255);
    var $cmp2=(($conv)|0)==125;
    if ($cmp2) {
      var $7=HEAP32[((5243556)>>2)];
      var $sub=((($7)-(1))|0);
      HEAP32[((5243556)>>2)]=$sub;
    } else {
      var $8=HEAP32[((5243544)>>2)];
      var $9=HEAP32[((5243496)>>2)];
      var $arrayidx4=(($9+$8)|0);
      var $10=HEAP8[($arrayidx4)];
      var $conv5=(($10)&255);
      var $cmp6=(($conv5)|0)==123;
      if ($cmp6) {
        var $11=HEAP32[((5243556)>>2)];
        var $add=((($11)+(1))|0);
        HEAP32[((5243556)>>2)]=$add;
      }
    }
    var $12=HEAP32[((5243544)>>2)];
    var $add10=((($12)+(1))|0);
    HEAP32[((5243544)>>2)]=$add10;
  }

  return;
}


function _zenoughtextchars($enoughchars) {
  var label = 0;

  var $enoughchars_addr;
  var $Result;
  $enoughchars_addr=$enoughchars;
  HEAP32[((5243764)>>2)]=0;
  var $0=HEAP32[((5251052)>>2)];
  HEAP32[((5251048)>>2)]=$0;
  while(1) {
    var $1=HEAP32[((5251048)>>2)];
    var $2=HEAP32[((5251056)>>2)];
    var $cmp=(($1)|0) < (($2)|0);
    if ($cmp) {
      var $3=HEAP32[((5243764)>>2)];
      var $4=$enoughchars_addr;
      var $cmp1=(($3)|0) < (($4)|0);
      var $5 = $cmp1;
    } else {
      var $5 = 0;
    }
    var $5;
    if (!($5)) {
      break;
    }
    var $6=HEAP32[((5251048)>>2)];
    var $add=((($6)+(1))|0);
    HEAP32[((5251048)>>2)]=$add;
    var $7=HEAP32[((5251048)>>2)];
    var $sub=((($7)-(1))|0);
    var $8=HEAP32[((5251064)>>2)];
    var $arrayidx=(($8+$sub)|0);
    var $9=HEAP8[($arrayidx)];
    var $conv=(($9)&255);
    var $cmp2=(($conv)|0)==123;
    if ($cmp2) {
      var $10=HEAP32[((5252304)>>2)];
      var $add4=((($10)+(1))|0);
      HEAP32[((5252304)>>2)]=$add4;
      var $11=HEAP32[((5252304)>>2)];
      var $cmp5=(($11)|0)==1;
      do {
        if ($cmp5) {
          var $12=HEAP32[((5251048)>>2)];
          var $13=HEAP32[((5251056)>>2)];
          var $cmp7=(($12)|0) < (($13)|0);
          if (!($cmp7)) {
            break;
          }
          var $14=HEAP32[((5251048)>>2)];
          var $15=HEAP32[((5251064)>>2)];
          var $arrayidx10=(($15+$14)|0);
          var $16=HEAP8[($arrayidx10)];
          var $conv11=(($16)&255);
          var $cmp12=(($conv11)|0)==92;
          if ($cmp12) {
            var $17=HEAP32[((5251048)>>2)];
            var $add15=((($17)+(1))|0);
            HEAP32[((5251048)>>2)]=$add15;
            while(1) {
              var $18=HEAP32[((5251048)>>2)];
              var $19=HEAP32[((5251056)>>2)];
              var $cmp17=(($18)|0) < (($19)|0);
              if ($cmp17) {
                var $20=HEAP32[((5252304)>>2)];
                var $cmp20=(($20)|0) > 0;
                var $21 = $cmp20;
              } else {
                var $21 = 0;
              }
              var $21;
              if (!($21)) {
                break;
              }
              var $22=HEAP32[((5251048)>>2)];
              var $23=HEAP32[((5251064)>>2)];
              var $arrayidx24=(($23+$22)|0);
              var $24=HEAP8[($arrayidx24)];
              var $conv25=(($24)&255);
              var $cmp26=(($conv25)|0)==125;
              if ($cmp26) {
                var $25=HEAP32[((5252304)>>2)];
                var $sub29=((($25)-(1))|0);
                HEAP32[((5252304)>>2)]=$sub29;
              } else {
                var $26=HEAP32[((5251048)>>2)];
                var $27=HEAP32[((5251064)>>2)];
                var $arrayidx30=(($27+$26)|0);
                var $28=HEAP8[($arrayidx30)];
                var $conv31=(($28)&255);
                var $cmp32=(($conv31)|0)==123;
                if ($cmp32) {
                  var $29=HEAP32[((5252304)>>2)];
                  var $add35=((($29)+(1))|0);
                  HEAP32[((5252304)>>2)]=$add35;
                }
              }
              var $30=HEAP32[((5251048)>>2)];
              var $add37=((($30)+(1))|0);
              HEAP32[((5251048)>>2)]=$add37;
            }
          }
        }
      } while(0);
    } else {
      var $31=HEAP32[((5251048)>>2)];
      var $sub41=((($31)-(1))|0);
      var $32=HEAP32[((5251064)>>2)];
      var $arrayidx42=(($32+$sub41)|0);
      var $33=HEAP8[($arrayidx42)];
      var $conv43=(($33)&255);
      var $cmp44=(($conv43)|0)==125;
      if ($cmp44) {
        var $34=HEAP32[((5252304)>>2)];
        var $sub47=((($34)-(1))|0);
        HEAP32[((5252304)>>2)]=$sub47;
      }
    }
    var $35=HEAP32[((5243764)>>2)];
    var $add50=((($35)+(1))|0);
    HEAP32[((5243764)>>2)]=$add50;
  }
  var $36=HEAP32[((5243764)>>2)];
  var $37=$enoughchars_addr;
  var $cmp52=(($36)|0) < (($37)|0);
  if ($cmp52) {
    $Result=0;
    var $38=$Result;

    return $38;
  } else {
    $Result=1;
    var $38=$Result;

    return $38;
  }
}
_zenoughtextchars["X"]=1;

function _znamescanforand($poplitvar) {
  var label = 0;

  var $poplitvar_addr;
  $poplitvar_addr=$poplitvar;
  HEAP32[((5252304)>>2)]=0;
  HEAP32[((5243656)>>2)]=0;
  HEAP32[((5252876)>>2)]=0;
  while(1) {
    var $0=HEAP32[((5252876)>>2)];
    var $tobool=(($0)|0)!=0;
    if ($tobool) {
      var $3 = 0;
    } else {
      var $1=HEAP32[((5251056)>>2)];
      var $2=HEAP32[((5251060)>>2)];
      var $cmp=(($1)|0) < (($2)|0);
      var $3 = $cmp;
    }
    var $3;
    if (!($3)) {
      break;
    }
    var $4=HEAP32[((5251056)>>2)];
    var $5=HEAP32[((5251064)>>2)];
    var $arrayidx=(($5+$4)|0);
    var $6=HEAP8[($arrayidx)];
    var $conv=(($6)&255);
    if ((($conv)|0)==123) {
      var $28=HEAP32[((5252304)>>2)];
      var $add39=((($28)+(1))|0);
      HEAP32[((5252304)>>2)]=$add39;
      var $29=HEAP32[((5251056)>>2)];
      var $add40=((($29)+(1))|0);
      HEAP32[((5251056)>>2)]=$add40;
      while(1) {
        var $30=HEAP32[((5252304)>>2)];
        var $cmp42=(($30)|0) > 0;
        if ($cmp42) {
          var $31=HEAP32[((5251056)>>2)];
          var $32=HEAP32[((5251060)>>2)];
          var $cmp45=(($31)|0) < (($32)|0);
          var $33 = $cmp45;
        } else {
          var $33 = 0;
        }
        var $33;
        if (!($33)) {
          break;
        }
        var $34=HEAP32[((5251056)>>2)];
        var $35=HEAP32[((5251064)>>2)];
        var $arrayidx49=(($35+$34)|0);
        var $36=HEAP8[($arrayidx49)];
        var $conv50=(($36)&255);
        var $cmp51=(($conv50)|0)==125;
        if ($cmp51) {
          var $37=HEAP32[((5252304)>>2)];
          var $sub54=((($37)-(1))|0);
          HEAP32[((5252304)>>2)]=$sub54;
        } else {
          var $38=HEAP32[((5251056)>>2)];
          var $39=HEAP32[((5251064)>>2)];
          var $arrayidx55=(($39+$38)|0);
          var $40=HEAP8[($arrayidx55)];
          var $conv56=(($40)&255);
          var $cmp57=(($conv56)|0)==123;
          if ($cmp57) {
            var $41=HEAP32[((5252304)>>2)];
            var $add60=((($41)+(1))|0);
            HEAP32[((5252304)>>2)]=$add60;
          }
        }
        var $42=HEAP32[((5251056)>>2)];
        var $add63=((($42)+(1))|0);
        HEAP32[((5251056)>>2)]=$add63;
      }
      HEAP32[((5243656)>>2)]=0;
    } else if ((($conv)|0)==97 | (($conv)|0)==65) {
      var $7=HEAP32[((5251056)>>2)];
      var $add=((($7)+(1))|0);
      HEAP32[((5251056)>>2)]=$add;
      var $8=HEAP32[((5243656)>>2)];
      var $tobool1=(($8)|0)!=0;
      if ($tobool1) {
        var $9=HEAP32[((5251056)>>2)];
        var $10=HEAP32[((5251060)>>2)];
        var $sub=((($10)-(3))|0);
        var $cmp2=(($9)|0) <= (($sub)|0);
        if ($cmp2) {
          var $11=HEAP32[((5251056)>>2)];
          var $12=HEAP32[((5251064)>>2)];
          var $arrayidx5=(($12+$11)|0);
          var $13=HEAP8[($arrayidx5)];
          var $conv6=(($13)&255);
          var $cmp7=(($conv6)|0)==110;
          do {
            if ($cmp7) {
              label = 1078;
            } else {
              var $14=HEAP32[((5251056)>>2)];
              var $15=HEAP32[((5251064)>>2)];
              var $arrayidx9=(($15+$14)|0);
              var $16=HEAP8[($arrayidx9)];
              var $conv10=(($16)&255);
              var $cmp11=(($conv10)|0)==78;
              if ($cmp11) {
                label = 1078;
                break;
              } else {
                break;
              }
            }
          } while(0);
          if (label == 1078) {
            label = 0;
            var $17=HEAP32[((5251056)>>2)];
            var $add14=((($17)+(1))|0);
            var $18=HEAP32[((5251064)>>2)];
            var $arrayidx15=(($18+$add14)|0);
            var $19=HEAP8[($arrayidx15)];
            var $conv16=(($19)&255);
            var $cmp17=(($conv16)|0)==100;
            do {
              if ($cmp17) {
                label = 1080;
              } else {
                var $20=HEAP32[((5251056)>>2)];
                var $add20=((($20)+(1))|0);
                var $21=HEAP32[((5251064)>>2)];
                var $arrayidx21=(($21+$add20)|0);
                var $22=HEAP8[($arrayidx21)];
                var $conv22=(($22)&255);
                var $cmp23=(($conv22)|0)==68;
                if ($cmp23) {
                  label = 1080;
                  break;
                } else {
                  break;
                }
              }
            } while(0);
            if (label == 1080) {
              label = 0;
              var $23=HEAP32[((5251056)>>2)];
              var $add26=((($23)+(2))|0);
              var $24=HEAP32[((5251064)>>2)];
              var $arrayidx27=(($24+$add26)|0);
              var $25=HEAP8[($arrayidx27)];
              var $idxprom=(($25)&255);
              var $arrayidx28=((5243932+$idxprom)|0);
              var $26=HEAP8[($arrayidx28)];
              var $conv29=(($26)&255);
              var $cmp30=(($conv29)|0)==1;
              if ($cmp30) {
                var $27=HEAP32[((5251056)>>2)];
                var $add33=((($27)+(2))|0);
                HEAP32[((5251056)>>2)]=$add33;
                HEAP32[((5252876)>>2)]=1;
              }
            }
          }
        }
      }
      HEAP32[((5243656)>>2)]=0;
    } else if ((($conv)|0)==125) {
      var $43=$poplitvar_addr;
      _zdecrbracelevel($43);
      var $44=HEAP32[((5251056)>>2)];
      var $add65=((($44)+(1))|0);
      HEAP32[((5251056)>>2)]=$add65;
      HEAP32[((5243656)>>2)]=0;
    } else {
      var $45=HEAP32[((5251056)>>2)];
      var $46=HEAP32[((5251064)>>2)];
      var $arrayidx66=(($46+$45)|0);
      var $47=HEAP8[($arrayidx66)];
      var $idxprom67=(($47)&255);
      var $arrayidx68=((5243932+$idxprom67)|0);
      var $48=HEAP8[($arrayidx68)];
      var $conv69=(($48)&255);
      var $cmp70=(($conv69)|0)==1;
      if ($cmp70) {
        var $49=HEAP32[((5251056)>>2)];
        var $add73=((($49)+(1))|0);
        HEAP32[((5251056)>>2)]=$add73;
        HEAP32[((5243656)>>2)]=1;
      } else {
        var $50=HEAP32[((5251056)>>2)];
        var $add75=((($50)+(1))|0);
        HEAP32[((5251056)>>2)]=$add75;
        HEAP32[((5243656)>>2)]=0;
      }
    }
  }
  var $51=$poplitvar_addr;
  _zcheckbracelevel($51);

  return;
}
_znamescanforand["X"]=1;

function _vonnameendsandlastnamestartsstuff() {
  var label = 0;

  var $0=HEAP32[((5244200)>>2)];
  var $sub=((($0)-(1))|0);
  HEAP32[((5243412)>>2)]=$sub;
  while(1) {
    var $1=HEAP32[((5243412)>>2)];
    var $2=HEAP32[((5243408)>>2)];
    var $cmp=(($1)|0) > (($2)|0);
    if (!($cmp)) {
      label = 1110;
      break;
    }
    var $3=HEAP32[((5243412)>>2)];
    var $sub1=((($3)-(1))|0);
    var $4=HEAP32[((5243816)>>2)];
    var $arrayidx=(($4+($sub1<<2))|0);
    var $5=HEAP32[(($arrayidx)>>2)];
    HEAP32[((5243844)>>2)]=$5;
    var $6=HEAP32[((5243412)>>2)];
    var $7=HEAP32[((5243816)>>2)];
    var $arrayidx2=(($7+($6<<2))|0);
    var $8=HEAP32[(($arrayidx2)>>2)];
    HEAP32[((5243840)>>2)]=$8;
    var $call=_vontokenfound();
    var $tobool=(($call)|0)!=0;
    if ($tobool) {
      label = 1108;
      break;
    }
    var $9=HEAP32[((5243412)>>2)];
    var $sub3=((($9)-(1))|0);
    HEAP32[((5243412)>>2)]=$sub3;
  }
  if (label == 1108) {

    return;
  }
  else if (label == 1110) {

    return;
  }
}


function _bracelvloneletterscomplaint() {
  var label = 0;

  var $0=HEAP32[((5243908)>>2)];
  var $call=_fputs(((5262680)|0), $0);
  var $1=HEAP32[((5243524)>>2)];
  var $call1=_fputs(((5262680)|0), $1);
  var $2=HEAP32[((5243696)>>2)];
  _zprintapoolstr($2);
  var $3=HEAP32[((5243908)>>2)];
  var $call2=_fputs(((5262632)|0), $3);
  var $4=HEAP32[((5243524)>>2)];
  var $call3=_fputs(((5262632)|0), $4);
  _bstexwarnprint();

  return;
}


function _vontokenfound() {
  var label = 0;

  var $Result;
  HEAP32[((5243808)>>2)]=0;
  $Result=0;
  while(1) {
    var $0=HEAP32[((5243844)>>2)];
    var $1=HEAP32[((5243840)>>2)];
    var $cmp=(($0)|0) < (($1)|0);
    if (!($cmp)) {
      label = 1171;
      break;
    }
    var $2=HEAP32[((5243844)>>2)];
    var $3=HEAP32[((5243484)>>2)];
    var $arrayidx=(($3+$2)|0);
    var $4=HEAP8[($arrayidx)];
    var $conv=(($4)&255);
    var $cmp1=(($conv)|0) >= 65;
    if ($cmp1) {
      var $5=HEAP32[((5243844)>>2)];
      var $6=HEAP32[((5243484)>>2)];
      var $arrayidx3=(($6+$5)|0);
      var $7=HEAP8[($arrayidx3)];
      var $conv4=(($7)&255);
      var $cmp5=(($conv4)|0) <= 90;
      if ($cmp5) {
        label = 1119;
        break;
      }
    }
    var $8=HEAP32[((5243844)>>2)];
    var $9=HEAP32[((5243484)>>2)];
    var $arrayidx7=(($9+$8)|0);
    var $10=HEAP8[($arrayidx7)];
    var $conv8=(($10)&255);
    var $cmp9=(($conv8)|0) >= 97;
    if ($cmp9) {
      var $11=HEAP32[((5243844)>>2)];
      var $12=HEAP32[((5243484)>>2)];
      var $arrayidx12=(($12+$11)|0);
      var $13=HEAP8[($arrayidx12)];
      var $conv13=(($13)&255);
      var $cmp14=(($conv13)|0) <= 122;
      if ($cmp14) {
        label = 1122;
        break;
      }
    }
    var $14=HEAP32[((5243844)>>2)];
    var $15=HEAP32[((5243484)>>2)];
    var $arrayidx18=(($15+$14)|0);
    var $16=HEAP8[($arrayidx18)];
    var $conv19=(($16)&255);
    var $cmp20=(($conv19)|0)==123;
    if ($cmp20) {
      var $17=HEAP32[((5243808)>>2)];
      var $add=((($17)+(1))|0);
      HEAP32[((5243808)>>2)]=$add;
      var $18=HEAP32[((5243844)>>2)];
      var $add23=((($18)+(1))|0);
      HEAP32[((5243844)>>2)]=$add23;
      var $19=HEAP32[((5243844)>>2)];
      var $add24=((($19)+(2))|0);
      var $20=HEAP32[((5243840)>>2)];
      var $cmp25=(($add24)|0) < (($20)|0);
      if ($cmp25) {
        var $21=HEAP32[((5243844)>>2)];
        var $22=HEAP32[((5243484)>>2)];
        var $arrayidx28=(($22+$21)|0);
        var $23=HEAP8[($arrayidx28)];
        var $conv29=(($23)&255);
        var $cmp30=(($conv29)|0)==92;
        if ($cmp30) {
          label = 1126;
          break;
        }
      }
      while(1) {
        var $69=HEAP32[((5243808)>>2)];
        var $cmp100=(($69)|0) > 0;
        if ($cmp100) {
          var $70=HEAP32[((5243844)>>2)];
          var $71=HEAP32[((5243840)>>2)];
          var $cmp103=(($70)|0) < (($71)|0);
          var $72 = $cmp103;
        } else {
          var $72 = 0;
        }
        var $72;
        if (!($72)) {
          break;
        }
        var $73=HEAP32[((5243844)>>2)];
        var $74=HEAP32[((5243484)>>2)];
        var $arrayidx107=(($74+$73)|0);
        var $75=HEAP8[($arrayidx107)];
        var $conv108=(($75)&255);
        var $cmp109=(($conv108)|0)==125;
        if ($cmp109) {
          var $76=HEAP32[((5243808)>>2)];
          var $sub112=((($76)-(1))|0);
          HEAP32[((5243808)>>2)]=$sub112;
        } else {
          var $77=HEAP32[((5243844)>>2)];
          var $78=HEAP32[((5243484)>>2)];
          var $arrayidx114=(($78+$77)|0);
          var $79=HEAP8[($arrayidx114)];
          var $conv115=(($79)&255);
          var $cmp116=(($conv115)|0)==123;
          if ($cmp116) {
            var $80=HEAP32[((5243808)>>2)];
            var $add119=((($80)+(1))|0);
            HEAP32[((5243808)>>2)]=$add119;
          }
        }
        var $81=HEAP32[((5243844)>>2)];
        var $add122=((($81)+(1))|0);
        HEAP32[((5243844)>>2)]=$add122;
      }
    } else {
      var $82=HEAP32[((5243844)>>2)];
      var $add126=((($82)+(1))|0);
      HEAP32[((5243844)>>2)]=$add126;
    }
  }
  if (label == 1119) {
    var $83=$Result;

    return $83;
  }
  else if (label == 1122) {
    $Result=1;
    var $83=$Result;

    return $83;
  }
  else if (label == 1171) {
    var $83=$Result;

    return $83;
  }
  else if (label == 1126) {
    var $24=HEAP32[((5243844)>>2)];
    var $add33=((($24)+(1))|0);
    HEAP32[((5243844)>>2)]=$add33;
    var $25=HEAP32[((5243844)>>2)];
    HEAP32[((5243836)>>2)]=$25;
    while(1) {
      var $26=HEAP32[((5243844)>>2)];
      var $27=HEAP32[((5243840)>>2)];
      var $cmp35=(($26)|0) < (($27)|0);
      if ($cmp35) {
        var $28=HEAP32[((5243844)>>2)];
        var $29=HEAP32[((5243484)>>2)];
        var $arrayidx37=(($29+$28)|0);
        var $30=HEAP8[($arrayidx37)];
        var $idxprom=(($30)&255);
        var $arrayidx38=((5243932+$idxprom)|0);
        var $31=HEAP8[($arrayidx38)];
        var $conv39=(($31)&255);
        var $cmp40=(($conv39)|0)==2;
        var $32 = $cmp40;
      } else {
        var $32 = 0;
      }
      var $32;
      if (!($32)) {
        break;
      }
      var $33=HEAP32[((5243844)>>2)];
      var $add43=((($33)+(1))|0);
      HEAP32[((5243844)>>2)]=$add43;
    }
    var $34=HEAP32[((5243484)>>2)];
    var $35=HEAP32[((5243836)>>2)];
    var $36=HEAP32[((5243844)>>2)];
    var $37=HEAP32[((5243836)>>2)];
    var $sub=((($36)-($37))|0);
    var $call=_zstrlookup($34, $35, $sub, 14, 0);
    HEAP32[((5251148)>>2)]=$call;
    var $38=HEAP32[((5248776)>>2)];
    var $tobool=(($38)|0)!=0;
    if ($tobool) {
      var $39=HEAP32[((5251148)>>2)];
      var $40=HEAP32[((5248484)>>2)];
      var $arrayidx45=(($40+($39<<2))|0);
      var $41=HEAP32[(($arrayidx45)>>2)];
      if ((($41)|0)==3 | (($41)|0)==5 | (($41)|0)==7 | (($41)|0)==9 | (($41)|0)==11) {
        var $83=$Result;

        return $83;
      } else if ((($41)|0)==0 | (($41)|0)==1 | (($41)|0)==2 | (($41)|0)==4 | (($41)|0)==6 | (($41)|0)==8 | (($41)|0)==10 | (($41)|0)==12) {
        $Result=1;
        var $83=$Result;

        return $83;
      } else {
        var $42=HEAP32[((5243908)>>2)];
        var $call47=_fputs(((5262716)|0), $42);
        var $43=HEAP32[((5243524)>>2)];
        var $call48=_fputs(((5262716)|0), $43);
        _printconfusion();
        _longjmp(((5248396)|0), 1);
        throw "Reached an unreachable!"
      }
    }
    while(1) {
      var $44=HEAP32[((5243844)>>2)];
      var $45=HEAP32[((5243840)>>2)];
      var $cmp50=(($44)|0) < (($45)|0);
      if ($cmp50) {
        var $46=HEAP32[((5243808)>>2)];
        var $cmp53=(($46)|0) > 0;
        var $47 = $cmp53;
      } else {
        var $47 = 0;
      }
      var $47;
      if (!($47)) {
        label = 1154;
        break;
      }
      var $48=HEAP32[((5243844)>>2)];
      var $49=HEAP32[((5243484)>>2)];
      var $arrayidx57=(($49+$48)|0);
      var $50=HEAP8[($arrayidx57)];
      var $conv58=(($50)&255);
      var $cmp59=(($conv58)|0) >= 65;
      if ($cmp59) {
        var $51=HEAP32[((5243844)>>2)];
        var $52=HEAP32[((5243484)>>2)];
        var $arrayidx62=(($52+$51)|0);
        var $53=HEAP8[($arrayidx62)];
        var $conv63=(($53)&255);
        var $cmp64=(($conv63)|0) <= 90;
        if ($cmp64) {
          label = 1142;
          break;
        }
      }
      var $54=HEAP32[((5243844)>>2)];
      var $55=HEAP32[((5243484)>>2)];
      var $arrayidx68=(($55+$54)|0);
      var $56=HEAP8[($arrayidx68)];
      var $conv69=(($56)&255);
      var $cmp70=(($conv69)|0) >= 97;
      if ($cmp70) {
        var $57=HEAP32[((5243844)>>2)];
        var $58=HEAP32[((5243484)>>2)];
        var $arrayidx73=(($58+$57)|0);
        var $59=HEAP8[($arrayidx73)];
        var $conv74=(($59)&255);
        var $cmp75=(($conv74)|0) <= 122;
        if ($cmp75) {
          label = 1145;
          break;
        }
      }
      var $60=HEAP32[((5243844)>>2)];
      var $61=HEAP32[((5243484)>>2)];
      var $arrayidx79=(($61+$60)|0);
      var $62=HEAP8[($arrayidx79)];
      var $conv80=(($62)&255);
      var $cmp81=(($conv80)|0)==125;
      if ($cmp81) {
        var $63=HEAP32[((5243808)>>2)];
        var $sub84=((($63)-(1))|0);
        HEAP32[((5243808)>>2)]=$sub84;
      } else {
        var $64=HEAP32[((5243844)>>2)];
        var $65=HEAP32[((5243484)>>2)];
        var $arrayidx86=(($65+$64)|0);
        var $66=HEAP8[($arrayidx86)];
        var $conv87=(($66)&255);
        var $cmp88=(($conv87)|0)==123;
        if ($cmp88) {
          var $67=HEAP32[((5243808)>>2)];
          var $add91=((($67)+(1))|0);
          HEAP32[((5243808)>>2)]=$add91;
        }
      }
      var $68=HEAP32[((5243844)>>2)];
      var $add96=((($68)+(1))|0);
      HEAP32[((5243844)>>2)]=$add96;
    }
    if (label == 1145) {
      $Result=1;
      var $83=$Result;

      return $83;
    }
    else if (label == 1142) {
      var $83=$Result;

      return $83;
    }
    else if (label == 1154) {
      var $83=$Result;

      return $83;
    }
  }
}
_vontokenfound["X"]=1;

function _figureouttheformattedname() {
  var label = 0;

  HEAP32[((5251056)>>2)]=0;
  HEAP32[((5243556)>>2)]=0;
  var $0=HEAP32[((5243696)>>2)];
  var $1=HEAP32[((5243488)>>2)];
  var $arrayidx=(($1+($0<<2))|0);
  var $2=HEAP32[(($arrayidx)>>2)];
  HEAP32[((5243544)>>2)]=$2;
  var $3=HEAP32[((5243696)>>2)];
  var $add=((($3)+(1))|0);
  var $4=HEAP32[((5243488)>>2)];
  var $arrayidx1=(($4+($add<<2))|0);
  var $5=HEAP32[(($arrayidx1)>>2)];
  HEAP32[((5243552)>>2)]=$5;
  while(1) {
    var $6=HEAP32[((5243544)>>2)];
    var $7=HEAP32[((5243552)>>2)];
    var $cmp=(($6)|0) < (($7)|0);
    if (!($cmp)) {
      break;
    }
    var $8=HEAP32[((5243544)>>2)];
    var $9=HEAP32[((5243496)>>2)];
    var $arrayidx2=(($9+$8)|0);
    var $10=HEAP8[($arrayidx2)];
    var $conv=(($10)&255);
    var $cmp3=(($conv)|0)==123;
    if ($cmp3) {
      var $11=HEAP32[((5243556)>>2)];
      var $add5=((($11)+(1))|0);
      HEAP32[((5243556)>>2)]=$add5;
      var $12=HEAP32[((5243544)>>2)];
      var $add6=((($12)+(1))|0);
      HEAP32[((5243544)>>2)]=$add6;
      var $13=HEAP32[((5243544)>>2)];
      HEAP32[((5243536)>>2)]=$13;
      HEAP32[((5252880)>>2)]=0;
      HEAP32[((5251116)>>2)]=0;
      HEAP32[((5251104)>>2)]=0;
      HEAP32[((5243456)>>2)]=1;
      while(1) {
        var $14=HEAP32[((5251104)>>2)];
        var $tobool=(($14)|0)!=0;
        if ($tobool) {
          var $17 = 0;
        } else {
          var $15=HEAP32[((5243544)>>2)];
          var $16=HEAP32[((5243552)>>2)];
          var $cmp8=(($15)|0) < (($16)|0);
          var $17 = $cmp8;
        }
        var $17;
        if (!($17)) {
          break;
        }
        var $18=HEAP32[((5243544)>>2)];
        var $19=HEAP32[((5243496)>>2)];
        var $arrayidx11=(($19+$18)|0);
        var $20=HEAP8[($arrayidx11)];
        var $idxprom=(($20)&255);
        var $arrayidx12=((5243932+$idxprom)|0);
        var $21=HEAP8[($arrayidx12)];
        var $conv13=(($21)&255);
        var $cmp14=(($conv13)|0)==2;
        if ($cmp14) {
          var $22=HEAP32[((5243544)>>2)];
          var $add17=((($22)+(1))|0);
          HEAP32[((5243544)>>2)]=$add17;
          var $23=HEAP32[((5252880)>>2)];
          var $tobool18=(($23)|0)!=0;
          if ($tobool18) {
            _bracelvloneletterscomplaint();
            HEAP32[((5243456)>>2)]=0;
          } else {
            var $24=HEAP32[((5243544)>>2)];
            var $sub=((($24)-(1))|0);
            var $25=HEAP32[((5243496)>>2)];
            var $arrayidx20=(($25+$sub)|0);
            var $26=HEAP8[($arrayidx20)];
            var $conv21=(($26)&255);
            if ((($conv21)|0)==102 | (($conv21)|0)==70) {
              var $27=HEAP32[((5248812)>>2)];
              HEAP32[((5251132)>>2)]=$27;
              var $28=HEAP32[((5248816)>>2)];
              HEAP32[((5244196)>>2)]=$28;
              var $29=HEAP32[((5251132)>>2)];
              var $30=HEAP32[((5244196)>>2)];
              var $cmp22=(($29)|0)==(($30)|0);
              if ($cmp22) {
                HEAP32[((5243456)>>2)]=0;
              }
              var $31=HEAP32[((5243544)>>2)];
              var $32=HEAP32[((5243496)>>2)];
              var $arrayidx25=(($32+$31)|0);
              var $33=HEAP8[($arrayidx25)];
              var $conv26=(($33)&255);
              var $cmp27=(($conv26)|0)==102;
              do {
                if ($cmp27) {
                  label = 1196;
                } else {
                  var $34=HEAP32[((5243544)>>2)];
                  var $35=HEAP32[((5243496)>>2)];
                  var $arrayidx29=(($35+$34)|0);
                  var $36=HEAP8[($arrayidx29)];
                  var $conv30=(($36)&255);
                  var $cmp31=(($conv30)|0)==70;
                  if ($cmp31) {
                    label = 1196;
                    break;
                  } else {
                    break;
                  }
                }
              } while(0);
              if (label == 1196) {
                label = 0;
                HEAP32[((5251116)>>2)]=1;
              }
            } else if ((($conv21)|0)==118 | (($conv21)|0)==86) {
              var $37=HEAP32[((5243408)>>2)];
              HEAP32[((5251132)>>2)]=$37;
              var $38=HEAP32[((5243412)>>2)];
              HEAP32[((5244196)>>2)]=$38;
              var $39=HEAP32[((5251132)>>2)];
              var $40=HEAP32[((5244196)>>2)];
              var $cmp36=(($39)|0)==(($40)|0);
              if ($cmp36) {
                HEAP32[((5243456)>>2)]=0;
              }
              var $41=HEAP32[((5243544)>>2)];
              var $42=HEAP32[((5243496)>>2)];
              var $arrayidx40=(($42+$41)|0);
              var $43=HEAP8[($arrayidx40)];
              var $conv41=(($43)&255);
              var $cmp42=(($conv41)|0)==118;
              do {
                if ($cmp42) {
                  label = 1202;
                } else {
                  var $44=HEAP32[((5243544)>>2)];
                  var $45=HEAP32[((5243496)>>2)];
                  var $arrayidx45=(($45+$44)|0);
                  var $46=HEAP8[($arrayidx45)];
                  var $conv46=(($46)&255);
                  var $cmp47=(($conv46)|0)==86;
                  if ($cmp47) {
                    label = 1202;
                    break;
                  } else {
                    break;
                  }
                }
              } while(0);
              if (label == 1202) {
                label = 0;
                HEAP32[((5251116)>>2)]=1;
              }
            } else if ((($conv21)|0)==108 | (($conv21)|0)==76) {
              var $47=HEAP32[((5243412)>>2)];
              HEAP32[((5251132)>>2)]=$47;
              var $48=HEAP32[((5244200)>>2)];
              HEAP32[((5244196)>>2)]=$48;
              var $49=HEAP32[((5251132)>>2)];
              var $50=HEAP32[((5244196)>>2)];
              var $cmp52=(($49)|0)==(($50)|0);
              if ($cmp52) {
                HEAP32[((5243456)>>2)]=0;
              }
              var $51=HEAP32[((5243544)>>2)];
              var $52=HEAP32[((5243496)>>2)];
              var $arrayidx56=(($52+$51)|0);
              var $53=HEAP8[($arrayidx56)];
              var $conv57=(($53)&255);
              var $cmp58=(($conv57)|0)==108;
              do {
                if ($cmp58) {
                  label = 1208;
                } else {
                  var $54=HEAP32[((5243544)>>2)];
                  var $55=HEAP32[((5243496)>>2)];
                  var $arrayidx61=(($55+$54)|0);
                  var $56=HEAP8[($arrayidx61)];
                  var $conv62=(($56)&255);
                  var $cmp63=(($conv62)|0)==76;
                  if ($cmp63) {
                    label = 1208;
                    break;
                  } else {
                    break;
                  }
                }
              } while(0);
              if (label == 1208) {
                label = 0;
                HEAP32[((5251116)>>2)]=1;
              }
            } else if ((($conv21)|0)==106 | (($conv21)|0)==74) {
              var $57=HEAP32[((5244200)>>2)];
              HEAP32[((5251132)>>2)]=$57;
              var $58=HEAP32[((5248392)>>2)];
              HEAP32[((5244196)>>2)]=$58;
              var $59=HEAP32[((5251132)>>2)];
              var $60=HEAP32[((5244196)>>2)];
              var $cmp68=(($59)|0)==(($60)|0);
              if ($cmp68) {
                HEAP32[((5243456)>>2)]=0;
              }
              var $61=HEAP32[((5243544)>>2)];
              var $62=HEAP32[((5243496)>>2)];
              var $arrayidx72=(($62+$61)|0);
              var $63=HEAP8[($arrayidx72)];
              var $conv73=(($63)&255);
              var $cmp74=(($conv73)|0)==106;
              do {
                if ($cmp74) {
                  label = 1214;
                } else {
                  var $64=HEAP32[((5243544)>>2)];
                  var $65=HEAP32[((5243496)>>2)];
                  var $arrayidx77=(($65+$64)|0);
                  var $66=HEAP8[($arrayidx77)];
                  var $conv78=(($66)&255);
                  var $cmp79=(($conv78)|0)==74;
                  if ($cmp79) {
                    label = 1214;
                    break;
                  } else {
                    break;
                  }
                }
              } while(0);
              if (label == 1214) {
                label = 0;
                HEAP32[((5251116)>>2)]=1;
              }
            } else {
              _bracelvloneletterscomplaint();
              HEAP32[((5243456)>>2)]=0;
            }
            var $67=HEAP32[((5251116)>>2)];
            var $tobool83=(($67)|0)!=0;
            if ($tobool83) {
              var $68=HEAP32[((5243544)>>2)];
              var $add85=((($68)+(1))|0);
              HEAP32[((5243544)>>2)]=$add85;
            }
          }
          HEAP32[((5252880)>>2)]=1;
        } else {
          var $69=HEAP32[((5243544)>>2)];
          var $70=HEAP32[((5243496)>>2)];
          var $arrayidx89=(($70+$69)|0);
          var $71=HEAP8[($arrayidx89)];
          var $conv90=(($71)&255);
          var $cmp91=(($conv90)|0)==125;
          if ($cmp91) {
            var $72=HEAP32[((5243556)>>2)];
            var $sub94=((($72)-(1))|0);
            HEAP32[((5243556)>>2)]=$sub94;
            var $73=HEAP32[((5243544)>>2)];
            var $add95=((($73)+(1))|0);
            HEAP32[((5243544)>>2)]=$add95;
            HEAP32[((5251104)>>2)]=1;
          } else {
            var $74=HEAP32[((5243544)>>2)];
            var $75=HEAP32[((5243496)>>2)];
            var $arrayidx97=(($75+$74)|0);
            var $76=HEAP8[($arrayidx97)];
            var $conv98=(($76)&255);
            var $cmp99=(($conv98)|0)==123;
            if ($cmp99) {
              var $77=HEAP32[((5243556)>>2)];
              var $add102=((($77)+(1))|0);
              HEAP32[((5243556)>>2)]=$add102;
              var $78=HEAP32[((5243544)>>2)];
              var $add103=((($78)+(1))|0);
              HEAP32[((5243544)>>2)]=$add103;
              _skipstuffatspbracelevelgreaterthanone();
            } else {
              var $79=HEAP32[((5243544)>>2)];
              var $add105=((($79)+(1))|0);
              HEAP32[((5243544)>>2)]=$add105;
            }
          }
        }
      }
      var $80=HEAP32[((5251104)>>2)];
      var $tobool109=(($80)|0)!=0;
      do {
        if ($tobool109) {
          var $81=HEAP32[((5243456)>>2)];
          var $tobool110=(($81)|0)!=0;
          if (!($tobool110)) {
            break;
          }
          var $82=HEAP32[((5251056)>>2)];
          HEAP32[((5251052)>>2)]=$82;
          var $83=HEAP32[((5243536)>>2)];
          HEAP32[((5243544)>>2)]=$83;
          HEAP32[((5243556)>>2)]=1;
          while(1) {
            var $84=HEAP32[((5243556)>>2)];
            var $cmp113=(($84)|0) > 0;
            if (!($cmp113)) {
              break;
            }
            var $85=HEAP32[((5243544)>>2)];
            var $86=HEAP32[((5243496)>>2)];
            var $arrayidx116=(($86+$85)|0);
            var $87=HEAP8[($arrayidx116)];
            var $idxprom117=(($87)&255);
            var $arrayidx118=((5243932+$idxprom117)|0);
            var $88=HEAP8[($arrayidx118)];
            var $conv119=(($88)&255);
            var $cmp120=(($conv119)|0)==2;
            do {
              if ($cmp120) {
                var $89=HEAP32[((5243556)>>2)];
                var $cmp123=(($89)|0)==1;
                if (!($cmp123)) {
                  label = 1308;
                  break;
                }
                var $90=HEAP32[((5243544)>>2)];
                var $add126=((($90)+(1))|0);
                HEAP32[((5243544)>>2)]=$add126;
                var $91=HEAP32[((5251116)>>2)];
                var $tobool127=(($91)|0)!=0;
                if ($tobool127) {
                  var $92=HEAP32[((5243544)>>2)];
                  var $add129=((($92)+(1))|0);
                  HEAP32[((5243544)>>2)]=$add129;
                }
                HEAP32[((5243424)>>2)]=1;
                var $93=HEAP32[((5243544)>>2)];
                HEAP32[((5243532)>>2)]=$93;
                var $94=HEAP32[((5243544)>>2)];
                var $95=HEAP32[((5243496)>>2)];
                var $arrayidx131=(($95+$94)|0);
                var $96=HEAP8[($arrayidx131)];
                var $conv132=(($96)&255);
                var $cmp133=(($conv132)|0)==123;
                if ($cmp133) {
                  HEAP32[((5243424)>>2)]=0;
                  var $97=HEAP32[((5243556)>>2)];
                  var $add136=((($97)+(1))|0);
                  HEAP32[((5243556)>>2)]=$add136;
                  var $98=HEAP32[((5243544)>>2)];
                  var $add137=((($98)+(1))|0);
                  HEAP32[((5243544)>>2)]=$add137;
                  var $99=HEAP32[((5243544)>>2)];
                  HEAP32[((5243536)>>2)]=$99;
                  _skipstuffatspbracelevelgreaterthanone();
                  var $100=HEAP32[((5243544)>>2)];
                  var $sub138=((($100)-(1))|0);
                  HEAP32[((5243532)>>2)]=$sub138;
                }
                while(1) {
                  var $101=HEAP32[((5251132)>>2)];
                  var $102=HEAP32[((5244196)>>2)];
                  var $cmp141=(($101)|0) < (($102)|0);
                  if (!($cmp141)) {
                    break;
                  }
                  var $103=HEAP32[((5251116)>>2)];
                  var $tobool144=(($103)|0)!=0;
                  if ($tobool144) {
                    var $104=HEAP32[((5251132)>>2)];
                    var $105=HEAP32[((5243816)>>2)];
                    var $arrayidx146=(($105+($104<<2))|0);
                    var $106=HEAP32[(($arrayidx146)>>2)];
                    HEAP32[((5243844)>>2)]=$106;
                    var $107=HEAP32[((5251132)>>2)];
                    var $add147=((($107)+(1))|0);
                    var $108=HEAP32[((5243816)>>2)];
                    var $arrayidx148=(($108+($add147<<2))|0);
                    var $109=HEAP32[(($arrayidx148)>>2)];
                    HEAP32[((5243840)>>2)]=$109;
                    var $110=HEAP32[((5251060)>>2)];
                    var $111=HEAP32[((5243840)>>2)];
                    var $112=HEAP32[((5243844)>>2)];
                    var $sub149=((($111)-($112))|0);
                    var $add150=((($110)+($sub149))|0);
                    var $113=HEAP32[((5252240)>>2)];
                    var $cmp151=(($add150)|0) > (($113)|0);
                    if ($cmp151) {
                      _bufferoverflow();
                    }
                    while(1) {
                      var $114=HEAP32[((5243844)>>2)];
                      var $115=HEAP32[((5243840)>>2)];
                      var $cmp156=(($114)|0) < (($115)|0);
                      if (!($cmp156)) {
                        break;
                      }
                      var $116=HEAP32[((5243844)>>2)];
                      var $117=HEAP32[((5243484)>>2)];
                      var $arrayidx159=(($117+$116)|0);
                      var $118=HEAP8[($arrayidx159)];
                      var $119=HEAP32[((5251056)>>2)];
                      var $120=HEAP32[((5251064)>>2)];
                      var $arrayidx160=(($120+$119)|0);
                      HEAP8[($arrayidx160)]=$118;
                      var $121=HEAP32[((5251056)>>2)];
                      var $add161=((($121)+(1))|0);
                      HEAP32[((5251056)>>2)]=$add161;
                      var $122=HEAP32[((5243844)>>2)];
                      var $add162=((($122)+(1))|0);
                      HEAP32[((5243844)>>2)]=$add162;
                    }
                  } else {
                    var $123=HEAP32[((5251132)>>2)];
                    var $124=HEAP32[((5243816)>>2)];
                    var $arrayidx165=(($124+($123<<2))|0);
                    var $125=HEAP32[(($arrayidx165)>>2)];
                    HEAP32[((5243844)>>2)]=$125;
                    var $126=HEAP32[((5251132)>>2)];
                    var $add166=((($126)+(1))|0);
                    var $127=HEAP32[((5243816)>>2)];
                    var $arrayidx167=(($127+($add166<<2))|0);
                    var $128=HEAP32[(($arrayidx167)>>2)];
                    HEAP32[((5243840)>>2)]=$128;
                    L1531: while(1) {
                      var $129=HEAP32[((5243844)>>2)];
                      var $130=HEAP32[((5243840)>>2)];
                      var $cmp169=(($129)|0) < (($130)|0);
                      if (!($cmp169)) {
                        label = 1275;
                        break;
                      }
                      var $131=HEAP32[((5243844)>>2)];
                      var $132=HEAP32[((5243484)>>2)];
                      var $arrayidx172=(($132+$131)|0);
                      var $133=HEAP8[($arrayidx172)];
                      var $idxprom173=(($133)&255);
                      var $arrayidx174=((5243932+$idxprom173)|0);
                      var $134=HEAP8[($arrayidx174)];
                      var $conv175=(($134)&255);
                      var $cmp176=(($conv175)|0)==2;
                      if ($cmp176) {
                        label = 1251;
                        break;
                      }
                      var $143=HEAP32[((5243844)>>2)];
                      var $144=HEAP32[((5243484)>>2)];
                      var $arrayidx187=(($144+$143)|0);
                      var $145=HEAP8[($arrayidx187)];
                      var $conv188=(($145)&255);
                      var $cmp189=(($conv188)|0)==123;
                      do {
                        if ($cmp189) {
                          var $146=HEAP32[((5243844)>>2)];
                          var $add192=((($146)+(1))|0);
                          var $147=HEAP32[((5243840)>>2)];
                          var $cmp193=(($add192)|0) < (($147)|0);
                          if (!($cmp193)) {
                            break;
                          }
                          var $148=HEAP32[((5243844)>>2)];
                          var $add196=((($148)+(1))|0);
                          var $149=HEAP32[((5243484)>>2)];
                          var $arrayidx197=(($149+$add196)|0);
                          var $150=HEAP8[($arrayidx197)];
                          var $conv198=(($150)&255);
                          var $cmp199=(($conv198)|0)==92;
                          if ($cmp199) {
                            label = 1257;
                            break L1531;
                          }
                        }
                      } while(0);
                      var $181=HEAP32[((5243844)>>2)];
                      var $add247=((($181)+(1))|0);
                      HEAP32[((5243844)>>2)]=$add247;
                    }
                    if (label == 1251) {
                      label = 0;
                      var $135=HEAP32[((5251056)>>2)];
                      var $136=HEAP32[((5252240)>>2)];
                      var $cmp179=(($135)|0)==(($136)|0);
                      if ($cmp179) {
                        _bufferoverflow();
                      }
                      var $137=HEAP32[((5243844)>>2)];
                      var $138=HEAP32[((5243484)>>2)];
                      var $arrayidx183=(($138+$137)|0);
                      var $139=HEAP8[($arrayidx183)];
                      var $140=HEAP32[((5251056)>>2)];
                      var $141=HEAP32[((5251064)>>2)];
                      var $arrayidx184=(($141+$140)|0);
                      HEAP8[($arrayidx184)]=$139;
                      var $142=HEAP32[((5251056)>>2)];
                      var $add185=((($142)+(1))|0);
                      HEAP32[((5251056)>>2)]=$add185;
                    }
                    else if (label == 1275) {
                      label = 0;
                    }
                    else if (label == 1257) {
                      label = 0;
                      var $151=HEAP32[((5251056)>>2)];
                      var $add202=((($151)+(2))|0);
                      var $152=HEAP32[((5252240)>>2)];
                      var $cmp203=(($add202)|0) > (($152)|0);
                      if ($cmp203) {
                        _bufferoverflow();
                      }
                      var $153=HEAP32[((5251056)>>2)];
                      var $154=HEAP32[((5251064)>>2)];
                      var $arrayidx207=(($154+$153)|0);
                      HEAP8[($arrayidx207)]=123;
                      var $155=HEAP32[((5251056)>>2)];
                      var $add208=((($155)+(1))|0);
                      HEAP32[((5251056)>>2)]=$add208;
                      var $156=HEAP32[((5251056)>>2)];
                      var $157=HEAP32[((5251064)>>2)];
                      var $arrayidx209=(($157+$156)|0);
                      HEAP8[($arrayidx209)]=92;
                      var $158=HEAP32[((5251056)>>2)];
                      var $add210=((($158)+(1))|0);
                      HEAP32[((5251056)>>2)]=$add210;
                      var $159=HEAP32[((5243844)>>2)];
                      var $add211=((($159)+(2))|0);
                      HEAP32[((5243844)>>2)]=$add211;
                      HEAP32[((5243808)>>2)]=1;
                      while(1) {
                        var $160=HEAP32[((5243844)>>2)];
                        var $161=HEAP32[((5243840)>>2)];
                        var $cmp213=(($160)|0) < (($161)|0);
                        if ($cmp213) {
                          var $162=HEAP32[((5243808)>>2)];
                          var $cmp216=(($162)|0) > 0;
                          var $163 = $cmp216;
                        } else {
                          var $163 = 0;
                        }
                        var $163;
                        if (!($163)) {
                          break;
                        }
                        var $164=HEAP32[((5243844)>>2)];
                        var $165=HEAP32[((5243484)>>2)];
                        var $arrayidx220=(($165+$164)|0);
                        var $166=HEAP8[($arrayidx220)];
                        var $conv221=(($166)&255);
                        var $cmp222=(($conv221)|0)==125;
                        if ($cmp222) {
                          var $167=HEAP32[((5243808)>>2)];
                          var $sub225=((($167)-(1))|0);
                          HEAP32[((5243808)>>2)]=$sub225;
                        } else {
                          var $168=HEAP32[((5243844)>>2)];
                          var $169=HEAP32[((5243484)>>2)];
                          var $arrayidx227=(($169+$168)|0);
                          var $170=HEAP8[($arrayidx227)];
                          var $conv228=(($170)&255);
                          var $cmp229=(($conv228)|0)==123;
                          if ($cmp229) {
                            var $171=HEAP32[((5243808)>>2)];
                            var $add232=((($171)+(1))|0);
                            HEAP32[((5243808)>>2)]=$add232;
                          }
                        }
                        var $172=HEAP32[((5251056)>>2)];
                        var $173=HEAP32[((5252240)>>2)];
                        var $cmp235=(($172)|0)==(($173)|0);
                        if ($cmp235) {
                          _bufferoverflow();
                        }
                        var $174=HEAP32[((5243844)>>2)];
                        var $175=HEAP32[((5243484)>>2)];
                        var $arrayidx239=(($175+$174)|0);
                        var $176=HEAP8[($arrayidx239)];
                        var $177=HEAP32[((5251056)>>2)];
                        var $178=HEAP32[((5251064)>>2)];
                        var $arrayidx240=(($178+$177)|0);
                        HEAP8[($arrayidx240)]=$176;
                        var $179=HEAP32[((5251056)>>2)];
                        var $add241=((($179)+(1))|0);
                        HEAP32[((5251056)>>2)]=$add241;
                        var $180=HEAP32[((5243844)>>2)];
                        var $add242=((($180)+(1))|0);
                        HEAP32[((5243844)>>2)]=$add242;
                      }
                    }
                  }
                  var $182=HEAP32[((5251132)>>2)];
                  var $add250=((($182)+(1))|0);
                  HEAP32[((5251132)>>2)]=$add250;
                  var $183=HEAP32[((5251132)>>2)];
                  var $184=HEAP32[((5244196)>>2)];
                  var $cmp251=(($183)|0) < (($184)|0);
                  if ($cmp251) {
                    var $185=HEAP32[((5243424)>>2)];
                    var $tobool254=(($185)|0)!=0;
                    if ($tobool254) {
                      var $186=HEAP32[((5251116)>>2)];
                      var $tobool256=(($186)|0)!=0;
                      if (!($tobool256)) {
                        var $187=HEAP32[((5251056)>>2)];
                        var $188=HEAP32[((5252240)>>2)];
                        var $cmp258=(($187)|0)==(($188)|0);
                        if ($cmp258) {
                          _bufferoverflow();
                        }
                        var $189=HEAP32[((5251056)>>2)];
                        var $190=HEAP32[((5251064)>>2)];
                        var $arrayidx262=(($190+$189)|0);
                        HEAP8[($arrayidx262)]=46;
                        var $191=HEAP32[((5251056)>>2)];
                        var $add263=((($191)+(1))|0);
                        HEAP32[((5251056)>>2)]=$add263;
                      }
                      var $192=HEAP32[((5251132)>>2)];
                      var $193=HEAP32[((5243820)>>2)];
                      var $arrayidx265=(($193+$192)|0);
                      var $194=HEAP8[($arrayidx265)];
                      var $idxprom266=(($194)&255);
                      var $arrayidx267=((5243932+$idxprom266)|0);
                      var $195=HEAP8[($arrayidx267)];
                      var $conv268=(($195)&255);
                      var $cmp269=(($conv268)|0)==4;
                      if ($cmp269) {
                        var $196=HEAP32[((5251056)>>2)];
                        var $197=HEAP32[((5252240)>>2)];
                        var $cmp272=(($196)|0)==(($197)|0);
                        if ($cmp272) {
                          _bufferoverflow();
                        }
                        var $198=HEAP32[((5251132)>>2)];
                        var $199=HEAP32[((5243820)>>2)];
                        var $arrayidx276=(($199+$198)|0);
                        var $200=HEAP8[($arrayidx276)];
                        var $201=HEAP32[((5251056)>>2)];
                        var $202=HEAP32[((5251064)>>2)];
                        var $arrayidx277=(($202+$201)|0);
                        HEAP8[($arrayidx277)]=$200;
                        var $203=HEAP32[((5251056)>>2)];
                        var $add278=((($203)+(1))|0);
                        HEAP32[((5251056)>>2)]=$add278;
                      } else {
                        var $204=HEAP32[((5251132)>>2)];
                        var $205=HEAP32[((5244196)>>2)];
                        var $sub280=((($205)-(1))|0);
                        var $cmp281=(($204)|0)==(($sub280)|0);
                        do {
                          if ($cmp281) {
                            label = 1289;
                          } else {
                            var $call=_zenoughtextchars(3);
                            var $tobool284=(($call)|0)!=0;
                            if (!($tobool284)) {
                              label = 1289;
                              break;
                            }
                            var $211=HEAP32[((5251056)>>2)];
                            var $212=HEAP32[((5252240)>>2)];
                            var $cmp293=(($211)|0)==(($212)|0);
                            if ($cmp293) {
                              _bufferoverflow();
                            }
                            var $213=HEAP32[((5251056)>>2)];
                            var $214=HEAP32[((5251064)>>2)];
                            var $arrayidx297=(($214+$213)|0);
                            HEAP8[($arrayidx297)]=32;
                            var $215=HEAP32[((5251056)>>2)];
                            var $add298=((($215)+(1))|0);
                            HEAP32[((5251056)>>2)]=$add298;
                            break;
                          }
                        } while(0);
                        if (label == 1289) {
                          label = 0;
                          var $206=HEAP32[((5251056)>>2)];
                          var $207=HEAP32[((5252240)>>2)];
                          var $cmp286=(($206)|0)==(($207)|0);
                          if ($cmp286) {
                            _bufferoverflow();
                          }
                          var $208=HEAP32[((5251056)>>2)];
                          var $209=HEAP32[((5251064)>>2)];
                          var $arrayidx290=(($209+$208)|0);
                          HEAP8[($arrayidx290)]=126;
                          var $210=HEAP32[((5251056)>>2)];
                          var $add291=((($210)+(1))|0);
                          HEAP32[((5251056)>>2)]=$add291;
                        }
                      }
                    } else {
                      var $216=HEAP32[((5251060)>>2)];
                      var $217=HEAP32[((5243532)>>2)];
                      var $218=HEAP32[((5243536)>>2)];
                      var $sub302=((($217)-($218))|0);
                      var $add303=((($216)+($sub302))|0);
                      var $219=HEAP32[((5252240)>>2)];
                      var $cmp304=(($add303)|0) > (($219)|0);
                      if ($cmp304) {
                        _bufferoverflow();
                      }
                      var $220=HEAP32[((5243536)>>2)];
                      HEAP32[((5243544)>>2)]=$220;
                      while(1) {
                        var $221=HEAP32[((5243544)>>2)];
                        var $222=HEAP32[((5243532)>>2)];
                        var $cmp309=(($221)|0) < (($222)|0);
                        if (!($cmp309)) {
                          break;
                        }
                        var $223=HEAP32[((5243544)>>2)];
                        var $224=HEAP32[((5243496)>>2)];
                        var $arrayidx312=(($224+$223)|0);
                        var $225=HEAP8[($arrayidx312)];
                        var $226=HEAP32[((5251056)>>2)];
                        var $227=HEAP32[((5251064)>>2)];
                        var $arrayidx313=(($227+$226)|0);
                        HEAP8[($arrayidx313)]=$225;
                        var $228=HEAP32[((5251056)>>2)];
                        var $add314=((($228)+(1))|0);
                        HEAP32[((5251056)>>2)]=$add314;
                        var $229=HEAP32[((5243544)>>2)];
                        var $add315=((($229)+(1))|0);
                        HEAP32[((5243544)>>2)]=$add315;
                      }
                    }
                  }
                }
                var $230=HEAP32[((5243424)>>2)];
                var $tobool320=(($230)|0)!=0;
                if (!($tobool320)) {
                  var $231=HEAP32[((5243532)>>2)];
                  var $add322=((($231)+(1))|0);
                  HEAP32[((5243544)>>2)]=$add322;
                }
                break;
              } else {
                label = 1308;
              }
            } while(0);
            if (label == 1308) {
              label = 0;
              var $232=HEAP32[((5243544)>>2)];
              var $233=HEAP32[((5243496)>>2)];
              var $arrayidx325=(($233+$232)|0);
              var $234=HEAP8[($arrayidx325)];
              var $conv326=(($234)&255);
              var $cmp327=(($conv326)|0)==125;
              if ($cmp327) {
                var $235=HEAP32[((5243556)>>2)];
                var $sub330=((($235)-(1))|0);
                HEAP32[((5243556)>>2)]=$sub330;
                var $236=HEAP32[((5243544)>>2)];
                var $add331=((($236)+(1))|0);
                HEAP32[((5243544)>>2)]=$add331;
                var $237=HEAP32[((5243556)>>2)];
                var $cmp332=(($237)|0) > 0;
                if ($cmp332) {
                  var $238=HEAP32[((5251056)>>2)];
                  var $239=HEAP32[((5252240)>>2)];
                  var $cmp335=(($238)|0)==(($239)|0);
                  if ($cmp335) {
                    _bufferoverflow();
                  }
                  var $240=HEAP32[((5251056)>>2)];
                  var $241=HEAP32[((5251064)>>2)];
                  var $arrayidx339=(($241+$240)|0);
                  HEAP8[($arrayidx339)]=125;
                  var $242=HEAP32[((5251056)>>2)];
                  var $add340=((($242)+(1))|0);
                  HEAP32[((5251056)>>2)]=$add340;
                }
              } else {
                var $243=HEAP32[((5243544)>>2)];
                var $244=HEAP32[((5243496)>>2)];
                var $arrayidx343=(($244+$243)|0);
                var $245=HEAP8[($arrayidx343)];
                var $conv344=(($245)&255);
                var $cmp345=(($conv344)|0)==123;
                if ($cmp345) {
                  var $246=HEAP32[((5243556)>>2)];
                  var $add348=((($246)+(1))|0);
                  HEAP32[((5243556)>>2)]=$add348;
                  var $247=HEAP32[((5243544)>>2)];
                  var $add349=((($247)+(1))|0);
                  HEAP32[((5243544)>>2)]=$add349;
                  var $248=HEAP32[((5251056)>>2)];
                  var $249=HEAP32[((5252240)>>2)];
                  var $cmp350=(($248)|0)==(($249)|0);
                  if ($cmp350) {
                    _bufferoverflow();
                  }
                  var $250=HEAP32[((5251056)>>2)];
                  var $251=HEAP32[((5251064)>>2)];
                  var $arrayidx354=(($251+$250)|0);
                  HEAP8[($arrayidx354)]=123;
                  var $252=HEAP32[((5251056)>>2)];
                  var $add355=((($252)+(1))|0);
                  HEAP32[((5251056)>>2)]=$add355;
                } else {
                  var $253=HEAP32[((5251056)>>2)];
                  var $254=HEAP32[((5252240)>>2)];
                  var $cmp357=(($253)|0)==(($254)|0);
                  if ($cmp357) {
                    _bufferoverflow();
                  }
                  var $255=HEAP32[((5243544)>>2)];
                  var $256=HEAP32[((5243496)>>2)];
                  var $arrayidx361=(($256+$255)|0);
                  var $257=HEAP8[($arrayidx361)];
                  var $258=HEAP32[((5251056)>>2)];
                  var $259=HEAP32[((5251064)>>2)];
                  var $arrayidx362=(($259+$258)|0);
                  HEAP8[($arrayidx362)]=$257;
                  var $260=HEAP32[((5251056)>>2)];
                  var $add363=((($260)+(1))|0);
                  HEAP32[((5251056)>>2)]=$add363;
                  var $261=HEAP32[((5243544)>>2)];
                  var $add364=((($261)+(1))|0);
                  HEAP32[((5243544)>>2)]=$add364;
                }
              }
            }
          }
          var $262=HEAP32[((5251056)>>2)];
          var $cmp369=(($262)|0) > 0;
          if ($cmp369) {
            var $263=HEAP32[((5251056)>>2)];
            var $sub372=((($263)-(1))|0);
            var $264=HEAP32[((5251064)>>2)];
            var $arrayidx373=(($264+$sub372)|0);
            var $265=HEAP8[($arrayidx373)];
            var $conv374=(($265)&255);
            var $cmp375=(($conv374)|0)==126;
            if ($cmp375) {
              var $266=HEAP32[((5251056)>>2)];
              var $sub378=((($266)-(1))|0);
              HEAP32[((5251056)>>2)]=$sub378;
              var $267=HEAP32[((5251056)>>2)];
              var $sub379=((($267)-(1))|0);
              var $268=HEAP32[((5251064)>>2)];
              var $arrayidx380=(($268+$sub379)|0);
              var $269=HEAP8[($arrayidx380)];
              var $conv381=(($269)&255);
              var $cmp382=(($conv381)|0)==126;
              if ($cmp382) {
              } else {
                var $call386=_zenoughtextchars(3);
                var $tobool387=(($call386)|0)!=0;
                if ($tobool387) {
                  var $271=HEAP32[((5251056)>>2)];
                  var $272=HEAP32[((5251064)>>2)];
                  var $arrayidx391=(($272+$271)|0);
                  HEAP8[($arrayidx391)]=32;
                  var $273=HEAP32[((5251056)>>2)];
                  var $add392=((($273)+(1))|0);
                  HEAP32[((5251056)>>2)]=$add392;
                } else {
                  var $270=HEAP32[((5251056)>>2)];
                  var $add389=((($270)+(1))|0);
                  HEAP32[((5251056)>>2)]=$add389;
                }
              }
            }
          }
        }
      } while(0);
    } else {
      var $274=HEAP32[((5243544)>>2)];
      var $275=HEAP32[((5243496)>>2)];
      var $arrayidx399=(($275+$274)|0);
      var $276=HEAP8[($arrayidx399)];
      var $conv400=(($276)&255);
      var $cmp401=(($conv400)|0)==125;
      if ($cmp401) {
        var $277=HEAP32[((5243696)>>2)];
        _zbracesunbalancedcomplaint($277);
        var $278=HEAP32[((5243544)>>2)];
        var $add404=((($278)+(1))|0);
        HEAP32[((5243544)>>2)]=$add404;
      } else {
        var $279=HEAP32[((5251056)>>2)];
        var $280=HEAP32[((5252240)>>2)];
        var $cmp406=(($279)|0)==(($280)|0);
        if ($cmp406) {
          _bufferoverflow();
        }
        var $281=HEAP32[((5243544)>>2)];
        var $282=HEAP32[((5243496)>>2)];
        var $arrayidx410=(($282+$281)|0);
        var $283=HEAP8[($arrayidx410)];
        var $284=HEAP32[((5251056)>>2)];
        var $285=HEAP32[((5251064)>>2)];
        var $arrayidx411=(($285+$284)|0);
        HEAP8[($arrayidx411)]=$283;
        var $286=HEAP32[((5251056)>>2)];
        var $add412=((($286)+(1))|0);
        HEAP32[((5251056)>>2)]=$add412;
        var $287=HEAP32[((5243544)>>2)];
        var $add413=((($287)+(1))|0);
        HEAP32[((5243544)>>2)]=$add413;
      }
    }
  }
  var $288=HEAP32[((5243556)>>2)];
  var $cmp417=(($288)|0) > 0;
  if (!($cmp417)) {
    var $290=HEAP32[((5251056)>>2)];
    HEAP32[((5251060)>>2)]=$290;

    return;
  }
  var $289=HEAP32[((5243696)>>2)];
  _zbracesunbalancedcomplaint($289);
  var $290=HEAP32[((5251056)>>2)];
  HEAP32[((5251060)>>2)]=$290;

  return;
}
_figureouttheformattedname["X"]=1;

function _initcommandexecution() {
  var label = 0;

  HEAP32[((5243920)>>2)]=0;
  var $0=HEAP32[((5243492)>>2)];
  HEAP32[((5251164)>>2)]=$0;

  return;
}


function _zpushlitstk($pushlt, $pushtype) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $pushlt_addr;
  var $pushtype_addr;
  $pushlt_addr=$pushlt;
  $pushtype_addr=$pushtype;
  var $0=$pushlt_addr;
  var $1=HEAP32[((5243920)>>2)];
  var $2=HEAP32[((5243924)>>2)];
  var $arrayidx=(($2+($1<<2))|0);
  HEAP32[(($arrayidx)>>2)]=$0;
  var $3=$pushtype_addr;
  var $4=HEAP32[((5243920)>>2)];
  var $5=HEAP32[((5243912)>>2)];
  var $arrayidx1=(($5+$4)|0);
  HEAP8[($arrayidx1)]=$3;
  var $6=HEAP32[((5243920)>>2)];
  var $7=HEAP32[((5243916)>>2)];
  var $cmp=(($6)|0)==(($7)|0);
  if (!($cmp)) {
    var $21=HEAP32[((5243920)>>2)];
    var $add12=((($21)+(1))|0);
    HEAP32[((5243920)>>2)]=$add12;
    STACKTOP = __stackBase__;
    return;
  }
  var $8=HEAP32[((5243908)>>2)];
  var $9=HEAP32[((5243916)>>2)];
  var $add=((($9)+(50))|0);
  var $10=HEAP32[((5243916)>>2)];
  var $call=_fprintf($8, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262608)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add,HEAP32[(((tempInt)+(12))>>2)]=$10,tempInt));
  var $11=HEAP32[((5243924)>>2)];
  var $12=$11;
  var $13=HEAP32[((5243916)>>2)];
  var $add2=((($13)+(50))|0);
  var $add3=((($add2)+(1))|0);
  var $mul=((($add3<<2))&-1);
  var $call4=_xrealloc($12, $mul);
  var $14=$call4;
  HEAP32[((5243924)>>2)]=$14;
  var $15=HEAP32[((5243908)>>2)];
  var $16=HEAP32[((5243916)>>2)];
  var $add5=((($16)+(50))|0);
  var $17=HEAP32[((5243916)>>2)];
  var $call6=_fprintf($15, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262536)|0),HEAP32[(((tempInt)+(4))>>2)]=1,HEAP32[(((tempInt)+(8))>>2)]=$add5,HEAP32[(((tempInt)+(12))>>2)]=$17,tempInt));
  var $18=HEAP32[((5243912)>>2)];
  var $19=HEAP32[((5243916)>>2)];
  var $add7=((($19)+(50))|0);
  var $add8=((($add7)+(1))|0);
  var $mul9=(($add8)&-1);
  var $call10=_xrealloc($18, $mul9);
  HEAP32[((5243912)>>2)]=$call10;
  var $20=HEAP32[((5243916)>>2)];
  var $add11=((($20)+(50))|0);
  HEAP32[((5243916)>>2)]=$add11;
  var $21=HEAP32[((5243920)>>2)];
  var $add12=((($21)+(1))|0);
  HEAP32[((5243920)>>2)]=$add12;
  STACKTOP = __stackBase__;
  return;
}
_zpushlitstk["X"]=1;

function _zprintwrongstklit($stklt, $stktp1, $stktp2) {
  var label = 0;

  var $stklt_addr;
  var $stktp1_addr;
  var $stktp2_addr;
  $stklt_addr=$stklt;
  $stktp1_addr=$stktp1;
  $stktp2_addr=$stktp2;
  var $0=$stktp1_addr;
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=4;
  if (!($cmp)) {

    return;
  }
  var $1=$stklt_addr;
  var $2=$stktp1_addr;
  _zprintstklit($1, $2);
  var $3=$stktp2_addr;
  var $conv2=(($3)&255);
  if ((($conv2)|0)==3 | (($conv2)|0)==4) {
    _illeglliteralconfusion();
  } else if ((($conv2)|0)==1) {
    var $6=HEAP32[((5243908)>>2)];
    var $call5=_fputs(((5262312)|0), $6);
    var $7=HEAP32[((5243524)>>2)];
    var $call6=_fputs(((5262312)|0), $7);
  } else if ((($conv2)|0)==0) {
    var $4=HEAP32[((5243908)>>2)];
    var $call=_fputs(((5262356)|0), $4);
    var $5=HEAP32[((5243524)>>2)];
    var $call3=_fputs(((5262356)|0), $5);
  } else if ((($conv2)|0)==2) {
    var $8=HEAP32[((5243908)>>2)];
    var $call8=_fputs(((5262216)|0), $8);
    var $9=HEAP32[((5243524)>>2)];
    var $call9=_fputs(((5262216)|0), $9);
  } else {
    _unknwnliteralconfusion();
  }
  _bstexwarnprint();

  return;
}


function _poptopandprint() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $stklt=__stackBase__;
  var $stktp=(__stackBase__)+(4);
  _zzpoplitstk($stklt, $stktp);
  var $0=HEAP8[($stktp)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)==4;
  if ($cmp) {
    var $1=HEAP32[((5243908)>>2)];
    var $call=_fprintf($1, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262192)|0),tempInt));
    var $2=HEAP32[((5243524)>>2)];
    var $call2=_fprintf($2, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262192)|0),tempInt));
    STACKTOP = __stackBase__;
    return;
  } else {
    var $3=HEAP32[(($stklt)>>2)];
    var $4=HEAP8[($stktp)];
    _zprintlit($3, $4);
    STACKTOP = __stackBase__;
    return;
  }
}


function _popwholestack() {
  var label = 0;

  while(1) {
    var $0=HEAP32[((5243920)>>2)];
    var $cmp=(($0)|0) > 0;
    if (!($cmp)) {
      break;
    }
    _poptopandprint();
  }

  return;
}


function _addpoolbufandpush() {
  var label = 0;

  while(1) {
    var $0=HEAP32[((5243704)>>2)];
    var $1=HEAP32[((5251060)>>2)];
    var $add=((($0)+($1))|0);
    var $2=HEAP32[((5243700)>>2)];
    var $cmp=(($add)|0) > (($2)|0);
    if (!($cmp)) {
      break;
    }
    _pooloverflow();
  }
  HEAP32[((5251056)>>2)]=0;
  while(1) {
    var $3=HEAP32[((5251056)>>2)];
    var $4=HEAP32[((5251060)>>2)];
    var $cmp2=(($3)|0) < (($4)|0);
    if (!($cmp2)) {
      break;
    }
    var $5=HEAP32[((5251056)>>2)];
    var $6=HEAP32[((5251064)>>2)];
    var $arrayidx=(($6+$5)|0);
    var $7=HEAP8[($arrayidx)];
    var $8=HEAP32[((5243704)>>2)];
    var $9=HEAP32[((5243496)>>2)];
    var $arrayidx4=(($9+$8)|0);
    HEAP8[($arrayidx4)]=$7;
    var $10=HEAP32[((5243704)>>2)];
    var $add5=((($10)+(1))|0);
    HEAP32[((5243704)>>2)]=$add5;
    var $11=HEAP32[((5251056)>>2)];
    var $add6=((($11)+(1))|0);
    HEAP32[((5251056)>>2)]=$add6;
  }
  var $call=_makestring();
  _zpushlitstk($call, 1);

  return;
}


function _zaddbufpool($pstr) {
  var label = 0;

  var $pstr_addr;
  $pstr_addr=$pstr;
  var $0=$pstr_addr;
  var $1=HEAP32[((5243488)>>2)];
  var $arrayidx=(($1+($0<<2))|0);
  var $2=HEAP32[(($arrayidx)>>2)];
  HEAP32[((5243668)>>2)]=$2;
  var $3=$pstr_addr;
  var $add=((($3)+(1))|0);
  var $4=HEAP32[((5243488)>>2)];
  var $arrayidx1=(($4+($add<<2))|0);
  var $5=HEAP32[(($arrayidx1)>>2)];
  HEAP32[((5243664)>>2)]=$5;
  var $6=HEAP32[((5251060)>>2)];
  var $7=HEAP32[((5243664)>>2)];
  var $8=HEAP32[((5243668)>>2)];
  var $sub=((($7)-($8))|0);
  var $add2=((($6)+($sub))|0);
  var $9=HEAP32[((5252240)>>2)];
  var $cmp=(($add2)|0) > (($9)|0);
  if ($cmp) {
    _bufferoverflow();
  }
  var $10=HEAP32[((5251060)>>2)];
  HEAP32[((5251056)>>2)]=$10;
  while(1) {
    var $11=HEAP32[((5243668)>>2)];
    var $12=HEAP32[((5243664)>>2)];
    var $cmp3=(($11)|0) < (($12)|0);
    if (!($cmp3)) {
      break;
    }
    var $13=HEAP32[((5243668)>>2)];
    var $14=HEAP32[((5243496)>>2)];
    var $arrayidx4=(($14+$13)|0);
    var $15=HEAP8[($arrayidx4)];
    var $16=HEAP32[((5251056)>>2)];
    var $17=HEAP32[((5251064)>>2)];
    var $arrayidx5=(($17+$16)|0);
    HEAP8[($arrayidx5)]=$15;
    var $18=HEAP32[((5251056)>>2)];
    var $add6=((($18)+(1))|0);
    HEAP32[((5251056)>>2)]=$add6;
    var $19=HEAP32[((5243668)>>2)];
    var $add7=((($19)+(1))|0);
    HEAP32[((5243668)>>2)]=$add7;
  }
  var $20=HEAP32[((5251056)>>2)];
  HEAP32[((5251060)>>2)]=$20;

  return;
}


function _zaddoutpool($pstr) {
  var label = 0;

  var $pstr_addr;
  var $breakptr;
  var $endptr;
  var $breakptfound;
  var $unbreakabletail;
  $pstr_addr=$pstr;
  var $0=$pstr_addr;
  var $1=HEAP32[((5243488)>>2)];
  var $arrayidx=(($1+($0<<2))|0);
  var $2=HEAP32[(($arrayidx)>>2)];
  HEAP32[((5243668)>>2)]=$2;
  var $3=$pstr_addr;
  var $add=((($3)+(1))|0);
  var $4=HEAP32[((5243488)>>2)];
  var $arrayidx1=(($4+($add<<2))|0);
  var $5=HEAP32[(($arrayidx1)>>2)];
  HEAP32[((5243664)>>2)]=$5;
  while(1) {
    var $6=HEAP32[((5243716)>>2)];
    var $7=HEAP32[((5243664)>>2)];
    var $8=HEAP32[((5243668)>>2)];
    var $sub=((($7)-($8))|0);
    var $add2=((($6)+($sub))|0);
    var $9=HEAP32[((5252240)>>2)];
    var $cmp=(($add2)|0) > (($9)|0);
    if (!($cmp)) {
      break;
    }
    _bufferoverflow();
  }
  var $10=HEAP32[((5243716)>>2)];
  HEAP32[((5243712)>>2)]=$10;
  while(1) {
    var $11=HEAP32[((5243668)>>2)];
    var $12=HEAP32[((5243664)>>2)];
    var $cmp4=(($11)|0) < (($12)|0);
    if (!($cmp4)) {
      break;
    }
    var $13=HEAP32[((5243668)>>2)];
    var $14=HEAP32[((5243496)>>2)];
    var $arrayidx6=(($14+$13)|0);
    var $15=HEAP8[($arrayidx6)];
    var $16=HEAP32[((5243712)>>2)];
    var $17=HEAP32[((5243720)>>2)];
    var $arrayidx7=(($17+$16)|0);
    HEAP8[($arrayidx7)]=$15;
    var $18=HEAP32[((5243668)>>2)];
    var $add8=((($18)+(1))|0);
    HEAP32[((5243668)>>2)]=$add8;
    var $19=HEAP32[((5243712)>>2)];
    var $add9=((($19)+(1))|0);
    HEAP32[((5243712)>>2)]=$add9;
  }
  var $20=HEAP32[((5243712)>>2)];
  HEAP32[((5243716)>>2)]=$20;
  $unbreakabletail=0;
  while(1) {
    var $21=HEAP32[((5243716)>>2)];
    var $cmp12=(($21)|0) > 79;
    if ($cmp12) {
      var $22=$unbreakabletail;
      var $tobool=(($22)|0)!=0;
      var $lnot=$tobool ^ 1;
      var $23 = $lnot;
    } else {
      var $23 = 0;
    }
    var $23;
    if (!($23)) {
      break;
    }
    var $24=HEAP32[((5243716)>>2)];
    $endptr=$24;
    HEAP32[((5243712)>>2)]=79;
    $breakptfound=0;
    while(1) {
      var $25=HEAP32[((5243712)>>2)];
      var $26=HEAP32[((5243720)>>2)];
      var $arrayidx15=(($26+$25)|0);
      var $27=HEAP8[($arrayidx15)];
      var $idxprom=(($27)&255);
      var $arrayidx16=((5243932+$idxprom)|0);
      var $28=HEAP8[($arrayidx16)];
      var $conv=(($28)&255);
      var $cmp17=(($conv)|0)!=1;
      if ($cmp17) {
        var $29=HEAP32[((5243712)>>2)];
        var $cmp20=(($29)|0) >= 3;
        var $30 = $cmp20;
      } else {
        var $30 = 0;
      }
      var $30;
      if (!($30)) {
        break;
      }
      var $31=HEAP32[((5243712)>>2)];
      var $sub24=((($31)-(1))|0);
      HEAP32[((5243712)>>2)]=$sub24;
    }
    var $32=HEAP32[((5243712)>>2)];
    var $cmp26=(($32)|0)==2;
    if ($cmp26) {
      HEAP32[((5243712)>>2)]=80;
      while(1) {
        var $33=HEAP32[((5243712)>>2)];
        var $34=$endptr;
        var $cmp29=(($33)|0) < (($34)|0);
        if (!($cmp29)) {
          label = 1412;
          break;
        }
        var $35=HEAP32[((5243712)>>2)];
        var $36=HEAP32[((5243720)>>2)];
        var $arrayidx32=(($36+$35)|0);
        var $37=HEAP8[($arrayidx32)];
        var $idxprom33=(($37)&255);
        var $arrayidx34=((5243932+$idxprom33)|0);
        var $38=HEAP8[($arrayidx34)];
        var $conv35=(($38)&255);
        var $cmp36=(($conv35)|0)!=1;
        if (!($cmp36)) {
          label = 1410;
          break;
        }
        var $39=HEAP32[((5243712)>>2)];
        var $add39=((($39)+(1))|0);
        HEAP32[((5243712)>>2)]=$add39;
      }
      if (label == 1412) {
        label = 0;
      }
      else if (label == 1410) {
        label = 0;
      }
      var $40=HEAP32[((5243712)>>2)];
      var $41=$endptr;
      var $cmp41=(($40)|0)==(($41)|0);
      if ($cmp41) {
        $unbreakabletail=1;
      } else {
        $breakptfound=1;
        while(1) {
          var $42=HEAP32[((5243712)>>2)];
          var $add46=((($42)+(1))|0);
          var $43=$endptr;
          var $cmp47=(($add46)|0) < (($43)|0);
          if (!($cmp47)) {
            label = 1421;
            break;
          }
          var $44=HEAP32[((5243712)>>2)];
          var $add50=((($44)+(1))|0);
          var $45=HEAP32[((5243720)>>2)];
          var $arrayidx51=(($45+$add50)|0);
          var $46=HEAP8[($arrayidx51)];
          var $idxprom52=(($46)&255);
          var $arrayidx53=((5243932+$idxprom52)|0);
          var $47=HEAP8[($arrayidx53)];
          var $conv54=(($47)&255);
          var $cmp55=(($conv54)|0)==1;
          if (!($cmp55)) {
            label = 1419;
            break;
          }
          var $48=HEAP32[((5243712)>>2)];
          var $add58=((($48)+(1))|0);
          HEAP32[((5243712)>>2)]=$add58;
        }
        if (label == 1421) {
          label = 0;
        }
        else if (label == 1419) {
          label = 0;
        }
      }
    } else {
      $breakptfound=1;
    }
    var $49=$breakptfound;
    var $tobool65=(($49)|0)!=0;
    if ($tobool65) {
      var $50=HEAP32[((5243712)>>2)];
      HEAP32[((5243716)>>2)]=$50;
      var $51=HEAP32[((5243716)>>2)];
      var $add67=((($51)+(1))|0);
      $breakptr=$add67;
      _outputbblline();
      var $52=HEAP32[((5243720)>>2)];
      var $arrayidx68=(($52)|0);
      HEAP8[($arrayidx68)]=32;
      var $53=HEAP32[((5243720)>>2)];
      var $arrayidx69=(($53+1)|0);
      HEAP8[($arrayidx69)]=32;
      HEAP32[((5243712)>>2)]=2;
      var $54=$breakptr;
      HEAP32[((5243460)>>2)]=$54;
      while(1) {
        var $55=HEAP32[((5243460)>>2)];
        var $56=$endptr;
        var $cmp71=(($55)|0) < (($56)|0);
        if (!($cmp71)) {
          break;
        }
        var $57=HEAP32[((5243460)>>2)];
        var $58=HEAP32[((5243720)>>2)];
        var $arrayidx74=(($58+$57)|0);
        var $59=HEAP8[($arrayidx74)];
        var $60=HEAP32[((5243712)>>2)];
        var $61=HEAP32[((5243720)>>2)];
        var $arrayidx75=(($61+$60)|0);
        HEAP8[($arrayidx75)]=$59;
        var $62=HEAP32[((5243712)>>2)];
        var $add76=((($62)+(1))|0);
        HEAP32[((5243712)>>2)]=$add76;
        var $63=HEAP32[((5243460)>>2)];
        var $add77=((($63)+(1))|0);
        HEAP32[((5243460)>>2)]=$add77;
      }
      var $64=$endptr;
      var $65=$breakptr;
      var $sub79=((($64)-($65))|0);
      var $add80=((($sub79)+(2))|0);
      HEAP32[((5243716)>>2)]=$add80;
    }
  }

  return;
}
_zaddoutpool["X"]=1;

function _xequals() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  _zzpoplitstk(5243692, 5243680);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $1=HEAP8[(5243680)];
  var $conv1=(($1)&255);
  var $cmp=(($conv)|0)!=(($conv1)|0);
  if ($cmp) {
    var $2=HEAP8[(5243684)];
    var $conv3=(($2)&255);
    var $cmp4=(($conv3)|0)!=4;
    do {
      if ($cmp4) {
        var $3=HEAP8[(5243680)];
        var $conv6=(($3)&255);
        var $cmp7=(($conv6)|0)!=4;
        if (!($cmp7)) {
          break;
        }
        var $4=HEAP32[((5243696)>>2)];
        var $5=HEAP8[(5243684)];
        _zprintstklit($4, $5);
        var $6=HEAP32[((5243908)>>2)];
        var $call=_fputs(((5261948)|0), $6);
        var $7=HEAP32[((5243524)>>2)];
        var $call10=_fputs(((5261948)|0), $7);
        var $8=HEAP32[((5243692)>>2)];
        var $9=HEAP8[(5243680)];
        _zprintstklit($8, $9);
        _printanewline();
        var $10=HEAP32[((5243908)>>2)];
        var $call11=_fputs(((5261896)|0), $10);
        var $11=HEAP32[((5243524)>>2)];
        var $call12=_fputs(((5261896)|0), $11);
        _bstexwarnprint();
      }
    } while(0);
    _zpushlitstk(0, 0);

    return;
  }
  var $12=HEAP8[(5243684)];
  var $conv13=(($12)&255);
  var $cmp14=(($conv13)|0)!=0;
  do {
    if ($cmp14) {
      var $13=HEAP8[(5243684)];
      var $conv17=(($13)&255);
      var $cmp18=(($conv17)|0)!=1;
      if (!($cmp18)) {
        label = 1442;
        break;
      }
      var $14=HEAP8[(5243684)];
      var $conv21=(($14)&255);
      var $cmp22=(($conv21)|0)!=4;
      if ($cmp22) {
        var $15=HEAP32[((5243696)>>2)];
        var $16=HEAP8[(5243684)];
        _zprintstklit($15, $16);
        var $17=HEAP32[((5243908)>>2)];
        var $call25=_fputs(((5261816)|0), $17);
        var $18=HEAP32[((5243524)>>2)];
        var $call26=_fputs(((5261816)|0), $18);
        _bstexwarnprint();
      }
      _zpushlitstk(0, 0);
      break;
    } else {
      label = 1442;
    }
  } while(0);
  if (label == 1442) {
    var $19=HEAP8[(5243684)];
    var $conv29=(($19)&255);
    var $cmp30=(($conv29)|0)==0;
    if ($cmp30) {
      var $20=HEAP32[((5243692)>>2)];
      var $21=HEAP32[((5243696)>>2)];
      var $cmp33=(($20)|0)==(($21)|0);
      if ($cmp33) {
        _zpushlitstk(1, 0);
      } else {
        _zpushlitstk(0, 0);
      }
    } else {
      var $22=HEAP32[((5243692)>>2)];
      var $23=HEAP32[((5243696)>>2)];
      var $call39=_zstreqstr($22, $23);
      var $tobool=(($call39)|0)!=0;
      if ($tobool) {
        _zpushlitstk(1, 0);
      } else {
        _zpushlitstk(0, 0);
      }
    }
  }

  return;
}
_xequals["X"]=1;

function _xgreaterthan() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  _zzpoplitstk(5243692, 5243680);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=0;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 0);
    _zpushlitstk(0, 0);

    return;
  }
  var $3=HEAP8[(5243680)];
  var $conv2=(($3)&255);
  var $cmp3=(($conv2)|0)!=0;
  if ($cmp3) {
    var $4=HEAP32[((5243692)>>2)];
    var $5=HEAP8[(5243680)];
    _zprintwrongstklit($4, $5, 0);
    _zpushlitstk(0, 0);
  } else {
    var $6=HEAP32[((5243692)>>2)];
    var $7=HEAP32[((5243696)>>2)];
    var $cmp7=(($6)|0) > (($7)|0);
    if ($cmp7) {
      _zpushlitstk(1, 0);
    } else {
      _zpushlitstk(0, 0);
    }
  }

  return;
}


function _xlessthan() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  _zzpoplitstk(5243692, 5243680);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=0;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 0);
    _zpushlitstk(0, 0);

    return;
  }
  var $3=HEAP8[(5243680)];
  var $conv2=(($3)&255);
  var $cmp3=(($conv2)|0)!=0;
  if ($cmp3) {
    var $4=HEAP32[((5243692)>>2)];
    var $5=HEAP8[(5243680)];
    _zprintwrongstklit($4, $5, 0);
    _zpushlitstk(0, 0);
  } else {
    var $6=HEAP32[((5243692)>>2)];
    var $7=HEAP32[((5243696)>>2)];
    var $cmp7=(($6)|0) < (($7)|0);
    if ($cmp7) {
      _zpushlitstk(1, 0);
    } else {
      _zpushlitstk(0, 0);
    }
  }

  return;
}


function _xplus() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  _zzpoplitstk(5243692, 5243680);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=0;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 0);
    _zpushlitstk(0, 0);

    return;
  }
  var $3=HEAP8[(5243680)];
  var $conv2=(($3)&255);
  var $cmp3=(($conv2)|0)!=0;
  if ($cmp3) {
    var $4=HEAP32[((5243692)>>2)];
    var $5=HEAP8[(5243680)];
    _zprintwrongstklit($4, $5, 0);
    _zpushlitstk(0, 0);
  } else {
    var $6=HEAP32[((5243692)>>2)];
    var $7=HEAP32[((5243696)>>2)];
    var $add=((($6)+($7))|0);
    _zpushlitstk($add, 0);
  }

  return;
}


function _zzpoplitstk($poplit, $poptype) {
  var label = 0;

  var $poplit_addr;
  var $poptype_addr;
  $poplit_addr=$poplit;
  $poptype_addr=$poptype;
  var $0=HEAP32[((5243920)>>2)];
  var $cmp=(($0)|0)==0;
  if ($cmp) {
    var $1=HEAP32[((5243908)>>2)];
    var $call=_fputs(((5262488)|0), $1);
    var $2=HEAP32[((5243524)>>2)];
    var $call1=_fputs(((5262488)|0), $2);
    _bstexwarnprint();
    var $3=$poptype_addr;
    HEAP8[($3)]=4;

    return;
  }
  var $4=HEAP32[((5243920)>>2)];
  var $sub=((($4)-(1))|0);
  HEAP32[((5243920)>>2)]=$sub;
  var $5=HEAP32[((5243920)>>2)];
  var $6=HEAP32[((5243924)>>2)];
  var $arrayidx=(($6+($5<<2))|0);
  var $7=HEAP32[(($arrayidx)>>2)];
  var $8=$poplit_addr;
  HEAP32[(($8)>>2)]=$7;
  var $9=HEAP32[((5243920)>>2)];
  var $10=HEAP32[((5243912)>>2)];
  var $arrayidx2=(($10+$9)|0);
  var $11=HEAP8[($arrayidx2)];
  var $12=$poptype_addr;
  HEAP8[($12)]=$11;
  var $13=$poptype_addr;
  var $14=HEAP8[($13)];
  var $conv=(($14)&255);
  var $cmp3=(($conv)|0)==1;
  if ($cmp3) {
    var $15=$poplit_addr;
    var $16=HEAP32[(($15)>>2)];
    var $17=HEAP32[((5251164)>>2)];
    var $cmp6=(($16)|0) >= (($17)|0);
    do {
      if ($cmp6) {
        var $18=$poplit_addr;
        var $19=HEAP32[(($18)>>2)];
        var $20=HEAP32[((5243492)>>2)];
        var $sub9=((($20)-(1))|0);
        var $cmp10=(($19)|0)!=(($sub9)|0);
        if ($cmp10) {
          var $21=HEAP32[((5243908)>>2)];
          var $call13=_fputs(((5262424)|0), $21);
          var $22=HEAP32[((5243524)>>2)];
          var $call14=_fputs(((5262424)|0), $22);
          _printconfusion();
          _longjmp(((5248396)|0), 1);
          throw "Reached an unreachable!"
        } else {
          var $23=HEAP32[((5243492)>>2)];
          var $sub15=((($23)-(1))|0);
          HEAP32[((5243492)>>2)]=$sub15;
          var $24=HEAP32[((5243492)>>2)];
          var $25=HEAP32[((5243488)>>2)];
          var $arrayidx16=(($25+($24<<2))|0);
          var $26=HEAP32[(($arrayidx16)>>2)];
          HEAP32[((5243704)>>2)]=$26;
          break;
        }
      }
    } while(0);
  }

  return;
}
_zzpoplitstk["X"]=1;

function _checkcommandexecution() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243920)>>2)];
  var $cmp=(($0)|0)!=0;
  if ($cmp) {
    var $1=HEAP32[((5243908)>>2)];
    var $2=HEAP32[((5243920)>>2)];
    var $call=_fprintf($1, ((5267400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262144)|0),HEAP32[(((tempInt)+(4))>>2)]=$2,HEAP32[(((tempInt)+(8))>>2)]=((5262108)|0),tempInt));
    var $3=HEAP32[((5243524)>>2)];
    var $4=HEAP32[((5243920)>>2)];
    var $call1=_fprintf($3, ((5267400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262144)|0),HEAP32[(((tempInt)+(4))>>2)]=$4,HEAP32[(((tempInt)+(8))>>2)]=((5262108)|0),tempInt));
    _popwholestack();
    var $5=HEAP32[((5243908)>>2)];
    var $call2=_fputs(((5262044)|0), $5);
    var $6=HEAP32[((5243524)>>2)];
    var $call3=_fputs(((5262044)|0), $6);
    _bstexwarnprint();
  }
  var $7=HEAP32[((5251164)>>2)];
  var $8=HEAP32[((5243492)>>2)];
  var $cmp4=(($7)|0)!=(($8)|0);
  if ($cmp4) {
    var $9=HEAP32[((5243908)>>2)];
    var $call6=_fputs(((5261976)|0), $9);
    var $10=HEAP32[((5243524)>>2)];
    var $call7=_fputs(((5261976)|0), $10);
    _printconfusion();
    _longjmp(((5248396)|0), 1);
    throw "Reached an unreachable!"
  } else {
    STACKTOP = __stackBase__;
    return;
  }
}


function _xminus() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  _zzpoplitstk(5243692, 5243680);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=0;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 0);
    _zpushlitstk(0, 0);

    return;
  }
  var $3=HEAP8[(5243680)];
  var $conv2=(($3)&255);
  var $cmp3=(($conv2)|0)!=0;
  if ($cmp3) {
    var $4=HEAP32[((5243692)>>2)];
    var $5=HEAP8[(5243680)];
    _zprintwrongstklit($4, $5, 0);
    _zpushlitstk(0, 0);
  } else {
    var $6=HEAP32[((5243692)>>2)];
    var $7=HEAP32[((5243696)>>2)];
    var $sub=((($6)-($7))|0);
    _zpushlitstk($sub, 0);
  }

  return;
}


function _xconcatenate() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  _zzpoplitstk(5243692, 5243680);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=1;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 1);
    var $3=HEAP32[((5243572)>>2)];
    _zpushlitstk($3, 1);

    return;
  }
  var $4=HEAP8[(5243680)];
  var $conv2=(($4)&255);
  var $cmp3=(($conv2)|0)!=1;
  if ($cmp3) {
    var $5=HEAP32[((5243692)>>2)];
    var $6=HEAP8[(5243680)];
    _zprintwrongstklit($5, $6, 1);
    var $7=HEAP32[((5243572)>>2)];
    _zpushlitstk($7, 1);
  } else {
    var $8=HEAP32[((5243692)>>2)];
    var $9=HEAP32[((5251164)>>2)];
    var $cmp7=(($8)|0) >= (($9)|0);
    if ($cmp7) {
      var $10=HEAP32[((5243696)>>2)];
      var $11=HEAP32[((5251164)>>2)];
      var $cmp10=(($10)|0) >= (($11)|0);
      if ($cmp10) {
        var $12=HEAP32[((5243696)>>2)];
        var $add=((($12)+(1))|0);
        var $13=HEAP32[((5243488)>>2)];
        var $arrayidx=(($13+($add<<2))|0);
        var $14=HEAP32[(($arrayidx)>>2)];
        var $15=HEAP32[((5243696)>>2)];
        var $16=HEAP32[((5243488)>>2)];
        var $arrayidx13=(($16+($15<<2))|0);
        HEAP32[(($arrayidx13)>>2)]=$14;
        var $17=HEAP32[((5243492)>>2)];
        var $add14=((($17)+(1))|0);
        HEAP32[((5243492)>>2)]=$add14;
        var $18=HEAP32[((5243492)>>2)];
        var $19=HEAP32[((5243488)>>2)];
        var $arrayidx15=(($19+($18<<2))|0);
        var $20=HEAP32[(($arrayidx15)>>2)];
        HEAP32[((5243704)>>2)]=$20;
        var $21=HEAP32[((5243920)>>2)];
        var $add16=((($21)+(1))|0);
        HEAP32[((5243920)>>2)]=$add16;
      } else {
        var $22=HEAP32[((5243692)>>2)];
        var $add18=((($22)+(1))|0);
        var $23=HEAP32[((5243488)>>2)];
        var $arrayidx19=(($23+($add18<<2))|0);
        var $24=HEAP32[(($arrayidx19)>>2)];
        var $25=HEAP32[((5243692)>>2)];
        var $26=HEAP32[((5243488)>>2)];
        var $arrayidx20=(($26+($25<<2))|0);
        var $27=HEAP32[(($arrayidx20)>>2)];
        var $sub=((($24)-($27))|0);
        var $cmp21=(($sub)|0)==0;
        if ($cmp21) {
          var $28=HEAP32[((5243696)>>2)];
          _zpushlitstk($28, 1);
        } else {
          var $29=HEAP32[((5243692)>>2)];
          var $add25=((($29)+(1))|0);
          var $30=HEAP32[((5243488)>>2)];
          var $arrayidx26=(($30+($add25<<2))|0);
          var $31=HEAP32[(($arrayidx26)>>2)];
          HEAP32[((5243704)>>2)]=$31;
          while(1) {
            var $32=HEAP32[((5243704)>>2)];
            var $33=HEAP32[((5243696)>>2)];
            var $add27=((($33)+(1))|0);
            var $34=HEAP32[((5243488)>>2)];
            var $arrayidx28=(($34+($add27<<2))|0);
            var $35=HEAP32[(($arrayidx28)>>2)];
            var $36=HEAP32[((5243696)>>2)];
            var $37=HEAP32[((5243488)>>2)];
            var $arrayidx29=(($37+($36<<2))|0);
            var $38=HEAP32[(($arrayidx29)>>2)];
            var $sub30=((($35)-($38))|0);
            var $add31=((($32)+($sub30))|0);
            var $39=HEAP32[((5243700)>>2)];
            var $cmp32=(($add31)|0) > (($39)|0);
            if (!($cmp32)) {
              break;
            }
            _pooloverflow();
          }
          var $40=HEAP32[((5243696)>>2)];
          var $41=HEAP32[((5243488)>>2)];
          var $arrayidx34=(($41+($40<<2))|0);
          var $42=HEAP32[(($arrayidx34)>>2)];
          HEAP32[((5243544)>>2)]=$42;
          var $43=HEAP32[((5243696)>>2)];
          var $add35=((($43)+(1))|0);
          var $44=HEAP32[((5243488)>>2)];
          var $arrayidx36=(($44+($add35<<2))|0);
          var $45=HEAP32[(($arrayidx36)>>2)];
          HEAP32[((5243552)>>2)]=$45;
          while(1) {
            var $46=HEAP32[((5243544)>>2)];
            var $47=HEAP32[((5243552)>>2)];
            var $cmp38=(($46)|0) < (($47)|0);
            if (!($cmp38)) {
              break;
            }
            var $48=HEAP32[((5243544)>>2)];
            var $49=HEAP32[((5243496)>>2)];
            var $arrayidx41=(($49+$48)|0);
            var $50=HEAP8[($arrayidx41)];
            var $51=HEAP32[((5243704)>>2)];
            var $52=HEAP32[((5243496)>>2)];
            var $arrayidx42=(($52+$51)|0);
            HEAP8[($arrayidx42)]=$50;
            var $53=HEAP32[((5243704)>>2)];
            var $add43=((($53)+(1))|0);
            HEAP32[((5243704)>>2)]=$add43;
            var $54=HEAP32[((5243544)>>2)];
            var $add44=((($54)+(1))|0);
            HEAP32[((5243544)>>2)]=$add44;
          }
          var $call=_makestring();
          _zpushlitstk($call, 1);
        }
      }
    } else {
      var $55=HEAP32[((5243696)>>2)];
      var $56=HEAP32[((5251164)>>2)];
      var $cmp48=(($55)|0) >= (($56)|0);
      if ($cmp48) {
        var $57=HEAP32[((5243692)>>2)];
        var $add51=((($57)+(1))|0);
        var $58=HEAP32[((5243488)>>2)];
        var $arrayidx52=(($58+($add51<<2))|0);
        var $59=HEAP32[(($arrayidx52)>>2)];
        var $60=HEAP32[((5243692)>>2)];
        var $61=HEAP32[((5243488)>>2)];
        var $arrayidx53=(($61+($60<<2))|0);
        var $62=HEAP32[(($arrayidx53)>>2)];
        var $sub54=((($59)-($62))|0);
        var $cmp55=(($sub54)|0)==0;
        if ($cmp55) {
          var $63=HEAP32[((5243492)>>2)];
          var $add58=((($63)+(1))|0);
          HEAP32[((5243492)>>2)]=$add58;
          var $64=HEAP32[((5243492)>>2)];
          var $65=HEAP32[((5243488)>>2)];
          var $arrayidx59=(($65+($64<<2))|0);
          var $66=HEAP32[(($arrayidx59)>>2)];
          HEAP32[((5243704)>>2)]=$66;
          var $67=HEAP32[((5243696)>>2)];
          var $68=HEAP32[((5243920)>>2)];
          var $69=HEAP32[((5243924)>>2)];
          var $arrayidx60=(($69+($68<<2))|0);
          HEAP32[(($arrayidx60)>>2)]=$67;
          var $70=HEAP32[((5243920)>>2)];
          var $add61=((($70)+(1))|0);
          HEAP32[((5243920)>>2)]=$add61;
        } else {
          var $71=HEAP32[((5243696)>>2)];
          var $add63=((($71)+(1))|0);
          var $72=HEAP32[((5243488)>>2)];
          var $arrayidx64=(($72+($add63<<2))|0);
          var $73=HEAP32[(($arrayidx64)>>2)];
          var $74=HEAP32[((5243696)>>2)];
          var $75=HEAP32[((5243488)>>2)];
          var $arrayidx65=(($75+($74<<2))|0);
          var $76=HEAP32[(($arrayidx65)>>2)];
          var $sub66=((($73)-($76))|0);
          var $cmp67=(($sub66)|0)==0;
          if ($cmp67) {
            var $77=HEAP32[((5243920)>>2)];
            var $add70=((($77)+(1))|0);
            HEAP32[((5243920)>>2)]=$add70;
          } else {
            var $78=HEAP32[((5243696)>>2)];
            var $add72=((($78)+(1))|0);
            var $79=HEAP32[((5243488)>>2)];
            var $arrayidx73=(($79+($add72<<2))|0);
            var $80=HEAP32[(($arrayidx73)>>2)];
            var $81=HEAP32[((5243696)>>2)];
            var $82=HEAP32[((5243488)>>2)];
            var $arrayidx74=(($82+($81<<2))|0);
            var $83=HEAP32[(($arrayidx74)>>2)];
            var $sub75=((($80)-($83))|0);
            HEAP32[((5243548)>>2)]=$sub75;
            var $84=HEAP32[((5243692)>>2)];
            var $add76=((($84)+(1))|0);
            var $85=HEAP32[((5243488)>>2)];
            var $arrayidx77=(($85+($add76<<2))|0);
            var $86=HEAP32[(($arrayidx77)>>2)];
            var $87=HEAP32[((5243692)>>2)];
            var $88=HEAP32[((5243488)>>2)];
            var $arrayidx78=(($88+($87<<2))|0);
            var $89=HEAP32[(($arrayidx78)>>2)];
            var $sub79=((($86)-($89))|0);
            HEAP32[((5243560)>>2)]=$sub79;
            while(1) {
              var $90=HEAP32[((5243704)>>2)];
              var $91=HEAP32[((5243548)>>2)];
              var $add81=((($90)+($91))|0);
              var $92=HEAP32[((5243560)>>2)];
              var $add82=((($add81)+($92))|0);
              var $93=HEAP32[((5243700)>>2)];
              var $cmp83=(($add82)|0) > (($93)|0);
              if (!($cmp83)) {
                break;
              }
              _pooloverflow();
            }
            var $94=HEAP32[((5243696)>>2)];
            var $add87=((($94)+(1))|0);
            var $95=HEAP32[((5243488)>>2)];
            var $arrayidx88=(($95+($add87<<2))|0);
            var $96=HEAP32[(($arrayidx88)>>2)];
            HEAP32[((5243544)>>2)]=$96;
            var $97=HEAP32[((5243696)>>2)];
            var $98=HEAP32[((5243488)>>2)];
            var $arrayidx89=(($98+($97<<2))|0);
            var $99=HEAP32[(($arrayidx89)>>2)];
            HEAP32[((5243552)>>2)]=$99;
            var $100=HEAP32[((5243544)>>2)];
            var $101=HEAP32[((5243560)>>2)];
            var $add90=((($100)+($101))|0);
            HEAP32[((5243536)>>2)]=$add90;
            while(1) {
              var $102=HEAP32[((5243544)>>2)];
              var $103=HEAP32[((5243552)>>2)];
              var $cmp92=(($102)|0) > (($103)|0);
              if (!($cmp92)) {
                break;
              }
              var $104=HEAP32[((5243544)>>2)];
              var $sub95=((($104)-(1))|0);
              HEAP32[((5243544)>>2)]=$sub95;
              var $105=HEAP32[((5243536)>>2)];
              var $sub96=((($105)-(1))|0);
              HEAP32[((5243536)>>2)]=$sub96;
              var $106=HEAP32[((5243544)>>2)];
              var $107=HEAP32[((5243496)>>2)];
              var $arrayidx97=(($107+$106)|0);
              var $108=HEAP8[($arrayidx97)];
              var $109=HEAP32[((5243536)>>2)];
              var $110=HEAP32[((5243496)>>2)];
              var $arrayidx98=(($110+$109)|0);
              HEAP8[($arrayidx98)]=$108;
            }
            var $111=HEAP32[((5243692)>>2)];
            var $112=HEAP32[((5243488)>>2)];
            var $arrayidx100=(($112+($111<<2))|0);
            var $113=HEAP32[(($arrayidx100)>>2)];
            HEAP32[((5243544)>>2)]=$113;
            var $114=HEAP32[((5243692)>>2)];
            var $add101=((($114)+(1))|0);
            var $115=HEAP32[((5243488)>>2)];
            var $arrayidx102=(($115+($add101<<2))|0);
            var $116=HEAP32[(($arrayidx102)>>2)];
            HEAP32[((5243552)>>2)]=$116;
            while(1) {
              var $117=HEAP32[((5243544)>>2)];
              var $118=HEAP32[((5243552)>>2)];
              var $cmp104=(($117)|0) < (($118)|0);
              if (!($cmp104)) {
                break;
              }
              var $119=HEAP32[((5243544)>>2)];
              var $120=HEAP32[((5243496)>>2)];
              var $arrayidx107=(($120+$119)|0);
              var $121=HEAP8[($arrayidx107)];
              var $122=HEAP32[((5243704)>>2)];
              var $123=HEAP32[((5243496)>>2)];
              var $arrayidx108=(($123+$122)|0);
              HEAP8[($arrayidx108)]=$121;
              var $124=HEAP32[((5243704)>>2)];
              var $add109=((($124)+(1))|0);
              HEAP32[((5243704)>>2)]=$add109;
              var $125=HEAP32[((5243544)>>2)];
              var $add110=((($125)+(1))|0);
              HEAP32[((5243544)>>2)]=$add110;
            }
            var $126=HEAP32[((5243704)>>2)];
            var $127=HEAP32[((5243548)>>2)];
            var $add112=((($126)+($127))|0);
            HEAP32[((5243704)>>2)]=$add112;
            var $call113=_makestring();
            _zpushlitstk($call113, 1);
          }
        }
      } else {
        var $128=HEAP32[((5243696)>>2)];
        var $add117=((($128)+(1))|0);
        var $129=HEAP32[((5243488)>>2)];
        var $arrayidx118=(($129+($add117<<2))|0);
        var $130=HEAP32[(($arrayidx118)>>2)];
        var $131=HEAP32[((5243696)>>2)];
        var $132=HEAP32[((5243488)>>2)];
        var $arrayidx119=(($132+($131<<2))|0);
        var $133=HEAP32[(($arrayidx119)>>2)];
        var $sub120=((($130)-($133))|0);
        var $cmp121=(($sub120)|0)==0;
        if ($cmp121) {
          var $134=HEAP32[((5243920)>>2)];
          var $add124=((($134)+(1))|0);
          HEAP32[((5243920)>>2)]=$add124;
        } else {
          var $135=HEAP32[((5243692)>>2)];
          var $add126=((($135)+(1))|0);
          var $136=HEAP32[((5243488)>>2)];
          var $arrayidx127=(($136+($add126<<2))|0);
          var $137=HEAP32[(($arrayidx127)>>2)];
          var $138=HEAP32[((5243692)>>2)];
          var $139=HEAP32[((5243488)>>2)];
          var $arrayidx128=(($139+($138<<2))|0);
          var $140=HEAP32[(($arrayidx128)>>2)];
          var $sub129=((($137)-($140))|0);
          var $cmp130=(($sub129)|0)==0;
          if ($cmp130) {
            var $141=HEAP32[((5243696)>>2)];
            _zpushlitstk($141, 1);
          } else {
            while(1) {
              var $142=HEAP32[((5243704)>>2)];
              var $143=HEAP32[((5243696)>>2)];
              var $add135=((($143)+(1))|0);
              var $144=HEAP32[((5243488)>>2)];
              var $arrayidx136=(($144+($add135<<2))|0);
              var $145=HEAP32[(($arrayidx136)>>2)];
              var $146=HEAP32[((5243696)>>2)];
              var $147=HEAP32[((5243488)>>2)];
              var $arrayidx137=(($147+($146<<2))|0);
              var $148=HEAP32[(($arrayidx137)>>2)];
              var $sub138=((($145)-($148))|0);
              var $add139=((($142)+($sub138))|0);
              var $149=HEAP32[((5243692)>>2)];
              var $add140=((($149)+(1))|0);
              var $150=HEAP32[((5243488)>>2)];
              var $arrayidx141=(($150+($add140<<2))|0);
              var $151=HEAP32[(($arrayidx141)>>2)];
              var $152=HEAP32[((5243692)>>2)];
              var $153=HEAP32[((5243488)>>2)];
              var $arrayidx142=(($153+($152<<2))|0);
              var $154=HEAP32[(($arrayidx142)>>2)];
              var $sub143=((($151)-($154))|0);
              var $add144=((($add139)+($sub143))|0);
              var $155=HEAP32[((5243700)>>2)];
              var $cmp145=(($add144)|0) > (($155)|0);
              if (!($cmp145)) {
                break;
              }
              _pooloverflow();
            }
            var $156=HEAP32[((5243692)>>2)];
            var $157=HEAP32[((5243488)>>2)];
            var $arrayidx149=(($157+($156<<2))|0);
            var $158=HEAP32[(($arrayidx149)>>2)];
            HEAP32[((5243544)>>2)]=$158;
            var $159=HEAP32[((5243692)>>2)];
            var $add150=((($159)+(1))|0);
            var $160=HEAP32[((5243488)>>2)];
            var $arrayidx151=(($160+($add150<<2))|0);
            var $161=HEAP32[(($arrayidx151)>>2)];
            HEAP32[((5243552)>>2)]=$161;
            while(1) {
              var $162=HEAP32[((5243544)>>2)];
              var $163=HEAP32[((5243552)>>2)];
              var $cmp153=(($162)|0) < (($163)|0);
              if (!($cmp153)) {
                break;
              }
              var $164=HEAP32[((5243544)>>2)];
              var $165=HEAP32[((5243496)>>2)];
              var $arrayidx156=(($165+$164)|0);
              var $166=HEAP8[($arrayidx156)];
              var $167=HEAP32[((5243704)>>2)];
              var $168=HEAP32[((5243496)>>2)];
              var $arrayidx157=(($168+$167)|0);
              HEAP8[($arrayidx157)]=$166;
              var $169=HEAP32[((5243704)>>2)];
              var $add158=((($169)+(1))|0);
              HEAP32[((5243704)>>2)]=$add158;
              var $170=HEAP32[((5243544)>>2)];
              var $add159=((($170)+(1))|0);
              HEAP32[((5243544)>>2)]=$add159;
            }
            var $171=HEAP32[((5243696)>>2)];
            var $172=HEAP32[((5243488)>>2)];
            var $arrayidx161=(($172+($171<<2))|0);
            var $173=HEAP32[(($arrayidx161)>>2)];
            HEAP32[((5243544)>>2)]=$173;
            var $174=HEAP32[((5243696)>>2)];
            var $add162=((($174)+(1))|0);
            var $175=HEAP32[((5243488)>>2)];
            var $arrayidx163=(($175+($add162<<2))|0);
            var $176=HEAP32[(($arrayidx163)>>2)];
            HEAP32[((5243552)>>2)]=$176;
            while(1) {
              var $177=HEAP32[((5243544)>>2)];
              var $178=HEAP32[((5243552)>>2)];
              var $cmp165=(($177)|0) < (($178)|0);
              if (!($cmp165)) {
                break;
              }
              var $179=HEAP32[((5243544)>>2)];
              var $180=HEAP32[((5243496)>>2)];
              var $arrayidx168=(($180+$179)|0);
              var $181=HEAP8[($arrayidx168)];
              var $182=HEAP32[((5243704)>>2)];
              var $183=HEAP32[((5243496)>>2)];
              var $arrayidx169=(($183+$182)|0);
              HEAP8[($arrayidx169)]=$181;
              var $184=HEAP32[((5243704)>>2)];
              var $add170=((($184)+(1))|0);
              HEAP32[((5243704)>>2)]=$add170;
              var $185=HEAP32[((5243544)>>2)];
              var $add171=((($185)+(1))|0);
              HEAP32[((5243544)>>2)]=$add171;
            }
            var $call173=_makestring();
            _zpushlitstk($call173, 1);
          }
        }
      }
    }
  }

  return;
}
_xconcatenate["X"]=1;

function _xgets() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  _zzpoplitstk(5243696, 5243684);
  _zzpoplitstk(5243692, 5243680);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=2;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 2);
    STACKTOP = __stackBase__;
    return;
  }
  var $3=HEAP32[((5243876)>>2)];
  var $tobool=(($3)|0)!=0;
  do {
    if ($tobool) {
      label = 1578;
    } else {
      var $4=HEAP32[((5243696)>>2)];
      var $5=HEAP32[((5248804)>>2)];
      var $arrayidx=(($5+$4)|0);
      var $6=HEAP8[($arrayidx)];
      var $conv2=(($6)&255);
      var $cmp3=(($conv2)|0)==6;
      if (!($cmp3)) {
        var $7=HEAP32[((5243696)>>2)];
        var $8=HEAP32[((5248804)>>2)];
        var $arrayidx5=(($8+$7)|0);
        var $9=HEAP8[($arrayidx5)];
        var $conv6=(($9)&255);
        var $cmp7=(($conv6)|0)==5;
        if (!($cmp7)) {
          label = 1578;
          break;
        }
      }
      _bstcantmesswithentriesprint();
      break;
    }
  } while(0);
  if (label == 1578) {
    var $10=HEAP32[((5243696)>>2)];
    var $11=HEAP32[((5248804)>>2)];
    var $arrayidx11=(($11+$10)|0);
    var $12=HEAP8[($arrayidx11)];
    var $conv12=(($12)&255);
    if ((($conv12)|0)==6) {
      var $23=HEAP8[(5243680)];
      var $conv21=(($23)&255);
      var $cmp22=(($conv21)|0)!=1;
      if ($cmp22) {
        var $24=HEAP32[((5243692)>>2)];
        var $25=HEAP8[(5243680)];
        _zprintwrongstklit($24, $25, 1);
      } else {
        var $26=HEAP32[((5251172)>>2)];
        var $27=HEAP32[((5243788)>>2)];
        var $mul26=((($26)*($27))&-1);
        var $28=HEAP32[((5243696)>>2)];
        var $29=HEAP32[((5248484)>>2)];
        var $arrayidx27=(($29+($28<<2))|0);
        var $30=HEAP32[(($arrayidx27)>>2)];
        var $add28=((($mul26)+($30))|0);
        HEAP32[((5243508)>>2)]=$add28;
        HEAP32[((5251100)>>2)]=0;
        var $31=HEAP32[((5243692)>>2)];
        var $32=HEAP32[((5243488)>>2)];
        var $arrayidx29=(($32+($31<<2))|0);
        var $33=HEAP32[(($arrayidx29)>>2)];
        HEAP32[((5243544)>>2)]=$33;
        var $34=HEAP32[((5243692)>>2)];
        var $add30=((($34)+(1))|0);
        var $35=HEAP32[((5243488)>>2)];
        var $arrayidx31=(($35+($add30<<2))|0);
        var $36=HEAP32[(($arrayidx31)>>2)];
        HEAP32[((5243536)>>2)]=$36;
        var $37=HEAP32[((5243536)>>2)];
        var $38=HEAP32[((5243544)>>2)];
        var $sub=((($37)-($38))|0);
        var $39=HEAP32[((5251072)>>2)];
        var $cmp32=(($sub)|0) > (($39)|0);
        if ($cmp32) {
          _bst1printstringsizeexceeded();
          var $40=HEAP32[((5243908)>>2)];
          var $41=HEAP32[((5251072)>>2)];
          var $call=_fprintf($40, ((5253272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$41,HEAP32[(((tempInt)+(4))>>2)]=((5261784)|0),tempInt));
          var $42=HEAP32[((5243524)>>2)];
          var $43=HEAP32[((5251072)>>2)];
          var $call35=_fprintf($42, ((5253272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$43,HEAP32[(((tempInt)+(4))>>2)]=((5261784)|0),tempInt));
          _bst2printstringsizeexceeded();
          var $44=HEAP32[((5243544)>>2)];
          var $45=HEAP32[((5251072)>>2)];
          var $add36=((($44)+($45))|0);
          HEAP32[((5243536)>>2)]=$add36;
        }
        while(1) {
          var $46=HEAP32[((5243544)>>2)];
          var $47=HEAP32[((5243536)>>2)];
          var $cmp38=(($46)|0) < (($47)|0);
          if (!($cmp38)) {
            break;
          }
          var $48=HEAP32[((5243544)>>2)];
          var $49=HEAP32[((5243496)>>2)];
          var $arrayidx40=(($49+$48)|0);
          var $50=HEAP8[($arrayidx40)];
          var $51=HEAP32[((5243508)>>2)];
          var $52=HEAP32[((5251072)>>2)];
          var $add41=((($52)+(1))|0);
          var $mul42=((($51)*($add41))&-1);
          var $53=HEAP32[((5251100)>>2)];
          var $add43=((($mul42)+($53))|0);
          var $54=HEAP32[((5251080)>>2)];
          var $arrayidx44=(($54+$add43)|0);
          HEAP8[($arrayidx44)]=$50;
          var $55=HEAP32[((5251100)>>2)];
          var $add45=((($55)+(1))|0);
          HEAP32[((5251100)>>2)]=$add45;
          var $56=HEAP32[((5243544)>>2)];
          var $add46=((($56)+(1))|0);
          HEAP32[((5243544)>>2)]=$add46;
        }
        var $57=HEAP32[((5243508)>>2)];
        var $58=HEAP32[((5251072)>>2)];
        var $add47=((($58)+(1))|0);
        var $mul48=((($57)*($add47))&-1);
        var $59=HEAP32[((5251100)>>2)];
        var $add49=((($mul48)+($59))|0);
        var $60=HEAP32[((5251080)>>2)];
        var $arrayidx50=(($60+$add49)|0);
        HEAP8[($arrayidx50)]=127;
      }
    } else if ((($conv12)|0)==7) {
      var $61=HEAP8[(5243680)];
      var $conv53=(($61)&255);
      var $cmp54=(($conv53)|0)!=0;
      if ($cmp54) {
        var $62=HEAP32[((5243692)>>2)];
        var $63=HEAP8[(5243680)];
        _zprintwrongstklit($62, $63, 0);
      } else {
        var $64=HEAP32[((5243692)>>2)];
        var $65=HEAP32[((5243696)>>2)];
        var $66=HEAP32[((5248484)>>2)];
        var $arrayidx58=(($66+($65<<2))|0);
        HEAP32[(($arrayidx58)>>2)]=$64;
      }
    } else if ((($conv12)|0)==8) {
      var $67=HEAP8[(5243680)];
      var $conv61=(($67)&255);
      var $cmp62=(($conv61)|0)!=1;
      if ($cmp62) {
        var $68=HEAP32[((5243692)>>2)];
        var $69=HEAP8[(5243680)];
        _zprintwrongstklit($68, $69, 1);
      } else {
        var $70=HEAP32[((5243696)>>2)];
        var $71=HEAP32[((5248484)>>2)];
        var $arrayidx66=(($71+($70<<2))|0);
        var $72=HEAP32[(($arrayidx66)>>2)];
        HEAP32[((5243504)>>2)]=$72;
        var $73=HEAP32[((5243692)>>2)];
        var $74=HEAP32[((5251164)>>2)];
        var $cmp67=(($73)|0) < (($74)|0);
        if ($cmp67) {
          var $75=HEAP32[((5243692)>>2)];
          var $76=HEAP32[((5243504)>>2)];
          var $77=HEAP32[((5248792)>>2)];
          var $arrayidx70=(($77+($76<<2))|0);
          HEAP32[(($arrayidx70)>>2)]=$75;
        } else {
          var $78=HEAP32[((5243504)>>2)];
          var $79=HEAP32[((5248792)>>2)];
          var $arrayidx72=(($79+($78<<2))|0);
          HEAP32[(($arrayidx72)>>2)]=0;
          HEAP32[((5248784)>>2)]=0;
          var $80=HEAP32[((5243692)>>2)];
          var $81=HEAP32[((5243488)>>2)];
          var $arrayidx73=(($81+($80<<2))|0);
          var $82=HEAP32[(($arrayidx73)>>2)];
          HEAP32[((5243544)>>2)]=$82;
          var $83=HEAP32[((5243692)>>2)];
          var $add74=((($83)+(1))|0);
          var $84=HEAP32[((5243488)>>2)];
          var $arrayidx75=(($84+($add74<<2))|0);
          var $85=HEAP32[(($arrayidx75)>>2)];
          HEAP32[((5243552)>>2)]=$85;
          var $86=HEAP32[((5243552)>>2)];
          var $87=HEAP32[((5243544)>>2)];
          var $sub76=((($86)-($87))|0);
          var $88=HEAP32[((5248780)>>2)];
          var $cmp77=(($sub76)|0) > (($88)|0);
          if ($cmp77) {
            _bst1printstringsizeexceeded();
            var $89=HEAP32[((5243908)>>2)];
            var $90=HEAP32[((5248780)>>2)];
            var $call80=_fprintf($89, ((5253272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$90,HEAP32[(((tempInt)+(4))>>2)]=((5261720)|0),tempInt));
            var $91=HEAP32[((5243524)>>2)];
            var $92=HEAP32[((5248780)>>2)];
            var $call81=_fprintf($91, ((5253272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$92,HEAP32[(((tempInt)+(4))>>2)]=((5261720)|0),tempInt));
            _bst2printstringsizeexceeded();
            var $93=HEAP32[((5243544)>>2)];
            var $94=HEAP32[((5248780)>>2)];
            var $add82=((($93)+($94))|0);
            HEAP32[((5243552)>>2)]=$add82;
          }
          while(1) {
            var $95=HEAP32[((5243544)>>2)];
            var $96=HEAP32[((5243552)>>2)];
            var $cmp85=(($95)|0) < (($96)|0);
            if (!($cmp85)) {
              break;
            }
            var $97=HEAP32[((5243544)>>2)];
            var $98=HEAP32[((5243496)>>2)];
            var $arrayidx88=(($98+$97)|0);
            var $99=HEAP8[($arrayidx88)];
            var $100=HEAP32[((5243504)>>2)];
            var $101=HEAP32[((5248780)>>2)];
            var $add89=((($101)+(1))|0);
            var $mul90=((($100)*($add89))&-1);
            var $102=HEAP32[((5248784)>>2)];
            var $add91=((($mul90)+($102))|0);
            var $103=HEAP32[((5248788)>>2)];
            var $arrayidx92=(($103+$add91)|0);
            HEAP8[($arrayidx92)]=$99;
            var $104=HEAP32[((5248784)>>2)];
            var $add93=((($104)+(1))|0);
            HEAP32[((5248784)>>2)]=$add93;
            var $105=HEAP32[((5243544)>>2)];
            var $add94=((($105)+(1))|0);
            HEAP32[((5243544)>>2)]=$add94;
          }
          var $106=HEAP32[((5248784)>>2)];
          var $107=HEAP32[((5243504)>>2)];
          var $108=HEAP32[((5248796)>>2)];
          var $arrayidx96=(($108+($107<<2))|0);
          HEAP32[(($arrayidx96)>>2)]=$106;
        }
      }
    } else if ((($conv12)|0)==5) {
      var $13=HEAP8[(5243680)];
      var $conv13=(($13)&255);
      var $cmp14=(($conv13)|0)!=0;
      if ($cmp14) {
        var $14=HEAP32[((5243692)>>2)];
        var $15=HEAP8[(5243680)];
        _zprintwrongstklit($14, $15, 0);
      } else {
        var $16=HEAP32[((5243692)>>2)];
        var $17=HEAP32[((5251172)>>2)];
        var $18=HEAP32[((5243792)>>2)];
        var $mul=((($17)*($18))&-1);
        var $19=HEAP32[((5243696)>>2)];
        var $20=HEAP32[((5248484)>>2)];
        var $arrayidx18=(($20+($19<<2))|0);
        var $21=HEAP32[(($arrayidx18)>>2)];
        var $add=((($mul)+($21))|0);
        var $22=HEAP32[((5251088)>>2)];
        var $arrayidx19=(($22+($add<<2))|0);
        HEAP32[(($arrayidx19)>>2)]=$16;
      }
    } else {
      var $109=HEAP32[((5243908)>>2)];
      var $call99=_fputs(((5261656)|0), $109);
      var $110=HEAP32[((5243524)>>2)];
      var $call100=_fputs(((5261656)|0), $110);
      var $111=HEAP32[((5243696)>>2)];
      _zprintfnclass($111);
      var $112=HEAP32[((5243908)>>2)];
      var $call101=_fputs(((5261544)|0), $112);
      var $113=HEAP32[((5243524)>>2)];
      var $call102=_fputs(((5261544)|0), $113);
      _bstexwarnprint();
    }
  }
  STACKTOP = __stackBase__;
  return;
}
_xgets["X"]=1;

function _xaddperiod() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=1;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 1);
    var $3=HEAP32[((5243572)>>2)];
    _zpushlitstk($3, 1);

    return;
  }
  var $4=HEAP32[((5243696)>>2)];
  var $add=((($4)+(1))|0);
  var $5=HEAP32[((5243488)>>2)];
  var $arrayidx=(($5+($add<<2))|0);
  var $6=HEAP32[(($arrayidx)>>2)];
  var $7=HEAP32[((5243696)>>2)];
  var $8=HEAP32[((5243488)>>2)];
  var $arrayidx2=(($8+($7<<2))|0);
  var $9=HEAP32[(($arrayidx2)>>2)];
  var $sub=((($6)-($9))|0);
  var $cmp3=(($sub)|0)==0;
  if ($cmp3) {
    var $10=HEAP32[((5243572)>>2)];
    _zpushlitstk($10, 1);
  } else {
    var $11=HEAP32[((5243696)>>2)];
    var $add7=((($11)+(1))|0);
    var $12=HEAP32[((5243488)>>2)];
    var $arrayidx8=(($12+($add7<<2))|0);
    var $13=HEAP32[(($arrayidx8)>>2)];
    HEAP32[((5243544)>>2)]=$13;
    var $14=HEAP32[((5243696)>>2)];
    var $15=HEAP32[((5243488)>>2)];
    var $arrayidx9=(($15+($14<<2))|0);
    var $16=HEAP32[(($arrayidx9)>>2)];
    HEAP32[((5243552)>>2)]=$16;
    while(1) {
      var $17=HEAP32[((5243544)>>2)];
      var $18=HEAP32[((5243552)>>2)];
      var $cmp10=(($17)|0) > (($18)|0);
      if (!($cmp10)) {
        label = 1623;
        break;
      }
      var $19=HEAP32[((5243544)>>2)];
      var $sub12=((($19)-(1))|0);
      HEAP32[((5243544)>>2)]=$sub12;
      var $20=HEAP32[((5243544)>>2)];
      var $21=HEAP32[((5243496)>>2)];
      var $arrayidx13=(($21+$20)|0);
      var $22=HEAP8[($arrayidx13)];
      var $conv14=(($22)&255);
      var $cmp15=(($conv14)|0)!=125;
      if ($cmp15) {
        label = 1621;
        break;
      }
    }
    if (label == 1621) {
    }
    else if (label == 1623) {
    }
    var $23=HEAP32[((5243544)>>2)];
    var $24=HEAP32[((5243496)>>2)];
    var $arrayidx18=(($24+$23)|0);
    var $25=HEAP8[($arrayidx18)];
    var $conv19=(($25)&255);
    if ((($conv19)|0)==46 | (($conv19)|0)==63 | (($conv19)|0)==33) {
      var $26=HEAP32[((5243920)>>2)];
      var $27=HEAP32[((5243924)>>2)];
      var $arrayidx20=(($27+($26<<2))|0);
      var $28=HEAP32[(($arrayidx20)>>2)];
      var $29=HEAP32[((5251164)>>2)];
      var $cmp21=(($28)|0) >= (($29)|0);
      if ($cmp21) {
        var $30=HEAP32[((5243492)>>2)];
        var $add24=((($30)+(1))|0);
        HEAP32[((5243492)>>2)]=$add24;
        var $31=HEAP32[((5243492)>>2)];
        var $32=HEAP32[((5243488)>>2)];
        var $arrayidx25=(($32+($31<<2))|0);
        var $33=HEAP32[(($arrayidx25)>>2)];
        HEAP32[((5243704)>>2)]=$33;
      }
      var $34=HEAP32[((5243920)>>2)];
      var $add27=((($34)+(1))|0);
      HEAP32[((5243920)>>2)]=$add27;
    } else {
      var $35=HEAP32[((5243696)>>2)];
      var $36=HEAP32[((5251164)>>2)];
      var $cmp28=(($35)|0) < (($36)|0);
      if ($cmp28) {
        while(1) {
          var $37=HEAP32[((5243704)>>2)];
          var $38=HEAP32[((5243696)>>2)];
          var $add32=((($38)+(1))|0);
          var $39=HEAP32[((5243488)>>2)];
          var $arrayidx33=(($39+($add32<<2))|0);
          var $40=HEAP32[(($arrayidx33)>>2)];
          var $41=HEAP32[((5243696)>>2)];
          var $42=HEAP32[((5243488)>>2)];
          var $arrayidx34=(($42+($41<<2))|0);
          var $43=HEAP32[(($arrayidx34)>>2)];
          var $sub35=((($40)-($43))|0);
          var $add36=((($37)+($sub35))|0);
          var $add37=((($add36)+(1))|0);
          var $44=HEAP32[((5243700)>>2)];
          var $cmp38=(($add37)|0) > (($44)|0);
          if (!($cmp38)) {
            break;
          }
          _pooloverflow();
        }
        var $45=HEAP32[((5243696)>>2)];
        var $46=HEAP32[((5243488)>>2)];
        var $arrayidx42=(($46+($45<<2))|0);
        var $47=HEAP32[(($arrayidx42)>>2)];
        HEAP32[((5243544)>>2)]=$47;
        var $48=HEAP32[((5243696)>>2)];
        var $add43=((($48)+(1))|0);
        var $49=HEAP32[((5243488)>>2)];
        var $arrayidx44=(($49+($add43<<2))|0);
        var $50=HEAP32[(($arrayidx44)>>2)];
        HEAP32[((5243552)>>2)]=$50;
        while(1) {
          var $51=HEAP32[((5243544)>>2)];
          var $52=HEAP32[((5243552)>>2)];
          var $cmp46=(($51)|0) < (($52)|0);
          if (!($cmp46)) {
            break;
          }
          var $53=HEAP32[((5243544)>>2)];
          var $54=HEAP32[((5243496)>>2)];
          var $arrayidx49=(($54+$53)|0);
          var $55=HEAP8[($arrayidx49)];
          var $56=HEAP32[((5243704)>>2)];
          var $57=HEAP32[((5243496)>>2)];
          var $arrayidx50=(($57+$56)|0);
          HEAP8[($arrayidx50)]=$55;
          var $58=HEAP32[((5243704)>>2)];
          var $add51=((($58)+(1))|0);
          HEAP32[((5243704)>>2)]=$add51;
          var $59=HEAP32[((5243544)>>2)];
          var $add52=((($59)+(1))|0);
          HEAP32[((5243544)>>2)]=$add52;
        }
      } else {
        var $60=HEAP32[((5243696)>>2)];
        var $add55=((($60)+(1))|0);
        var $61=HEAP32[((5243488)>>2)];
        var $arrayidx56=(($61+($add55<<2))|0);
        var $62=HEAP32[(($arrayidx56)>>2)];
        HEAP32[((5243704)>>2)]=$62;
        while(1) {
          var $63=HEAP32[((5243704)>>2)];
          var $add58=((($63)+(1))|0);
          var $64=HEAP32[((5243700)>>2)];
          var $cmp59=(($add58)|0) > (($64)|0);
          if (!($cmp59)) {
            break;
          }
          _pooloverflow();
        }
      }
      var $65=HEAP32[((5243704)>>2)];
      var $66=HEAP32[((5243496)>>2)];
      var $arrayidx64=(($66+$65)|0);
      HEAP8[($arrayidx64)]=46;
      var $67=HEAP32[((5243704)>>2)];
      var $add65=((($67)+(1))|0);
      HEAP32[((5243704)>>2)]=$add65;
      var $call=_makestring();
      _zpushlitstk($call, 1);
    }
  }

  return;
}
_xaddperiod["X"]=1;

function _xchangecase() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  _zzpoplitstk(5243692, 5243680);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=1;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 1);
    var $3=HEAP32[((5243572)>>2)];
    _zpushlitstk($3, 1);

    return;
  }
  var $4=HEAP8[(5243680)];
  var $conv2=(($4)&255);
  var $cmp3=(($conv2)|0)!=1;
  if ($cmp3) {
    var $5=HEAP32[((5243692)>>2)];
    var $6=HEAP8[(5243680)];
    _zprintwrongstklit($5, $6, 1);
    var $7=HEAP32[((5243572)>>2)];
    _zpushlitstk($7, 1);
  } else {
    var $8=HEAP32[((5243696)>>2)];
    var $9=HEAP32[((5243488)>>2)];
    var $arrayidx=(($9+($8<<2))|0);
    var $10=HEAP32[(($arrayidx)>>2)];
    var $11=HEAP32[((5243496)>>2)];
    var $arrayidx7=(($11+$10)|0);
    var $12=HEAP8[($arrayidx7)];
    var $conv8=(($12)&255);
    if ((($conv8)|0)==117 | (($conv8)|0)==85) {
      HEAP8[(5251144)]=2;
    } else if ((($conv8)|0)==116 | (($conv8)|0)==84) {
      HEAP8[(5251144)]=0;
    } else if ((($conv8)|0)==108 | (($conv8)|0)==76) {
      HEAP8[(5251144)]=1;
    } else {
      HEAP8[(5251144)]=3;
    }
    var $13=HEAP32[((5243696)>>2)];
    var $add=((($13)+(1))|0);
    var $14=HEAP32[((5243488)>>2)];
    var $arrayidx11=(($14+($add<<2))|0);
    var $15=HEAP32[(($arrayidx11)>>2)];
    var $16=HEAP32[((5243696)>>2)];
    var $17=HEAP32[((5243488)>>2)];
    var $arrayidx12=(($17+($16<<2))|0);
    var $18=HEAP32[(($arrayidx12)>>2)];
    var $sub=((($15)-($18))|0);
    var $cmp13=(($sub)|0)!=1;
    do {
      if ($cmp13) {
        label = 1657;
      } else {
        var $19=HEAP8[(5251144)];
        var $conv15=(($19)&255);
        var $cmp16=(($conv15)|0)==3;
        if ($cmp16) {
          label = 1657;
          break;
        } else {
          break;
        }
      }
    } while(0);
    if (label == 1657) {
      HEAP8[(5251144)]=3;
      var $20=HEAP32[((5243696)>>2)];
      _zprintapoolstr($20);
      var $21=HEAP32[((5243908)>>2)];
      var $call=_fputs(((5261480)|0), $21);
      var $22=HEAP32[((5243524)>>2)];
      var $call19=_fputs(((5261480)|0), $22);
      _bstexwarnprint();
    }
    HEAP32[((5251060)>>2)]=0;
    var $23=HEAP32[((5243692)>>2)];
    _zaddbufpool($23);
    HEAP32[((5252304)>>2)]=0;
    HEAP32[((5251056)>>2)]=0;
    while(1) {
      var $24=HEAP32[((5251056)>>2)];
      var $25=HEAP32[((5251060)>>2)];
      var $cmp20=(($24)|0) < (($25)|0);
      if (!($cmp20)) {
        break;
      }
      var $26=HEAP32[((5251056)>>2)];
      var $27=HEAP32[((5251064)>>2)];
      var $arrayidx22=(($27+$26)|0);
      var $28=HEAP8[($arrayidx22)];
      var $conv23=(($28)&255);
      var $cmp24=(($conv23)|0)==123;
      if ($cmp24) {
        var $29=HEAP32[((5252304)>>2)];
        var $add27=((($29)+(1))|0);
        HEAP32[((5252304)>>2)]=$add27;
        var $30=HEAP32[((5252304)>>2)];
        var $cmp28=(($30)|0)!=1;
        L2065: do {
          if ($cmp28) {
          } else {
            var $31=HEAP32[((5251056)>>2)];
            var $add32=((($31)+(4))|0);
            var $32=HEAP32[((5251060)>>2)];
            var $cmp33=(($add32)|0) > (($32)|0);
            if ($cmp33) {
              break;
            }
            var $33=HEAP32[((5251056)>>2)];
            var $add37=((($33)+(1))|0);
            var $34=HEAP32[((5251064)>>2)];
            var $arrayidx38=(($34+$add37)|0);
            var $35=HEAP8[($arrayidx38)];
            var $conv39=(($35)&255);
            var $cmp40=(($conv39)|0)!=92;
            if ($cmp40) {
              break;
            }
            var $36=HEAP8[(5251144)];
            var $conv45=(($36)&255);
            var $cmp46=(($conv45)|0)==0;
            if ($cmp46) {
              var $37=HEAP32[((5251056)>>2)];
              var $cmp49=(($37)|0)==0;
              if ($cmp49) {
                break;
              }
              var $38=HEAP32[((5243648)>>2)];
              var $tobool=(($38)|0)!=0;
              do {
                if ($tobool) {
                  var $39=HEAP32[((5251056)>>2)];
                  var $sub53=((($39)-(1))|0);
                  var $40=HEAP32[((5251064)>>2)];
                  var $arrayidx54=(($40+$sub53)|0);
                  var $41=HEAP8[($arrayidx54)];
                  var $idxprom=(($41)&255);
                  var $arrayidx55=((5243932+$idxprom)|0);
                  var $42=HEAP8[($arrayidx55)];
                  var $conv56=(($42)&255);
                  var $cmp57=(($conv56)|0)==1;
                  if (!($cmp57)) {
                    break;
                  }
                  break L2065;
                }
              } while(0);
            }
            var $43=HEAP32[((5251056)>>2)];
            var $add63=((($43)+(1))|0);
            HEAP32[((5251056)>>2)]=$add63;
            while(1) {
              var $44=HEAP32[((5251056)>>2)];
              var $45=HEAP32[((5251060)>>2)];
              var $cmp65=(($44)|0) < (($45)|0);
              if ($cmp65) {
                var $46=HEAP32[((5252304)>>2)];
                var $cmp67=(($46)|0) > 0;
                var $47 = $cmp67;
              } else {
                var $47 = 0;
              }
              var $47;
              if (!($47)) {
                break;
              }
              var $48=HEAP32[((5251056)>>2)];
              var $add70=((($48)+(1))|0);
              HEAP32[((5251056)>>2)]=$add70;
              var $49=HEAP32[((5251056)>>2)];
              HEAP32[((5251052)>>2)]=$49;
              while(1) {
                var $50=HEAP32[((5251056)>>2)];
                var $51=HEAP32[((5251060)>>2)];
                var $cmp72=(($50)|0) < (($51)|0);
                if ($cmp72) {
                  var $52=HEAP32[((5251056)>>2)];
                  var $53=HEAP32[((5251064)>>2)];
                  var $arrayidx75=(($53+$52)|0);
                  var $54=HEAP8[($arrayidx75)];
                  var $idxprom76=(($54)&255);
                  var $arrayidx77=((5243932+$idxprom76)|0);
                  var $55=HEAP8[($arrayidx77)];
                  var $conv78=(($55)&255);
                  var $cmp79=(($conv78)|0)==2;
                  var $56 = $cmp79;
                } else {
                  var $56 = 0;
                }
                var $56;
                if (!($56)) {
                  break;
                }
                var $57=HEAP32[((5251056)>>2)];
                var $add83=((($57)+(1))|0);
                HEAP32[((5251056)>>2)]=$add83;
              }
              var $58=HEAP32[((5251064)>>2)];
              var $59=HEAP32[((5251052)>>2)];
              var $60=HEAP32[((5251056)>>2)];
              var $61=HEAP32[((5251052)>>2)];
              var $sub84=((($60)-($61))|0);
              var $call85=_zstrlookup($58, $59, $sub84, 14, 0);
              HEAP32[((5251148)>>2)]=$call85;
              var $62=HEAP32[((5248776)>>2)];
              var $tobool86=(($62)|0)!=0;
              if ($tobool86) {
                var $63=HEAP8[(5251144)];
                var $conv88=(($63)&255);
                if ((($conv88)|0)==2) {
                  var $71=HEAP32[((5251148)>>2)];
                  var $72=HEAP32[((5248484)>>2)];
                  var $arrayidx96=(($72+($71<<2))|0);
                  var $73=HEAP32[(($arrayidx96)>>2)];
                  if ((($73)|0)==10 | (($73)|0)==8 | (($73)|0)==2 | (($73)|0)==4 | (($73)|0)==6) {
                    var $74=HEAP32[((5251064)>>2)];
                    var $75=HEAP32[((5251052)>>2)];
                    var $76=HEAP32[((5251056)>>2)];
                    var $77=HEAP32[((5251052)>>2)];
                    var $sub98=((($76)-($77))|0);
                    _zuppercase($74, $75, $sub98);
                  } else if ((($73)|0)==0 | (($73)|0)==1 | (($73)|0)==12) {
                    var $78=HEAP32[((5251064)>>2)];
                    var $79=HEAP32[((5251052)>>2)];
                    var $80=HEAP32[((5251056)>>2)];
                    var $81=HEAP32[((5251052)>>2)];
                    var $sub100=((($80)-($81))|0);
                    _zuppercase($78, $79, $sub100);
                    while(1) {
                      var $82=HEAP32[((5251052)>>2)];
                      var $83=HEAP32[((5251056)>>2)];
                      var $cmp102=(($82)|0) < (($83)|0);
                      if (!($cmp102)) {
                        break;
                      }
                      var $84=HEAP32[((5251052)>>2)];
                      var $85=HEAP32[((5251064)>>2)];
                      var $arrayidx105=(($85+$84)|0);
                      var $86=HEAP8[($arrayidx105)];
                      var $87=HEAP32[((5251052)>>2)];
                      var $sub106=((($87)-(1))|0);
                      var $88=HEAP32[((5251064)>>2)];
                      var $arrayidx107=(($88+$sub106)|0);
                      HEAP8[($arrayidx107)]=$86;
                      var $89=HEAP32[((5251052)>>2)];
                      var $add108=((($89)+(1))|0);
                      HEAP32[((5251052)>>2)]=$add108;
                    }
                    var $90=HEAP32[((5251052)>>2)];
                    var $sub110=((($90)-(1))|0);
                    HEAP32[((5251052)>>2)]=$sub110;
                    while(1) {
                      var $91=HEAP32[((5251056)>>2)];
                      var $92=HEAP32[((5251060)>>2)];
                      var $cmp112=(($91)|0) < (($92)|0);
                      if ($cmp112) {
                        var $93=HEAP32[((5251056)>>2)];
                        var $94=HEAP32[((5251064)>>2)];
                        var $arrayidx115=(($94+$93)|0);
                        var $95=HEAP8[($arrayidx115)];
                        var $idxprom116=(($95)&255);
                        var $arrayidx117=((5243932+$idxprom116)|0);
                        var $96=HEAP8[($arrayidx117)];
                        var $conv118=(($96)&255);
                        var $cmp119=(($conv118)|0)==1;
                        var $97 = $cmp119;
                      } else {
                        var $97 = 0;
                      }
                      var $97;
                      if (!($97)) {
                        break;
                      }
                      var $98=HEAP32[((5251056)>>2)];
                      var $add123=((($98)+(1))|0);
                      HEAP32[((5251056)>>2)]=$add123;
                    }
                    var $99=HEAP32[((5251056)>>2)];
                    HEAP32[((5243460)>>2)]=$99;
                    while(1) {
                      var $100=HEAP32[((5243460)>>2)];
                      var $101=HEAP32[((5251060)>>2)];
                      var $cmp126=(($100)|0) < (($101)|0);
                      if (!($cmp126)) {
                        break;
                      }
                      var $102=HEAP32[((5243460)>>2)];
                      var $103=HEAP32[((5251064)>>2)];
                      var $arrayidx129=(($103+$102)|0);
                      var $104=HEAP8[($arrayidx129)];
                      var $105=HEAP32[((5243460)>>2)];
                      var $106=HEAP32[((5251056)>>2)];
                      var $107=HEAP32[((5251052)>>2)];
                      var $sub130=((($106)-($107))|0);
                      var $sub131=((($105)-($sub130))|0);
                      var $108=HEAP32[((5251064)>>2)];
                      var $arrayidx132=(($108+$sub131)|0);
                      HEAP8[($arrayidx132)]=$104;
                      var $109=HEAP32[((5243460)>>2)];
                      var $add133=((($109)+(1))|0);
                      HEAP32[((5243460)>>2)]=$add133;
                    }
                    var $110=HEAP32[((5243460)>>2)];
                    var $111=HEAP32[((5251056)>>2)];
                    var $112=HEAP32[((5251052)>>2)];
                    var $sub135=((($111)-($112))|0);
                    var $sub136=((($110)-($sub135))|0);
                    HEAP32[((5251060)>>2)]=$sub136;
                    var $113=HEAP32[((5251052)>>2)];
                    HEAP32[((5251056)>>2)]=$113;
                  } else {
                  }
                } else if ((($conv88)|0)==3) {
                } else if ((($conv88)|0)==0 | (($conv88)|0)==1) {
                  var $64=HEAP32[((5251148)>>2)];
                  var $65=HEAP32[((5248484)>>2)];
                  var $arrayidx90=(($65+($64<<2))|0);
                  var $66=HEAP32[(($arrayidx90)>>2)];
                  if ((($66)|0)==11 | (($66)|0)==9 | (($66)|0)==3 | (($66)|0)==5 | (($66)|0)==7) {
                    var $67=HEAP32[((5251064)>>2)];
                    var $68=HEAP32[((5251052)>>2)];
                    var $69=HEAP32[((5251056)>>2)];
                    var $70=HEAP32[((5251052)>>2)];
                    var $sub92=((($69)-($70))|0);
                    _zlowercase($67, $68, $sub92);
                  } else {
                  }
                } else {
                  _caseconversionconfusion();
                }
              }
              var $114=HEAP32[((5251056)>>2)];
              HEAP32[((5251052)>>2)]=$114;
              while(1) {
                var $115=HEAP32[((5251056)>>2)];
                var $116=HEAP32[((5251060)>>2)];
                var $cmp144=(($115)|0) < (($116)|0);
                do {
                  if ($cmp144) {
                    var $117=HEAP32[((5252304)>>2)];
                    var $cmp147=(($117)|0) > 0;
                    if (!($cmp147)) {
                      var $121 = 0;
                      break;
                    }
                    var $118=HEAP32[((5251056)>>2)];
                    var $119=HEAP32[((5251064)>>2)];
                    var $arrayidx150=(($119+$118)|0);
                    var $120=HEAP8[($arrayidx150)];
                    var $conv151=(($120)&255);
                    var $cmp152=(($conv151)|0)!=92;
                    var $121 = $cmp152;
                  } else {
                    var $121 = 0;
                  }
                } while(0);
                var $121;
                if (!($121)) {
                  break;
                }
                var $122=HEAP32[((5251056)>>2)];
                var $123=HEAP32[((5251064)>>2)];
                var $arrayidx156=(($123+$122)|0);
                var $124=HEAP8[($arrayidx156)];
                var $conv157=(($124)&255);
                var $cmp158=(($conv157)|0)==125;
                if ($cmp158) {
                  var $125=HEAP32[((5252304)>>2)];
                  var $sub161=((($125)-(1))|0);
                  HEAP32[((5252304)>>2)]=$sub161;
                } else {
                  var $126=HEAP32[((5251056)>>2)];
                  var $127=HEAP32[((5251064)>>2)];
                  var $arrayidx163=(($127+$126)|0);
                  var $128=HEAP8[($arrayidx163)];
                  var $conv164=(($128)&255);
                  var $cmp165=(($conv164)|0)==123;
                  if ($cmp165) {
                    var $129=HEAP32[((5252304)>>2)];
                    var $add168=((($129)+(1))|0);
                    HEAP32[((5252304)>>2)]=$add168;
                  }
                }
                var $130=HEAP32[((5251056)>>2)];
                var $add171=((($130)+(1))|0);
                HEAP32[((5251056)>>2)]=$add171;
              }
              var $131=HEAP8[(5251144)];
              var $conv173=(($131)&255);
              if ((($conv173)|0)==2) {
                var $136=HEAP32[((5251064)>>2)];
                var $137=HEAP32[((5251052)>>2)];
                var $138=HEAP32[((5251056)>>2)];
                var $139=HEAP32[((5251052)>>2)];
                var $sub177=((($138)-($139))|0);
                _zuppercase($136, $137, $sub177);
              } else if ((($conv173)|0)==0 | (($conv173)|0)==1) {
                var $132=HEAP32[((5251064)>>2)];
                var $133=HEAP32[((5251052)>>2)];
                var $134=HEAP32[((5251056)>>2)];
                var $135=HEAP32[((5251052)>>2)];
                var $sub175=((($134)-($135))|0);
                _zlowercase($132, $133, $sub175);
              } else if ((($conv173)|0)==3) {
              } else {
                _caseconversionconfusion();
              }
            }
            var $140=HEAP32[((5251056)>>2)];
            var $sub182=((($140)-(1))|0);
            HEAP32[((5251056)>>2)]=$sub182;
          }
        } while(0);
        HEAP32[((5243648)>>2)]=0;
      } else {
        var $141=HEAP32[((5251056)>>2)];
        var $142=HEAP32[((5251064)>>2)];
        var $arrayidx184=(($142+$141)|0);
        var $143=HEAP8[($arrayidx184)];
        var $conv185=(($143)&255);
        var $cmp186=(($conv185)|0)==125;
        if ($cmp186) {
          var $144=HEAP32[((5243692)>>2)];
          _zdecrbracelevel($144);
          HEAP32[((5243648)>>2)]=0;
        } else {
          var $145=HEAP32[((5252304)>>2)];
          var $cmp190=(($145)|0)==0;
          if ($cmp190) {
            var $146=HEAP8[(5251144)];
            var $conv193=(($146)&255);
            if ((($conv193)|0)==1) {
              var $162=HEAP32[((5251064)>>2)];
              var $163=HEAP32[((5251056)>>2)];
              _zlowercase($162, $163, 1);
            } else if ((($conv193)|0)==0) {
              var $147=HEAP32[((5251056)>>2)];
              var $cmp195=(($147)|0)==0;
              if ($cmp195) {
              } else {
                var $148=HEAP32[((5243648)>>2)];
                var $tobool199=(($148)|0)!=0;
                do {
                  if ($tobool199) {
                    var $149=HEAP32[((5251056)>>2)];
                    var $sub201=((($149)-(1))|0);
                    var $150=HEAP32[((5251064)>>2)];
                    var $arrayidx202=(($150+$sub201)|0);
                    var $151=HEAP8[($arrayidx202)];
                    var $idxprom203=(($151)&255);
                    var $arrayidx204=((5243932+$idxprom203)|0);
                    var $152=HEAP8[($arrayidx204)];
                    var $conv205=(($152)&255);
                    var $cmp206=(($conv205)|0)==1;
                    if (!($cmp206)) {
                      label = 1738;
                      break;
                    }
                    break;
                  } else {
                    label = 1738;
                  }
                } while(0);
                if (label == 1738) {
                  label = 0;
                  var $153=HEAP32[((5251064)>>2)];
                  var $154=HEAP32[((5251056)>>2)];
                  _zlowercase($153, $154, 1);
                }
              }
              var $155=HEAP32[((5251056)>>2)];
              var $156=HEAP32[((5251064)>>2)];
              var $arrayidx212=(($156+$155)|0);
              var $157=HEAP8[($arrayidx212)];
              var $conv213=(($157)&255);
              var $cmp214=(($conv213)|0)==58;
              if ($cmp214) {
                HEAP32[((5243648)>>2)]=1;
              } else {
                var $158=HEAP32[((5251056)>>2)];
                var $159=HEAP32[((5251064)>>2)];
                var $arrayidx218=(($159+$158)|0);
                var $160=HEAP8[($arrayidx218)];
                var $idxprom219=(($160)&255);
                var $arrayidx220=((5243932+$idxprom219)|0);
                var $161=HEAP8[($arrayidx220)];
                var $conv221=(($161)&255);
                var $cmp222=(($conv221)|0)!=1;
                if ($cmp222) {
                  HEAP32[((5243648)>>2)]=0;
                }
              }
            } else if ((($conv193)|0)==2) {
              var $164=HEAP32[((5251064)>>2)];
              var $165=HEAP32[((5251056)>>2)];
              _zuppercase($164, $165, 1);
            } else if ((($conv193)|0)==3) {
            } else {
              _caseconversionconfusion();
            }
          }
        }
      }
      var $166=HEAP32[((5251056)>>2)];
      var $add235=((($166)+(1))|0);
      HEAP32[((5251056)>>2)]=$add235;
    }
    var $167=HEAP32[((5243692)>>2)];
    _zcheckbracelevel($167);
    _addpoolbufandpush();
  }

  return;
}
_xchangecase["X"]=1;

function _xchrtoint() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=1;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 1);
    _zpushlitstk(0, 0);

    return;
  }
  var $3=HEAP32[((5243696)>>2)];
  var $add=((($3)+(1))|0);
  var $4=HEAP32[((5243488)>>2)];
  var $arrayidx=(($4+($add<<2))|0);
  var $5=HEAP32[(($arrayidx)>>2)];
  var $6=HEAP32[((5243696)>>2)];
  var $7=HEAP32[((5243488)>>2)];
  var $arrayidx2=(($7+($6<<2))|0);
  var $8=HEAP32[(($arrayidx2)>>2)];
  var $sub=((($5)-($8))|0);
  var $cmp3=(($sub)|0)!=1;
  if ($cmp3) {
    var $9=HEAP32[((5243908)>>2)];
    var $call=_fputc(34, $9);
    var $10=HEAP32[((5243524)>>2)];
    var $call6=_fputc(34, $10);
    var $11=HEAP32[((5243696)>>2)];
    _zprintapoolstr($11);
    var $12=HEAP32[((5243908)>>2)];
    var $call7=_fputs(((5261416)|0), $12);
    var $13=HEAP32[((5243524)>>2)];
    var $call8=_fputs(((5261416)|0), $13);
    _bstexwarnprint();
    _zpushlitstk(0, 0);
  } else {
    var $14=HEAP32[((5243696)>>2)];
    var $15=HEAP32[((5243488)>>2)];
    var $arrayidx10=(($15+($14<<2))|0);
    var $16=HEAP32[(($arrayidx10)>>2)];
    var $17=HEAP32[((5243496)>>2)];
    var $arrayidx11=(($17+$16)|0);
    var $18=HEAP8[($arrayidx11)];
    var $conv12=(($18)&255);
    _zpushlitstk($conv12, 0);
  }

  return;
}


function _xcite() {
  var label = 0;

  var $0=HEAP32[((5243876)>>2)];
  var $tobool=(($0)|0)!=0;
  if ($tobool) {
    var $1=HEAP32[((5251172)>>2)];
    var $2=HEAP32[((5251184)>>2)];
    var $arrayidx=(($2+($1<<2))|0);
    var $3=HEAP32[(($arrayidx)>>2)];
    _zpushlitstk($3, 1);

    return;
  } else {
    _bstcantmesswithentriesprint();

    return;
  }
}


function _xduplicate() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=1;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zpushlitstk($1, $2);
    var $3=HEAP32[((5243696)>>2)];
    var $4=HEAP8[(5243684)];
    _zpushlitstk($3, $4);

    return;
  }
  var $5=HEAP32[((5243920)>>2)];
  var $6=HEAP32[((5243924)>>2)];
  var $arrayidx=(($6+($5<<2))|0);
  var $7=HEAP32[(($arrayidx)>>2)];
  var $8=HEAP32[((5251164)>>2)];
  var $cmp2=(($7)|0) >= (($8)|0);
  if ($cmp2) {
    var $9=HEAP32[((5243492)>>2)];
    var $add=((($9)+(1))|0);
    HEAP32[((5243492)>>2)]=$add;
    var $10=HEAP32[((5243492)>>2)];
    var $11=HEAP32[((5243488)>>2)];
    var $arrayidx5=(($11+($10<<2))|0);
    var $12=HEAP32[(($arrayidx5)>>2)];
    HEAP32[((5243704)>>2)]=$12;
  }
  var $13=HEAP32[((5243920)>>2)];
  var $add6=((($13)+(1))|0);
  HEAP32[((5243920)>>2)]=$add6;
  var $14=HEAP32[((5243696)>>2)];
  var $15=HEAP32[((5251164)>>2)];
  var $cmp7=(($14)|0) < (($15)|0);
  if ($cmp7) {
    var $16=HEAP32[((5243696)>>2)];
    var $17=HEAP8[(5243684)];
    _zpushlitstk($16, $17);
  } else {
    while(1) {
      var $18=HEAP32[((5243704)>>2)];
      var $19=HEAP32[((5243696)>>2)];
      var $add11=((($19)+(1))|0);
      var $20=HEAP32[((5243488)>>2)];
      var $arrayidx12=(($20+($add11<<2))|0);
      var $21=HEAP32[(($arrayidx12)>>2)];
      var $22=HEAP32[((5243696)>>2)];
      var $23=HEAP32[((5243488)>>2)];
      var $arrayidx13=(($23+($22<<2))|0);
      var $24=HEAP32[(($arrayidx13)>>2)];
      var $sub=((($21)-($24))|0);
      var $add14=((($18)+($sub))|0);
      var $25=HEAP32[((5243700)>>2)];
      var $cmp15=(($add14)|0) > (($25)|0);
      if (!($cmp15)) {
        break;
      }
      _pooloverflow();
    }
    var $26=HEAP32[((5243696)>>2)];
    var $27=HEAP32[((5243488)>>2)];
    var $arrayidx17=(($27+($26<<2))|0);
    var $28=HEAP32[(($arrayidx17)>>2)];
    HEAP32[((5243544)>>2)]=$28;
    var $29=HEAP32[((5243696)>>2)];
    var $add18=((($29)+(1))|0);
    var $30=HEAP32[((5243488)>>2)];
    var $arrayidx19=(($30+($add18<<2))|0);
    var $31=HEAP32[(($arrayidx19)>>2)];
    HEAP32[((5243552)>>2)]=$31;
    while(1) {
      var $32=HEAP32[((5243544)>>2)];
      var $33=HEAP32[((5243552)>>2)];
      var $cmp21=(($32)|0) < (($33)|0);
      if (!($cmp21)) {
        break;
      }
      var $34=HEAP32[((5243544)>>2)];
      var $35=HEAP32[((5243496)>>2)];
      var $arrayidx24=(($35+$34)|0);
      var $36=HEAP8[($arrayidx24)];
      var $37=HEAP32[((5243704)>>2)];
      var $38=HEAP32[((5243496)>>2)];
      var $arrayidx25=(($38+$37)|0);
      HEAP8[($arrayidx25)]=$36;
      var $39=HEAP32[((5243704)>>2)];
      var $add26=((($39)+(1))|0);
      HEAP32[((5243704)>>2)]=$add26;
      var $40=HEAP32[((5243544)>>2)];
      var $add27=((($40)+(1))|0);
      HEAP32[((5243544)>>2)]=$add27;
    }
    var $call=_makestring();
    _zpushlitstk($call, 1);
  }

  return;
}
_xduplicate["X"]=1;

function _xempty() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  do {
    if ((($conv)|0)==4) {
      _zpushlitstk(0, 0);
    } else if ((($conv)|0)==3) {
      _zpushlitstk(1, 0);
    } else if ((($conv)|0)==1) {
      var $1=HEAP32[((5243696)>>2)];
      var $2=HEAP32[((5243488)>>2)];
      var $arrayidx=(($2+($1<<2))|0);
      var $3=HEAP32[(($arrayidx)>>2)];
      HEAP32[((5243544)>>2)]=$3;
      var $4=HEAP32[((5243696)>>2)];
      var $add=((($4)+(1))|0);
      var $5=HEAP32[((5243488)>>2)];
      var $arrayidx1=(($5+($add<<2))|0);
      var $6=HEAP32[(($arrayidx1)>>2)];
      HEAP32[((5243552)>>2)]=$6;
      while(1) {
        var $7=HEAP32[((5243544)>>2)];
        var $8=HEAP32[((5243552)>>2)];
        var $cmp=(($7)|0) < (($8)|0);
        if (!($cmp)) {
          label = 1797;
          break;
        }
        var $9=HEAP32[((5243544)>>2)];
        var $10=HEAP32[((5243496)>>2)];
        var $arrayidx3=(($10+$9)|0);
        var $11=HEAP8[($arrayidx3)];
        var $idxprom=(($11)&255);
        var $arrayidx4=((5243932+$idxprom)|0);
        var $12=HEAP8[($arrayidx4)];
        var $conv5=(($12)&255);
        var $cmp6=(($conv5)|0)!=1;
        if ($cmp6) {
          break;
        }
        var $13=HEAP32[((5243544)>>2)];
        var $add8=((($13)+(1))|0);
        HEAP32[((5243544)>>2)]=$add8;
      }
      if (label == 1797) {
        _zpushlitstk(1, 0);
        break;
      }
      _zpushlitstk(0, 0);

      return;
    } else {
      var $14=HEAP32[((5243696)>>2)];
      var $15=HEAP8[(5243684)];
      _zprintstklit($14, $15);
      var $16=HEAP32[((5243908)>>2)];
      var $call=_fputs(((5261328)|0), $16);
      var $17=HEAP32[((5243524)>>2)];
      var $call11=_fputs(((5261328)|0), $17);
      _bstexwarnprint();
      _zpushlitstk(0, 0);
    }
  } while(0);

  return;
}
_xempty["X"]=1;

function _xformatname() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  _zzpoplitstk(5243696, 5243684);
  _zzpoplitstk(5243692, 5243680);
  _zzpoplitstk(5243688, 5243676);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=1;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 1);
    var $3=HEAP32[((5243572)>>2)];
    _zpushlitstk($3, 1);
    STACKTOP = __stackBase__;
    return;
  }
  var $4=HEAP8[(5243680)];
  var $conv2=(($4)&255);
  var $cmp3=(($conv2)|0)!=0;
  if ($cmp3) {
    var $5=HEAP32[((5243692)>>2)];
    var $6=HEAP8[(5243680)];
    _zprintwrongstklit($5, $6, 0);
    var $7=HEAP32[((5243572)>>2)];
    _zpushlitstk($7, 1);
  } else {
    var $8=HEAP8[(5243676)];
    var $conv7=(($8)&255);
    var $cmp8=(($conv7)|0)!=1;
    if ($cmp8) {
      var $9=HEAP32[((5243688)>>2)];
      var $10=HEAP8[(5243676)];
      _zprintwrongstklit($9, $10, 1);
      var $11=HEAP32[((5243572)>>2)];
      _zpushlitstk($11, 1);
    } else {
      HEAP32[((5251060)>>2)]=0;
      var $12=HEAP32[((5243688)>>2)];
      _zaddbufpool($12);
      HEAP32[((5251056)>>2)]=0;
      HEAP32[((5243776)>>2)]=0;
      while(1) {
        var $13=HEAP32[((5243776)>>2)];
        var $14=HEAP32[((5243692)>>2)];
        var $cmp12=(($13)|0) < (($14)|0);
        if ($cmp12) {
          var $15=HEAP32[((5251056)>>2)];
          var $16=HEAP32[((5251060)>>2)];
          var $cmp14=(($15)|0) < (($16)|0);
          var $17 = $cmp14;
        } else {
          var $17 = 0;
        }
        var $17;
        if (!($17)) {
          break;
        }
        var $18=HEAP32[((5243776)>>2)];
        var $add=((($18)+(1))|0);
        HEAP32[((5243776)>>2)]=$add;
        var $19=HEAP32[((5251056)>>2)];
        HEAP32[((5251052)>>2)]=$19;
        var $20=HEAP32[((5243688)>>2)];
        _znamescanforand($20);
      }
      var $21=HEAP32[((5251056)>>2)];
      var $22=HEAP32[((5251060)>>2)];
      var $cmp16=(($21)|0) < (($22)|0);
      if ($cmp16) {
        var $23=HEAP32[((5251056)>>2)];
        var $sub=((($23)-(4))|0);
        HEAP32[((5251056)>>2)]=$sub;
      }
      var $24=HEAP32[((5243776)>>2)];
      var $25=HEAP32[((5243692)>>2)];
      var $cmp19=(($24)|0) < (($25)|0);
      if ($cmp19) {
        var $26=HEAP32[((5243692)>>2)];
        var $cmp22=(($26)|0)==1;
        if ($cmp22) {
          var $27=HEAP32[((5243908)>>2)];
          var $call=_fputs(((5261272)|0), $27);
          var $28=HEAP32[((5243524)>>2)];
          var $call25=_fputs(((5261272)|0), $28);
        } else {
          var $29=HEAP32[((5243908)>>2)];
          var $30=HEAP32[((5243692)>>2)];
          var $call27=_fprintf($29, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5261216)|0),HEAP32[(((tempInt)+(4))>>2)]=$30,HEAP32[(((tempInt)+(8))>>2)]=((5261180)|0),tempInt));
          var $31=HEAP32[((5243524)>>2)];
          var $32=HEAP32[((5243692)>>2)];
          var $call28=_fprintf($31, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5261216)|0),HEAP32[(((tempInt)+(4))>>2)]=$32,HEAP32[(((tempInt)+(8))>>2)]=((5261180)|0),tempInt));
        }
        var $33=HEAP32[((5243688)>>2)];
        _zprintapoolstr($33);
        var $34=HEAP32[((5243908)>>2)];
        var $call30=_fputc(34, $34);
        var $35=HEAP32[((5243524)>>2)];
        var $call31=_fputc(34, $35);
        _bstexwarnprint();
      }
      while(1) {
        var $36=HEAP32[((5251056)>>2)];
        var $37=HEAP32[((5251052)>>2)];
        var $cmp34=(($36)|0) > (($37)|0);
        if (!($cmp34)) {
          label = 1832;
          break;
        }
        var $38=HEAP32[((5251056)>>2)];
        var $sub37=((($38)-(1))|0);
        var $39=HEAP32[((5251064)>>2)];
        var $arrayidx=(($39+$sub37)|0);
        var $40=HEAP8[($arrayidx)];
        var $idxprom=(($40)&255);
        var $arrayidx38=((5243932+$idxprom)|0);
        var $41=HEAP8[($arrayidx38)];
        var $conv39=(($41)&255);
        if ((($conv39)|0)==1 | (($conv39)|0)==4) {
          var $42=HEAP32[((5251056)>>2)];
          var $sub40=((($42)-(1))|0);
          HEAP32[((5251056)>>2)]=$sub40;
        } else {
          var $43=HEAP32[((5251056)>>2)];
          var $sub41=((($43)-(1))|0);
          var $44=HEAP32[((5251064)>>2)];
          var $arrayidx42=(($44+$sub41)|0);
          var $45=HEAP8[($arrayidx42)];
          var $conv43=(($45)&255);
          var $cmp44=(($conv43)|0)==44;
          if (!($cmp44)) {
            label = 1829;
            break;
          }
          var $46=HEAP32[((5243908)>>2)];
          var $47=HEAP32[((5243692)>>2)];
          var $call47=_fprintf($46, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5261116)|0),HEAP32[(((tempInt)+(4))>>2)]=$47,HEAP32[(((tempInt)+(8))>>2)]=((5261068)|0),tempInt));
          var $48=HEAP32[((5243524)>>2)];
          var $49=HEAP32[((5243692)>>2)];
          var $call48=_fprintf($48, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5261116)|0),HEAP32[(((tempInt)+(4))>>2)]=$49,HEAP32[(((tempInt)+(8))>>2)]=((5261068)|0),tempInt));
          var $50=HEAP32[((5243688)>>2)];
          _zprintapoolstr($50);
          var $51=HEAP32[((5243908)>>2)];
          var $call49=_fputs(((5261028)|0), $51);
          var $52=HEAP32[((5243524)>>2)];
          var $call50=_fputs(((5261028)|0), $52);
          _bstexwarnprint();
          var $53=HEAP32[((5251056)>>2)];
          var $sub51=((($53)-(1))|0);
          HEAP32[((5251056)>>2)]=$sub51;
        }
      }
      if (label == 1829) {
      }
      else if (label == 1832) {
      }
      HEAP32[((5243844)>>2)]=0;
      HEAP32[((5243796)>>2)]=0;
      HEAP32[((5243760)>>2)]=0;
      HEAP32[((5243452)>>2)]=1;
      while(1) {
        var $54=HEAP32[((5251052)>>2)];
        var $55=HEAP32[((5251056)>>2)];
        var $cmp56=(($54)|0) < (($55)|0);
        if (!($cmp56)) {
          break;
        }
        var $56=HEAP32[((5251052)>>2)];
        var $57=HEAP32[((5251064)>>2)];
        var $arrayidx59=(($57+$56)|0);
        var $58=HEAP8[($arrayidx59)];
        var $conv60=(($58)&255);
        if ((($conv60)|0)==44) {
          var $59=HEAP32[((5243796)>>2)];
          var $cmp62=(($59)|0)==2;
          if ($cmp62) {
            var $60=HEAP32[((5243908)>>2)];
            var $61=HEAP32[((5243692)>>2)];
            var $call65=_fprintf($60, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5260996)|0),HEAP32[(((tempInt)+(4))>>2)]=$61,HEAP32[(((tempInt)+(8))>>2)]=((5260988)|0),tempInt));
            var $62=HEAP32[((5243524)>>2)];
            var $63=HEAP32[((5243692)>>2)];
            var $call66=_fprintf($62, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5260996)|0),HEAP32[(((tempInt)+(4))>>2)]=$63,HEAP32[(((tempInt)+(8))>>2)]=((5260988)|0),tempInt));
            var $64=HEAP32[((5243688)>>2)];
            _zprintapoolstr($64);
            var $65=HEAP32[((5243908)>>2)];
            var $call67=_fputc(34, $65);
            var $66=HEAP32[((5243524)>>2)];
            var $call68=_fputc(34, $66);
            _bstexwarnprint();
          } else {
            var $67=HEAP32[((5243796)>>2)];
            var $add70=((($67)+(1))|0);
            HEAP32[((5243796)>>2)]=$add70;
            var $68=HEAP32[((5243796)>>2)];
            var $cmp71=(($68)|0)==1;
            if ($cmp71) {
              var $69=HEAP32[((5243760)>>2)];
              HEAP32[((5251160)>>2)]=$69;
            } else {
              var $70=HEAP32[((5243760)>>2)];
              HEAP32[((5251156)>>2)]=$70;
            }
            var $71=HEAP32[((5243760)>>2)];
            var $72=HEAP32[((5243820)>>2)];
            var $arrayidx76=(($72+$71)|0);
            HEAP8[($arrayidx76)]=44;
          }
          var $73=HEAP32[((5251052)>>2)];
          var $add78=((($73)+(1))|0);
          HEAP32[((5251052)>>2)]=$add78;
          HEAP32[((5243452)>>2)]=1;
        } else if ((($conv60)|0)==123) {
          var $74=HEAP32[((5252304)>>2)];
          var $add80=((($74)+(1))|0);
          HEAP32[((5252304)>>2)]=$add80;
          var $75=HEAP32[((5243452)>>2)];
          var $tobool=(($75)|0)!=0;
          if ($tobool) {
            var $76=HEAP32[((5243844)>>2)];
            var $77=HEAP32[((5243760)>>2)];
            var $78=HEAP32[((5243816)>>2)];
            var $arrayidx82=(($78+($77<<2))|0);
            HEAP32[(($arrayidx82)>>2)]=$76;
            var $79=HEAP32[((5243760)>>2)];
            var $add83=((($79)+(1))|0);
            HEAP32[((5243760)>>2)]=$add83;
          }
          var $80=HEAP32[((5251052)>>2)];
          var $81=HEAP32[((5251064)>>2)];
          var $arrayidx85=(($81+$80)|0);
          var $82=HEAP8[($arrayidx85)];
          var $83=HEAP32[((5243844)>>2)];
          var $84=HEAP32[((5243484)>>2)];
          var $arrayidx86=(($84+$83)|0);
          HEAP8[($arrayidx86)]=$82;
          var $85=HEAP32[((5243844)>>2)];
          var $add87=((($85)+(1))|0);
          HEAP32[((5243844)>>2)]=$add87;
          var $86=HEAP32[((5251052)>>2)];
          var $add88=((($86)+(1))|0);
          HEAP32[((5251052)>>2)]=$add88;
          while(1) {
            var $87=HEAP32[((5252304)>>2)];
            var $cmp90=(($87)|0) > 0;
            if ($cmp90) {
              var $88=HEAP32[((5251052)>>2)];
              var $89=HEAP32[((5251056)>>2)];
              var $cmp93=(($88)|0) < (($89)|0);
              var $90 = $cmp93;
            } else {
              var $90 = 0;
            }
            var $90;
            if (!($90)) {
              break;
            }
            var $91=HEAP32[((5251052)>>2)];
            var $92=HEAP32[((5251064)>>2)];
            var $arrayidx97=(($92+$91)|0);
            var $93=HEAP8[($arrayidx97)];
            var $conv98=(($93)&255);
            var $cmp99=(($conv98)|0)==125;
            if ($cmp99) {
              var $94=HEAP32[((5252304)>>2)];
              var $sub102=((($94)-(1))|0);
              HEAP32[((5252304)>>2)]=$sub102;
            } else {
              var $95=HEAP32[((5251052)>>2)];
              var $96=HEAP32[((5251064)>>2)];
              var $arrayidx104=(($96+$95)|0);
              var $97=HEAP8[($arrayidx104)];
              var $conv105=(($97)&255);
              var $cmp106=(($conv105)|0)==123;
              if ($cmp106) {
                var $98=HEAP32[((5252304)>>2)];
                var $add109=((($98)+(1))|0);
                HEAP32[((5252304)>>2)]=$add109;
              }
            }
            var $99=HEAP32[((5251052)>>2)];
            var $100=HEAP32[((5251064)>>2)];
            var $arrayidx112=(($100+$99)|0);
            var $101=HEAP8[($arrayidx112)];
            var $102=HEAP32[((5243844)>>2)];
            var $103=HEAP32[((5243484)>>2)];
            var $arrayidx113=(($103+$102)|0);
            HEAP8[($arrayidx113)]=$101;
            var $104=HEAP32[((5243844)>>2)];
            var $add114=((($104)+(1))|0);
            HEAP32[((5243844)>>2)]=$add114;
            var $105=HEAP32[((5251052)>>2)];
            var $add115=((($105)+(1))|0);
            HEAP32[((5251052)>>2)]=$add115;
          }
          HEAP32[((5243452)>>2)]=0;
        } else if ((($conv60)|0)==125) {
          var $106=HEAP32[((5243452)>>2)];
          var $tobool118=(($106)|0)!=0;
          if ($tobool118) {
            var $107=HEAP32[((5243844)>>2)];
            var $108=HEAP32[((5243760)>>2)];
            var $109=HEAP32[((5243816)>>2)];
            var $arrayidx120=(($109+($108<<2))|0);
            HEAP32[(($arrayidx120)>>2)]=$107;
            var $110=HEAP32[((5243760)>>2)];
            var $add121=((($110)+(1))|0);
            HEAP32[((5243760)>>2)]=$add121;
          }
          var $111=HEAP32[((5243908)>>2)];
          var $112=HEAP32[((5243692)>>2)];
          var $call123=_fprintf($111, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5261116)|0),HEAP32[(((tempInt)+(4))>>2)]=$112,HEAP32[(((tempInt)+(8))>>2)]=((5260988)|0),tempInt));
          var $113=HEAP32[((5243524)>>2)];
          var $114=HEAP32[((5243692)>>2)];
          var $call124=_fprintf($113, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5261116)|0),HEAP32[(((tempInt)+(4))>>2)]=$114,HEAP32[(((tempInt)+(8))>>2)]=((5260988)|0),tempInt));
          var $115=HEAP32[((5243688)>>2)];
          _zprintapoolstr($115);
          var $116=HEAP32[((5243908)>>2)];
          var $call125=_fputs(((5260964)|0), $116);
          var $117=HEAP32[((5243524)>>2)];
          var $call126=_fputs(((5260964)|0), $117);
          _bstexwarnprint();
          var $118=HEAP32[((5251052)>>2)];
          var $add127=((($118)+(1))|0);
          HEAP32[((5251052)>>2)]=$add127;
          HEAP32[((5243452)>>2)]=0;
        } else {
          var $119=HEAP32[((5251052)>>2)];
          var $120=HEAP32[((5251064)>>2)];
          var $arrayidx129=(($120+$119)|0);
          var $121=HEAP8[($arrayidx129)];
          var $idxprom130=(($121)&255);
          var $arrayidx131=((5243932+$idxprom130)|0);
          var $122=HEAP8[($arrayidx131)];
          var $conv132=(($122)&255);
          if ((($conv132)|0)==1) {
            var $123=HEAP32[((5243452)>>2)];
            var $tobool134=(($123)|0)!=0;
            if (!($tobool134)) {
              var $124=HEAP32[((5243760)>>2)];
              var $125=HEAP32[((5243820)>>2)];
              var $arrayidx136=(($125+$124)|0);
              HEAP8[($arrayidx136)]=32;
            }
            var $126=HEAP32[((5251052)>>2)];
            var $add138=((($126)+(1))|0);
            HEAP32[((5251052)>>2)]=$add138;
            HEAP32[((5243452)>>2)]=1;
          } else if ((($conv132)|0)==4) {
            var $127=HEAP32[((5243452)>>2)];
            var $tobool140=(($127)|0)!=0;
            if (!($tobool140)) {
              var $128=HEAP32[((5251052)>>2)];
              var $129=HEAP32[((5251064)>>2)];
              var $arrayidx142=(($129+$128)|0);
              var $130=HEAP8[($arrayidx142)];
              var $131=HEAP32[((5243760)>>2)];
              var $132=HEAP32[((5243820)>>2)];
              var $arrayidx143=(($132+$131)|0);
              HEAP8[($arrayidx143)]=$130;
            }
            var $133=HEAP32[((5251052)>>2)];
            var $add145=((($133)+(1))|0);
            HEAP32[((5251052)>>2)]=$add145;
            HEAP32[((5243452)>>2)]=1;
          } else {
            var $134=HEAP32[((5243452)>>2)];
            var $tobool147=(($134)|0)!=0;
            if ($tobool147) {
              var $135=HEAP32[((5243844)>>2)];
              var $136=HEAP32[((5243760)>>2)];
              var $137=HEAP32[((5243816)>>2)];
              var $arrayidx149=(($137+($136<<2))|0);
              HEAP32[(($arrayidx149)>>2)]=$135;
              var $138=HEAP32[((5243760)>>2)];
              var $add150=((($138)+(1))|0);
              HEAP32[((5243760)>>2)]=$add150;
            }
            var $139=HEAP32[((5251052)>>2)];
            var $140=HEAP32[((5251064)>>2)];
            var $arrayidx152=(($140+$139)|0);
            var $141=HEAP8[($arrayidx152)];
            var $142=HEAP32[((5243844)>>2)];
            var $143=HEAP32[((5243484)>>2)];
            var $arrayidx153=(($143+$142)|0);
            HEAP8[($arrayidx153)]=$141;
            var $144=HEAP32[((5243844)>>2)];
            var $add154=((($144)+(1))|0);
            HEAP32[((5243844)>>2)]=$add154;
            var $145=HEAP32[((5251052)>>2)];
            var $add155=((($145)+(1))|0);
            HEAP32[((5251052)>>2)]=$add155;
            HEAP32[((5243452)>>2)]=0;
          }
        }
      }
      var $146=HEAP32[((5243844)>>2)];
      var $147=HEAP32[((5243760)>>2)];
      var $148=HEAP32[((5243816)>>2)];
      var $arrayidx159=(($148+($147<<2))|0);
      HEAP32[(($arrayidx159)>>2)]=$146;
      var $149=HEAP32[((5243796)>>2)];
      var $cmp160=(($149)|0)==0;
      if ($cmp160) {
        HEAP32[((5248812)>>2)]=0;
        var $150=HEAP32[((5243760)>>2)];
        HEAP32[((5244200)>>2)]=$150;
        var $151=HEAP32[((5244200)>>2)];
        HEAP32[((5248392)>>2)]=$151;
        HEAP32[((5243408)>>2)]=0;
        while(1) {
          var $152=HEAP32[((5243408)>>2)];
          var $153=HEAP32[((5244200)>>2)];
          var $sub164=((($153)-(1))|0);
          var $cmp165=(($152)|0) < (($sub164)|0);
          if (!($cmp165)) {
            label = 1877;
            break;
          }
          var $154=HEAP32[((5243408)>>2)];
          var $155=HEAP32[((5243816)>>2)];
          var $arrayidx168=(($155+($154<<2))|0);
          var $156=HEAP32[(($arrayidx168)>>2)];
          HEAP32[((5243844)>>2)]=$156;
          var $157=HEAP32[((5243408)>>2)];
          var $add169=((($157)+(1))|0);
          var $158=HEAP32[((5243816)>>2)];
          var $arrayidx170=(($158+($add169<<2))|0);
          var $159=HEAP32[(($arrayidx170)>>2)];
          HEAP32[((5243840)>>2)]=$159;
          var $call171=_vontokenfound();
          var $tobool172=(($call171)|0)!=0;
          if ($tobool172) {
            label = 1875;
            break;
          }
          var $160=HEAP32[((5243408)>>2)];
          var $add175=((($160)+(1))|0);
          HEAP32[((5243408)>>2)]=$add175;
        }
        if (label == 1875) {
          _vonnameendsandlastnamestartsstuff();
        }
        else if (label == 1877) {
          while(1) {
            var $161=HEAP32[((5243408)>>2)];
            var $cmp178=(($161)|0) > 0;
            if (!($cmp178)) {
              label = 1883;
              break;
            }
            var $162=HEAP32[((5243408)>>2)];
            var $163=HEAP32[((5243820)>>2)];
            var $arrayidx181=(($163+$162)|0);
            var $164=HEAP8[($arrayidx181)];
            var $idxprom182=(($164)&255);
            var $arrayidx183=((5243932+$idxprom182)|0);
            var $165=HEAP8[($arrayidx183)];
            var $conv184=(($165)&255);
            var $cmp185=(($conv184)|0)!=4;
            if ($cmp185) {
              label = 1881;
              break;
            }
            var $166=HEAP32[((5243408)>>2)];
            var $167=HEAP32[((5243820)>>2)];
            var $arrayidx187=(($167+$166)|0);
            var $168=HEAP8[($arrayidx187)];
            var $conv188=(($168)&255);
            var $cmp189=(($conv188)|0)==126;
            if ($cmp189) {
              label = 1881;
              break;
            }
            var $169=HEAP32[((5243408)>>2)];
            var $sub193=((($169)-(1))|0);
            HEAP32[((5243408)>>2)]=$sub193;
          }
          if (label == 1881) {
          }
          else if (label == 1883) {
          }
          var $170=HEAP32[((5243408)>>2)];
          HEAP32[((5243412)>>2)]=$170;
        }
        var $171=HEAP32[((5243408)>>2)];
        HEAP32[((5248816)>>2)]=$171;
      } else {
        var $172=HEAP32[((5243796)>>2)];
        var $cmp196=(($172)|0)==1;
        if ($cmp196) {
          HEAP32[((5243408)>>2)]=0;
          var $173=HEAP32[((5251160)>>2)];
          HEAP32[((5244200)>>2)]=$173;
          var $174=HEAP32[((5244200)>>2)];
          HEAP32[((5248392)>>2)]=$174;
          var $175=HEAP32[((5248392)>>2)];
          HEAP32[((5248812)>>2)]=$175;
          var $176=HEAP32[((5243760)>>2)];
          HEAP32[((5248816)>>2)]=$176;
          _vonnameendsandlastnamestartsstuff();
        } else {
          var $177=HEAP32[((5243796)>>2)];
          var $cmp200=(($177)|0)==2;
          if (!($cmp200)) {
            var $182=HEAP32[((5243908)>>2)];
            var $call204=_fputs(((5260928)|0), $182);
            var $183=HEAP32[((5243524)>>2)];
            var $call205=_fputs(((5260928)|0), $183);
            _printconfusion();
            _longjmp(((5248396)|0), 1);
            throw "Reached an unreachable!"
          }
          HEAP32[((5243408)>>2)]=0;
          var $178=HEAP32[((5251160)>>2)];
          HEAP32[((5244200)>>2)]=$178;
          var $179=HEAP32[((5251156)>>2)];
          HEAP32[((5248392)>>2)]=$179;
          var $180=HEAP32[((5248392)>>2)];
          HEAP32[((5248812)>>2)]=$180;
          var $181=HEAP32[((5243760)>>2)];
          HEAP32[((5248816)>>2)]=$181;
          _vonnameendsandlastnamestartsstuff();
        }
      }
      HEAP32[((5251060)>>2)]=0;
      var $184=HEAP32[((5243696)>>2)];
      _zaddbufpool($184);
      _figureouttheformattedname();
      _addpoolbufandpush();
    }
  }
  STACKTOP = __stackBase__;
  return;
}
_xformatname["X"]=1;

function _xinttochr() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  _zzpoplitstk(5243696, 5243684);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=0;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 0);
    var $3=HEAP32[((5243572)>>2)];
    _zpushlitstk($3, 1);
    STACKTOP = __stackBase__;
    return;
  }
  var $4=HEAP32[((5243696)>>2)];
  var $cmp2=(($4)|0) < 0;
  do {
    if ($cmp2) {
      label = 1903;
    } else {
      var $5=HEAP32[((5243696)>>2)];
      var $cmp4=(($5)|0) > 127;
      if ($cmp4) {
        label = 1903;
        break;
      }
      while(1) {
        var $11=HEAP32[((5243704)>>2)];
        var $add=((($11)+(1))|0);
        var $12=HEAP32[((5243700)>>2)];
        var $cmp9=(($add)|0) > (($12)|0);
        if (!($cmp9)) {
          break;
        }
        _pooloverflow();
      }
      var $13=HEAP32[((5243696)>>2)];
      var $conv11=(($13) & 255);
      var $14=HEAP32[((5243704)>>2)];
      var $15=HEAP32[((5243496)>>2)];
      var $arrayidx=(($15+$14)|0);
      HEAP8[($arrayidx)]=$conv11;
      var $16=HEAP32[((5243704)>>2)];
      var $add12=((($16)+(1))|0);
      HEAP32[((5243704)>>2)]=$add12;
      var $call13=_makestring();
      _zpushlitstk($call13, 1);
      break;
    }
  } while(0);
  if (label == 1903) {
    var $6=HEAP32[((5243908)>>2)];
    var $7=HEAP32[((5243696)>>2)];
    var $call=_fprintf($6, ((5253272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$7,HEAP32[(((tempInt)+(4))>>2)]=((5260908)|0),tempInt));
    var $8=HEAP32[((5243524)>>2)];
    var $9=HEAP32[((5243696)>>2)];
    var $call7=_fprintf($8, ((5253272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$9,HEAP32[(((tempInt)+(4))>>2)]=((5260908)|0),tempInt));
    _bstexwarnprint();
    var $10=HEAP32[((5243572)>>2)];
    _zpushlitstk($10, 1);
  }
  STACKTOP = __stackBase__;
  return;
}


function _xinttostr() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=0;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 0);
    var $3=HEAP32[((5243572)>>2)];
    _zpushlitstk($3, 1);

    return;
  } else {
    var $4=HEAP32[((5243696)>>2)];
    var $5=HEAP32[((5251064)>>2)];
    _zzinttoASCII($4, $5, 0, 5251060);
    _addpoolbufandpush();

    return;
  }
}


function _xmissing() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  var $0=HEAP32[((5243876)>>2)];
  var $tobool=(($0)|0)!=0;
  if (!($tobool)) {
    _bstcantmesswithentriesprint();

    return;
  }
  var $1=HEAP8[(5243684)];
  var $conv=(($1)&255);
  var $cmp=(($conv)|0)!=1;
  do {
    if ($cmp) {
      var $2=HEAP8[(5243684)];
      var $conv2=(($2)&255);
      var $cmp3=(($conv2)|0)!=3;
      if (!($cmp3)) {
        label = 1925;
        break;
      }
      var $3=HEAP8[(5243684)];
      var $conv6=(($3)&255);
      var $cmp7=(($conv6)|0)!=4;
      if ($cmp7) {
        var $4=HEAP32[((5243696)>>2)];
        var $5=HEAP8[(5243684)];
        _zprintstklit($4, $5);
        var $6=HEAP32[((5243908)>>2)];
        var $call=_fputs(((5261328)|0), $6);
        var $7=HEAP32[((5243524)>>2)];
        var $call10=_fputs(((5261328)|0), $7);
        _bstexwarnprint();
      }
      _zpushlitstk(0, 0);
      break;
    } else {
      label = 1925;
    }
  } while(0);
  if (label == 1925) {
    var $8=HEAP8[(5243684)];
    var $conv12=(($8)&255);
    var $cmp13=(($conv12)|0)==3;
    if ($cmp13) {
      _zpushlitstk(1, 0);
    } else {
      _zpushlitstk(0, 0);
    }
  }

  return;
}


function _xnumnames() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=1;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 1);
    _zpushlitstk(0, 0);

    return;
  }
  HEAP32[((5251060)>>2)]=0;
  var $3=HEAP32[((5243696)>>2)];
  _zaddbufpool($3);
  HEAP32[((5251056)>>2)]=0;
  HEAP32[((5243776)>>2)]=0;
  while(1) {
    var $4=HEAP32[((5251056)>>2)];
    var $5=HEAP32[((5251060)>>2)];
    var $cmp2=(($4)|0) < (($5)|0);
    if (!($cmp2)) {
      break;
    }
    var $6=HEAP32[((5243696)>>2)];
    _znamescanforand($6);
    var $7=HEAP32[((5243776)>>2)];
    var $add=((($7)+(1))|0);
    HEAP32[((5243776)>>2)]=$add;
  }
  var $8=HEAP32[((5243776)>>2)];
  _zpushlitstk($8, 0);

  return;
}


function _xpreamble() {
  var label = 0;

  HEAP32[((5251060)>>2)]=0;
  HEAP32[((5243660)>>2)]=0;
  while(1) {
    var $0=HEAP32[((5243660)>>2)];
    var $1=HEAP32[((5243772)>>2)];
    var $cmp=(($0)|0) < (($1)|0);
    if (!($cmp)) {
      break;
    }
    var $2=HEAP32[((5243660)>>2)];
    var $3=HEAP32[((5243540)>>2)];
    var $arrayidx=(($3+($2<<2))|0);
    var $4=HEAP32[(($arrayidx)>>2)];
    _zaddbufpool($4);
    var $5=HEAP32[((5243660)>>2)];
    var $add=((($5)+(1))|0);
    HEAP32[((5243660)>>2)]=$add;
  }
  _addpoolbufandpush();

  return;
}


function _xpurify() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=1;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 1);
    var $3=HEAP32[((5243572)>>2)];
    _zpushlitstk($3, 1);

    return;
  }
  HEAP32[((5251060)>>2)]=0;
  var $4=HEAP32[((5243696)>>2)];
  _zaddbufpool($4);
  HEAP32[((5252304)>>2)]=0;
  HEAP32[((5251052)>>2)]=0;
  HEAP32[((5251056)>>2)]=0;
  while(1) {
    var $5=HEAP32[((5251056)>>2)];
    var $6=HEAP32[((5251060)>>2)];
    var $cmp2=(($5)|0) < (($6)|0);
    if (!($cmp2)) {
      break;
    }
    var $7=HEAP32[((5251056)>>2)];
    var $8=HEAP32[((5251064)>>2)];
    var $arrayidx=(($8+$7)|0);
    var $9=HEAP8[($arrayidx)];
    var $idxprom=(($9)&255);
    var $arrayidx4=((5243932+$idxprom)|0);
    var $10=HEAP8[($arrayidx4)];
    var $conv5=(($10)&255);
    if ((($conv5)|0)==2 | (($conv5)|0)==3) {
      var $14=HEAP32[((5251056)>>2)];
      var $15=HEAP32[((5251064)>>2)];
      var $arrayidx8=(($15+$14)|0);
      var $16=HEAP8[($arrayidx8)];
      var $17=HEAP32[((5251052)>>2)];
      var $18=HEAP32[((5251064)>>2)];
      var $arrayidx9=(($18+$17)|0);
      HEAP8[($arrayidx9)]=$16;
      var $19=HEAP32[((5251052)>>2)];
      var $add10=((($19)+(1))|0);
      HEAP32[((5251052)>>2)]=$add10;
    } else if ((($conv5)|0)==1 | (($conv5)|0)==4) {
      var $11=HEAP32[((5251052)>>2)];
      var $12=HEAP32[((5251064)>>2)];
      var $arrayidx6=(($12+$11)|0);
      HEAP8[($arrayidx6)]=32;
      var $13=HEAP32[((5251052)>>2)];
      var $add=((($13)+(1))|0);
      HEAP32[((5251052)>>2)]=$add;
    } else {
      var $20=HEAP32[((5251056)>>2)];
      var $21=HEAP32[((5251064)>>2)];
      var $arrayidx11=(($21+$20)|0);
      var $22=HEAP8[($arrayidx11)];
      var $conv12=(($22)&255);
      var $cmp13=(($conv12)|0)==123;
      if ($cmp13) {
        var $23=HEAP32[((5252304)>>2)];
        var $add16=((($23)+(1))|0);
        HEAP32[((5252304)>>2)]=$add16;
        var $24=HEAP32[((5252304)>>2)];
        var $cmp17=(($24)|0)==1;
        do {
          if ($cmp17) {
            var $25=HEAP32[((5251056)>>2)];
            var $add19=((($25)+(1))|0);
            var $26=HEAP32[((5251060)>>2)];
            var $cmp20=(($add19)|0) < (($26)|0);
            if (!($cmp20)) {
              break;
            }
            var $27=HEAP32[((5251056)>>2)];
            var $add23=((($27)+(1))|0);
            var $28=HEAP32[((5251064)>>2)];
            var $arrayidx24=(($28+$add23)|0);
            var $29=HEAP8[($arrayidx24)];
            var $conv25=(($29)&255);
            var $cmp26=(($conv25)|0)==92;
            if ($cmp26) {
              var $30=HEAP32[((5251056)>>2)];
              var $add29=((($30)+(1))|0);
              HEAP32[((5251056)>>2)]=$add29;
              while(1) {
                var $31=HEAP32[((5251056)>>2)];
                var $32=HEAP32[((5251060)>>2)];
                var $cmp31=(($31)|0) < (($32)|0);
                if ($cmp31) {
                  var $33=HEAP32[((5252304)>>2)];
                  var $cmp33=(($33)|0) > 0;
                  var $34 = $cmp33;
                } else {
                  var $34 = 0;
                }
                var $34;
                if (!($34)) {
                  break;
                }
                var $35=HEAP32[((5251056)>>2)];
                var $add36=((($35)+(1))|0);
                HEAP32[((5251056)>>2)]=$add36;
                var $36=HEAP32[((5251056)>>2)];
                HEAP32[((5251048)>>2)]=$36;
                while(1) {
                  var $37=HEAP32[((5251056)>>2)];
                  var $38=HEAP32[((5251060)>>2)];
                  var $cmp38=(($37)|0) < (($38)|0);
                  if ($cmp38) {
                    var $39=HEAP32[((5251056)>>2)];
                    var $40=HEAP32[((5251064)>>2)];
                    var $arrayidx41=(($40+$39)|0);
                    var $41=HEAP8[($arrayidx41)];
                    var $idxprom42=(($41)&255);
                    var $arrayidx43=((5243932+$idxprom42)|0);
                    var $42=HEAP8[($arrayidx43)];
                    var $conv44=(($42)&255);
                    var $cmp45=(($conv44)|0)==2;
                    var $43 = $cmp45;
                  } else {
                    var $43 = 0;
                  }
                  var $43;
                  if (!($43)) {
                    break;
                  }
                  var $44=HEAP32[((5251056)>>2)];
                  var $add49=((($44)+(1))|0);
                  HEAP32[((5251056)>>2)]=$add49;
                }
                var $45=HEAP32[((5251064)>>2)];
                var $46=HEAP32[((5251048)>>2)];
                var $47=HEAP32[((5251056)>>2)];
                var $48=HEAP32[((5251048)>>2)];
                var $sub=((($47)-($48))|0);
                var $call=_zstrlookup($45, $46, $sub, 14, 0);
                HEAP32[((5251148)>>2)]=$call;
                var $49=HEAP32[((5248776)>>2)];
                var $tobool=(($49)|0)!=0;
                if ($tobool) {
                  var $50=HEAP32[((5251048)>>2)];
                  var $51=HEAP32[((5251064)>>2)];
                  var $arrayidx51=(($51+$50)|0);
                  var $52=HEAP8[($arrayidx51)];
                  var $53=HEAP32[((5251052)>>2)];
                  var $54=HEAP32[((5251064)>>2)];
                  var $arrayidx52=(($54+$53)|0);
                  HEAP8[($arrayidx52)]=$52;
                  var $55=HEAP32[((5251052)>>2)];
                  var $add53=((($55)+(1))|0);
                  HEAP32[((5251052)>>2)]=$add53;
                  var $56=HEAP32[((5251148)>>2)];
                  var $57=HEAP32[((5248484)>>2)];
                  var $arrayidx54=(($57+($56<<2))|0);
                  var $58=HEAP32[(($arrayidx54)>>2)];
                  if ((($58)|0)==2 | (($58)|0)==3 | (($58)|0)==4 | (($58)|0)==5 | (($58)|0)==12) {
                    var $59=HEAP32[((5251048)>>2)];
                    var $add56=((($59)+(1))|0);
                    var $60=HEAP32[((5251064)>>2)];
                    var $arrayidx57=(($60+$add56)|0);
                    var $61=HEAP8[($arrayidx57)];
                    var $62=HEAP32[((5251052)>>2)];
                    var $63=HEAP32[((5251064)>>2)];
                    var $arrayidx58=(($63+$62)|0);
                    HEAP8[($arrayidx58)]=$61;
                    var $64=HEAP32[((5251052)>>2)];
                    var $add59=((($64)+(1))|0);
                    HEAP32[((5251052)>>2)]=$add59;
                  } else {
                  }
                }
                while(1) {
                  var $65=HEAP32[((5251056)>>2)];
                  var $66=HEAP32[((5251060)>>2)];
                  var $cmp62=(($65)|0) < (($66)|0);
                  do {
                    if ($cmp62) {
                      var $67=HEAP32[((5252304)>>2)];
                      var $cmp65=(($67)|0) > 0;
                      if (!($cmp65)) {
                        var $71 = 0;
                        break;
                      }
                      var $68=HEAP32[((5251056)>>2)];
                      var $69=HEAP32[((5251064)>>2)];
                      var $arrayidx68=(($69+$68)|0);
                      var $70=HEAP8[($arrayidx68)];
                      var $conv69=(($70)&255);
                      var $cmp70=(($conv69)|0)!=92;
                      var $71 = $cmp70;
                    } else {
                      var $71 = 0;
                    }
                  } while(0);
                  var $71;
                  if (!($71)) {
                    break;
                  }
                  var $72=HEAP32[((5251056)>>2)];
                  var $73=HEAP32[((5251064)>>2)];
                  var $arrayidx74=(($73+$72)|0);
                  var $74=HEAP8[($arrayidx74)];
                  var $idxprom75=(($74)&255);
                  var $arrayidx76=((5243932+$idxprom75)|0);
                  var $75=HEAP8[($arrayidx76)];
                  var $conv77=(($75)&255);
                  if ((($conv77)|0)==2 | (($conv77)|0)==3) {
                    var $76=HEAP32[((5251056)>>2)];
                    var $77=HEAP32[((5251064)>>2)];
                    var $arrayidx79=(($77+$76)|0);
                    var $78=HEAP8[($arrayidx79)];
                    var $79=HEAP32[((5251052)>>2)];
                    var $80=HEAP32[((5251064)>>2)];
                    var $arrayidx80=(($80+$79)|0);
                    HEAP8[($arrayidx80)]=$78;
                    var $81=HEAP32[((5251052)>>2)];
                    var $add81=((($81)+(1))|0);
                    HEAP32[((5251052)>>2)]=$add81;
                  } else {
                    var $82=HEAP32[((5251056)>>2)];
                    var $83=HEAP32[((5251064)>>2)];
                    var $arrayidx83=(($83+$82)|0);
                    var $84=HEAP8[($arrayidx83)];
                    var $conv84=(($84)&255);
                    var $cmp85=(($conv84)|0)==125;
                    if ($cmp85) {
                      var $85=HEAP32[((5252304)>>2)];
                      var $sub88=((($85)-(1))|0);
                      HEAP32[((5252304)>>2)]=$sub88;
                    } else {
                      var $86=HEAP32[((5251056)>>2)];
                      var $87=HEAP32[((5251064)>>2)];
                      var $arrayidx90=(($87+$86)|0);
                      var $88=HEAP8[($arrayidx90)];
                      var $conv91=(($88)&255);
                      var $cmp92=(($conv91)|0)==123;
                      if ($cmp92) {
                        var $89=HEAP32[((5252304)>>2)];
                        var $add95=((($89)+(1))|0);
                        HEAP32[((5252304)>>2)]=$add95;
                      }
                    }
                  }
                  var $90=HEAP32[((5251056)>>2)];
                  var $add99=((($90)+(1))|0);
                  HEAP32[((5251056)>>2)]=$add99;
                }
              }
              var $91=HEAP32[((5251056)>>2)];
              var $sub102=((($91)-(1))|0);
              HEAP32[((5251056)>>2)]=$sub102;
            }
          }
        } while(0);
      } else {
        var $92=HEAP32[((5251056)>>2)];
        var $93=HEAP32[((5251064)>>2)];
        var $arrayidx106=(($93+$92)|0);
        var $94=HEAP8[($arrayidx106)];
        var $conv107=(($94)&255);
        var $cmp108=(($conv107)|0)==125;
        if ($cmp108) {
          var $95=HEAP32[((5252304)>>2)];
          var $cmp111=(($95)|0) > 0;
          if ($cmp111) {
            var $96=HEAP32[((5252304)>>2)];
            var $sub114=((($96)-(1))|0);
            HEAP32[((5252304)>>2)]=$sub114;
          }
        }
      }
    }
    var $97=HEAP32[((5251056)>>2)];
    var $add119=((($97)+(1))|0);
    HEAP32[((5251056)>>2)]=$add119;
  }
  var $98=HEAP32[((5251052)>>2)];
  HEAP32[((5251060)>>2)]=$98;
  _addpoolbufandpush();

  return;
}
_xpurify["X"]=1;

function _xquote() {
  var label = 0;

  while(1) {
    var $0=HEAP32[((5243704)>>2)];
    var $add=((($0)+(1))|0);
    var $1=HEAP32[((5243700)>>2)];
    var $cmp=(($add)|0) > (($1)|0);
    if (!($cmp)) {
      break;
    }
    _pooloverflow();
  }
  var $2=HEAP32[((5243704)>>2)];
  var $3=HEAP32[((5243496)>>2)];
  var $arrayidx=(($3+$2)|0);
  HEAP8[($arrayidx)]=34;
  var $4=HEAP32[((5243704)>>2)];
  var $add1=((($4)+(1))|0);
  HEAP32[((5243704)>>2)]=$add1;
  var $call=_makestring();
  _zpushlitstk($call, 1);

  return;
}


function _xsubstring() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  _zzpoplitstk(5243692, 5243680);
  _zzpoplitstk(5243688, 5243676);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=0;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 0);
    var $3=HEAP32[((5243572)>>2)];
    _zpushlitstk($3, 1);
  } else {
    var $4=HEAP8[(5243680)];
    var $conv2=(($4)&255);
    var $cmp3=(($conv2)|0)!=0;
    if ($cmp3) {
      var $5=HEAP32[((5243692)>>2)];
      var $6=HEAP8[(5243680)];
      _zprintwrongstklit($5, $6, 0);
      var $7=HEAP32[((5243572)>>2)];
      _zpushlitstk($7, 1);
    } else {
      var $8=HEAP8[(5243676)];
      var $conv7=(($8)&255);
      var $cmp8=(($conv7)|0)!=1;
      L2508: do {
        if ($cmp8) {
          var $9=HEAP32[((5243688)>>2)];
          var $10=HEAP8[(5243676)];
          _zprintwrongstklit($9, $10, 1);
          var $11=HEAP32[((5243572)>>2)];
          _zpushlitstk($11, 1);
        } else {
          var $12=HEAP32[((5243688)>>2)];
          var $add=((($12)+(1))|0);
          var $13=HEAP32[((5243488)>>2)];
          var $arrayidx=(($13+($add<<2))|0);
          var $14=HEAP32[(($arrayidx)>>2)];
          var $15=HEAP32[((5243688)>>2)];
          var $16=HEAP32[((5243488)>>2)];
          var $arrayidx12=(($16+($15<<2))|0);
          var $17=HEAP32[(($arrayidx12)>>2)];
          var $sub=((($14)-($17))|0);
          HEAP32[((5243548)>>2)]=$sub;
          var $18=HEAP32[((5243696)>>2)];
          var $19=HEAP32[((5243548)>>2)];
          var $cmp13=(($18)|0) >= (($19)|0);
          L2511: do {
            if ($cmp13) {
              var $20=HEAP32[((5243692)>>2)];
              var $cmp16=(($20)|0)==1;
              do {
                if (!($cmp16)) {
                  var $21=HEAP32[((5243692)>>2)];
                  var $cmp18=(($21)|0)==-1;
                  if ($cmp18) {
                    break;
                  }
                  break L2511;
                }
              } while(0);
              var $22=HEAP32[((5243920)>>2)];
              var $23=HEAP32[((5243924)>>2)];
              var $arrayidx21=(($23+($22<<2))|0);
              var $24=HEAP32[(($arrayidx21)>>2)];
              var $25=HEAP32[((5251164)>>2)];
              var $cmp22=(($24)|0) >= (($25)|0);
              if ($cmp22) {
                var $26=HEAP32[((5243492)>>2)];
                var $add25=((($26)+(1))|0);
                HEAP32[((5243492)>>2)]=$add25;
                var $27=HEAP32[((5243492)>>2)];
                var $28=HEAP32[((5243488)>>2)];
                var $arrayidx26=(($28+($27<<2))|0);
                var $29=HEAP32[(($arrayidx26)>>2)];
                HEAP32[((5243704)>>2)]=$29;
              }
              var $30=HEAP32[((5243920)>>2)];
              var $add27=((($30)+(1))|0);
              HEAP32[((5243920)>>2)]=$add27;

              return;
            }
          } while(0);
          var $31=HEAP32[((5243696)>>2)];
          var $cmp30=(($31)|0) <= 0;
          do {
            if (!($cmp30)) {
              var $32=HEAP32[((5243692)>>2)];
              var $cmp33=(($32)|0)==0;
              if ($cmp33) {
                break;
              }
              var $33=HEAP32[((5243692)>>2)];
              var $34=HEAP32[((5243548)>>2)];
              var $cmp36=(($33)|0) > (($34)|0);
              if ($cmp36) {
                break;
              }
              var $35=HEAP32[((5243692)>>2)];
              var $36=HEAP32[((5243548)>>2)];
              var $sub39=(((-$36))|0);
              var $cmp40=(($35)|0) < (($sub39)|0);
              if ($cmp40) {
                break;
              }
              var $38=HEAP32[((5243692)>>2)];
              var $cmp44=(($38)|0) > 0;
              if ($cmp44) {
                var $39=HEAP32[((5243696)>>2)];
                var $40=HEAP32[((5243548)>>2)];
                var $41=HEAP32[((5243692)>>2)];
                var $sub47=((($41)-(1))|0);
                var $sub48=((($40)-($sub47))|0);
                var $cmp49=(($39)|0) > (($sub48)|0);
                if ($cmp49) {
                  var $42=HEAP32[((5243548)>>2)];
                  var $43=HEAP32[((5243692)>>2)];
                  var $sub52=((($43)-(1))|0);
                  var $sub53=((($42)-($sub52))|0);
                  HEAP32[((5243696)>>2)]=$sub53;
                }
                var $44=HEAP32[((5243688)>>2)];
                var $45=HEAP32[((5243488)>>2)];
                var $arrayidx55=(($45+($44<<2))|0);
                var $46=HEAP32[(($arrayidx55)>>2)];
                var $47=HEAP32[((5243692)>>2)];
                var $sub56=((($47)-(1))|0);
                var $add57=((($46)+($sub56))|0);
                HEAP32[((5243544)>>2)]=$add57;
                var $48=HEAP32[((5243544)>>2)];
                var $49=HEAP32[((5243696)>>2)];
                var $add58=((($48)+($49))|0);
                HEAP32[((5243552)>>2)]=$add58;
                var $50=HEAP32[((5243692)>>2)];
                var $cmp59=(($50)|0)==1;
                do {
                  if ($cmp59) {
                    var $51=HEAP32[((5243688)>>2)];
                    var $52=HEAP32[((5251164)>>2)];
                    var $cmp62=(($51)|0) >= (($52)|0);
                    if (!($cmp62)) {
                      break;
                    }
                    var $53=HEAP32[((5243552)>>2)];
                    var $54=HEAP32[((5243688)>>2)];
                    var $add65=((($54)+(1))|0);
                    var $55=HEAP32[((5243488)>>2)];
                    var $arrayidx66=(($55+($add65<<2))|0);
                    HEAP32[(($arrayidx66)>>2)]=$53;
                    var $56=HEAP32[((5243492)>>2)];
                    var $add67=((($56)+(1))|0);
                    HEAP32[((5243492)>>2)]=$add67;
                    var $57=HEAP32[((5243492)>>2)];
                    var $58=HEAP32[((5243488)>>2)];
                    var $arrayidx68=(($58+($57<<2))|0);
                    var $59=HEAP32[(($arrayidx68)>>2)];
                    HEAP32[((5243704)>>2)]=$59;
                    var $60=HEAP32[((5243920)>>2)];
                    var $add69=((($60)+(1))|0);
                    HEAP32[((5243920)>>2)]=$add69;

                    return;
                  }
                } while(0);
              } else {
                var $61=HEAP32[((5243692)>>2)];
                var $sub73=(((-$61))|0);
                HEAP32[((5243692)>>2)]=$sub73;
                var $62=HEAP32[((5243696)>>2)];
                var $63=HEAP32[((5243548)>>2)];
                var $64=HEAP32[((5243692)>>2)];
                var $sub74=((($64)-(1))|0);
                var $sub75=((($63)-($sub74))|0);
                var $cmp76=(($62)|0) > (($sub75)|0);
                if ($cmp76) {
                  var $65=HEAP32[((5243548)>>2)];
                  var $66=HEAP32[((5243692)>>2)];
                  var $sub79=((($66)-(1))|0);
                  var $sub80=((($65)-($sub79))|0);
                  HEAP32[((5243696)>>2)]=$sub80;
                }
                var $67=HEAP32[((5243688)>>2)];
                var $add82=((($67)+(1))|0);
                var $68=HEAP32[((5243488)>>2)];
                var $arrayidx83=(($68+($add82<<2))|0);
                var $69=HEAP32[(($arrayidx83)>>2)];
                var $70=HEAP32[((5243692)>>2)];
                var $sub84=((($70)-(1))|0);
                var $sub85=((($69)-($sub84))|0);
                HEAP32[((5243552)>>2)]=$sub85;
                var $71=HEAP32[((5243552)>>2)];
                var $72=HEAP32[((5243696)>>2)];
                var $sub86=((($71)-($72))|0);
                HEAP32[((5243544)>>2)]=$sub86;
              }
              while(1) {
                var $73=HEAP32[((5243704)>>2)];
                var $74=HEAP32[((5243552)>>2)];
                var $add88=((($73)+($74))|0);
                var $75=HEAP32[((5243544)>>2)];
                var $sub89=((($add88)-($75))|0);
                var $76=HEAP32[((5243700)>>2)];
                var $cmp90=(($sub89)|0) > (($76)|0);
                if (!($cmp90)) {
                  break;
                }
                _pooloverflow();
              }
              while(1) {
                var $77=HEAP32[((5243544)>>2)];
                var $78=HEAP32[((5243552)>>2)];
                var $cmp93=(($77)|0) < (($78)|0);
                if (!($cmp93)) {
                  break;
                }
                var $79=HEAP32[((5243544)>>2)];
                var $80=HEAP32[((5243496)>>2)];
                var $arrayidx96=(($80+$79)|0);
                var $81=HEAP8[($arrayidx96)];
                var $82=HEAP32[((5243704)>>2)];
                var $83=HEAP32[((5243496)>>2)];
                var $arrayidx97=(($83+$82)|0);
                HEAP8[($arrayidx97)]=$81;
                var $84=HEAP32[((5243704)>>2)];
                var $add98=((($84)+(1))|0);
                HEAP32[((5243704)>>2)]=$add98;
                var $85=HEAP32[((5243544)>>2)];
                var $add99=((($85)+(1))|0);
                HEAP32[((5243544)>>2)]=$add99;
              }
              var $call=_makestring();
              _zpushlitstk($call, 1);
              break L2508;
            }
          } while(0);
          var $37=HEAP32[((5243572)>>2)];
          _zpushlitstk($37, 1);

          return;
        }
      } while(0);
    }
  }

  return;
}
_xsubstring["X"]=1;

function _xswap() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  _zzpoplitstk(5243692, 5243680);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=1;
  do {
    if (!($cmp)) {
      var $1=HEAP32[((5243696)>>2)];
      var $2=HEAP32[((5251164)>>2)];
      var $cmp2=(($1)|0) < (($2)|0);
      if ($cmp2) {
        break;
      }
      var $14=HEAP8[(5243680)];
      var $conv10=(($14)&255);
      var $cmp11=(($conv10)|0)!=1;
      do {
        if ($cmp11) {
          label = 2057;
        } else {
          var $15=HEAP32[((5243692)>>2)];
          var $16=HEAP32[((5251164)>>2)];
          var $cmp14=(($15)|0) < (($16)|0);
          if ($cmp14) {
            label = 2057;
            break;
          }
          HEAP32[((5251060)>>2)]=0;
          var $24=HEAP32[((5243692)>>2)];
          _zaddbufpool($24);
          var $25=HEAP32[((5243696)>>2)];
          var $26=HEAP32[((5243488)>>2)];
          var $arrayidx20=(($26+($25<<2))|0);
          var $27=HEAP32[(($arrayidx20)>>2)];
          HEAP32[((5243544)>>2)]=$27;
          var $28=HEAP32[((5243696)>>2)];
          var $add21=((($28)+(1))|0);
          var $29=HEAP32[((5243488)>>2)];
          var $arrayidx22=(($29+($add21<<2))|0);
          var $30=HEAP32[(($arrayidx22)>>2)];
          HEAP32[((5243552)>>2)]=$30;
          while(1) {
            var $31=HEAP32[((5243544)>>2)];
            var $32=HEAP32[((5243552)>>2)];
            var $cmp23=(($31)|0) < (($32)|0);
            if (!($cmp23)) {
              break;
            }
            var $33=HEAP32[((5243544)>>2)];
            var $34=HEAP32[((5243496)>>2)];
            var $arrayidx25=(($34+$33)|0);
            var $35=HEAP8[($arrayidx25)];
            var $36=HEAP32[((5243704)>>2)];
            var $37=HEAP32[((5243496)>>2)];
            var $arrayidx26=(($37+$36)|0);
            HEAP8[($arrayidx26)]=$35;
            var $38=HEAP32[((5243704)>>2)];
            var $add27=((($38)+(1))|0);
            HEAP32[((5243704)>>2)]=$add27;
            var $39=HEAP32[((5243544)>>2)];
            var $add28=((($39)+(1))|0);
            HEAP32[((5243544)>>2)]=$add28;
          }
          var $call=_makestring();
          _zpushlitstk($call, 1);
          _addpoolbufandpush();
          break;
        }
      } while(0);
      if (label == 2057) {
        var $17=HEAP32[((5243492)>>2)];
        var $add17=((($17)+(1))|0);
        HEAP32[((5243492)>>2)]=$add17;
        var $18=HEAP32[((5243492)>>2)];
        var $19=HEAP32[((5243488)>>2)];
        var $arrayidx18=(($19+($18<<2))|0);
        var $20=HEAP32[(($arrayidx18)>>2)];
        HEAP32[((5243704)>>2)]=$20;
        var $21=HEAP32[((5243696)>>2)];
        _zpushlitstk($21, 1);
        var $22=HEAP32[((5243692)>>2)];
        var $23=HEAP8[(5243680)];
        _zpushlitstk($22, $23);
      }

      return;
    }
  } while(0);
  var $3=HEAP32[((5243696)>>2)];
  var $4=HEAP8[(5243684)];
  _zpushlitstk($3, $4);
  var $5=HEAP8[(5243680)];
  var $conv4=(($5)&255);
  var $cmp5=(($conv4)|0)==1;
  do {
    if ($cmp5) {
      var $6=HEAP32[((5243692)>>2)];
      var $7=HEAP32[((5251164)>>2)];
      var $cmp7=(($6)|0) >= (($7)|0);
      if (!($cmp7)) {
        break;
      }
      var $8=HEAP32[((5243492)>>2)];
      var $add=((($8)+(1))|0);
      HEAP32[((5243492)>>2)]=$add;
      var $9=HEAP32[((5243492)>>2)];
      var $10=HEAP32[((5243488)>>2)];
      var $arrayidx=(($10+($9<<2))|0);
      var $11=HEAP32[(($arrayidx)>>2)];
      HEAP32[((5243704)>>2)]=$11;
    }
  } while(0);
  var $12=HEAP32[((5243692)>>2)];
  var $13=HEAP8[(5243680)];
  _zpushlitstk($12, $13);

  return;
}
_xswap["X"]=1;

function _xtextlength() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=1;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 1);
    var $3=HEAP32[((5243572)>>2)];
    _zpushlitstk($3, 1);

    return;
  }
  HEAP32[((5243764)>>2)]=0;
  var $4=HEAP32[((5243696)>>2)];
  var $5=HEAP32[((5243488)>>2)];
  var $arrayidx=(($5+($4<<2))|0);
  var $6=HEAP32[(($arrayidx)>>2)];
  HEAP32[((5243544)>>2)]=$6;
  var $7=HEAP32[((5243696)>>2)];
  var $add=((($7)+(1))|0);
  var $8=HEAP32[((5243488)>>2)];
  var $arrayidx2=(($8+($add<<2))|0);
  var $9=HEAP32[(($arrayidx2)>>2)];
  HEAP32[((5243552)>>2)]=$9;
  HEAP32[((5243556)>>2)]=0;
  while(1) {
    var $10=HEAP32[((5243544)>>2)];
    var $11=HEAP32[((5243552)>>2)];
    var $cmp3=(($10)|0) < (($11)|0);
    if (!($cmp3)) {
      break;
    }
    var $12=HEAP32[((5243544)>>2)];
    var $add5=((($12)+(1))|0);
    HEAP32[((5243544)>>2)]=$add5;
    var $13=HEAP32[((5243544)>>2)];
    var $sub=((($13)-(1))|0);
    var $14=HEAP32[((5243496)>>2)];
    var $arrayidx6=(($14+$sub)|0);
    var $15=HEAP8[($arrayidx6)];
    var $conv7=(($15)&255);
    var $cmp8=(($conv7)|0)==123;
    if ($cmp8) {
      var $16=HEAP32[((5243556)>>2)];
      var $add11=((($16)+(1))|0);
      HEAP32[((5243556)>>2)]=$add11;
      var $17=HEAP32[((5243556)>>2)];
      var $cmp12=(($17)|0)==1;
      do {
        if ($cmp12) {
          var $18=HEAP32[((5243544)>>2)];
          var $19=HEAP32[((5243552)>>2)];
          var $cmp14=(($18)|0) < (($19)|0);
          if (!($cmp14)) {
            break;
          }
          var $20=HEAP32[((5243544)>>2)];
          var $21=HEAP32[((5243496)>>2)];
          var $arrayidx17=(($21+$20)|0);
          var $22=HEAP8[($arrayidx17)];
          var $conv18=(($22)&255);
          var $cmp19=(($conv18)|0)==92;
          if ($cmp19) {
            var $23=HEAP32[((5243544)>>2)];
            var $add22=((($23)+(1))|0);
            HEAP32[((5243544)>>2)]=$add22;
            while(1) {
              var $24=HEAP32[((5243544)>>2)];
              var $25=HEAP32[((5243552)>>2)];
              var $cmp24=(($24)|0) < (($25)|0);
              if ($cmp24) {
                var $26=HEAP32[((5243556)>>2)];
                var $cmp26=(($26)|0) > 0;
                var $27 = $cmp26;
              } else {
                var $27 = 0;
              }
              var $27;
              if (!($27)) {
                break;
              }
              var $28=HEAP32[((5243544)>>2)];
              var $29=HEAP32[((5243496)>>2)];
              var $arrayidx29=(($29+$28)|0);
              var $30=HEAP8[($arrayidx29)];
              var $conv30=(($30)&255);
              var $cmp31=(($conv30)|0)==125;
              if ($cmp31) {
                var $31=HEAP32[((5243556)>>2)];
                var $sub34=((($31)-(1))|0);
                HEAP32[((5243556)>>2)]=$sub34;
              } else {
                var $32=HEAP32[((5243544)>>2)];
                var $33=HEAP32[((5243496)>>2)];
                var $arrayidx36=(($33+$32)|0);
                var $34=HEAP8[($arrayidx36)];
                var $conv37=(($34)&255);
                var $cmp38=(($conv37)|0)==123;
                if ($cmp38) {
                  var $35=HEAP32[((5243556)>>2)];
                  var $add41=((($35)+(1))|0);
                  HEAP32[((5243556)>>2)]=$add41;
                }
              }
              var $36=HEAP32[((5243544)>>2)];
              var $add43=((($36)+(1))|0);
              HEAP32[((5243544)>>2)]=$add43;
            }
            var $37=HEAP32[((5243764)>>2)];
            var $add44=((($37)+(1))|0);
            HEAP32[((5243764)>>2)]=$add44;
          }
        }
      } while(0);
    } else {
      var $38=HEAP32[((5243544)>>2)];
      var $sub48=((($38)-(1))|0);
      var $39=HEAP32[((5243496)>>2)];
      var $arrayidx49=(($39+$sub48)|0);
      var $40=HEAP8[($arrayidx49)];
      var $conv50=(($40)&255);
      var $cmp51=(($conv50)|0)==125;
      if ($cmp51) {
        var $41=HEAP32[((5243556)>>2)];
        var $cmp54=(($41)|0) > 0;
        if ($cmp54) {
          var $42=HEAP32[((5243556)>>2)];
          var $sub57=((($42)-(1))|0);
          HEAP32[((5243556)>>2)]=$sub57;
        }
      } else {
        var $43=HEAP32[((5243764)>>2)];
        var $add60=((($43)+(1))|0);
        HEAP32[((5243764)>>2)]=$add60;
      }
    }
  }
  var $44=HEAP32[((5243764)>>2)];
  _zpushlitstk($44, 0);

  return;
}
_xtextlength["X"]=1;

function _xtextprefix() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  _zzpoplitstk(5243692, 5243680);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=0;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 0);
    var $3=HEAP32[((5243572)>>2)];
    _zpushlitstk($3, 1);
  } else {
    var $4=HEAP8[(5243680)];
    var $conv2=(($4)&255);
    var $cmp3=(($conv2)|0)!=1;
    if ($cmp3) {
      var $5=HEAP32[((5243692)>>2)];
      var $6=HEAP8[(5243680)];
      _zprintwrongstklit($5, $6, 1);
      var $7=HEAP32[((5243572)>>2)];
      _zpushlitstk($7, 1);
    } else {
      var $8=HEAP32[((5243696)>>2)];
      var $cmp7=(($8)|0) <= 0;
      if ($cmp7) {
        var $9=HEAP32[((5243572)>>2)];
        _zpushlitstk($9, 1);

        return;
      }
      var $10=HEAP32[((5243692)>>2)];
      var $11=HEAP32[((5243488)>>2)];
      var $arrayidx=(($11+($10<<2))|0);
      var $12=HEAP32[(($arrayidx)>>2)];
      HEAP32[((5243544)>>2)]=$12;
      var $13=HEAP32[((5243692)>>2)];
      var $add=((($13)+(1))|0);
      var $14=HEAP32[((5243488)>>2)];
      var $arrayidx11=(($14+($add<<2))|0);
      var $15=HEAP32[(($arrayidx11)>>2)];
      HEAP32[((5243552)>>2)]=$15;
      HEAP32[((5243764)>>2)]=0;
      HEAP32[((5243556)>>2)]=0;
      var $16=HEAP32[((5243544)>>2)];
      HEAP32[((5243536)>>2)]=$16;
      while(1) {
        var $17=HEAP32[((5243536)>>2)];
        var $18=HEAP32[((5243552)>>2)];
        var $cmp12=(($17)|0) < (($18)|0);
        if ($cmp12) {
          var $19=HEAP32[((5243764)>>2)];
          var $20=HEAP32[((5243696)>>2)];
          var $cmp14=(($19)|0) < (($20)|0);
          var $21 = $cmp14;
        } else {
          var $21 = 0;
        }
        var $21;
        if (!($21)) {
          break;
        }
        var $22=HEAP32[((5243536)>>2)];
        var $add16=((($22)+(1))|0);
        HEAP32[((5243536)>>2)]=$add16;
        var $23=HEAP32[((5243536)>>2)];
        var $sub=((($23)-(1))|0);
        var $24=HEAP32[((5243496)>>2)];
        var $arrayidx17=(($24+$sub)|0);
        var $25=HEAP8[($arrayidx17)];
        var $conv18=(($25)&255);
        var $cmp19=(($conv18)|0)==123;
        if ($cmp19) {
          var $26=HEAP32[((5243556)>>2)];
          var $add22=((($26)+(1))|0);
          HEAP32[((5243556)>>2)]=$add22;
          var $27=HEAP32[((5243556)>>2)];
          var $cmp23=(($27)|0)==1;
          do {
            if ($cmp23) {
              var $28=HEAP32[((5243536)>>2)];
              var $29=HEAP32[((5243552)>>2)];
              var $cmp25=(($28)|0) < (($29)|0);
              if (!($cmp25)) {
                break;
              }
              var $30=HEAP32[((5243536)>>2)];
              var $31=HEAP32[((5243496)>>2)];
              var $arrayidx28=(($31+$30)|0);
              var $32=HEAP8[($arrayidx28)];
              var $conv29=(($32)&255);
              var $cmp30=(($conv29)|0)==92;
              if ($cmp30) {
                var $33=HEAP32[((5243536)>>2)];
                var $add33=((($33)+(1))|0);
                HEAP32[((5243536)>>2)]=$add33;
                while(1) {
                  var $34=HEAP32[((5243536)>>2)];
                  var $35=HEAP32[((5243552)>>2)];
                  var $cmp35=(($34)|0) < (($35)|0);
                  if ($cmp35) {
                    var $36=HEAP32[((5243556)>>2)];
                    var $cmp38=(($36)|0) > 0;
                    var $37 = $cmp38;
                  } else {
                    var $37 = 0;
                  }
                  var $37;
                  if (!($37)) {
                    break;
                  }
                  var $38=HEAP32[((5243536)>>2)];
                  var $39=HEAP32[((5243496)>>2)];
                  var $arrayidx42=(($39+$38)|0);
                  var $40=HEAP8[($arrayidx42)];
                  var $conv43=(($40)&255);
                  var $cmp44=(($conv43)|0)==125;
                  if ($cmp44) {
                    var $41=HEAP32[((5243556)>>2)];
                    var $sub47=((($41)-(1))|0);
                    HEAP32[((5243556)>>2)]=$sub47;
                  } else {
                    var $42=HEAP32[((5243536)>>2)];
                    var $43=HEAP32[((5243496)>>2)];
                    var $arrayidx49=(($43+$42)|0);
                    var $44=HEAP8[($arrayidx49)];
                    var $conv50=(($44)&255);
                    var $cmp51=(($conv50)|0)==123;
                    if ($cmp51) {
                      var $45=HEAP32[((5243556)>>2)];
                      var $add54=((($45)+(1))|0);
                      HEAP32[((5243556)>>2)]=$add54;
                    }
                  }
                  var $46=HEAP32[((5243536)>>2)];
                  var $add56=((($46)+(1))|0);
                  HEAP32[((5243536)>>2)]=$add56;
                }
                var $47=HEAP32[((5243764)>>2)];
                var $add57=((($47)+(1))|0);
                HEAP32[((5243764)>>2)]=$add57;
              }
            }
          } while(0);
        } else {
          var $48=HEAP32[((5243536)>>2)];
          var $sub61=((($48)-(1))|0);
          var $49=HEAP32[((5243496)>>2)];
          var $arrayidx62=(($49+$sub61)|0);
          var $50=HEAP8[($arrayidx62)];
          var $conv63=(($50)&255);
          var $cmp64=(($conv63)|0)==125;
          if ($cmp64) {
            var $51=HEAP32[((5243556)>>2)];
            var $cmp67=(($51)|0) > 0;
            if ($cmp67) {
              var $52=HEAP32[((5243556)>>2)];
              var $sub70=((($52)-(1))|0);
              HEAP32[((5243556)>>2)]=$sub70;
            }
          } else {
            var $53=HEAP32[((5243764)>>2)];
            var $add73=((($53)+(1))|0);
            HEAP32[((5243764)>>2)]=$add73;
          }
        }
      }
      var $54=HEAP32[((5243536)>>2)];
      HEAP32[((5243552)>>2)]=$54;
      while(1) {
        var $55=HEAP32[((5243704)>>2)];
        var $56=HEAP32[((5243556)>>2)];
        var $add78=((($55)+($56))|0);
        var $57=HEAP32[((5243552)>>2)];
        var $add79=((($add78)+($57))|0);
        var $58=HEAP32[((5243544)>>2)];
        var $sub80=((($add79)-($58))|0);
        var $59=HEAP32[((5243700)>>2)];
        var $cmp81=(($sub80)|0) > (($59)|0);
        if (!($cmp81)) {
          break;
        }
        _pooloverflow();
      }
      var $60=HEAP32[((5243692)>>2)];
      var $61=HEAP32[((5251164)>>2)];
      var $cmp85=(($60)|0) >= (($61)|0);
      if ($cmp85) {
        var $62=HEAP32[((5243552)>>2)];
        HEAP32[((5243704)>>2)]=$62;
      } else {
        while(1) {
          var $63=HEAP32[((5243544)>>2)];
          var $64=HEAP32[((5243552)>>2)];
          var $cmp90=(($63)|0) < (($64)|0);
          if (!($cmp90)) {
            break;
          }
          var $65=HEAP32[((5243544)>>2)];
          var $66=HEAP32[((5243496)>>2)];
          var $arrayidx93=(($66+$65)|0);
          var $67=HEAP8[($arrayidx93)];
          var $68=HEAP32[((5243704)>>2)];
          var $69=HEAP32[((5243496)>>2)];
          var $arrayidx94=(($69+$68)|0);
          HEAP8[($arrayidx94)]=$67;
          var $70=HEAP32[((5243704)>>2)];
          var $add95=((($70)+(1))|0);
          HEAP32[((5243704)>>2)]=$add95;
          var $71=HEAP32[((5243544)>>2)];
          var $add96=((($71)+(1))|0);
          HEAP32[((5243544)>>2)]=$add96;
        }
      }
      while(1) {
        var $72=HEAP32[((5243556)>>2)];
        var $cmp100=(($72)|0) > 0;
        if (!($cmp100)) {
          break;
        }
        var $73=HEAP32[((5243704)>>2)];
        var $74=HEAP32[((5243496)>>2)];
        var $arrayidx103=(($74+$73)|0);
        HEAP8[($arrayidx103)]=125;
        var $75=HEAP32[((5243704)>>2)];
        var $add104=((($75)+(1))|0);
        HEAP32[((5243704)>>2)]=$add104;
        var $76=HEAP32[((5243556)>>2)];
        var $sub105=((($76)-(1))|0);
        HEAP32[((5243556)>>2)]=$sub105;
      }
      var $call=_makestring();
      _zpushlitstk($call, 1);
    }
  }

  return;
}
_xtextprefix["X"]=1;

function _xtype() {
  var label = 0;

  var $0=HEAP32[((5243876)>>2)];
  var $tobool=(($0)|0)!=0;
  if (!($tobool)) {
    _bstcantmesswithentriesprint();

    return;
  }
  var $1=HEAP32[((5251172)>>2)];
  var $2=HEAP32[((5243432)>>2)];
  var $arrayidx=(($2+($1<<2))|0);
  var $3=HEAP32[(($arrayidx)>>2)];
  var $4=HEAP32[((5243428)>>2)];
  var $cmp=(($3)|0)==(($4)|0);
  do {
    if ($cmp) {
      label = 2155;
    } else {
      var $5=HEAP32[((5251172)>>2)];
      var $6=HEAP32[((5243432)>>2)];
      var $arrayidx1=(($6+($5<<2))|0);
      var $7=HEAP32[(($arrayidx1)>>2)];
      var $cmp2=(($7)|0)==0;
      if ($cmp2) {
        label = 2155;
        break;
      }
      var $9=HEAP32[((5251172)>>2)];
      var $10=HEAP32[((5243432)>>2)];
      var $arrayidx5=(($10+($9<<2))|0);
      var $11=HEAP32[(($arrayidx5)>>2)];
      var $12=HEAP32[((5248752)>>2)];
      var $arrayidx6=(($12+($11<<2))|0);
      var $13=HEAP32[(($arrayidx6)>>2)];
      _zpushlitstk($13, 1);
      break;
    }
  } while(0);
  if (label == 2155) {
    var $8=HEAP32[((5243572)>>2)];
    _zpushlitstk($8, 1);
  }

  return;
}


function _xwarning() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=1;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 1);

    return;
  } else {
    var $3=HEAP32[((5243908)>>2)];
    var $call=_fputs(((5260896)|0), $3);
    var $4=HEAP32[((5243524)>>2)];
    var $call2=_fputs(((5260896)|0), $4);
    var $5=HEAP32[((5243696)>>2)];
    var $6=HEAP8[(5243684)];
    _zprintlit($5, $6);
    _markwarning();

    return;
  }
}


function _xwidth() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=1;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 1);
    _zpushlitstk(0, 0);

    return;
  }
  HEAP32[((5251060)>>2)]=0;
  var $3=HEAP32[((5243696)>>2)];
  _zaddbufpool($3);
  HEAP32[((5243500)>>2)]=0;
  HEAP32[((5252304)>>2)]=0;
  HEAP32[((5251056)>>2)]=0;
  while(1) {
    var $4=HEAP32[((5251056)>>2)];
    var $5=HEAP32[((5251060)>>2)];
    var $cmp2=(($4)|0) < (($5)|0);
    if (!($cmp2)) {
      break;
    }
    var $6=HEAP32[((5251056)>>2)];
    var $7=HEAP32[((5251064)>>2)];
    var $arrayidx=(($7+$6)|0);
    var $8=HEAP8[($arrayidx)];
    var $conv4=(($8)&255);
    var $cmp5=(($conv4)|0)==123;
    if ($cmp5) {
      var $9=HEAP32[((5252304)>>2)];
      var $add=((($9)+(1))|0);
      HEAP32[((5252304)>>2)]=$add;
      var $10=HEAP32[((5252304)>>2)];
      var $cmp8=(($10)|0)==1;
      do {
        if ($cmp8) {
          var $11=HEAP32[((5251056)>>2)];
          var $add10=((($11)+(1))|0);
          var $12=HEAP32[((5251060)>>2)];
          var $cmp11=(($add10)|0) < (($12)|0);
          if (!($cmp11)) {
            label = 2218;
            break;
          }
          var $13=HEAP32[((5251056)>>2)];
          var $add14=((($13)+(1))|0);
          var $14=HEAP32[((5251064)>>2)];
          var $arrayidx15=(($14+$add14)|0);
          var $15=HEAP8[($arrayidx15)];
          var $conv16=(($15)&255);
          var $cmp17=(($conv16)|0)==92;
          if ($cmp17) {
            var $16=HEAP32[((5251056)>>2)];
            var $add20=((($16)+(1))|0);
            HEAP32[((5251056)>>2)]=$add20;
            while(1) {
              var $17=HEAP32[((5251056)>>2)];
              var $18=HEAP32[((5251060)>>2)];
              var $cmp22=(($17)|0) < (($18)|0);
              if ($cmp22) {
                var $19=HEAP32[((5252304)>>2)];
                var $cmp24=(($19)|0) > 0;
                var $20 = $cmp24;
              } else {
                var $20 = 0;
              }
              var $20;
              if (!($20)) {
                break;
              }
              var $21=HEAP32[((5251056)>>2)];
              var $add27=((($21)+(1))|0);
              HEAP32[((5251056)>>2)]=$add27;
              var $22=HEAP32[((5251056)>>2)];
              HEAP32[((5251052)>>2)]=$22;
              while(1) {
                var $23=HEAP32[((5251056)>>2)];
                var $24=HEAP32[((5251060)>>2)];
                var $cmp29=(($23)|0) < (($24)|0);
                if ($cmp29) {
                  var $25=HEAP32[((5251056)>>2)];
                  var $26=HEAP32[((5251064)>>2)];
                  var $arrayidx32=(($26+$25)|0);
                  var $27=HEAP8[($arrayidx32)];
                  var $idxprom=(($27)&255);
                  var $arrayidx33=((5243932+$idxprom)|0);
                  var $28=HEAP8[($arrayidx33)];
                  var $conv34=(($28)&255);
                  var $cmp35=(($conv34)|0)==2;
                  var $29 = $cmp35;
                } else {
                  var $29 = 0;
                }
                var $29;
                if (!($29)) {
                  break;
                }
                var $30=HEAP32[((5251056)>>2)];
                var $add39=((($30)+(1))|0);
                HEAP32[((5251056)>>2)]=$add39;
              }
              var $31=HEAP32[((5251056)>>2)];
              var $32=HEAP32[((5251060)>>2)];
              var $cmp40=(($31)|0) < (($32)|0);
              do {
                if ($cmp40) {
                  var $33=HEAP32[((5251056)>>2)];
                  var $34=HEAP32[((5251052)>>2)];
                  var $cmp43=(($33)|0)==(($34)|0);
                  if (!($cmp43)) {
                    label = 2187;
                    break;
                  }
                  var $35=HEAP32[((5251056)>>2)];
                  var $add46=((($35)+(1))|0);
                  HEAP32[((5251056)>>2)]=$add46;
                  break;
                } else {
                  label = 2187;
                }
              } while(0);
              if (label == 2187) {
                label = 0;
                var $36=HEAP32[((5251064)>>2)];
                var $37=HEAP32[((5251052)>>2)];
                var $38=HEAP32[((5251056)>>2)];
                var $39=HEAP32[((5251052)>>2)];
                var $sub=((($38)-($39))|0);
                var $call=_zstrlookup($36, $37, $sub, 14, 0);
                HEAP32[((5251148)>>2)]=$call;
                var $40=HEAP32[((5248776)>>2)];
                var $tobool=(($40)|0)!=0;
                if ($tobool) {
                  var $41=HEAP32[((5251148)>>2)];
                  var $42=HEAP32[((5248484)>>2)];
                  var $arrayidx49=(($42+($41<<2))|0);
                  var $43=HEAP32[(($arrayidx49)>>2)];
                  if ((($43)|0)==12) {
                    var $44=HEAP32[((5243500)>>2)];
                    var $add50=((($44)+(500))|0);
                    HEAP32[((5243500)>>2)]=$add50;
                  } else if ((($43)|0)==4) {
                    var $45=HEAP32[((5243500)>>2)];
                    var $add52=((($45)+(722))|0);
                    HEAP32[((5243500)>>2)]=$add52;
                  } else if ((($43)|0)==2) {
                    var $46=HEAP32[((5243500)>>2)];
                    var $add54=((($46)+(778))|0);
                    HEAP32[((5243500)>>2)]=$add54;
                  } else if ((($43)|0)==5) {
                    var $47=HEAP32[((5243500)>>2)];
                    var $add56=((($47)+(903))|0);
                    HEAP32[((5243500)>>2)]=$add56;
                  } else if ((($43)|0)==3) {
                    var $48=HEAP32[((5243500)>>2)];
                    var $add58=((($48)+(1014))|0);
                    HEAP32[((5243500)>>2)]=$add58;
                  } else {
                    var $49=HEAP32[((5243500)>>2)];
                    var $50=HEAP32[((5251052)>>2)];
                    var $51=HEAP32[((5251064)>>2)];
                    var $arrayidx59=(($51+$50)|0);
                    var $52=HEAP8[($arrayidx59)];
                    var $idxprom60=(($52)&255);
                    var $arrayidx61=((5251200+($idxprom60<<2))|0);
                    var $53=HEAP32[(($arrayidx61)>>2)];
                    var $add62=((($49)+($53))|0);
                    HEAP32[((5243500)>>2)]=$add62;
                  }
                }
              }
              while(1) {
                var $54=HEAP32[((5251056)>>2)];
                var $55=HEAP32[((5251060)>>2)];
                var $cmp65=(($54)|0) < (($55)|0);
                if ($cmp65) {
                  var $56=HEAP32[((5251056)>>2)];
                  var $57=HEAP32[((5251064)>>2)];
                  var $arrayidx68=(($57+$56)|0);
                  var $58=HEAP8[($arrayidx68)];
                  var $idxprom69=(($58)&255);
                  var $arrayidx70=((5243932+$idxprom69)|0);
                  var $59=HEAP8[($arrayidx70)];
                  var $conv71=(($59)&255);
                  var $cmp72=(($conv71)|0)==1;
                  var $60 = $cmp72;
                } else {
                  var $60 = 0;
                }
                var $60;
                if (!($60)) {
                  break;
                }
                var $61=HEAP32[((5251056)>>2)];
                var $add76=((($61)+(1))|0);
                HEAP32[((5251056)>>2)]=$add76;
              }
              while(1) {
                var $62=HEAP32[((5251056)>>2)];
                var $63=HEAP32[((5251060)>>2)];
                var $cmp79=(($62)|0) < (($63)|0);
                do {
                  if ($cmp79) {
                    var $64=HEAP32[((5252304)>>2)];
                    var $cmp82=(($64)|0) > 0;
                    if (!($cmp82)) {
                      var $68 = 0;
                      break;
                    }
                    var $65=HEAP32[((5251056)>>2)];
                    var $66=HEAP32[((5251064)>>2)];
                    var $arrayidx85=(($66+$65)|0);
                    var $67=HEAP8[($arrayidx85)];
                    var $conv86=(($67)&255);
                    var $cmp87=(($conv86)|0)!=92;
                    var $68 = $cmp87;
                  } else {
                    var $68 = 0;
                  }
                } while(0);
                var $68;
                if (!($68)) {
                  break;
                }
                var $69=HEAP32[((5251056)>>2)];
                var $70=HEAP32[((5251064)>>2)];
                var $arrayidx91=(($70+$69)|0);
                var $71=HEAP8[($arrayidx91)];
                var $conv92=(($71)&255);
                var $cmp93=(($conv92)|0)==125;
                if ($cmp93) {
                  var $72=HEAP32[((5252304)>>2)];
                  var $sub96=((($72)-(1))|0);
                  HEAP32[((5252304)>>2)]=$sub96;
                } else {
                  var $73=HEAP32[((5251056)>>2)];
                  var $74=HEAP32[((5251064)>>2)];
                  var $arrayidx98=(($74+$73)|0);
                  var $75=HEAP8[($arrayidx98)];
                  var $conv99=(($75)&255);
                  var $cmp100=(($conv99)|0)==123;
                  if ($cmp100) {
                    var $76=HEAP32[((5252304)>>2)];
                    var $add103=((($76)+(1))|0);
                    HEAP32[((5252304)>>2)]=$add103;
                  } else {
                    var $77=HEAP32[((5243500)>>2)];
                    var $78=HEAP32[((5251056)>>2)];
                    var $79=HEAP32[((5251064)>>2)];
                    var $arrayidx105=(($79+$78)|0);
                    var $80=HEAP8[($arrayidx105)];
                    var $idxprom106=(($80)&255);
                    var $arrayidx107=((5251200+($idxprom106<<2))|0);
                    var $81=HEAP32[(($arrayidx107)>>2)];
                    var $add108=((($77)+($81))|0);
                    HEAP32[((5243500)>>2)]=$add108;
                  }
                }
                var $82=HEAP32[((5251056)>>2)];
                var $add111=((($82)+(1))|0);
                HEAP32[((5251056)>>2)]=$add111;
              }
            }
            var $83=HEAP32[((5251056)>>2)];
            var $sub114=((($83)-(1))|0);
            HEAP32[((5251056)>>2)]=$sub114;
          } else {
            var $84=HEAP32[((5243500)>>2)];
            var $85=HEAP32[((((5251692)|0))>>2)];
            var $add116=((($84)+($85))|0);
            HEAP32[((5243500)>>2)]=$add116;
          }
          break;
        } else {
          label = 2218;
        }
      } while(0);
      if (label == 2218) {
        label = 0;
        var $86=HEAP32[((5243500)>>2)];
        var $87=HEAP32[((((5251692)|0))>>2)];
        var $add119=((($86)+($87))|0);
        HEAP32[((5243500)>>2)]=$add119;
      }
    } else {
      var $88=HEAP32[((5251056)>>2)];
      var $89=HEAP32[((5251064)>>2)];
      var $arrayidx122=(($89+$88)|0);
      var $90=HEAP8[($arrayidx122)];
      var $conv123=(($90)&255);
      var $cmp124=(($conv123)|0)==125;
      if ($cmp124) {
        var $91=HEAP32[((5243696)>>2)];
        _zdecrbracelevel($91);
        var $92=HEAP32[((5243500)>>2)];
        var $93=HEAP32[((((5251700)|0))>>2)];
        var $add127=((($92)+($93))|0);
        HEAP32[((5243500)>>2)]=$add127;
      } else {
        var $94=HEAP32[((5243500)>>2)];
        var $95=HEAP32[((5251056)>>2)];
        var $96=HEAP32[((5251064)>>2)];
        var $arrayidx129=(($96+$95)|0);
        var $97=HEAP8[($arrayidx129)];
        var $idxprom130=(($97)&255);
        var $arrayidx131=((5251200+($idxprom130<<2))|0);
        var $98=HEAP32[(($arrayidx131)>>2)];
        var $add132=((($94)+($98))|0);
        HEAP32[((5243500)>>2)]=$add132;
      }
    }
    var $99=HEAP32[((5251056)>>2)];
    var $add135=((($99)+(1))|0);
    HEAP32[((5251056)>>2)]=$add135;
  }
  var $100=HEAP32[((5243696)>>2)];
  _zcheckbracelevel($100);
  var $101=HEAP32[((5243500)>>2)];
  _zpushlitstk($101, 0);

  return;
}
_xwidth["X"]=1;

function _xwrite() {
  var label = 0;

  _zzpoplitstk(5243696, 5243684);
  var $0=HEAP8[(5243684)];
  var $conv=(($0)&255);
  var $cmp=(($conv)|0)!=1;
  if ($cmp) {
    var $1=HEAP32[((5243696)>>2)];
    var $2=HEAP8[(5243684)];
    _zprintwrongstklit($1, $2, 1);

    return;
  } else {
    var $3=HEAP32[((5243696)>>2)];
    _zaddoutpool($3);

    return;
  }
}


function _zexecutefn($exfnloc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $exfnloc_addr;
  var $rpoplt1=__stackBase__;
  var $rpoplt2=(__stackBase__)+(4);
  var $rpoptp1=(__stackBase__)+(8);
  var $rpoptp2=(__stackBase__)+(12);
  var $wizptr;
  $exfnloc_addr=$exfnloc;
  var $0=$exfnloc_addr;
  var $1=HEAP32[((5248804)>>2)];
  var $arrayidx=(($1+$0)|0);
  var $2=HEAP8[($arrayidx)];
  var $conv=(($2)&255);
  if ((($conv)|0)==0) {
    var $3=$exfnloc_addr;
    var $4=HEAP32[((5248484)>>2)];
    var $arrayidx1=(($4+($3<<2))|0);
    var $5=HEAP32[(($arrayidx1)>>2)];
    var $arrayidx2=((5250896+($5<<2))|0);
    var $6=HEAP32[(($arrayidx2)>>2)];
    var $add=((($6)+(1))|0);
    var $7=$exfnloc_addr;
    var $8=HEAP32[((5248484)>>2)];
    var $arrayidx3=(($8+($7<<2))|0);
    var $9=HEAP32[(($arrayidx3)>>2)];
    var $arrayidx4=((5250896+($9<<2))|0);
    HEAP32[(($arrayidx4)>>2)]=$add;
    var $10=$exfnloc_addr;
    var $11=HEAP32[((5248484)>>2)];
    var $arrayidx5=(($11+($10<<2))|0);
    var $12=HEAP32[(($arrayidx5)>>2)];
    if ((($12)|0)==33) {
      _xwarning();
    } else if ((($12)|0)==34) {
      _zzpoplitstk($rpoplt1, $rpoptp1);
      _zzpoplitstk($rpoplt2, $rpoptp2);
      var $37=HEAP8[($rpoptp1)];
      var $conv76=(($37)&255);
      var $cmp77=(($conv76)|0)!=2;
      do {
        if ($cmp77) {
          var $38=HEAP32[(($rpoplt1)>>2)];
          var $39=HEAP8[($rpoptp1)];
          _zprintwrongstklit($38, $39, 2);
          label = 2305;
          break;
        } else {
          var $40=HEAP8[($rpoptp2)];
          var $conv81=(($40)&255);
          var $cmp82=(($conv81)|0)!=2;
          if ($cmp82) {
            var $41=HEAP32[(($rpoplt2)>>2)];
            var $42=HEAP8[($rpoptp2)];
            _zprintwrongstklit($41, $42, 2);
            label = 2305;
            break;
          }
          while(1) {
            var $43=HEAP32[(($rpoplt2)>>2)];
            _zexecutefn($43);
            _zzpoplitstk(5243696, 5243684);
            var $44=HEAP8[(5243684)];
            var $conv86=(($44)&255);
            var $cmp87=(($conv86)|0)!=0;
            if ($cmp87) {
              label = 2298;
              break;
            }
            var $47=HEAP32[((5243696)>>2)];
            var $cmp91=(($47)|0) > 0;
            if (!($cmp91)) {
              label = 2301;
              break;
            }
            var $48=HEAP32[(($rpoplt1)>>2)];
            _zexecutefn($48);
          }
          if (label == 2301) {
            break;
          }
          else if (label == 2298) {
            var $45=HEAP32[((5243696)>>2)];
            var $46=HEAP8[(5243684)];
            _zprintwrongstklit($45, $46, 0);
            break;
          }
        }
      } while(0);
      if (label == 2305) {
      }
    } else if ((($12)|0)==2) {
      _xlessthan();
    } else if ((($12)|0)==31) {
      _poptopandprint();
    } else if ((($12)|0)==32) {
      _xtype();
    } else if ((($12)|0)==9) {
      _xchangecase();
    } else if ((($12)|0)==14) {
      _xformatname();
    } else if ((($12)|0)==28) {
      _xswap();
    } else if ((($12)|0)==29) {
      _xtextlength();
    } else if ((($12)|0)==1) {
      _xgreaterthan();
    } else if ((($12)|0)==24) {
      _xquote();
    } else if ((($12)|0)==25) {
    } else if ((($12)|0)==13) {
      _xempty();
    } else if ((($12)|0)==7) {
      _xaddperiod();
    } else if ((($12)|0)==4) {
      _xminus();
    } else if ((($12)|0)==22) {
      _xpreamble();
    } else if ((($12)|0)==17) {
      _xinttostr();
    } else if ((($12)|0)==26) {
      _popwholestack();
    } else if ((($12)|0)==10) {
      _xchrtoint();
    } else if ((($12)|0)==18) {
      _xmissing();
    } else if ((($12)|0)==19) {
      _outputbblline();
    } else if ((($12)|0)==3) {
      _xplus();
    } else if ((($12)|0)==23) {
      _xpurify();
    } else if ((($12)|0)==36) {
      _xwrite();
    } else if ((($12)|0)==15) {
      _zzpoplitstk(5243696, 5243684);
      _zzpoplitstk(5243692, 5243680);
      _zzpoplitstk(5243688, 5243676);
      var $25=HEAP8[(5243684)];
      var $conv34=(($25)&255);
      var $cmp35=(($conv34)|0)!=2;
      if ($cmp35) {
        var $26=HEAP32[((5243696)>>2)];
        var $27=HEAP8[(5243684)];
        _zprintwrongstklit($26, $27, 2);
      } else {
        var $28=HEAP8[(5243680)];
        var $conv39=(($28)&255);
        var $cmp40=(($conv39)|0)!=2;
        if ($cmp40) {
          var $29=HEAP32[((5243692)>>2)];
          var $30=HEAP8[(5243680)];
          _zprintwrongstklit($29, $30, 2);
        } else {
          var $31=HEAP8[(5243676)];
          var $conv44=(($31)&255);
          var $cmp45=(($conv44)|0)!=0;
          if ($cmp45) {
            var $32=HEAP32[((5243688)>>2)];
            var $33=HEAP8[(5243676)];
            _zprintwrongstklit($32, $33, 0);
          } else {
            var $34=HEAP32[((5243688)>>2)];
            var $cmp49=(($34)|0) > 0;
            if ($cmp49) {
              var $35=HEAP32[((5243692)>>2)];
              _zexecutefn($35);
            } else {
              var $36=HEAP32[((5243696)>>2)];
              _zexecutefn($36);
            }
          }
        }
      }
    } else if ((($12)|0)==35) {
      _xwidth();
    } else if ((($12)|0)==20) {
      _xnumnames();
    } else if ((($12)|0)==21) {
      _zzpoplitstk(5243696, 5243684);
    } else if ((($12)|0)==5) {
      _xconcatenate();
    } else if ((($12)|0)==11) {
      _xcite();
    } else if ((($12)|0)==12) {
      _xduplicate();
    } else if ((($12)|0)==6) {
      _xgets();
    } else if ((($12)|0)==0) {
      _xequals();
    } else if ((($12)|0)==30) {
      _xtextprefix();
    } else if ((($12)|0)==8) {
      var $13=HEAP32[((5243876)>>2)];
      var $tobool=(($13)|0)!=0;
      if ($tobool) {
        var $14=HEAP32[((5251172)>>2)];
        var $15=HEAP32[((5243432)>>2)];
        var $arrayidx15=(($15+($14<<2))|0);
        var $16=HEAP32[(($arrayidx15)>>2)];
        var $17=HEAP32[((5243428)>>2)];
        var $cmp=(($16)|0)==(($17)|0);
        if ($cmp) {
          var $18=HEAP32[((5252564)>>2)];
          _zexecutefn($18);
        } else {
          var $19=HEAP32[((5251172)>>2)];
          var $20=HEAP32[((5243432)>>2)];
          var $arrayidx19=(($20+($19<<2))|0);
          var $21=HEAP32[(($arrayidx19)>>2)];
          var $cmp20=(($21)|0)==0;
          if ($cmp20) {
          } else {
            var $22=HEAP32[((5251172)>>2)];
            var $23=HEAP32[((5243432)>>2)];
            var $arrayidx24=(($23+($22<<2))|0);
            var $24=HEAP32[(($arrayidx24)>>2)];
            _zexecutefn($24);
          }
        }
      } else {
        _bstcantmesswithentriesprint();
      }
    } else if ((($12)|0)==16) {
      _xinttochr();
    } else if ((($12)|0)==27) {
      _xsubstring();
    } else {
      var $49=HEAP32[((5243908)>>2)];
      var $call=_fputs(((5260836)|0), $49);
      var $50=HEAP32[((5243524)>>2)];
      var $call101=_fputs(((5260836)|0), $50);
      _printconfusion();
      _longjmp(((5248396)|0), 1);
      throw "Reached an unreachable!"
    }
    STACKTOP = __stackBase__;
    return;
  } else if ((($conv)|0)==7) {
    var $122=$exfnloc_addr;
    var $123=HEAP32[((5248484)>>2)];
    var $arrayidx177=(($123+($122<<2))|0);
    var $124=HEAP32[(($arrayidx177)>>2)];
    _zpushlitstk($124, 0);
    STACKTOP = __stackBase__;
    return;
  } else if ((($conv)|0)==8) {
    var $125=$exfnloc_addr;
    var $126=HEAP32[((5248484)>>2)];
    var $arrayidx179=(($126+($125<<2))|0);
    var $127=HEAP32[(($arrayidx179)>>2)];
    HEAP32[((5243504)>>2)]=$127;
    var $128=HEAP32[((5243504)>>2)];
    var $129=HEAP32[((5248792)>>2)];
    var $arrayidx180=(($129+($128<<2))|0);
    var $130=HEAP32[(($arrayidx180)>>2)];
    var $cmp181=(($130)|0) > 0;
    if ($cmp181) {
      var $131=HEAP32[((5243504)>>2)];
      var $132=HEAP32[((5248792)>>2)];
      var $arrayidx184=(($132+($131<<2))|0);
      var $133=HEAP32[(($arrayidx184)>>2)];
      _zpushlitstk($133, 1);
    } else {
      while(1) {
        var $134=HEAP32[((5243704)>>2)];
        var $135=HEAP32[((5243504)>>2)];
        var $136=HEAP32[((5248796)>>2)];
        var $arrayidx187=(($136+($135<<2))|0);
        var $137=HEAP32[(($arrayidx187)>>2)];
        var $add188=((($134)+($137))|0);
        var $138=HEAP32[((5243700)>>2)];
        var $cmp189=(($add188)|0) > (($138)|0);
        if (!($cmp189)) {
          break;
        }
        _pooloverflow();
      }
      HEAP32[((5248784)>>2)]=0;
      while(1) {
        var $139=HEAP32[((5248784)>>2)];
        var $140=HEAP32[((5243504)>>2)];
        var $141=HEAP32[((5248796)>>2)];
        var $arrayidx194=(($141+($140<<2))|0);
        var $142=HEAP32[(($arrayidx194)>>2)];
        var $cmp195=(($139)|0) < (($142)|0);
        if (!($cmp195)) {
          break;
        }
        var $143=HEAP32[((5243504)>>2)];
        var $144=HEAP32[((5248780)>>2)];
        var $add198=((($144)+(1))|0);
        var $mul199=((($143)*($add198))&-1);
        var $145=HEAP32[((5248784)>>2)];
        var $add200=((($mul199)+($145))|0);
        var $146=HEAP32[((5248788)>>2)];
        var $arrayidx201=(($146+$add200)|0);
        var $147=HEAP8[($arrayidx201)];
        var $148=HEAP32[((5243704)>>2)];
        var $149=HEAP32[((5243496)>>2)];
        var $arrayidx202=(($149+$148)|0);
        HEAP8[($arrayidx202)]=$147;
        var $150=HEAP32[((5243704)>>2)];
        var $add203=((($150)+(1))|0);
        HEAP32[((5243704)>>2)]=$add203;
        var $151=HEAP32[((5248784)>>2)];
        var $add204=((($151)+(1))|0);
        HEAP32[((5248784)>>2)]=$add204;
      }
      var $call206=_makestring();
      _zpushlitstk($call206, 1);
    }
    STACKTOP = __stackBase__;
    return;
  } else if ((($conv)|0)==2) {
    var $69=$exfnloc_addr;
    var $70=HEAP32[((5248484)>>2)];
    var $arrayidx119=(($70+($69<<2))|0);
    var $71=HEAP32[(($arrayidx119)>>2)];
    _zpushlitstk($71, 0);
    STACKTOP = __stackBase__;
    return;
  } else if ((($conv)|0)==3) {
    var $72=$exfnloc_addr;
    var $73=HEAP32[((5248752)>>2)];
    var $arrayidx121=(($73+($72<<2))|0);
    var $74=HEAP32[(($arrayidx121)>>2)];
    _zpushlitstk($74, 1);
    STACKTOP = __stackBase__;
    return;
  } else if ((($conv)|0)==1) {
    var $51=$exfnloc_addr;
    var $52=HEAP32[((5248484)>>2)];
    var $arrayidx103=(($52+($51<<2))|0);
    var $53=HEAP32[(($arrayidx103)>>2)];
    $wizptr=$53;
    while(1) {
      var $54=$wizptr;
      var $55=HEAP32[((5243396)>>2)];
      var $arrayidx104=(($55+($54<<2))|0);
      var $56=HEAP32[(($arrayidx104)>>2)];
      var $57=HEAP32[((5251108)>>2)];
      var $cmp105=(($56)|0)!=(($57)|0);
      if (!($cmp105)) {
        break;
      }
      var $58=$wizptr;
      var $59=HEAP32[((5243396)>>2)];
      var $arrayidx108=(($59+($58<<2))|0);
      var $60=HEAP32[(($arrayidx108)>>2)];
      var $cmp109=(($60)|0)!=0;
      if ($cmp109) {
        var $61=$wizptr;
        var $62=HEAP32[((5243396)>>2)];
        var $arrayidx112=(($62+($61<<2))|0);
        var $63=HEAP32[(($arrayidx112)>>2)];
        _zexecutefn($63);
      } else {
        var $64=$wizptr;
        var $add114=((($64)+(1))|0);
        $wizptr=$add114;
        var $65=$wizptr;
        var $66=HEAP32[((5243396)>>2)];
        var $arrayidx115=(($66+($65<<2))|0);
        var $67=HEAP32[(($arrayidx115)>>2)];
        _zpushlitstk($67, 2);
      }
      var $68=$wizptr;
      var $add117=((($68)+(1))|0);
      $wizptr=$add117;
    }
    STACKTOP = __stackBase__;
    return;
  } else if ((($conv)|0)==4) {
    var $75=HEAP32[((5243876)>>2)];
    var $tobool123=(($75)|0)!=0;
    if ($tobool123) {
      var $76=HEAP32[((5251172)>>2)];
      var $77=HEAP32[((5243784)>>2)];
      var $mul=((($76)*($77))&-1);
      var $78=$exfnloc_addr;
      var $79=HEAP32[((5248484)>>2)];
      var $arrayidx126=(($79+($78<<2))|0);
      var $80=HEAP32[(($arrayidx126)>>2)];
      var $add127=((($mul)+($80))|0);
      HEAP32[((5248828)>>2)]=$add127;
      var $81=HEAP32[((5248828)>>2)];
      var $82=HEAP32[((5243888)>>2)];
      var $cmp128=(($81)|0) >= (($82)|0);
      if ($cmp128) {
        var $83=HEAP32[((5243908)>>2)];
        var $call131=_fputs(((5262880)|0), $83);
        var $84=HEAP32[((5243524)>>2)];
        var $call132=_fputs(((5262880)|0), $84);
        _printconfusion();
        _longjmp(((5248396)|0), 1);
        throw "Reached an unreachable!"
      }
      var $85=HEAP32[((5248828)>>2)];
      var $86=HEAP32[((5248840)>>2)];
      var $arrayidx134=(($86+($85<<2))|0);
      var $87=HEAP32[(($arrayidx134)>>2)];
      var $cmp135=(($87)|0)==0;
      if ($cmp135) {
        var $88=$exfnloc_addr;
        var $89=HEAP32[((5248752)>>2)];
        var $arrayidx138=(($89+($88<<2))|0);
        var $90=HEAP32[(($arrayidx138)>>2)];
        _zpushlitstk($90, 3);
      } else {
        var $91=HEAP32[((5248828)>>2)];
        var $92=HEAP32[((5248840)>>2)];
        var $arrayidx140=(($92+($91<<2))|0);
        var $93=HEAP32[(($arrayidx140)>>2)];
        _zpushlitstk($93, 1);
      }
    } else {
      _bstcantmesswithentriesprint();
    }
    STACKTOP = __stackBase__;
    return;
  } else if ((($conv)|0)==6) {
    var $102=HEAP32[((5243876)>>2)];
    var $tobool153=(($102)|0)!=0;
    if ($tobool153) {
      var $103=HEAP32[((5251172)>>2)];
      var $104=HEAP32[((5243788)>>2)];
      var $mul156=((($103)*($104))&-1);
      var $105=$exfnloc_addr;
      var $106=HEAP32[((5248484)>>2)];
      var $arrayidx157=(($106+($105<<2))|0);
      var $107=HEAP32[(($arrayidx157)>>2)];
      var $add158=((($mul156)+($107))|0);
      HEAP32[((5243508)>>2)]=$add158;
      HEAP32[((5251056)>>2)]=0;
      while(1) {
        var $108=HEAP32[((5243508)>>2)];
        var $109=HEAP32[((5251072)>>2)];
        var $add160=((($109)+(1))|0);
        var $mul161=((($108)*($add160))&-1);
        var $110=HEAP32[((5251056)>>2)];
        var $add162=((($mul161)+($110))|0);
        var $111=HEAP32[((5251080)>>2)];
        var $arrayidx163=(($111+$add162)|0);
        var $112=HEAP8[($arrayidx163)];
        var $conv164=(($112)&255);
        var $cmp165=(($conv164)|0)!=127;
        if (!($cmp165)) {
          break;
        }
        var $113=HEAP32[((5243508)>>2)];
        var $114=HEAP32[((5251072)>>2)];
        var $add168=((($114)+(1))|0);
        var $mul169=((($113)*($add168))&-1);
        var $115=HEAP32[((5251056)>>2)];
        var $add170=((($mul169)+($115))|0);
        var $116=HEAP32[((5251080)>>2)];
        var $arrayidx171=(($116+$add170)|0);
        var $117=HEAP8[($arrayidx171)];
        var $118=HEAP32[((5251056)>>2)];
        var $119=HEAP32[((5251064)>>2)];
        var $arrayidx172=(($119+$118)|0);
        HEAP8[($arrayidx172)]=$117;
        var $120=HEAP32[((5251056)>>2)];
        var $add173=((($120)+(1))|0);
        HEAP32[((5251056)>>2)]=$add173;
      }
      var $121=HEAP32[((5251056)>>2)];
      HEAP32[((5251060)>>2)]=$121;
      _addpoolbufandpush();
    } else {
      _bstcantmesswithentriesprint();
    }
    STACKTOP = __stackBase__;
    return;
  } else if ((($conv)|0)==5) {
    var $94=HEAP32[((5243876)>>2)];
    var $tobool144=(($94)|0)!=0;
    if ($tobool144) {
      var $95=HEAP32[((5251172)>>2)];
      var $96=HEAP32[((5243792)>>2)];
      var $mul147=((($95)*($96))&-1);
      var $97=$exfnloc_addr;
      var $98=HEAP32[((5248484)>>2)];
      var $arrayidx148=(($98+($97<<2))|0);
      var $99=HEAP32[(($arrayidx148)>>2)];
      var $add149=((($mul147)+($99))|0);
      var $100=HEAP32[((5251088)>>2)];
      var $arrayidx150=(($100+($add149<<2))|0);
      var $101=HEAP32[(($arrayidx150)>>2)];
      _zpushlitstk($101, 0);
    } else {
      _bstcantmesswithentriesprint();
    }
    STACKTOP = __stackBase__;
    return;
  } else {
    _unknwnfunctionclassconfusion();
    STACKTOP = __stackBase__;
    return;
  }
}
_zexecutefn["X"]=1;

function _getthetoplevelauxfilename() {
  var label = 0;

  _parsearguments();
  var $0=HEAP32[((5243732)>>2)];
  var $call=_cmdline($0);
  var $call1=_strlen($call);
  var $add=((($call1)+(5))|0);
  var $add2=((($add)+(1))|0);
  var $mul=(($add2)&-1);
  var $call3=_xmalloc($mul);
  HEAP32[((5243828)>>2)]=$call3;
  var $1=HEAP32[((5243828)>>2)];
  var $add_ptr=(($1+1)|0);
  var $2=HEAP32[((5243732)>>2)];
  var $call4=_cmdline($2);
  var $call5=_strcpy($add_ptr, $call4);
  var $3=HEAP32[((5243828)>>2)];
  var $add_ptr6=(($3+1)|0);
  var $call7=_strlen($add_ptr6);
  HEAP32[((5252608)>>2)]=$call7;
  var $4=HEAP32[((5252608)>>2)];
  var $5=HEAP32[((5243608)>>2)];
  var $add8=((($5)+(1))|0);
  var $6=HEAP32[((5243488)>>2)];
  var $arrayidx=(($6+($add8<<2))|0);
  var $7=HEAP32[(($arrayidx)>>2)];
  var $8=HEAP32[((5243608)>>2)];
  var $9=HEAP32[((5243488)>>2)];
  var $arrayidx9=(($9+($8<<2))|0);
  var $10=HEAP32[(($arrayidx9)>>2)];
  var $sub=((($7)-($10))|0);
  var $add10=((($4)+($sub))|0);
  var $cmp=(($add10)|0) > 2147483647;
  do {
    if (!($cmp)) {
      var $11=HEAP32[((5252608)>>2)];
      var $12=HEAP32[((5243576)>>2)];
      var $add11=((($12)+(1))|0);
      var $13=HEAP32[((5243488)>>2)];
      var $arrayidx12=(($13+($add11<<2))|0);
      var $14=HEAP32[(($arrayidx12)>>2)];
      var $15=HEAP32[((5243576)>>2)];
      var $16=HEAP32[((5243488)>>2)];
      var $arrayidx13=(($16+($15<<2))|0);
      var $17=HEAP32[(($arrayidx13)>>2)];
      var $sub14=((($14)-($17))|0);
      var $add15=((($11)+($sub14))|0);
      var $cmp16=(($add15)|0) > 2147483647;
      if ($cmp16) {
        break;
      }
      var $18=HEAP32[((5252608)>>2)];
      var $19=HEAP32[((5243604)>>2)];
      var $add18=((($19)+(1))|0);
      var $20=HEAP32[((5243488)>>2)];
      var $arrayidx19=(($20+($add18<<2))|0);
      var $21=HEAP32[(($arrayidx19)>>2)];
      var $22=HEAP32[((5243604)>>2)];
      var $23=HEAP32[((5243488)>>2)];
      var $arrayidx20=(($23+($22<<2))|0);
      var $24=HEAP32[(($arrayidx20)>>2)];
      var $sub21=((($21)-($24))|0);
      var $add22=((($18)+($sub21))|0);
      var $cmp23=(($add22)|0) > 2147483647;
      if ($cmp23) {
        break;
      }
      var $25=HEAP32[((5252608)>>2)];
      HEAP32[((5243832)>>2)]=$25;
      var $26=HEAP32[((5243832)>>2)];
      var $cmp24=(($26)|0) < 4;
      do {
        if ($cmp24) {
          label = 2369;
        } else {
          var $27=HEAP32[((5243828)>>2)];
          var $add_ptr26=(($27+1)|0);
          var $28=HEAP32[((5243832)>>2)];
          var $add_ptr27=(($add_ptr26+$28)|0);
          var $add_ptr28=((($add_ptr27)-(4))|0);
          var $call29=_strcmp($add_ptr28, ((5260824)|0));
          var $cmp30=(($call29)|0)!=0;
          if ($cmp30) {
            label = 2369;
            break;
          }
          var $30=HEAP32[((5252608)>>2)];
          var $sub32=((($30)-(4))|0);
          HEAP32[((5252608)>>2)]=$sub32;
          break;
        }
      } while(0);
      if (label == 2369) {
        var $29=HEAP32[((5243608)>>2)];
        _zaddextension($29);
      }
      HEAP32[((5252604)>>2)]=0;
      var $31=HEAP32[((5243828)>>2)];
      var $add_ptr34=(($31+1)|0);
      var $call35=_kpse_in_name_ok($add_ptr34);
      var $tobool=(($call35)|0)!=0;
      do {
        if ($tobool) {
          var $32=HEAP32[((5252604)>>2)];
          var $arrayidx37=((5252780+($32<<2))|0);
          var $call38=_open_input($arrayidx37, -1, ((5260780)|0));
          var $tobool39=(($call38)|0)!=0;
          if (!($tobool39)) {
            break;
          }
          var $33=HEAP32[((5252608)>>2)];
          HEAP32[((5243832)>>2)]=$33;
          var $34=HEAP32[((5243576)>>2)];
          _zaddextension($34);
          var $35=HEAP32[((5243828)>>2)];
          var $add_ptr42=(($35+1)|0);
          var $call43=_kpse_out_name_ok($add_ptr42);
          var $tobool44=(($call43)|0)!=0;
          do {
            if ($tobool44) {
              var $call46=_open_output(5243908, ((5260772)|0));
              var $tobool47=(($call46)|0)!=0;
              if (!($tobool47)) {
                break;
              }
              var $36=HEAP32[((5252608)>>2)];
              HEAP32[((5243832)>>2)]=$36;
              var $37=HEAP32[((5243604)>>2)];
              _zaddextension($37);
              var $38=HEAP32[((5243828)>>2)];
              var $add_ptr50=(($38+1)|0);
              var $call51=_kpse_out_name_ok($add_ptr50);
              var $tobool52=(($call51)|0)!=0;
              do {
                if ($tobool52) {
                  var $call54=_open_output(5252592, ((5260772)|0));
                  var $tobool55=(($call54)|0)!=0;
                  if (!($tobool55)) {
                    break;
                  }
                  var $39=HEAP32[((5252608)>>2)];
                  HEAP32[((5243832)>>2)]=$39;
                  var $40=HEAP32[((5243608)>>2)];
                  _zaddextension($40);
                  HEAP32[((5243824)>>2)]=1;
                  while(1) {
                    var $41=HEAP32[((5243824)>>2)];
                    var $42=HEAP32[((5243832)>>2)];
                    var $cmp58=(($41)|0) <= (($42)|0);
                    if (!($cmp58)) {
                      break;
                    }
                    var $43=HEAP32[((5243824)>>2)];
                    var $44=HEAP32[((5243828)>>2)];
                    var $arrayidx59=(($44+$43)|0);
                    var $45=HEAP8[($arrayidx59)];
                    var $idxprom=(($45)&255);
                    var $arrayidx60=((5242880+$idxprom)|0);
                    var $46=HEAP8[($arrayidx60)];
                    var $47=HEAP32[((5243824)>>2)];
                    var $48=HEAP32[((5252252)>>2)];
                    var $arrayidx61=(($48+$47)|0);
                    HEAP8[($arrayidx61)]=$46;
                    var $49=HEAP32[((5243824)>>2)];
                    var $add62=((($49)+(1))|0);
                    HEAP32[((5243824)>>2)]=$add62;
                  }
                  var $50=HEAP32[((5252252)>>2)];
                  var $51=HEAP32[((5252608)>>2)];
                  var $call63=_zstrlookup($50, 1, $51, 0, 1);
                  var $52=HEAP32[((5248752)>>2)];
                  var $arrayidx64=(($52+($call63<<2))|0);
                  var $53=HEAP32[(($arrayidx64)>>2)];
                  HEAP32[((5243444)>>2)]=$53;
                  var $54=HEAP32[((5252252)>>2)];
                  var $55=HEAP32[((5243832)>>2)];
                  var $call65=_zstrlookup($54, 1, $55, 3, 1);
                  var $56=HEAP32[((5248752)>>2)];
                  var $arrayidx66=(($56+($call65<<2))|0);
                  var $57=HEAP32[(($arrayidx66)>>2)];
                  var $58=HEAP32[((5252604)>>2)];
                  var $arrayidx67=((5252696+($58<<2))|0);
                  HEAP32[(($arrayidx67)>>2)]=$57;
                  var $59=HEAP32[((5248776)>>2)];
                  var $tobool68=(($59)|0)!=0;
                  if ($tobool68) {
                    var $60=HEAP32[((5243908)>>2)];
                    var $call70=_fputs(((5260708)|0), $60);
                    var $61=HEAP32[((5243524)>>2)];
                    var $call71=_fputs(((5260708)|0), $61);
                    _printconfusion();
                    _longjmp(((5248396)|0), 1);
                    throw "Reached an unreachable!"
                  }
                  var $62=HEAP32[((5252604)>>2)];
                  var $arrayidx73=((5252612+($62<<2))|0);
                  HEAP32[(($arrayidx73)>>2)]=0;

                  return;
                }
              } while(0);
              _samwrongfilenameprint();
              _uexit(1);
              throw "Reached an unreachable!"
            }
          } while(0);
          _samwrongfilenameprint();
          _uexit(1);
          throw "Reached an unreachable!"
        }
      } while(0);
      _samwrongfilenameprint();
      _uexit(1);
      throw "Reached an unreachable!"
    }
  } while(0);
  _samtoolongfilenameprint();
  _uexit(1);
  throw "Reached an unreachable!"
}
_getthetoplevelauxfilename["X"]=1;

function _parsearguments() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 84)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $longoptions=__stackBase__;
  var $getoptreturnval;
  var $optionindex=(__stackBase__)+(80);
  var $currentoption;
  HEAP32[((5243420)>>2)]=1;
  HEAP32[((5243872)>>2)]=2;
  $currentoption=0;
  var $arrayidx=(($longoptions)|0);
  var $name=(($arrayidx)|0);
  HEAP32[(($name)>>2)]=((5258384)|0);
  var $arrayidx1=(($longoptions)|0);
  var $has_arg=(($arrayidx1+4)|0);
  HEAP32[(($has_arg)>>2)]=0;
  var $arrayidx2=(($longoptions)|0);
  var $flag=(($arrayidx2+8)|0);
  HEAP32[(($flag)>>2)]=5243420;
  var $arrayidx3=(($longoptions)|0);
  var $val=(($arrayidx3+12)|0);
  HEAP32[(($val)>>2)]=0;
  var $0=$currentoption;
  var $add=((($0)+(1))|0);
  $currentoption=$add;
  var $1=$currentoption;
  var $arrayidx4=(($longoptions+($1<<4))|0);
  var $name5=(($arrayidx4)|0);
  HEAP32[(($name5)>>2)]=((5258356)|0);
  var $2=$currentoption;
  var $arrayidx6=(($longoptions+($2<<4))|0);
  var $has_arg7=(($arrayidx6+4)|0);
  HEAP32[(($has_arg7)>>2)]=1;
  var $3=$currentoption;
  var $arrayidx8=(($longoptions+($3<<4))|0);
  var $flag9=(($arrayidx8+8)|0);
  HEAP32[(($flag9)>>2)]=0;
  var $4=$currentoption;
  var $arrayidx10=(($longoptions+($4<<4))|0);
  var $val11=(($arrayidx10+12)|0);
  HEAP32[(($val11)>>2)]=0;
  var $5=$currentoption;
  var $add12=((($5)+(1))|0);
  $currentoption=$add12;
  var $6=$currentoption;
  var $arrayidx13=(($longoptions+($6<<4))|0);
  var $name14=(($arrayidx13)|0);
  HEAP32[(($name14)>>2)]=((5258328)|0);
  var $7=$currentoption;
  var $arrayidx15=(($longoptions+($7<<4))|0);
  var $has_arg16=(($arrayidx15+4)|0);
  HEAP32[(($has_arg16)>>2)]=0;
  var $8=$currentoption;
  var $arrayidx17=(($longoptions+($8<<4))|0);
  var $flag18=(($arrayidx17+8)|0);
  HEAP32[(($flag18)>>2)]=0;
  var $9=$currentoption;
  var $arrayidx19=(($longoptions+($9<<4))|0);
  var $val20=(($arrayidx19+12)|0);
  HEAP32[(($val20)>>2)]=0;
  var $10=$currentoption;
  var $add21=((($10)+(1))|0);
  $currentoption=$add21;
  var $11=$currentoption;
  var $arrayidx22=(($longoptions+($11<<4))|0);
  var $name23=(($arrayidx22)|0);
  HEAP32[(($name23)>>2)]=((5258320)|0);
  var $12=$currentoption;
  var $arrayidx24=(($longoptions+($12<<4))|0);
  var $has_arg25=(($arrayidx24+4)|0);
  HEAP32[(($has_arg25)>>2)]=0;
  var $13=$currentoption;
  var $arrayidx26=(($longoptions+($13<<4))|0);
  var $flag27=(($arrayidx26+8)|0);
  HEAP32[(($flag27)>>2)]=0;
  var $14=$currentoption;
  var $arrayidx28=(($longoptions+($14<<4))|0);
  var $val29=(($arrayidx28+12)|0);
  HEAP32[(($val29)>>2)]=0;
  var $15=$currentoption;
  var $add30=((($15)+(1))|0);
  $currentoption=$add30;
  var $16=$currentoption;
  var $arrayidx31=(($longoptions+($16<<4))|0);
  var $name32=(($arrayidx31)|0);
  HEAP32[(($name32)>>2)]=0;
  var $17=$currentoption;
  var $arrayidx33=(($longoptions+($17<<4))|0);
  var $has_arg34=(($arrayidx33+4)|0);
  HEAP32[(($has_arg34)>>2)]=0;
  var $18=$currentoption;
  var $arrayidx35=(($longoptions+($18<<4))|0);
  var $flag36=(($arrayidx35+8)|0);
  HEAP32[(($flag36)>>2)]=0;
  var $19=$currentoption;
  var $arrayidx37=(($longoptions+($19<<4))|0);
  var $val38=(($arrayidx37+12)|0);
  HEAP32[(($val38)>>2)]=0;
  while(1) {
    var $20=HEAP32[((5252872)>>2)];
    var $21=HEAP32[((5252868)>>2)];
    var $arraydecay=(($longoptions)|0);
    var $call=_getopt_long_only($20, $21, ((5258256)|0), $arraydecay, $optionindex);
    $getoptreturnval=$call;
    var $22=$getoptreturnval;
    var $cmp=(($22)|0)==-1;
    if ($cmp) {
    } else {
      var $23=$getoptreturnval;
      var $cmp39=(($23)|0)==63;
      if ($cmp39) {
        _usage(((5258464)|0));
      } else {
        var $24=HEAP32[(($optionindex)>>2)];
        var $arrayidx42=(($longoptions+($24<<4))|0);
        var $name43=(($arrayidx42)|0);
        var $25=HEAP32[(($name43)>>2)];
        var $call44=_strcmp($25, ((5258356)|0));
        var $cmp45=(($call44)|0)==0;
        if ($cmp45) {
          var $26=HEAP32[((5243740)>>2)];
          var $call47=_atoi($26);
          HEAP32[((5243872)>>2)]=$call47;
        } else {
          var $27=HEAP32[(($optionindex)>>2)];
          var $arrayidx49=(($longoptions+($27<<4))|0);
          var $name50=(($arrayidx49)|0);
          var $28=HEAP32[(($name50)>>2)];
          var $call51=_strcmp($28, ((5258328)|0));
          var $cmp52=(($call51)|0)==0;
          if ($cmp52) {
            _usagehelp(((5272752)|0), 0);
          } else {
            var $29=HEAP32[(($optionindex)>>2)];
            var $arrayidx55=(($longoptions+($29<<4))|0);
            var $name56=(($arrayidx55)|0);
            var $30=HEAP32[(($name56)>>2)];
            var $call57=_strcmp($30, ((5258320)|0));
            var $cmp58=(($call57)|0)==0;
            if ($cmp58) {
              _printversionandexit(((5258224)|0), ((5258160)|0), 0, 0);
            }
          }
        }
      }
    }
    var $31=$getoptreturnval;
    var $cmp64=(($31)|0)==-1;
    var $lnot=$cmp64 ^ 1;
    if (!($lnot)) {
      break;
    }
  }
  var $32=HEAP32[((5243732)>>2)];
  var $add65=((($32)+(1))|0);
  var $33=HEAP32[((5252872)>>2)];
  var $cmp66=(($add65)|0)!=(($33)|0);
  if (!($cmp66)) {
    STACKTOP = __stackBase__;
    return;
  }
  var $34=HEAP32[((_stderr)>>2)];
  var $call68=_fprintf($34, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5258120)|0),tempInt));
  _usage(((5258464)|0));
  STACKTOP = __stackBase__;
  return;
}
_parsearguments["X"]=1;

function _auxbibdatacommand() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5252516)>>2)];
  var $tobool=(($0)|0)!=0;
  if ($tobool) {
    _zauxerrillegalanotherprint(0);
    _auxerrprint();
    STACKTOP = __stackBase__;
    return;
  }
  HEAP32[((5252516)>>2)]=1;
  while(1) {
    var $1=HEAP32[((5252244)>>2)];
    var $2=HEAP32[((5252252)>>2)];
    var $arrayidx=(($2+$1)|0);
    var $3=HEAP8[($arrayidx)];
    var $conv=(($3)&255);
    var $cmp=(($conv)|0)!=125;
    if (!($cmp)) {
      label = 2435;
      break;
    }
    var $4=HEAP32[((5252244)>>2)];
    var $add=((($4)+(1))|0);
    HEAP32[((5252244)>>2)]=$add;
    var $call=_zscan2white(125, 44);
    var $tobool2=(($call)|0)!=0;
    if (!($tobool2)) {
      label = 2419;
      break;
    }
    var $5=HEAP32[((5252244)>>2)];
    var $6=HEAP32[((5252252)>>2)];
    var $arrayidx5=(($6+$5)|0);
    var $7=HEAP8[($arrayidx5)];
    var $idxprom=(($7)&255);
    var $arrayidx6=((5243932+$idxprom)|0);
    var $8=HEAP8[($arrayidx6)];
    var $conv7=(($8)&255);
    var $cmp8=(($conv7)|0)==1;
    if ($cmp8) {
      label = 2421;
      break;
    }
    var $9=HEAP32[((5244208)>>2)];
    var $10=HEAP32[((5252244)>>2)];
    var $add12=((($10)+(1))|0);
    var $cmp13=(($9)|0) > (($add12)|0);
    if ($cmp13) {
      var $11=HEAP32[((5252244)>>2)];
      var $12=HEAP32[((5252252)>>2)];
      var $arrayidx15=(($12+$11)|0);
      var $13=HEAP8[($arrayidx15)];
      var $conv16=(($13)&255);
      var $cmp17=(($conv16)|0)==125;
      if ($cmp17) {
        label = 2424;
        break;
      }
    }
    var $14=HEAP32[((5252520)>>2)];
    var $15=HEAP32[((5243896)>>2)];
    var $cmp21=(($14)|0)==(($15)|0);
    if ($cmp21) {
      var $16=HEAP32[((5243908)>>2)];
      var $17=HEAP32[((5243896)>>2)];
      var $add24=((($17)+(20))|0);
      var $18=HEAP32[((5243896)>>2)];
      var $call25=_fprintf($16, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5260680)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add24,HEAP32[(((tempInt)+(12))>>2)]=$18,tempInt));
      var $19=HEAP32[((5252524)>>2)];
      var $20=$19;
      var $21=HEAP32[((5243896)>>2)];
      var $add26=((($21)+(20))|0);
      var $add27=((($add26)+(1))|0);
      var $mul=((($add27<<2))&-1);
      var $call28=_xrealloc($20, $mul);
      var $22=$call28;
      HEAP32[((5252524)>>2)]=$22;
      var $23=HEAP32[((5243908)>>2)];
      var $24=HEAP32[((5243896)>>2)];
      var $add29=((($24)+(20))|0);
      var $25=HEAP32[((5243896)>>2)];
      var $call30=_fprintf($23, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5260656)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add29,HEAP32[(((tempInt)+(12))>>2)]=$25,tempInt));
      var $26=HEAP32[((5252532)>>2)];
      var $27=$26;
      var $28=HEAP32[((5243896)>>2)];
      var $add31=((($28)+(20))|0);
      var $add32=((($add31)+(1))|0);
      var $mul33=((($add32<<2))&-1);
      var $call34=_xrealloc($27, $mul33);
      var $29=$call34;
      HEAP32[((5252532)>>2)]=$29;
      var $30=HEAP32[((5243908)>>2)];
      var $31=HEAP32[((5243896)>>2)];
      var $add35=((($31)+(20))|0);
      var $32=HEAP32[((5243896)>>2)];
      var $call36=_fprintf($30, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5260624)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add35,HEAP32[(((tempInt)+(12))>>2)]=$32,tempInt));
      var $33=HEAP32[((5243540)>>2)];
      var $34=$33;
      var $35=HEAP32[((5243896)>>2)];
      var $add37=((($35)+(20))|0);
      var $add38=((($add37)+(1))|0);
      var $mul39=((($add38<<2))&-1);
      var $call40=_xrealloc($34, $mul39);
      var $36=$call40;
      HEAP32[((5243540)>>2)]=$36;
      var $37=HEAP32[((5243896)>>2)];
      var $add41=((($37)+(20))|0);
      HEAP32[((5243896)>>2)]=$add41;
    }
    var $38=HEAP32[((5252252)>>2)];
    var $39=HEAP32[((5252248)>>2)];
    var $40=HEAP32[((5252244)>>2)];
    var $41=HEAP32[((5252248)>>2)];
    var $sub=((($40)-($41))|0);
    var $call43=_zstrlookup($38, $39, $sub, 6, 1);
    var $42=HEAP32[((5248752)>>2)];
    var $arrayidx44=(($42+($call43<<2))|0);
    var $43=HEAP32[(($arrayidx44)>>2)];
    var $44=HEAP32[((5252520)>>2)];
    var $45=HEAP32[((5252524)>>2)];
    var $arrayidx45=(($45+($44<<2))|0);
    HEAP32[(($arrayidx45)>>2)]=$43;
    var $46=HEAP32[((5248776)>>2)];
    var $tobool46=(($46)|0)!=0;
    if ($tobool46) {
      label = 2430;
      break;
    }
    var $49=HEAP32[((5252520)>>2)];
    var $50=HEAP32[((5252524)>>2)];
    var $arrayidx51=(($50+($49<<2))|0);
    var $51=HEAP32[(($arrayidx51)>>2)];
    _zstartname($51);
    var $52=HEAP32[((5243828)>>2)];
    var $add_ptr=(($52+1)|0);
    var $call52=_kpse_in_name_ok($add_ptr);
    var $tobool53=(($call52)|0)!=0;
    if (!($tobool53)) {
      label = 2433;
      break;
    }
    var $53=HEAP32[((5252520)>>2)];
    var $54=HEAP32[((5252532)>>2)];
    var $arrayidx54=(($54+($53<<2))|0);
    var $call55=_open_input($arrayidx54, 6, ((5260780)|0));
    var $tobool56=(($call55)|0)!=0;
    if (!($tobool56)) {
      label = 2433;
      break;
    }
    var $57=HEAP32[((5252520)>>2)];
    var $add61=((($57)+(1))|0);
    HEAP32[((5252520)>>2)]=$add61;
  }
  if (label == 2421) {
    _auxerrwhitespaceinargumentprint();
    _auxerrprint();
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 2424) {
    _auxerrstuffafterrightbraceprint();
    _auxerrprint();
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 2419) {
    _auxerrnorightbraceprint();
    _auxerrprint();
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 2430) {
    var $47=HEAP32[((5243908)>>2)];
    var $call48=_fputs(((5260576)|0), $47);
    var $48=HEAP32[((5243524)>>2)];
    var $call49=_fputs(((5260576)|0), $48);
    _printbibname();
    _auxerrprint();
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 2433) {
    var $55=HEAP32[((5243908)>>2)];
    var $call58=_fputs(((5260520)|0), $55);
    var $56=HEAP32[((5243524)>>2)];
    var $call59=_fputs(((5260520)|0), $56);
    _printbibname();
    _auxerrprint();
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 2435) {
    STACKTOP = __stackBase__;
    return;
  }
}
_auxbibdatacommand["X"]=1;

function _auxcitationcommand() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  HEAP32[((5251196)>>2)]=1;
  L3050: while(1) {
    var $0=HEAP32[((5252244)>>2)];
    var $1=HEAP32[((5252252)>>2)];
    var $arrayidx=(($1+$0)|0);
    var $2=HEAP8[($arrayidx)];
    var $conv=(($2)&255);
    var $cmp=(($conv)|0)!=125;
    if (!($cmp)) {
      label = 2471;
      break;
    }
    var $3=HEAP32[((5252244)>>2)];
    var $add=((($3)+(1))|0);
    HEAP32[((5252244)>>2)]=$add;
    var $call=_zscan2white(125, 44);
    var $tobool=(($call)|0)!=0;
    if (!($tobool)) {
      label = 2447;
      break;
    }
    var $4=HEAP32[((5252244)>>2)];
    var $5=HEAP32[((5252252)>>2)];
    var $arrayidx2=(($5+$4)|0);
    var $6=HEAP8[($arrayidx2)];
    var $idxprom=(($6)&255);
    var $arrayidx3=((5243932+$idxprom)|0);
    var $7=HEAP8[($arrayidx3)];
    var $conv4=(($7)&255);
    var $cmp5=(($conv4)|0)==1;
    if ($cmp5) {
      label = 2449;
      break;
    }
    var $8=HEAP32[((5244208)>>2)];
    var $9=HEAP32[((5252244)>>2)];
    var $add9=((($9)+(1))|0);
    var $cmp10=(($8)|0) > (($add9)|0);
    if ($cmp10) {
      var $10=HEAP32[((5252244)>>2)];
      var $11=HEAP32[((5252252)>>2)];
      var $arrayidx12=(($11+$10)|0);
      var $12=HEAP8[($arrayidx12)];
      var $conv13=(($12)&255);
      var $cmp14=(($conv13)|0)==125;
      if ($cmp14) {
        label = 2452;
        break;
      }
    }
    var $13=HEAP32[((5252244)>>2)];
    var $14=HEAP32[((5252248)>>2)];
    var $sub=((($13)-($14))|0);
    var $cmp18=(($sub)|0)==1;
    do {
      if ($cmp18) {
        var $15=HEAP32[((5252248)>>2)];
        var $16=HEAP32[((5252252)>>2)];
        var $arrayidx21=(($16+$15)|0);
        var $17=HEAP8[($arrayidx21)];
        var $conv22=(($17)&255);
        var $cmp23=(($conv22)|0)==42;
        if (!($cmp23)) {
          label = 2459;
          break;
        }
        var $18=HEAP32[((5252888)>>2)];
        var $tobool26=(($18)|0)!=0;
        if ($tobool26) {
          label = 2456;
          break L3050;
        }
        HEAP32[((5252888)>>2)]=1;
        var $21=HEAP32[((5251172)>>2)];
        HEAP32[((5252884)>>2)]=$21;
        break;
      } else {
        label = 2459;
      }
    } while(0);
    if (label == 2459) {
      label = 0;
      var $22=HEAP32[((5252248)>>2)];
      HEAP32[((5243460)>>2)]=$22;
      while(1) {
        var $23=HEAP32[((5243460)>>2)];
        var $24=HEAP32[((5252244)>>2)];
        var $cmp33=(($23)|0) < (($24)|0);
        if (!($cmp33)) {
          break;
        }
        var $25=HEAP32[((5243460)>>2)];
        var $26=HEAP32[((5252252)>>2)];
        var $arrayidx36=(($26+$25)|0);
        var $27=HEAP8[($arrayidx36)];
        var $28=HEAP32[((5243460)>>2)];
        var $29=HEAP32[((5251064)>>2)];
        var $arrayidx37=(($29+$28)|0);
        HEAP8[($arrayidx37)]=$27;
        var $30=HEAP32[((5243460)>>2)];
        var $add38=((($30)+(1))|0);
        HEAP32[((5243460)>>2)]=$add38;
      }
      var $31=HEAP32[((5251064)>>2)];
      var $32=HEAP32[((5252248)>>2)];
      var $33=HEAP32[((5252244)>>2)];
      var $34=HEAP32[((5252248)>>2)];
      var $sub39=((($33)-($34))|0);
      _zlowercase($31, $32, $sub39);
      var $35=HEAP32[((5251064)>>2)];
      var $36=HEAP32[((5252248)>>2)];
      var $37=HEAP32[((5252244)>>2)];
      var $38=HEAP32[((5252248)>>2)];
      var $sub40=((($37)-($38))|0);
      var $call41=_zstrlookup($35, $36, $sub40, 10, 1);
      HEAP32[((5244192)>>2)]=$call41;
      var $39=HEAP32[((5248776)>>2)];
      var $tobool42=(($39)|0)!=0;
      if ($tobool42) {
        var $40=HEAP32[((5252252)>>2)];
        var $41=HEAP32[((5252248)>>2)];
        var $42=HEAP32[((5252244)>>2)];
        var $43=HEAP32[((5252248)>>2)];
        var $sub44=((($42)-($43))|0);
        var $call45=_zstrlookup($40, $41, $sub44, 9, 0);
        HEAP32[((5251112)>>2)]=$call45;
        var $44=HEAP32[((5248776)>>2)];
        var $tobool46=(($44)|0)!=0;
        if (!($tobool46)) {
          label = 2464;
          break;
        }
      } else {
        var $56=HEAP32[((5252252)>>2)];
        var $57=HEAP32[((5252248)>>2)];
        var $58=HEAP32[((5252244)>>2)];
        var $59=HEAP32[((5252248)>>2)];
        var $sub57=((($58)-($59))|0);
        var $call58=_zstrlookup($56, $57, $sub57, 9, 1);
        HEAP32[((5251180)>>2)]=$call58;
        var $60=HEAP32[((5248776)>>2)];
        var $tobool59=(($60)|0)!=0;
        if ($tobool59) {
          _hashciteconfusion();
        }
        var $61=HEAP32[((5251172)>>2)];
        _zcheckciteoverflow($61);
        var $62=HEAP32[((5251180)>>2)];
        var $63=HEAP32[((5248752)>>2)];
        var $arrayidx62=(($63+($62<<2))|0);
        var $64=HEAP32[(($arrayidx62)>>2)];
        var $65=HEAP32[((5251172)>>2)];
        var $66=HEAP32[((5251184)>>2)];
        var $arrayidx63=(($66+($65<<2))|0);
        HEAP32[(($arrayidx63)>>2)]=$64;
        var $67=HEAP32[((5251172)>>2)];
        var $68=HEAP32[((5251180)>>2)];
        var $69=HEAP32[((5248484)>>2)];
        var $arrayidx64=(($69+($68<<2))|0);
        HEAP32[(($arrayidx64)>>2)]=$67;
        var $70=HEAP32[((5251180)>>2)];
        var $71=HEAP32[((5244192)>>2)];
        var $72=HEAP32[((5248484)>>2)];
        var $arrayidx65=(($72+($71<<2))|0);
        HEAP32[(($arrayidx65)>>2)]=$70;
        var $73=HEAP32[((5251172)>>2)];
        var $add66=((($73)+(1))|0);
        HEAP32[((5251172)>>2)]=$add66;
      }
    }
  }
  if (label == 2464) {
    var $45=HEAP32[((5243908)>>2)];
    var $call48=_fputs(((5260248)|0), $45);
    var $46=HEAP32[((5243524)>>2)];
    var $call49=_fputs(((5260248)|0), $46);
    _printatoken();
    var $47=HEAP32[((5243908)>>2)];
    var $call50=_fputs(((5260240)|0), $47);
    var $48=HEAP32[((5243524)>>2)];
    var $call51=_fputs(((5260240)|0), $48);
    var $49=HEAP32[((5244192)>>2)];
    var $50=HEAP32[((5248484)>>2)];
    var $arrayidx52=(($50+($49<<2))|0);
    var $51=HEAP32[(($arrayidx52)>>2)];
    var $52=HEAP32[((5248484)>>2)];
    var $arrayidx53=(($52+($51<<2))|0);
    var $53=HEAP32[(($arrayidx53)>>2)];
    var $54=HEAP32[((5251184)>>2)];
    var $arrayidx54=(($54+($53<<2))|0);
    var $55=HEAP32[(($arrayidx54)>>2)];
    _zprintapoolstr($55);
    _printanewline();
    _auxerrprint();
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 2447) {
    _auxerrnorightbraceprint();
    _auxerrprint();
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 2471) {
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 2456) {
    var $19=HEAP32[((5243908)>>2)];
    var $call28=_fprintf($19, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5260288)|0),tempInt));
    var $20=HEAP32[((5243524)>>2)];
    var $call29=_fprintf($20, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5260288)|0),tempInt));
    _auxerrprint();
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 2449) {
    _auxerrwhitespaceinargumentprint();
    _auxerrprint();
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 2452) {
    _auxerrstuffafterrightbraceprint();
    _auxerrprint();
    STACKTOP = __stackBase__;
    return;
  }
}
_auxcitationcommand["X"]=1;

function _auxbibstylecommand() {
  var label = 0;

  var $0=HEAP32[((5252284)>>2)];
  var $tobool=(($0)|0)!=0;
  if ($tobool) {
    _zauxerrillegalanotherprint(1);
    _auxerrprint();

    return;
  }
  HEAP32[((5252284)>>2)]=1;
  var $1=HEAP32[((5252244)>>2)];
  var $add=((($1)+(1))|0);
  HEAP32[((5252244)>>2)]=$add;
  var $call=_zscan1white(125);
  var $tobool1=(($call)|0)!=0;
  if (!($tobool1)) {
    _auxerrnorightbraceprint();
    _auxerrprint();

    return;
  }
  var $2=HEAP32[((5252244)>>2)];
  var $3=HEAP32[((5252252)>>2)];
  var $arrayidx=(($3+$2)|0);
  var $4=HEAP8[($arrayidx)];
  var $idxprom=(($4)&255);
  var $arrayidx4=((5243932+$idxprom)|0);
  var $5=HEAP8[($arrayidx4)];
  var $conv=(($5)&255);
  var $cmp=(($conv)|0)==1;
  if ($cmp) {
    _auxerrwhitespaceinargumentprint();
    _auxerrprint();

    return;
  }
  var $6=HEAP32[((5244208)>>2)];
  var $7=HEAP32[((5252244)>>2)];
  var $add8=((($7)+(1))|0);
  var $cmp9=(($6)|0) > (($add8)|0);
  if ($cmp9) {
    _auxerrstuffafterrightbraceprint();
    _auxerrprint();

    return;
  }
  var $8=HEAP32[((5252252)>>2)];
  var $9=HEAP32[((5252248)>>2)];
  var $10=HEAP32[((5252244)>>2)];
  var $11=HEAP32[((5252248)>>2)];
  var $sub=((($10)-($11))|0);
  var $call13=_zstrlookup($8, $9, $sub, 5, 1);
  var $12=HEAP32[((5248752)>>2)];
  var $arrayidx14=(($12+($call13<<2))|0);
  var $13=HEAP32[(($arrayidx14)>>2)];
  HEAP32[((5252280)>>2)]=$13;
  var $14=HEAP32[((5248776)>>2)];
  var $tobool15=(($14)|0)!=0;
  if ($tobool15) {
    var $15=HEAP32[((5243908)>>2)];
    var $call17=_fputs(((5260460)|0), $15);
    var $16=HEAP32[((5243524)>>2)];
    var $call18=_fputs(((5260460)|0), $16);
    _printconfusion();
    _longjmp(((5248396)|0), 1);
    throw "Reached an unreachable!"
  }
  var $17=HEAP32[((5252280)>>2)];
  _zstartname($17);
  var $18=HEAP32[((5243828)>>2)];
  var $add_ptr=(($18+1)|0);
  var $call20=_kpse_in_name_ok($add_ptr);
  var $tobool21=(($call20)|0)!=0;
  do {
    if ($tobool21) {
      var $call22=_open_input(5252292, 7, ((5260780)|0));
      var $tobool23=(($call22)|0)!=0;
      if (!($tobool23)) {
        break;
      }
      var $21=HEAP32[((5243420)>>2)];
      var $tobool28=(($21)|0)!=0;
      if ($tobool28) {
        var $22=HEAP32[((5243908)>>2)];
        var $call30=_fputs(((5260360)|0), $22);
        var $23=HEAP32[((5243524)>>2)];
        var $call31=_fputs(((5260360)|0), $23);
        _printbstname();
      } else {
        var $24=HEAP32[((5243908)>>2)];
        var $call32=_fputs(((5260360)|0), $24);
        _logprbstname();
      }

      return;
    }
  } while(0);
  var $19=HEAP32[((5243908)>>2)];
  var $call25=_fputs(((5260412)|0), $19);
  var $20=HEAP32[((5243524)>>2)];
  var $call26=_fputs(((5260412)|0), $20);
  _printbstname();
  HEAP32[((5252280)>>2)]=0;
  _auxerrprint();

  return;
}
_auxbibstylecommand["X"]=1;

function _auxinputcommand() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $auxextensionok;
  var $0=HEAP32[((5252244)>>2)];
  var $add=((($0)+(1))|0);
  HEAP32[((5252244)>>2)]=$add;
  var $call=_zscan1white(125);
  var $tobool=(($call)|0)!=0;
  if (!($tobool)) {
    _auxerrnorightbraceprint();
    _auxerrprint();
    STACKTOP = __stackBase__;
    return;
  }
  var $1=HEAP32[((5252244)>>2)];
  var $2=HEAP32[((5252252)>>2)];
  var $arrayidx=(($2+$1)|0);
  var $3=HEAP8[($arrayidx)];
  var $idxprom=(($3)&255);
  var $arrayidx1=((5243932+$idxprom)|0);
  var $4=HEAP8[($arrayidx1)];
  var $conv=(($4)&255);
  var $cmp=(($conv)|0)==1;
  if ($cmp) {
    _auxerrwhitespaceinargumentprint();
    _auxerrprint();
    STACKTOP = __stackBase__;
    return;
  }
  var $5=HEAP32[((5244208)>>2)];
  var $6=HEAP32[((5252244)>>2)];
  var $add5=((($6)+(1))|0);
  var $cmp6=(($5)|0) > (($add5)|0);
  if ($cmp6) {
    _auxerrstuffafterrightbraceprint();
    _auxerrprint();
    STACKTOP = __stackBase__;
    return;
  }
  var $7=HEAP32[((5252604)>>2)];
  var $add10=((($7)+(1))|0);
  HEAP32[((5252604)>>2)]=$add10;
  var $8=HEAP32[((5252604)>>2)];
  var $cmp11=(($8)|0)==20;
  if ($cmp11) {
    _printatoken();
    var $9=HEAP32[((5243908)>>2)];
    var $call14=_fputs(((5260216)|0), $9);
    var $10=HEAP32[((5243524)>>2)];
    var $call15=_fputs(((5260216)|0), $10);
    _printoverflow();
    var $11=HEAP32[((5243908)>>2)];
    var $call16=_fprintf($11, ((5266892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5260184)|0),HEAP32[(((tempInt)+(4))>>2)]=20,tempInt));
    var $12=HEAP32[((5243524)>>2)];
    var $call17=_fprintf($12, ((5266892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5260184)|0),HEAP32[(((tempInt)+(4))>>2)]=20,tempInt));
    _longjmp(((5248396)|0), 1);
    throw "Reached an unreachable!"
  }
  $auxextensionok=1;
  var $13=HEAP32[((5252244)>>2)];
  var $14=HEAP32[((5252248)>>2)];
  var $sub=((($13)-($14))|0);
  var $15=HEAP32[((5243608)>>2)];
  var $add19=((($15)+(1))|0);
  var $16=HEAP32[((5243488)>>2)];
  var $arrayidx20=(($16+($add19<<2))|0);
  var $17=HEAP32[(($arrayidx20)>>2)];
  var $18=HEAP32[((5243608)>>2)];
  var $19=HEAP32[((5243488)>>2)];
  var $arrayidx21=(($19+($18<<2))|0);
  var $20=HEAP32[(($arrayidx21)>>2)];
  var $sub22=((($17)-($20))|0);
  var $cmp23=(($sub)|0) < (($sub22)|0);
  if ($cmp23) {
    $auxextensionok=0;
  } else {
    var $21=HEAP32[((5243608)>>2)];
    var $22=HEAP32[((5252252)>>2)];
    var $23=HEAP32[((5252244)>>2)];
    var $24=HEAP32[((5243608)>>2)];
    var $add26=((($24)+(1))|0);
    var $25=HEAP32[((5243488)>>2)];
    var $arrayidx27=(($25+($add26<<2))|0);
    var $26=HEAP32[(($arrayidx27)>>2)];
    var $27=HEAP32[((5243608)>>2)];
    var $28=HEAP32[((5243488)>>2)];
    var $arrayidx28=(($28+($27<<2))|0);
    var $29=HEAP32[(($arrayidx28)>>2)];
    var $sub29=((($26)-($29))|0);
    var $sub30=((($23)-($sub29))|0);
    var $30=HEAP32[((5243608)>>2)];
    var $add31=((($30)+(1))|0);
    var $31=HEAP32[((5243488)>>2)];
    var $arrayidx32=(($31+($add31<<2))|0);
    var $32=HEAP32[(($arrayidx32)>>2)];
    var $33=HEAP32[((5243608)>>2)];
    var $34=HEAP32[((5243488)>>2)];
    var $arrayidx33=(($34+($33<<2))|0);
    var $35=HEAP32[(($arrayidx33)>>2)];
    var $sub34=((($32)-($35))|0);
    var $call35=_zstreqbuf($21, $22, $sub30, $sub34);
    var $tobool36=(($call35)|0)!=0;
    if (!($tobool36)) {
      $auxextensionok=0;
    }
  }
  var $36=$auxextensionok;
  var $tobool40=(($36)|0)!=0;
  if (!($tobool40)) {
    _printatoken();
    var $37=HEAP32[((5243908)>>2)];
    var $call42=_fputs(((5260160)|0), $37);
    var $38=HEAP32[((5243524)>>2)];
    var $call43=_fputs(((5260160)|0), $38);
    var $39=HEAP32[((5252604)>>2)];
    var $sub44=((($39)-(1))|0);
    HEAP32[((5252604)>>2)]=$sub44;
    _auxerrprint();
    STACKTOP = __stackBase__;
    return;
  }
  var $40=HEAP32[((5252252)>>2)];
  var $41=HEAP32[((5252248)>>2)];
  var $42=HEAP32[((5252244)>>2)];
  var $43=HEAP32[((5252248)>>2)];
  var $sub46=((($42)-($43))|0);
  var $call47=_zstrlookup($40, $41, $sub46, 3, 1);
  var $44=HEAP32[((5248752)>>2)];
  var $arrayidx48=(($44+($call47<<2))|0);
  var $45=HEAP32[(($arrayidx48)>>2)];
  var $46=HEAP32[((5252604)>>2)];
  var $arrayidx49=((5252696+($46<<2))|0);
  HEAP32[(($arrayidx49)>>2)]=$45;
  var $47=HEAP32[((5248776)>>2)];
  var $tobool50=(($47)|0)!=0;
  if ($tobool50) {
    var $48=HEAP32[((5243908)>>2)];
    var $call52=_fputs(((5260128)|0), $48);
    var $49=HEAP32[((5243524)>>2)];
    var $call53=_fputs(((5260128)|0), $49);
    _printauxname();
    var $50=HEAP32[((5252604)>>2)];
    var $sub54=((($50)-(1))|0);
    HEAP32[((5252604)>>2)]=$sub54;
    _auxerrprint();
    STACKTOP = __stackBase__;
    return;
  }
  var $51=HEAP32[((5252604)>>2)];
  var $arrayidx56=((5252696+($51<<2))|0);
  var $52=HEAP32[(($arrayidx56)>>2)];
  _zstartname($52);
  var $53=HEAP32[((5243832)>>2)];
  var $add57=((($53)+(1))|0);
  HEAP32[((5243824)>>2)]=$add57;
  var $54=HEAP32[((5243824)>>2)];
  var $55=HEAP32[((5243828)>>2)];
  var $arrayidx58=(($55+$54)|0);
  HEAP8[($arrayidx58)]=0;
  var $56=HEAP32[((5243828)>>2)];
  var $add_ptr=(($56+1)|0);
  var $call59=_kpse_in_name_ok($add_ptr);
  var $tobool60=(($call59)|0)!=0;
  do {
    if ($tobool60) {
      var $57=HEAP32[((5252604)>>2)];
      var $arrayidx61=((5252780+($57<<2))|0);
      var $call62=_open_input($arrayidx61, -1, ((5260780)|0));
      var $tobool63=(($call62)|0)!=0;
      if (!($tobool63)) {
        break;
      }
      var $61=HEAP32[((5243908)>>2)];
      var $62=HEAP32[((5252604)>>2)];
      var $call69=_fprintf($61, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5260068)|0),HEAP32[(((tempInt)+(4))>>2)]=$62,HEAP32[(((tempInt)+(8))>>2)]=((5260028)|0),tempInt));
      var $63=HEAP32[((5243524)>>2)];
      var $64=HEAP32[((5252604)>>2)];
      var $call70=_fprintf($63, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5260068)|0),HEAP32[(((tempInt)+(4))>>2)]=$64,HEAP32[(((tempInt)+(8))>>2)]=((5260028)|0),tempInt));
      _printauxname();
      var $65=HEAP32[((5252604)>>2)];
      var $arrayidx71=((5252612+($65<<2))|0);
      HEAP32[(($arrayidx71)>>2)]=0;
      STACKTOP = __stackBase__;
      return;
    }
  } while(0);
  var $58=HEAP32[((5243908)>>2)];
  var $call65=_fputs(((5260080)|0), $58);
  var $59=HEAP32[((5243524)>>2)];
  var $call66=_fputs(((5260080)|0), $59);
  _printauxname();
  var $60=HEAP32[((5252604)>>2)];
  var $sub67=((($60)-(1))|0);
  HEAP32[((5252604)>>2)]=$sub67;
  _auxerrprint();
  STACKTOP = __stackBase__;
  return;
}
_auxinputcommand["X"]=1;

function _poptheauxstack() {
  var label = 0;

  var $0=HEAP32[((5252604)>>2)];
  var $arrayidx=((5252780+($0<<2))|0);
  var $1=HEAP32[(($arrayidx)>>2)];
  _close_file($1);
  var $2=HEAP32[((5252604)>>2)];
  var $cmp=(($2)|0)==0;
  if ($cmp) {
    HEAP32[((5244212)>>2)]=1;

    return;
  } else {
    var $3=HEAP32[((5252604)>>2)];
    var $sub=((($3)-(1))|0);
    HEAP32[((5252604)>>2)]=$sub;

    return;
  }
}


function _lastcheckforauxerrors() {
  var label = 0;

  var $0=HEAP32[((5251172)>>2)];
  HEAP32[((5243800)>>2)]=$0;
  var $1=HEAP32[((5252520)>>2)];
  HEAP32[((5243804)>>2)]=$1;
  var $2=HEAP32[((5251196)>>2)];
  var $tobool=(($2)|0)!=0;
  if ($tobool) {
    var $5=HEAP32[((5243800)>>2)];
    var $cmp=(($5)|0)==0;
    do {
      if ($cmp) {
        var $6=HEAP32[((5252888)>>2)];
        var $tobool2=(($6)|0)!=0;
        if ($tobool2) {
          break;
        }
        _auxend1errprint();
        var $7=HEAP32[((5243908)>>2)];
        var $call4=_fputs(((5259948)|0), $7);
        var $8=HEAP32[((5243524)>>2)];
        var $call5=_fputs(((5259948)|0), $8);
        _auxend2errprint();
      }
    } while(0);
  } else {
    _auxend1errprint();
    var $3=HEAP32[((5243908)>>2)];
    var $call=_fputs(((5259964)|0), $3);
    var $4=HEAP32[((5243524)>>2)];
    var $call1=_fputs(((5259964)|0), $4);
    _auxend2errprint();
  }
  var $9=HEAP32[((5252516)>>2)];
  var $tobool7=(($9)|0)!=0;
  if ($tobool7) {
    var $12=HEAP32[((5243804)>>2)];
    var $cmp12=(($12)|0)==0;
    if ($cmp12) {
      _auxend1errprint();
      var $13=HEAP32[((5243908)>>2)];
      var $call14=_fputs(((5259896)|0), $13);
      var $14=HEAP32[((5243524)>>2)];
      var $call15=_fputs(((5259896)|0), $14);
      _auxend2errprint();
    }
  } else {
    _auxend1errprint();
    var $10=HEAP32[((5243908)>>2)];
    var $call9=_fputs(((5259928)|0), $10);
    var $11=HEAP32[((5243524)>>2)];
    var $call10=_fputs(((5259928)|0), $11);
    _auxend2errprint();
  }
  var $15=HEAP32[((5252284)>>2)];
  var $tobool18=(($15)|0)!=0;
  if (!($tobool18)) {
    _auxend1errprint();
    var $16=HEAP32[((5243908)>>2)];
    var $call20=_fputs(((5259876)|0), $16);
    var $17=HEAP32[((5243524)>>2)];
    var $call21=_fputs(((5259876)|0), $17);
    _auxend2errprint();

    return;
  }
  var $18=HEAP32[((5252280)>>2)];
  var $cmp23=(($18)|0)==0;
  if ($cmp23) {
    _auxend1errprint();
    var $19=HEAP32[((5243908)>>2)];
    var $call25=_fputs(((5259836)|0), $19);
    var $20=HEAP32[((5243524)>>2)];
    var $call26=_fputs(((5259836)|0), $20);
    _auxend2errprint();
  }

  return;
}
_lastcheckforauxerrors["X"]=1;

function _bstentrycommand() {
  var label = 0;

  var $0=HEAP32[((5251084)>>2)];
  var $tobool=(($0)|0)!=0;
  if ($tobool) {
    var $1=HEAP32[((5243908)>>2)];
    var $call=_fputs(((5259776)|0), $1);
    var $2=HEAP32[((5243524)>>2)];
    var $call1=_fputs(((5259776)|0), $2);
    _bsterrprintandlookforblankline();

    return;
  }
  HEAP32[((5251084)>>2)]=1;
  var $call2=_eatbstwhitespace();
  var $tobool3=(($call2)|0)!=0;
  if (!($tobool3)) {
    _eatbstprint();
    var $3=HEAP32[((5243908)>>2)];
    var $call5=_fputs(((5255392)|0), $3);
    var $4=HEAP32[((5243524)>>2)];
    var $call6=_fputs(((5255392)|0), $4);
    _bsterrprintandlookforblankline();

    return;
  }
  var $5=HEAP32[((5252244)>>2)];
  var $6=HEAP32[((5252252)>>2)];
  var $arrayidx=(($6+$5)|0);
  var $7=HEAP8[($arrayidx)];
  var $conv=(($7)&255);
  var $cmp=(($conv)|0)!=123;
  if ($cmp) {
    _bstleftbraceprint();
    var $8=HEAP32[((5243908)>>2)];
    var $call10=_fputs(((5255392)|0), $8);
    var $9=HEAP32[((5243524)>>2)];
    var $call11=_fputs(((5255392)|0), $9);
    _bsterrprintandlookforblankline();

    return;
  }
  var $10=HEAP32[((5252244)>>2)];
  var $add=((($10)+(1))|0);
  HEAP32[((5252244)>>2)]=$add;
  var $call13=_eatbstwhitespace();
  var $tobool14=(($call13)|0)!=0;
  if (!($tobool14)) {
    _eatbstprint();
    var $11=HEAP32[((5243908)>>2)];
    var $call16=_fputs(((5255392)|0), $11);
    var $12=HEAP32[((5243524)>>2)];
    var $call17=_fputs(((5255392)|0), $12);
    _bsterrprintandlookforblankline();

    return;
  }
  while(1) {
    var $13=HEAP32[((5252244)>>2)];
    var $14=HEAP32[((5252252)>>2)];
    var $arrayidx19=(($14+$13)|0);
    var $15=HEAP8[($arrayidx19)];
    var $conv20=(($15)&255);
    var $cmp21=(($conv20)|0)!=125;
    if (!($cmp21)) {
      label = 2576;
      break;
    }
    _zscanidentifier(125, 37, 37);
    var $16=HEAP8[(5243584)];
    var $conv23=(($16)&255);
    var $cmp24=(($conv23)|0)==3;
    if (!($cmp24)) {
      var $17=HEAP8[(5243584)];
      var $conv26=(($17)&255);
      var $cmp27=(($conv26)|0)==1;
      if (!($cmp27)) {
        label = 2570;
        break;
      }
    }
    var $20=HEAP32[((5252252)>>2)];
    var $21=HEAP32[((5252248)>>2)];
    var $22=HEAP32[((5252244)>>2)];
    var $23=HEAP32[((5252248)>>2)];
    var $sub=((($22)-($23))|0);
    _zlowercase($20, $21, $sub);
    var $24=HEAP32[((5252252)>>2)];
    var $25=HEAP32[((5252248)>>2)];
    var $26=HEAP32[((5252244)>>2)];
    var $27=HEAP32[((5252248)>>2)];
    var $sub33=((($26)-($27))|0);
    var $call34=_zstrlookup($24, $25, $sub33, 11, 1);
    HEAP32[((5248808)>>2)]=$call34;
    var $28=HEAP32[((5248776)>>2)];
    var $tobool35=(($28)|0)!=0;
    if ($tobool35) {
      label = 2572;
      break;
    }
    var $30=HEAP32[((5248808)>>2)];
    var $31=HEAP32[((5248804)>>2)];
    var $arrayidx38=(($31+$30)|0);
    HEAP8[($arrayidx38)]=4;
    var $32=HEAP32[((5243784)>>2)];
    var $33=HEAP32[((5248808)>>2)];
    var $34=HEAP32[((5248484)>>2)];
    var $arrayidx39=(($34+($33<<2))|0);
    HEAP32[(($arrayidx39)>>2)]=$32;
    var $35=HEAP32[((5243784)>>2)];
    var $add40=((($35)+(1))|0);
    HEAP32[((5243784)>>2)]=$add40;
    var $call41=_eatbstwhitespace();
    var $tobool42=(($call41)|0)!=0;
    if (!($tobool42)) {
      label = 2574;
      break;
    }
  }
  if (label == 2572) {
    var $29=HEAP32[((5248808)>>2)];
    _zalreadyseenfunctionprint($29);

    return;
  }
  else if (label == 2574) {
    _eatbstprint();
    var $36=HEAP32[((5243908)>>2)];
    var $call44=_fputs(((5255392)|0), $36);
    var $37=HEAP32[((5243524)>>2)];
    var $call45=_fputs(((5255392)|0), $37);
    _bsterrprintandlookforblankline();

    return;
  }
  else if (label == 2576) {
    var $38=HEAP32[((5252244)>>2)];
    var $add47=((($38)+(1))|0);
    HEAP32[((5252244)>>2)]=$add47;
    var $call48=_eatbstwhitespace();
    var $tobool49=(($call48)|0)!=0;
    if (!($tobool49)) {
      _eatbstprint();
      var $39=HEAP32[((5243908)>>2)];
      var $call51=_fputs(((5255392)|0), $39);
      var $40=HEAP32[((5243524)>>2)];
      var $call52=_fputs(((5255392)|0), $40);
      _bsterrprintandlookforblankline();

      return;
    }
    var $41=HEAP32[((5243784)>>2)];
    var $42=HEAP32[((5243768)>>2)];
    var $cmp54=(($41)|0)==(($42)|0);
    if ($cmp54) {
      var $43=HEAP32[((5243908)>>2)];
      var $call57=_fputs(((5259736)|0), $43);
      var $44=HEAP32[((5243524)>>2)];
      var $call58=_fputs(((5259736)|0), $44);
      _bstwarnprint();
    }
    var $45=HEAP32[((5252244)>>2)];
    var $46=HEAP32[((5252252)>>2)];
    var $arrayidx60=(($46+$45)|0);
    var $47=HEAP8[($arrayidx60)];
    var $conv61=(($47)&255);
    var $cmp62=(($conv61)|0)!=123;
    if ($cmp62) {
      _bstleftbraceprint();
      var $48=HEAP32[((5243908)>>2)];
      var $call65=_fputs(((5255392)|0), $48);
      var $49=HEAP32[((5243524)>>2)];
      var $call66=_fputs(((5255392)|0), $49);
      _bsterrprintandlookforblankline();

      return;
    }
    var $50=HEAP32[((5252244)>>2)];
    var $add68=((($50)+(1))|0);
    HEAP32[((5252244)>>2)]=$add68;
    var $call69=_eatbstwhitespace();
    var $tobool70=(($call69)|0)!=0;
    if (!($tobool70)) {
      _eatbstprint();
      var $51=HEAP32[((5243908)>>2)];
      var $call72=_fputs(((5255392)|0), $51);
      var $52=HEAP32[((5243524)>>2)];
      var $call73=_fputs(((5255392)|0), $52);
      _bsterrprintandlookforblankline();

      return;
    }
    while(1) {
      var $53=HEAP32[((5252244)>>2)];
      var $54=HEAP32[((5252252)>>2)];
      var $arrayidx76=(($54+$53)|0);
      var $55=HEAP8[($arrayidx76)];
      var $conv77=(($55)&255);
      var $cmp78=(($conv77)|0)!=125;
      if (!($cmp78)) {
        label = 2595;
        break;
      }
      _zscanidentifier(125, 37, 37);
      var $56=HEAP8[(5243584)];
      var $conv81=(($56)&255);
      var $cmp82=(($conv81)|0)==3;
      if (!($cmp82)) {
        var $57=HEAP8[(5243584)];
        var $conv85=(($57)&255);
        var $cmp86=(($conv85)|0)==1;
        if (!($cmp86)) {
          label = 2589;
          break;
        }
      }
      var $60=HEAP32[((5252252)>>2)];
      var $61=HEAP32[((5252248)>>2)];
      var $62=HEAP32[((5252244)>>2)];
      var $63=HEAP32[((5252248)>>2)];
      var $sub93=((($62)-($63))|0);
      _zlowercase($60, $61, $sub93);
      var $64=HEAP32[((5252252)>>2)];
      var $65=HEAP32[((5252248)>>2)];
      var $66=HEAP32[((5252244)>>2)];
      var $67=HEAP32[((5252248)>>2)];
      var $sub94=((($66)-($67))|0);
      var $call95=_zstrlookup($64, $65, $sub94, 11, 1);
      HEAP32[((5248808)>>2)]=$call95;
      var $68=HEAP32[((5248776)>>2)];
      var $tobool96=(($68)|0)!=0;
      if ($tobool96) {
        label = 2591;
        break;
      }
      var $70=HEAP32[((5248808)>>2)];
      var $71=HEAP32[((5248804)>>2)];
      var $arrayidx99=(($71+$70)|0);
      HEAP8[($arrayidx99)]=5;
      var $72=HEAP32[((5243792)>>2)];
      var $73=HEAP32[((5248808)>>2)];
      var $74=HEAP32[((5248484)>>2)];
      var $arrayidx100=(($74+($73<<2))|0);
      HEAP32[(($arrayidx100)>>2)]=$72;
      var $75=HEAP32[((5243792)>>2)];
      var $add101=((($75)+(1))|0);
      HEAP32[((5243792)>>2)]=$add101;
      var $call102=_eatbstwhitespace();
      var $tobool103=(($call102)|0)!=0;
      if (!($tobool103)) {
        label = 2593;
        break;
      }
    }
    if (label == 2591) {
      var $69=HEAP32[((5248808)>>2)];
      _zalreadyseenfunctionprint($69);

      return;
    }
    else if (label == 2593) {
      _eatbstprint();
      var $76=HEAP32[((5243908)>>2)];
      var $call105=_fputs(((5255392)|0), $76);
      var $77=HEAP32[((5243524)>>2)];
      var $call106=_fputs(((5255392)|0), $77);
      _bsterrprintandlookforblankline();

      return;
    }
    else if (label == 2595) {
      var $78=HEAP32[((5252244)>>2)];
      var $add109=((($78)+(1))|0);
      HEAP32[((5252244)>>2)]=$add109;
      var $call110=_eatbstwhitespace();
      var $tobool111=(($call110)|0)!=0;
      if (!($tobool111)) {
        _eatbstprint();
        var $79=HEAP32[((5243908)>>2)];
        var $call113=_fputs(((5255392)|0), $79);
        var $80=HEAP32[((5243524)>>2)];
        var $call114=_fputs(((5255392)|0), $80);
        _bsterrprintandlookforblankline();

        return;
      }
      var $81=HEAP32[((5252244)>>2)];
      var $82=HEAP32[((5252252)>>2)];
      var $arrayidx116=(($82+$81)|0);
      var $83=HEAP8[($arrayidx116)];
      var $conv117=(($83)&255);
      var $cmp118=(($conv117)|0)!=123;
      if ($cmp118) {
        _bstleftbraceprint();
        var $84=HEAP32[((5243908)>>2)];
        var $call121=_fputs(((5255392)|0), $84);
        var $85=HEAP32[((5243524)>>2)];
        var $call122=_fputs(((5255392)|0), $85);
        _bsterrprintandlookforblankline();

        return;
      }
      var $86=HEAP32[((5252244)>>2)];
      var $add124=((($86)+(1))|0);
      HEAP32[((5252244)>>2)]=$add124;
      var $call125=_eatbstwhitespace();
      var $tobool126=(($call125)|0)!=0;
      if (!($tobool126)) {
        _eatbstprint();
        var $87=HEAP32[((5243908)>>2)];
        var $call128=_fputs(((5255392)|0), $87);
        var $88=HEAP32[((5243524)>>2)];
        var $call129=_fputs(((5255392)|0), $88);
        _bsterrprintandlookforblankline();

        return;
      }
      while(1) {
        var $89=HEAP32[((5252244)>>2)];
        var $90=HEAP32[((5252252)>>2)];
        var $arrayidx132=(($90+$89)|0);
        var $91=HEAP8[($arrayidx132)];
        var $conv133=(($91)&255);
        var $cmp134=(($conv133)|0)!=125;
        if (!($cmp134)) {
          label = 2612;
          break;
        }
        _zscanidentifier(125, 37, 37);
        var $92=HEAP8[(5243584)];
        var $conv137=(($92)&255);
        var $cmp138=(($conv137)|0)==3;
        if (!($cmp138)) {
          var $93=HEAP8[(5243584)];
          var $conv141=(($93)&255);
          var $cmp142=(($conv141)|0)==1;
          if (!($cmp142)) {
            label = 2606;
            break;
          }
        }
        var $96=HEAP32[((5252252)>>2)];
        var $97=HEAP32[((5252248)>>2)];
        var $98=HEAP32[((5252244)>>2)];
        var $99=HEAP32[((5252248)>>2)];
        var $sub149=((($98)-($99))|0);
        _zlowercase($96, $97, $sub149);
        var $100=HEAP32[((5252252)>>2)];
        var $101=HEAP32[((5252248)>>2)];
        var $102=HEAP32[((5252244)>>2)];
        var $103=HEAP32[((5252248)>>2)];
        var $sub150=((($102)-($103))|0);
        var $call151=_zstrlookup($100, $101, $sub150, 11, 1);
        HEAP32[((5248808)>>2)]=$call151;
        var $104=HEAP32[((5248776)>>2)];
        var $tobool152=(($104)|0)!=0;
        if ($tobool152) {
          label = 2608;
          break;
        }
        var $106=HEAP32[((5248808)>>2)];
        var $107=HEAP32[((5248804)>>2)];
        var $arrayidx155=(($107+$106)|0);
        HEAP8[($arrayidx155)]=6;
        var $108=HEAP32[((5243788)>>2)];
        var $109=HEAP32[((5248808)>>2)];
        var $110=HEAP32[((5248484)>>2)];
        var $arrayidx156=(($110+($109<<2))|0);
        HEAP32[(($arrayidx156)>>2)]=$108;
        var $111=HEAP32[((5243788)>>2)];
        var $add157=((($111)+(1))|0);
        HEAP32[((5243788)>>2)]=$add157;
        var $call158=_eatbstwhitespace();
        var $tobool159=(($call158)|0)!=0;
        if (!($tobool159)) {
          label = 2610;
          break;
        }
      }
      if (label == 2606) {
        _bstidprint();
        var $94=HEAP32[((5243908)>>2)];
        var $call146=_fputs(((5255392)|0), $94);
        var $95=HEAP32[((5243524)>>2)];
        var $call147=_fputs(((5255392)|0), $95);
        _bsterrprintandlookforblankline();

        return;
      }
      else if (label == 2610) {
        _eatbstprint();
        var $112=HEAP32[((5243908)>>2)];
        var $call161=_fputs(((5255392)|0), $112);
        var $113=HEAP32[((5243524)>>2)];
        var $call162=_fputs(((5255392)|0), $113);
        _bsterrprintandlookforblankline();

        return;
      }
      else if (label == 2612) {
        var $114=HEAP32[((5252244)>>2)];
        var $add165=((($114)+(1))|0);
        HEAP32[((5252244)>>2)]=$add165;

        return;
      }
      else if (label == 2608) {
        var $105=HEAP32[((5248808)>>2)];
        _zalreadyseenfunctionprint($105);

        return;
      }
    }
    else if (label == 2589) {
      _bstidprint();
      var $58=HEAP32[((5243908)>>2)];
      var $call90=_fputs(((5255392)|0), $58);
      var $59=HEAP32[((5243524)>>2)];
      var $call91=_fputs(((5255392)|0), $59);
      _bsterrprintandlookforblankline();

      return;
    }
  }
  else if (label == 2570) {
    _bstidprint();
    var $18=HEAP32[((5243908)>>2)];
    var $call30=_fputs(((5255392)|0), $18);
    var $19=HEAP32[((5243524)>>2)];
    var $call31=_fputs(((5255392)|0), $19);
    _bsterrprintandlookforblankline();

    return;
  }
}
_bstentrycommand["X"]=1;

function _badargumenttoken() {
  var label = 0;

  var $Result;
  $Result=1;
  var $0=HEAP32[((5252252)>>2)];
  var $1=HEAP32[((5252248)>>2)];
  var $2=HEAP32[((5252244)>>2)];
  var $3=HEAP32[((5252248)>>2)];
  var $sub=((($2)-($3))|0);
  _zlowercase($0, $1, $sub);
  var $4=HEAP32[((5252252)>>2)];
  var $5=HEAP32[((5252248)>>2)];
  var $6=HEAP32[((5252244)>>2)];
  var $7=HEAP32[((5252248)>>2)];
  var $sub1=((($6)-($7))|0);
  var $call=_zstrlookup($4, $5, $sub1, 11, 0);
  HEAP32[((5248808)>>2)]=$call;
  var $8=HEAP32[((5248776)>>2)];
  var $tobool=(($8)|0)!=0;
  if (!($tobool)) {
    _printatoken();
    var $9=HEAP32[((5243908)>>2)];
    var $call2=_fputs(((5263388)|0), $9);
    var $10=HEAP32[((5243524)>>2)];
    var $call3=_fputs(((5263388)|0), $10);
    _bsterrprintandlookforblankline();
    var $20=$Result;

    return $20;
  }
  var $11=HEAP32[((5248808)>>2)];
  var $12=HEAP32[((5248804)>>2)];
  var $arrayidx=(($12+$11)|0);
  var $13=HEAP8[($arrayidx)];
  var $conv=(($13)&255);
  var $cmp=(($conv)|0)!=0;
  do {
    if ($cmp) {
      var $14=HEAP32[((5248808)>>2)];
      var $15=HEAP32[((5248804)>>2)];
      var $arrayidx5=(($15+$14)|0);
      var $16=HEAP8[($arrayidx5)];
      var $conv6=(($16)&255);
      var $cmp7=(($conv6)|0)!=1;
      if (!($cmp7)) {
        break;
      }
      _printatoken();
      var $17=HEAP32[((5243908)>>2)];
      var $call10=_fputs(((5259692)|0), $17);
      var $18=HEAP32[((5243524)>>2)];
      var $call11=_fputs(((5259692)|0), $18);
      var $19=HEAP32[((5248808)>>2)];
      _zprintfnclass($19);
      _bsterrprintandlookforblankline();
      var $20=$Result;

      return $20;
    }
  } while(0);
  $Result=0;
  var $20=$Result;

  return $20;
}
_badargumenttoken["X"]=1;

function _bstexecutecommand() {
  var label = 0;

  var $0=HEAP32[((5243632)>>2)];
  var $tobool=(($0)|0)!=0;
  if (!($tobool)) {
    var $1=HEAP32[((5243908)>>2)];
    var $call=_fputs(((5259644)|0), $1);
    var $2=HEAP32[((5243524)>>2)];
    var $call1=_fputs(((5259644)|0), $2);
    _bsterrprintandlookforblankline();

    return;
  }
  var $call2=_eatbstwhitespace();
  var $tobool3=(($call2)|0)!=0;
  if (!($tobool3)) {
    _eatbstprint();
    var $3=HEAP32[((5243908)>>2)];
    var $call5=_fputs(((5259636)|0), $3);
    var $4=HEAP32[((5243524)>>2)];
    var $call6=_fputs(((5259636)|0), $4);
    _bsterrprintandlookforblankline();

    return;
  }
  var $5=HEAP32[((5252244)>>2)];
  var $6=HEAP32[((5252252)>>2)];
  var $arrayidx=(($6+$5)|0);
  var $7=HEAP8[($arrayidx)];
  var $conv=(($7)&255);
  var $cmp=(($conv)|0)!=123;
  if ($cmp) {
    _bstleftbraceprint();
    var $8=HEAP32[((5243908)>>2)];
    var $call10=_fputs(((5259636)|0), $8);
    var $9=HEAP32[((5243524)>>2)];
    var $call11=_fputs(((5259636)|0), $9);
    _bsterrprintandlookforblankline();

    return;
  }
  var $10=HEAP32[((5252244)>>2)];
  var $add=((($10)+(1))|0);
  HEAP32[((5252244)>>2)]=$add;
  var $call13=_eatbstwhitespace();
  var $tobool14=(($call13)|0)!=0;
  if (!($tobool14)) {
    _eatbstprint();
    var $11=HEAP32[((5243908)>>2)];
    var $call16=_fputs(((5259636)|0), $11);
    var $12=HEAP32[((5243524)>>2)];
    var $call17=_fputs(((5259636)|0), $12);
    _bsterrprintandlookforblankline();

    return;
  }
  _zscanidentifier(125, 37, 37);
  var $13=HEAP8[(5243584)];
  var $conv19=(($13)&255);
  var $cmp20=(($conv19)|0)==3;
  do {
    if (!($cmp20)) {
      var $14=HEAP8[(5243584)];
      var $conv22=(($14)&255);
      var $cmp23=(($conv22)|0)==1;
      if ($cmp23) {
        break;
      }
      _bstidprint();
      var $15=HEAP32[((5243908)>>2)];
      var $call26=_fputs(((5259636)|0), $15);
      var $16=HEAP32[((5243524)>>2)];
      var $call27=_fputs(((5259636)|0), $16);
      _bsterrprintandlookforblankline();

      return;
    }
  } while(0);
  var $call29=_badargumenttoken();
  var $tobool30=(($call29)|0)!=0;
  if ($tobool30) {

    return;
  }
  var $call33=_eatbstwhitespace();
  var $tobool34=(($call33)|0)!=0;
  if (!($tobool34)) {
    _eatbstprint();
    var $17=HEAP32[((5243908)>>2)];
    var $call36=_fputs(((5259636)|0), $17);
    var $18=HEAP32[((5243524)>>2)];
    var $call37=_fputs(((5259636)|0), $18);
    _bsterrprintandlookforblankline();

    return;
  }
  var $19=HEAP32[((5252244)>>2)];
  var $20=HEAP32[((5252252)>>2)];
  var $arrayidx39=(($20+$19)|0);
  var $21=HEAP8[($arrayidx39)];
  var $conv40=(($21)&255);
  var $cmp41=(($conv40)|0)!=125;
  if ($cmp41) {
    _bstrightbraceprint();
    var $22=HEAP32[((5243908)>>2)];
    var $call44=_fputs(((5259636)|0), $22);
    var $23=HEAP32[((5243524)>>2)];
    var $call45=_fputs(((5259636)|0), $23);
    _bsterrprintandlookforblankline();

    return;
  } else {
    var $24=HEAP32[((5252244)>>2)];
    var $add47=((($24)+(1))|0);
    HEAP32[((5252244)>>2)]=$add47;
    _initcommandexecution();
    HEAP32[((5243876)>>2)]=0;
    var $25=HEAP32[((5248808)>>2)];
    _zexecutefn($25);
    _checkcommandexecution();

    return;
  }
}
_bstexecutecommand["X"]=1;

function _getauxcommandandprocess() {
  var label = 0;

  HEAP32[((5252244)>>2)]=0;
  var $call=_zscan1(123);
  var $tobool=(($call)|0)!=0;
  if (!($tobool)) {

    return;
  }
  var $0=HEAP32[((5252252)>>2)];
  var $1=HEAP32[((5252248)>>2)];
  var $2=HEAP32[((5252244)>>2)];
  var $3=HEAP32[((5252248)>>2)];
  var $sub=((($2)-($3))|0);
  var $call1=_zstrlookup($0, $1, $sub, 2, 0);
  var $4=HEAP32[((5248484)>>2)];
  var $arrayidx=(($4+($call1<<2))|0);
  var $5=HEAP32[(($arrayidx)>>2)];
  HEAP32[((5251152)>>2)]=$5;
  var $6=HEAP32[((5248776)>>2)];
  var $tobool2=(($6)|0)!=0;
  if ($tobool2) {
    var $7=HEAP32[((5251152)>>2)];
    if ((($7)|0)==3) {
      _auxinputcommand();
    } else if ((($7)|0)==0) {
      _auxbibdatacommand();
    } else if ((($7)|0)==1) {
      _auxbibstylecommand();
    } else if ((($7)|0)==2) {
      _auxcitationcommand();
    } else {
      var $8=HEAP32[((5243908)>>2)];
      var $call7=_fputs(((5259996)|0), $8);
      var $9=HEAP32[((5243524)>>2)];
      var $call8=_fputs(((5259996)|0), $9);
      _printconfusion();
      _longjmp(((5248396)|0), 1);
      throw "Reached an unreachable!"
    }
  }

  return;
}


function _bstfunctioncommand() {
  var label = 0;

  var $call=_eatbstwhitespace();
  var $tobool=(($call)|0)!=0;
  if (!($tobool)) {
    _eatbstprint();
    var $0=HEAP32[((5243908)>>2)];
    var $call1=_fputs(((5263312)|0), $0);
    var $1=HEAP32[((5243524)>>2)];
    var $call2=_fputs(((5263312)|0), $1);
    _bsterrprintandlookforblankline();

    return;
  }
  var $2=HEAP32[((5252244)>>2)];
  var $3=HEAP32[((5252252)>>2)];
  var $arrayidx=(($3+$2)|0);
  var $4=HEAP8[($arrayidx)];
  var $conv=(($4)&255);
  var $cmp=(($conv)|0)!=123;
  if ($cmp) {
    _bstleftbraceprint();
    var $5=HEAP32[((5243908)>>2)];
    var $call5=_fputs(((5263312)|0), $5);
    var $6=HEAP32[((5243524)>>2)];
    var $call6=_fputs(((5263312)|0), $6);
    _bsterrprintandlookforblankline();

    return;
  }
  var $7=HEAP32[((5252244)>>2)];
  var $add=((($7)+(1))|0);
  HEAP32[((5252244)>>2)]=$add;
  var $call8=_eatbstwhitespace();
  var $tobool9=(($call8)|0)!=0;
  if (!($tobool9)) {
    _eatbstprint();
    var $8=HEAP32[((5243908)>>2)];
    var $call11=_fputs(((5263312)|0), $8);
    var $9=HEAP32[((5243524)>>2)];
    var $call12=_fputs(((5263312)|0), $9);
    _bsterrprintandlookforblankline();

    return;
  }
  _zscanidentifier(125, 37, 37);
  var $10=HEAP8[(5243584)];
  var $conv14=(($10)&255);
  var $cmp15=(($conv14)|0)==3;
  do {
    if (!($cmp15)) {
      var $11=HEAP8[(5243584)];
      var $conv17=(($11)&255);
      var $cmp18=(($conv17)|0)==1;
      if ($cmp18) {
        break;
      }
      _bstidprint();
      var $12=HEAP32[((5243908)>>2)];
      var $call21=_fputs(((5263312)|0), $12);
      var $13=HEAP32[((5243524)>>2)];
      var $call22=_fputs(((5263312)|0), $13);
      _bsterrprintandlookforblankline();

      return;
    }
  } while(0);
  var $14=HEAP32[((5252252)>>2)];
  var $15=HEAP32[((5252248)>>2)];
  var $16=HEAP32[((5252244)>>2)];
  var $17=HEAP32[((5252248)>>2)];
  var $sub=((($16)-($17))|0);
  _zlowercase($14, $15, $sub);
  var $18=HEAP32[((5252252)>>2)];
  var $19=HEAP32[((5252248)>>2)];
  var $20=HEAP32[((5252244)>>2)];
  var $21=HEAP32[((5252248)>>2)];
  var $sub24=((($20)-($21))|0);
  var $call25=_zstrlookup($18, $19, $sub24, 11, 1);
  HEAP32[((5243392)>>2)]=$call25;
  var $22=HEAP32[((5248776)>>2)];
  var $tobool26=(($22)|0)!=0;
  if ($tobool26) {
    var $23=HEAP32[((5243392)>>2)];
    _zalreadyseenfunctionprint($23);

    return;
  }
  var $24=HEAP32[((5243392)>>2)];
  var $25=HEAP32[((5248804)>>2)];
  var $arrayidx29=(($25+$24)|0);
  HEAP8[($arrayidx29)]=1;
  var $26=HEAP32[((5243392)>>2)];
  var $27=HEAP32[((5248752)>>2)];
  var $arrayidx30=(($27+($26<<2))|0);
  var $28=HEAP32[(($arrayidx30)>>2)];
  var $29=HEAP32[((5243580)>>2)];
  var $cmp31=(($28)|0)==(($29)|0);
  if ($cmp31) {
    var $30=HEAP32[((5243392)>>2)];
    HEAP32[((5252564)>>2)]=$30;
  }
  var $call35=_eatbstwhitespace();
  var $tobool36=(($call35)|0)!=0;
  if (!($tobool36)) {
    _eatbstprint();
    var $31=HEAP32[((5243908)>>2)];
    var $call38=_fputs(((5263312)|0), $31);
    var $32=HEAP32[((5243524)>>2)];
    var $call39=_fputs(((5263312)|0), $32);
    _bsterrprintandlookforblankline();

    return;
  }
  var $33=HEAP32[((5252244)>>2)];
  var $34=HEAP32[((5252252)>>2)];
  var $arrayidx41=(($34+$33)|0);
  var $35=HEAP8[($arrayidx41)];
  var $conv42=(($35)&255);
  var $cmp43=(($conv42)|0)!=125;
  if ($cmp43) {
    _bstrightbraceprint();
    var $36=HEAP32[((5243908)>>2)];
    var $call46=_fputs(((5263312)|0), $36);
    var $37=HEAP32[((5243524)>>2)];
    var $call47=_fputs(((5263312)|0), $37);
    _bsterrprintandlookforblankline();

    return;
  }
  var $38=HEAP32[((5252244)>>2)];
  var $add49=((($38)+(1))|0);
  HEAP32[((5252244)>>2)]=$add49;
  var $call50=_eatbstwhitespace();
  var $tobool51=(($call50)|0)!=0;
  if (!($tobool51)) {
    _eatbstprint();
    var $39=HEAP32[((5243908)>>2)];
    var $call53=_fputs(((5263312)|0), $39);
    var $40=HEAP32[((5243524)>>2)];
    var $call54=_fputs(((5263312)|0), $40);
    _bsterrprintandlookforblankline();

    return;
  }
  var $41=HEAP32[((5252244)>>2)];
  var $42=HEAP32[((5252252)>>2)];
  var $arrayidx56=(($42+$41)|0);
  var $43=HEAP8[($arrayidx56)];
  var $conv57=(($43)&255);
  var $cmp58=(($conv57)|0)!=123;
  if ($cmp58) {
    _bstleftbraceprint();
    var $44=HEAP32[((5243908)>>2)];
    var $call61=_fputs(((5263312)|0), $44);
    var $45=HEAP32[((5243524)>>2)];
    var $call62=_fputs(((5263312)|0), $45);
    _bsterrprintandlookforblankline();

    return;
  } else {
    var $46=HEAP32[((5252244)>>2)];
    var $add64=((($46)+(1))|0);
    HEAP32[((5252244)>>2)]=$add64;
    var $47=HEAP32[((5243392)>>2)];
    _zscanfndef($47);

    return;
  }
}
_bstfunctioncommand["X"]=1;

function _bstintegerscommand() {
  var label = 0;

  var $call=_eatbstwhitespace();
  var $tobool=(($call)|0)!=0;
  if (!($tobool)) {
    _eatbstprint();
    var $0=HEAP32[((5243908)>>2)];
    var $call1=_fputs(((5259624)|0), $0);
    var $1=HEAP32[((5243524)>>2)];
    var $call2=_fputs(((5259624)|0), $1);
    _bsterrprintandlookforblankline();

    return;
  }
  var $2=HEAP32[((5252244)>>2)];
  var $3=HEAP32[((5252252)>>2)];
  var $arrayidx=(($3+$2)|0);
  var $4=HEAP8[($arrayidx)];
  var $conv=(($4)&255);
  var $cmp=(($conv)|0)!=123;
  if ($cmp) {
    _bstleftbraceprint();
    var $5=HEAP32[((5243908)>>2)];
    var $call5=_fputs(((5259624)|0), $5);
    var $6=HEAP32[((5243524)>>2)];
    var $call6=_fputs(((5259624)|0), $6);
    _bsterrprintandlookforblankline();

    return;
  }
  var $7=HEAP32[((5252244)>>2)];
  var $add=((($7)+(1))|0);
  HEAP32[((5252244)>>2)]=$add;
  var $call8=_eatbstwhitespace();
  var $tobool9=(($call8)|0)!=0;
  if (!($tobool9)) {
    _eatbstprint();
    var $8=HEAP32[((5243908)>>2)];
    var $call11=_fputs(((5259624)|0), $8);
    var $9=HEAP32[((5243524)>>2)];
    var $call12=_fputs(((5259624)|0), $9);
    _bsterrprintandlookforblankline();

    return;
  }
  while(1) {
    var $10=HEAP32[((5252244)>>2)];
    var $11=HEAP32[((5252252)>>2)];
    var $arrayidx14=(($11+$10)|0);
    var $12=HEAP8[($arrayidx14)];
    var $conv15=(($12)&255);
    var $cmp16=(($conv15)|0)!=125;
    if (!($cmp16)) {
      label = 2739;
      break;
    }
    _zscanidentifier(125, 37, 37);
    var $13=HEAP8[(5243584)];
    var $conv18=(($13)&255);
    var $cmp19=(($conv18)|0)==3;
    if (!($cmp19)) {
      var $14=HEAP8[(5243584)];
      var $conv21=(($14)&255);
      var $cmp22=(($conv21)|0)==1;
      if (!($cmp22)) {
        label = 2733;
        break;
      }
    }
    var $17=HEAP32[((5252252)>>2)];
    var $18=HEAP32[((5252248)>>2)];
    var $19=HEAP32[((5252244)>>2)];
    var $20=HEAP32[((5252248)>>2)];
    var $sub=((($19)-($20))|0);
    _zlowercase($17, $18, $sub);
    var $21=HEAP32[((5252252)>>2)];
    var $22=HEAP32[((5252248)>>2)];
    var $23=HEAP32[((5252244)>>2)];
    var $24=HEAP32[((5252248)>>2)];
    var $sub28=((($23)-($24))|0);
    var $call29=_zstrlookup($21, $22, $sub28, 11, 1);
    HEAP32[((5248808)>>2)]=$call29;
    var $25=HEAP32[((5248776)>>2)];
    var $tobool30=(($25)|0)!=0;
    if ($tobool30) {
      label = 2735;
      break;
    }
    var $27=HEAP32[((5248808)>>2)];
    var $28=HEAP32[((5248804)>>2)];
    var $arrayidx33=(($28+$27)|0);
    HEAP8[($arrayidx33)]=7;
    var $29=HEAP32[((5248808)>>2)];
    var $30=HEAP32[((5248484)>>2)];
    var $arrayidx34=(($30+($29<<2))|0);
    HEAP32[(($arrayidx34)>>2)]=0;
    var $call35=_eatbstwhitespace();
    var $tobool36=(($call35)|0)!=0;
    if (!($tobool36)) {
      label = 2737;
      break;
    }
  }
  if (label == 2737) {
    _eatbstprint();
    var $31=HEAP32[((5243908)>>2)];
    var $call38=_fputs(((5259624)|0), $31);
    var $32=HEAP32[((5243524)>>2)];
    var $call39=_fputs(((5259624)|0), $32);
    _bsterrprintandlookforblankline();

    return;
  }
  else if (label == 2739) {
    var $33=HEAP32[((5252244)>>2)];
    var $add41=((($33)+(1))|0);
    HEAP32[((5252244)>>2)]=$add41;

    return;
  }
  else if (label == 2735) {
    var $26=HEAP32[((5248808)>>2)];
    _zalreadyseenfunctionprint($26);

    return;
  }
  else if (label == 2733) {
    _bstidprint();
    var $15=HEAP32[((5243908)>>2)];
    var $call25=_fputs(((5259624)|0), $15);
    var $16=HEAP32[((5243524)>>2)];
    var $call26=_fputs(((5259624)|0), $16);
    _bsterrprintandlookforblankline();

    return;
  }
}
_bstintegerscommand["X"]=1;

function _bstiteratecommand() {
  var label = 0;

  var $0=HEAP32[((5243632)>>2)];
  var $tobool=(($0)|0)!=0;
  if (!($tobool)) {
    var $1=HEAP32[((5243908)>>2)];
    var $call=_fputs(((5259532)|0), $1);
    var $2=HEAP32[((5243524)>>2)];
    var $call1=_fputs(((5259532)|0), $2);
    _bsterrprintandlookforblankline();

    return;
  }
  var $call2=_eatbstwhitespace();
  var $tobool3=(($call2)|0)!=0;
  if (!($tobool3)) {
    _eatbstprint();
    var $3=HEAP32[((5243908)>>2)];
    var $call5=_fputs(((5259512)|0), $3);
    var $4=HEAP32[((5243524)>>2)];
    var $call6=_fputs(((5259512)|0), $4);
    _bsterrprintandlookforblankline();

    return;
  }
  var $5=HEAP32[((5252244)>>2)];
  var $6=HEAP32[((5252252)>>2)];
  var $arrayidx=(($6+$5)|0);
  var $7=HEAP8[($arrayidx)];
  var $conv=(($7)&255);
  var $cmp=(($conv)|0)!=123;
  if ($cmp) {
    _bstleftbraceprint();
    var $8=HEAP32[((5243908)>>2)];
    var $call10=_fputs(((5259512)|0), $8);
    var $9=HEAP32[((5243524)>>2)];
    var $call11=_fputs(((5259512)|0), $9);
    _bsterrprintandlookforblankline();

    return;
  }
  var $10=HEAP32[((5252244)>>2)];
  var $add=((($10)+(1))|0);
  HEAP32[((5252244)>>2)]=$add;
  var $call13=_eatbstwhitespace();
  var $tobool14=(($call13)|0)!=0;
  if (!($tobool14)) {
    _eatbstprint();
    var $11=HEAP32[((5243908)>>2)];
    var $call16=_fputs(((5259512)|0), $11);
    var $12=HEAP32[((5243524)>>2)];
    var $call17=_fputs(((5259512)|0), $12);
    _bsterrprintandlookforblankline();

    return;
  }
  _zscanidentifier(125, 37, 37);
  var $13=HEAP8[(5243584)];
  var $conv19=(($13)&255);
  var $cmp20=(($conv19)|0)==3;
  do {
    if (!($cmp20)) {
      var $14=HEAP8[(5243584)];
      var $conv22=(($14)&255);
      var $cmp23=(($conv22)|0)==1;
      if ($cmp23) {
        break;
      }
      _bstidprint();
      var $15=HEAP32[((5243908)>>2)];
      var $call26=_fputs(((5259512)|0), $15);
      var $16=HEAP32[((5243524)>>2)];
      var $call27=_fputs(((5259512)|0), $16);
      _bsterrprintandlookforblankline();

      return;
    }
  } while(0);
  var $call29=_badargumenttoken();
  var $tobool30=(($call29)|0)!=0;
  if ($tobool30) {

    return;
  }
  var $call33=_eatbstwhitespace();
  var $tobool34=(($call33)|0)!=0;
  if (!($tobool34)) {
    _eatbstprint();
    var $17=HEAP32[((5243908)>>2)];
    var $call36=_fputs(((5259512)|0), $17);
    var $18=HEAP32[((5243524)>>2)];
    var $call37=_fputs(((5259512)|0), $18);
    _bsterrprintandlookforblankline();

    return;
  }
  var $19=HEAP32[((5252244)>>2)];
  var $20=HEAP32[((5252252)>>2)];
  var $arrayidx39=(($20+$19)|0);
  var $21=HEAP8[($arrayidx39)];
  var $conv40=(($21)&255);
  var $cmp41=(($conv40)|0)!=125;
  if ($cmp41) {
    _bstrightbraceprint();
    var $22=HEAP32[((5243908)>>2)];
    var $call44=_fputs(((5259512)|0), $22);
    var $23=HEAP32[((5243524)>>2)];
    var $call45=_fputs(((5259512)|0), $23);
    _bsterrprintandlookforblankline();

    return;
  }
  var $24=HEAP32[((5252244)>>2)];
  var $add47=((($24)+(1))|0);
  HEAP32[((5252244)>>2)]=$add47;
  _initcommandexecution();
  HEAP32[((5243876)>>2)]=1;
  HEAP32[((5243568)>>2)]=0;
  while(1) {
    var $25=HEAP32[((5243568)>>2)];
    var $26=HEAP32[((5243800)>>2)];
    var $cmp48=(($25)|0) < (($26)|0);
    if (!($cmp48)) {
      break;
    }
    var $27=HEAP32[((5243568)>>2)];
    var $28=HEAP32[((5251188)>>2)];
    var $arrayidx50=(($28+($27<<2))|0);
    var $29=HEAP32[(($arrayidx50)>>2)];
    HEAP32[((5251172)>>2)]=$29;
    var $30=HEAP32[((5248808)>>2)];
    _zexecutefn($30);
    _checkcommandexecution();
    var $31=HEAP32[((5243568)>>2)];
    var $add51=((($31)+(1))|0);
    HEAP32[((5243568)>>2)]=$add51;
  }

  return;
}
_bstiteratecommand["X"]=1;

function _bstmacrocommand() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243632)>>2)];
  var $tobool=(($0)|0)!=0;
  if ($tobool) {
    var $1=HEAP32[((5243908)>>2)];
    var $call=_fputs(((5259468)|0), $1);
    var $2=HEAP32[((5243524)>>2)];
    var $call1=_fputs(((5259468)|0), $2);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  var $call2=_eatbstwhitespace();
  var $tobool3=(($call2)|0)!=0;
  if (!($tobool3)) {
    _eatbstprint();
    var $3=HEAP32[((5243908)>>2)];
    var $call5=_fputs(((5259452)|0), $3);
    var $4=HEAP32[((5243524)>>2)];
    var $call6=_fputs(((5259452)|0), $4);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  var $5=HEAP32[((5252244)>>2)];
  var $6=HEAP32[((5252252)>>2)];
  var $arrayidx=(($6+$5)|0);
  var $7=HEAP8[($arrayidx)];
  var $conv=(($7)&255);
  var $cmp=(($conv)|0)!=123;
  if ($cmp) {
    _bstleftbraceprint();
    var $8=HEAP32[((5243908)>>2)];
    var $call10=_fputs(((5259452)|0), $8);
    var $9=HEAP32[((5243524)>>2)];
    var $call11=_fputs(((5259452)|0), $9);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  var $10=HEAP32[((5252244)>>2)];
  var $add=((($10)+(1))|0);
  HEAP32[((5252244)>>2)]=$add;
  var $call13=_eatbstwhitespace();
  var $tobool14=(($call13)|0)!=0;
  if (!($tobool14)) {
    _eatbstprint();
    var $11=HEAP32[((5243908)>>2)];
    var $call16=_fputs(((5259452)|0), $11);
    var $12=HEAP32[((5243524)>>2)];
    var $call17=_fputs(((5259452)|0), $12);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  _zscanidentifier(125, 37, 37);
  var $13=HEAP8[(5243584)];
  var $conv19=(($13)&255);
  var $cmp20=(($conv19)|0)==3;
  do {
    if (!($cmp20)) {
      var $14=HEAP8[(5243584)];
      var $conv22=(($14)&255);
      var $cmp23=(($conv22)|0)==1;
      if ($cmp23) {
        break;
      }
      _bstidprint();
      var $15=HEAP32[((5243908)>>2)];
      var $call26=_fputs(((5259452)|0), $15);
      var $16=HEAP32[((5243524)>>2)];
      var $call27=_fputs(((5259452)|0), $16);
      _bsterrprintandlookforblankline();
      STACKTOP = __stackBase__;
      return;
    }
  } while(0);
  var $17=HEAP32[((5252252)>>2)];
  var $18=HEAP32[((5252248)>>2)];
  var $19=HEAP32[((5252244)>>2)];
  var $20=HEAP32[((5252248)>>2)];
  var $sub=((($19)-($20))|0);
  _zlowercase($17, $18, $sub);
  var $21=HEAP32[((5252252)>>2)];
  var $22=HEAP32[((5252248)>>2)];
  var $23=HEAP32[((5252244)>>2)];
  var $24=HEAP32[((5252248)>>2)];
  var $sub29=((($23)-($24))|0);
  var $call30=_zstrlookup($21, $22, $sub29, 13, 1);
  HEAP32[((5243900)>>2)]=$call30;
  var $25=HEAP32[((5248776)>>2)];
  var $tobool31=(($25)|0)!=0;
  if ($tobool31) {
    _printatoken();
    var $26=HEAP32[((5243908)>>2)];
    var $call33=_fputs(((5259396)|0), $26);
    var $27=HEAP32[((5243524)>>2)];
    var $call34=_fputs(((5259396)|0), $27);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  var $28=HEAP32[((5243900)>>2)];
  var $29=HEAP32[((5248752)>>2)];
  var $arrayidx36=(($29+($28<<2))|0);
  var $30=HEAP32[(($arrayidx36)>>2)];
  var $31=HEAP32[((5243900)>>2)];
  var $32=HEAP32[((5248484)>>2)];
  var $arrayidx37=(($32+($31<<2))|0);
  HEAP32[(($arrayidx37)>>2)]=$30;
  var $call38=_eatbstwhitespace();
  var $tobool39=(($call38)|0)!=0;
  if (!($tobool39)) {
    _eatbstprint();
    var $33=HEAP32[((5243908)>>2)];
    var $call41=_fputs(((5259452)|0), $33);
    var $34=HEAP32[((5243524)>>2)];
    var $call42=_fputs(((5259452)|0), $34);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  var $35=HEAP32[((5252244)>>2)];
  var $36=HEAP32[((5252252)>>2)];
  var $arrayidx44=(($36+$35)|0);
  var $37=HEAP8[($arrayidx44)];
  var $conv45=(($37)&255);
  var $cmp46=(($conv45)|0)!=125;
  if ($cmp46) {
    _bstrightbraceprint();
    var $38=HEAP32[((5243908)>>2)];
    var $call49=_fputs(((5259452)|0), $38);
    var $39=HEAP32[((5243524)>>2)];
    var $call50=_fputs(((5259452)|0), $39);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  var $40=HEAP32[((5252244)>>2)];
  var $add52=((($40)+(1))|0);
  HEAP32[((5252244)>>2)]=$add52;
  var $call53=_eatbstwhitespace();
  var $tobool54=(($call53)|0)!=0;
  if (!($tobool54)) {
    _eatbstprint();
    var $41=HEAP32[((5243908)>>2)];
    var $call56=_fputs(((5259452)|0), $41);
    var $42=HEAP32[((5243524)>>2)];
    var $call57=_fputs(((5259452)|0), $42);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  var $43=HEAP32[((5252244)>>2)];
  var $44=HEAP32[((5252252)>>2)];
  var $arrayidx59=(($44+$43)|0);
  var $45=HEAP8[($arrayidx59)];
  var $conv60=(($45)&255);
  var $cmp61=(($conv60)|0)!=123;
  if ($cmp61) {
    _bstleftbraceprint();
    var $46=HEAP32[((5243908)>>2)];
    var $call64=_fputs(((5259452)|0), $46);
    var $47=HEAP32[((5243524)>>2)];
    var $call65=_fputs(((5259452)|0), $47);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  var $48=HEAP32[((5252244)>>2)];
  var $add67=((($48)+(1))|0);
  HEAP32[((5252244)>>2)]=$add67;
  var $call68=_eatbstwhitespace();
  var $tobool69=(($call68)|0)!=0;
  if (!($tobool69)) {
    _eatbstprint();
    var $49=HEAP32[((5243908)>>2)];
    var $call71=_fputs(((5259452)|0), $49);
    var $50=HEAP32[((5243524)>>2)];
    var $call72=_fputs(((5259452)|0), $50);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  var $51=HEAP32[((5252244)>>2)];
  var $52=HEAP32[((5252252)>>2)];
  var $arrayidx74=(($52+$51)|0);
  var $53=HEAP8[($arrayidx74)];
  var $conv75=(($53)&255);
  var $cmp76=(($conv75)|0)!=34;
  if ($cmp76) {
    var $54=HEAP32[((5243908)>>2)];
    var $55=HEAP8[(((5243170)|0))];
    var $conv79=(($55)&255);
    var $call80=_fprintf($54, ((5263208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5259348)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv79,HEAP32[(((tempInt)+(8))>>2)]=((5259240)|0),tempInt));
    var $56=HEAP32[((5243524)>>2)];
    var $57=HEAP8[(((5243170)|0))];
    var $conv81=(($57)&255);
    var $call82=_fprintf($56, ((5263208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5259348)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv81,HEAP32[(((tempInt)+(8))>>2)]=((5259240)|0),tempInt));
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  var $58=HEAP32[((5252244)>>2)];
  var $add84=((($58)+(1))|0);
  HEAP32[((5252244)>>2)]=$add84;
  var $call85=_zscan1(34);
  var $tobool86=(($call85)|0)!=0;
  if (!($tobool86)) {
    var $59=HEAP32[((5243908)>>2)];
    var $60=HEAP8[(((5243170)|0))];
    var $conv88=(($60)&255);
    var $call89=_fprintf($59, ((5263208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5259224)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv88,HEAP32[(((tempInt)+(8))>>2)]=((5259196)|0),tempInt));
    var $61=HEAP32[((5243524)>>2)];
    var $62=HEAP8[(((5243170)|0))];
    var $conv90=(($62)&255);
    var $call91=_fprintf($61, ((5263208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5259224)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv90,HEAP32[(((tempInt)+(8))>>2)]=((5259196)|0),tempInt));
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  var $63=HEAP32[((5252252)>>2)];
  var $64=HEAP32[((5252248)>>2)];
  var $65=HEAP32[((5252244)>>2)];
  var $66=HEAP32[((5252248)>>2)];
  var $sub93=((($65)-($66))|0);
  var $call94=_zstrlookup($63, $64, $sub93, 0, 1);
  HEAP32[((5243904)>>2)]=$call94;
  var $67=HEAP32[((5243904)>>2)];
  var $68=HEAP32[((5248804)>>2)];
  var $arrayidx95=(($68+$67)|0);
  HEAP8[($arrayidx95)]=3;
  var $69=HEAP32[((5243904)>>2)];
  var $70=HEAP32[((5248752)>>2)];
  var $arrayidx96=(($70+($69<<2))|0);
  var $71=HEAP32[(($arrayidx96)>>2)];
  var $72=HEAP32[((5243900)>>2)];
  var $73=HEAP32[((5248484)>>2)];
  var $arrayidx97=(($73+($72<<2))|0);
  HEAP32[(($arrayidx97)>>2)]=$71;
  var $74=HEAP32[((5252244)>>2)];
  var $add98=((($74)+(1))|0);
  HEAP32[((5252244)>>2)]=$add98;
  var $call99=_eatbstwhitespace();
  var $tobool100=(($call99)|0)!=0;
  if (!($tobool100)) {
    _eatbstprint();
    var $75=HEAP32[((5243908)>>2)];
    var $call102=_fputs(((5259452)|0), $75);
    var $76=HEAP32[((5243524)>>2)];
    var $call103=_fputs(((5259452)|0), $76);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  var $77=HEAP32[((5252244)>>2)];
  var $78=HEAP32[((5252252)>>2)];
  var $arrayidx105=(($78+$77)|0);
  var $79=HEAP8[($arrayidx105)];
  var $conv106=(($79)&255);
  var $cmp107=(($conv106)|0)!=125;
  if ($cmp107) {
    _bstrightbraceprint();
    var $80=HEAP32[((5243908)>>2)];
    var $call110=_fputs(((5259452)|0), $80);
    var $81=HEAP32[((5243524)>>2)];
    var $call111=_fputs(((5259452)|0), $81);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  } else {
    var $82=HEAP32[((5252244)>>2)];
    var $add113=((($82)+(1))|0);
    HEAP32[((5252244)>>2)]=$add113;
    STACKTOP = __stackBase__;
    return;
  }
}
_bstmacrocommand["X"]=1;

function _getbibcommandorentryandprocess() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  HEAP32[((5252864)>>2)]=0;
  while(1) {
    var $call=_zscan1(64);
    var $tobool=(($call)|0)!=0;
    var $lnot=$tobool ^ 1;
    if (!($lnot)) {
      break;
    }
    var $0=HEAP32[((5252520)>>2)];
    var $1=HEAP32[((5252532)>>2)];
    var $arrayidx=(($1+($0<<2))|0);
    var $2=HEAP32[(($arrayidx)>>2)];
    var $call1=_zinputln($2);
    var $tobool2=(($call1)|0)!=0;
    if (!($tobool2)) {
      label = 2833;
      break;
    }
    var $3=HEAP32[((5252528)>>2)];
    var $add=((($3)+(1))|0);
    HEAP32[((5252528)>>2)]=$add;
    HEAP32[((5252244)>>2)]=0;
  }
  if (label == 2833) {
    STACKTOP = __stackBase__;
    return;
  }
  var $4=HEAP32[((5252244)>>2)];
  var $5=HEAP32[((5252252)>>2)];
  var $arrayidx3=(($5+$4)|0);
  var $6=HEAP8[($arrayidx3)];
  var $conv=(($6)&255);
  var $cmp=(($conv)|0)!=64;
  if ($cmp) {
    var $7=HEAP32[((5243908)>>2)];
    var $8=HEAP8[(((5243200)|0))];
    var $conv6=(($8)&255);
    var $call7=_fprintf($7, ((5263208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5259188)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv6,HEAP32[(((tempInt)+(8))>>2)]=((5259172)|0),tempInt));
    var $9=HEAP32[((5243524)>>2)];
    var $10=HEAP8[(((5243200)|0))];
    var $conv8=(($10)&255);
    var $call9=_fprintf($9, ((5263208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5259188)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv8,HEAP32[(((tempInt)+(8))>>2)]=((5259172)|0),tempInt));
    _printconfusion();
    _longjmp(((5248396)|0), 1);
    throw "Reached an unreachable!"
  }
  var $11=HEAP32[((5252244)>>2)];
  var $add11=((($11)+(1))|0);
  HEAP32[((5252244)>>2)]=$add11;
  var $call12=_eatbibwhitespace();
  var $tobool13=(($call12)|0)!=0;
  if (!($tobool13)) {
    _eatbibprint();
    STACKTOP = __stackBase__;
    return;
  }
  _zscanidentifier(123, 40, 40);
  var $12=HEAP8[(5243584)];
  var $conv16=(($12)&255);
  var $cmp17=(($conv16)|0)==3;
  do {
    if (!($cmp17)) {
      var $13=HEAP8[(5243584)];
      var $conv19=(($13)&255);
      var $cmp20=(($conv19)|0)==1;
      if ($cmp20) {
        break;
      }
      _bibidprint();
      var $14=HEAP32[((5243908)>>2)];
      var $call23=_fputs(((5259144)|0), $14);
      var $15=HEAP32[((5243524)>>2)];
      var $call24=_fputs(((5259144)|0), $15);
      _biberrprint();
      STACKTOP = __stackBase__;
      return;
    }
  } while(0);
  var $16=HEAP32[((5252252)>>2)];
  var $17=HEAP32[((5252248)>>2)];
  var $18=HEAP32[((5252244)>>2)];
  var $19=HEAP32[((5252248)>>2)];
  var $sub=((($18)-($19))|0);
  _zlowercase($16, $17, $sub);
  var $20=HEAP32[((5252252)>>2)];
  var $21=HEAP32[((5252248)>>2)];
  var $22=HEAP32[((5252244)>>2)];
  var $23=HEAP32[((5252248)>>2)];
  var $sub26=((($22)-($23))|0);
  var $call27=_zstrlookup($20, $21, $sub26, 12, 0);
  var $24=HEAP32[((5248484)>>2)];
  var $arrayidx28=(($24+($call27<<2))|0);
  var $25=HEAP32[(($arrayidx28)>>2)];
  HEAP32[((5251152)>>2)]=$25;
  var $26=HEAP32[((5248776)>>2)];
  var $tobool29=(($26)|0)!=0;
  do {
    if ($tobool29) {
      HEAP32[((5252864)>>2)]=1;
      var $27=HEAP32[((5251152)>>2)];
      if ((($27)|0)==0) {
        STACKTOP = __stackBase__;
        return;
      } else if ((($27)|0)==2) {
        var $call97=_eatbibwhitespace();
        var $tobool98=(($call97)|0)!=0;
        if (!($tobool98)) {
          _eatbibprint();
          STACKTOP = __stackBase__;
          return;
        }
        var $70=HEAP32[((5252244)>>2)];
        var $71=HEAP32[((5252252)>>2)];
        var $arrayidx101=(($71+$70)|0);
        var $72=HEAP8[($arrayidx101)];
        var $conv102=(($72)&255);
        var $cmp103=(($conv102)|0)==123;
        do {
          if ($cmp103) {
            HEAP8[(5243616)]=125;
          } else {
            var $73=HEAP32[((5252244)>>2)];
            var $74=HEAP32[((5252252)>>2)];
            var $arrayidx107=(($74+$73)|0);
            var $75=HEAP8[($arrayidx107)];
            var $conv108=(($75)&255);
            var $cmp109=(($conv108)|0)==40;
            if ($cmp109) {
              HEAP8[(5243616)]=41;
              break;
            } else {
              _zbiboneoftwoprint(123, 40);
              STACKTOP = __stackBase__;
              return;
            }
          }
        } while(0);
        var $76=HEAP32[((5252244)>>2)];
        var $add115=((($76)+(1))|0);
        HEAP32[((5252244)>>2)]=$add115;
        var $call116=_eatbibwhitespace();
        var $tobool117=(($call116)|0)!=0;
        if (!($tobool117)) {
          _eatbibprint();
          STACKTOP = __stackBase__;
          return;
        }
        _zscanidentifier(61, 61, 61);
        var $77=HEAP8[(5243584)];
        var $conv120=(($77)&255);
        var $cmp121=(($conv120)|0)==3;
        do {
          if (!($cmp121)) {
            var $78=HEAP8[(5243584)];
            var $conv124=(($78)&255);
            var $cmp125=(($conv124)|0)==1;
            if ($cmp125) {
              break;
            }
            _bibidprint();
            var $79=HEAP32[((5243908)>>2)];
            var $call129=_fputs(((5259080)|0), $79);
            var $80=HEAP32[((5243524)>>2)];
            var $call130=_fputs(((5259080)|0), $80);
            _biberrprint();
            STACKTOP = __stackBase__;
            return;
          }
        } while(0);
        var $81=HEAP32[((5252252)>>2)];
        var $82=HEAP32[((5252248)>>2)];
        var $83=HEAP32[((5252244)>>2)];
        var $84=HEAP32[((5252248)>>2)];
        var $sub132=((($83)-($84))|0);
        _zlowercase($81, $82, $sub132);
        var $85=HEAP32[((5252252)>>2)];
        var $86=HEAP32[((5252248)>>2)];
        var $87=HEAP32[((5252244)>>2)];
        var $88=HEAP32[((5252248)>>2)];
        var $sub133=((($87)-($88))|0);
        var $call134=_zstrlookup($85, $86, $sub133, 13, 1);
        HEAP32[((5251136)>>2)]=$call134;
        var $89=HEAP32[((5251136)>>2)];
        var $90=HEAP32[((5248752)>>2)];
        var $arrayidx135=(($90+($89<<2))|0);
        var $91=HEAP32[(($arrayidx135)>>2)];
        var $92=HEAP32[((5251136)>>2)];
        var $93=HEAP32[((5248484)>>2)];
        var $arrayidx136=(($93+($92<<2))|0);
        HEAP32[(($arrayidx136)>>2)]=$91;
        var $call137=_eatbibwhitespace();
        var $tobool138=(($call137)|0)!=0;
        if (!($tobool138)) {
          _eatbibprint();
          STACKTOP = __stackBase__;
          return;
        }
        var $94=HEAP32[((5252244)>>2)];
        var $95=HEAP32[((5252252)>>2)];
        var $arrayidx141=(($95+$94)|0);
        var $96=HEAP8[($arrayidx141)];
        var $conv142=(($96)&255);
        var $cmp143=(($conv142)|0)!=61;
        if ($cmp143) {
          _bibequalssignprint();
          STACKTOP = __stackBase__;
          return;
        }
        var $97=HEAP32[((5252244)>>2)];
        var $add147=((($97)+(1))|0);
        HEAP32[((5252244)>>2)]=$add147;
        var $call148=_eatbibwhitespace();
        var $tobool149=(($call148)|0)!=0;
        if (!($tobool149)) {
          _eatbibprint();
          STACKTOP = __stackBase__;
          return;
        }
        HEAP32[((5243516)>>2)]=1;
        var $call152=_scanandstorethefieldvalueandeatwhite();
        var $tobool153=(($call152)|0)!=0;
        if (!($tobool153)) {
          STACKTOP = __stackBase__;
          return;
        }
        var $98=HEAP32[((5252244)>>2)];
        var $99=HEAP32[((5252252)>>2)];
        var $arrayidx156=(($99+$98)|0);
        var $100=HEAP8[($arrayidx156)];
        var $conv157=(($100)&255);
        var $101=HEAP8[(5243616)];
        var $conv158=(($101)&255);
        var $cmp159=(($conv157)|0)!=(($conv158)|0);
        if ($cmp159) {
          var $102=HEAP32[((5243908)>>2)];
          var $103=HEAP8[(5243616)];
          var $idxprom162=(($103)&255);
          var $arrayidx163=((5243136+$idxprom162)|0);
          var $104=HEAP8[($arrayidx163)];
          var $conv164=(($104)&255);
          var $call165=_fprintf($102, ((5263208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5259132)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv164,HEAP32[(((tempInt)+(8))>>2)]=((5259060)|0),tempInt));
          var $105=HEAP32[((5243524)>>2)];
          var $106=HEAP8[(5243616)];
          var $idxprom166=(($106)&255);
          var $arrayidx167=((5243136+$idxprom166)|0);
          var $107=HEAP8[($arrayidx167)];
          var $conv168=(($107)&255);
          var $call169=_fprintf($105, ((5263208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5259132)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv168,HEAP32[(((tempInt)+(8))>>2)]=((5259060)|0),tempInt));
          _biberrprint();
          STACKTOP = __stackBase__;
          return;
        } else {
          var $108=HEAP32[((5252244)>>2)];
          var $add171=((($108)+(1))|0);
          HEAP32[((5252244)>>2)]=$add171;
          STACKTOP = __stackBase__;
          return;
        }
      } else if ((($27)|0)==1) {
        var $28=HEAP32[((5243660)>>2)];
        var $29=HEAP32[((5243896)>>2)];
        var $cmp32=(($28)|0)==(($29)|0);
        if ($cmp32) {
          var $30=HEAP32[((5243908)>>2)];
          var $31=HEAP32[((5243896)>>2)];
          var $add35=((($31)+(20))|0);
          var $32=HEAP32[((5243896)>>2)];
          var $call36=_fprintf($30, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5260680)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add35,HEAP32[(((tempInt)+(12))>>2)]=$32,tempInt));
          var $33=HEAP32[((5252524)>>2)];
          var $34=$33;
          var $35=HEAP32[((5243896)>>2)];
          var $add37=((($35)+(20))|0);
          var $add38=((($add37)+(1))|0);
          var $mul=((($add38<<2))&-1);
          var $call39=_xrealloc($34, $mul);
          var $36=$call39;
          HEAP32[((5252524)>>2)]=$36;
          var $37=HEAP32[((5243908)>>2)];
          var $38=HEAP32[((5243896)>>2)];
          var $add40=((($38)+(20))|0);
          var $39=HEAP32[((5243896)>>2)];
          var $call41=_fprintf($37, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5260656)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add40,HEAP32[(((tempInt)+(12))>>2)]=$39,tempInt));
          var $40=HEAP32[((5252532)>>2)];
          var $41=$40;
          var $42=HEAP32[((5243896)>>2)];
          var $add42=((($42)+(20))|0);
          var $add43=((($add42)+(1))|0);
          var $mul44=((($add43<<2))&-1);
          var $call45=_xrealloc($41, $mul44);
          var $43=$call45;
          HEAP32[((5252532)>>2)]=$43;
          var $44=HEAP32[((5243908)>>2)];
          var $45=HEAP32[((5243896)>>2)];
          var $add46=((($45)+(20))|0);
          var $46=HEAP32[((5243896)>>2)];
          var $call47=_fprintf($44, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5260624)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add46,HEAP32[(((tempInt)+(12))>>2)]=$46,tempInt));
          var $47=HEAP32[((5243540)>>2)];
          var $48=$47;
          var $49=HEAP32[((5243896)>>2)];
          var $add48=((($49)+(20))|0);
          var $add49=((($add48)+(1))|0);
          var $mul50=((($add49<<2))&-1);
          var $call51=_xrealloc($48, $mul50);
          var $50=$call51;
          HEAP32[((5243540)>>2)]=$50;
          var $51=HEAP32[((5243896)>>2)];
          var $add52=((($51)+(20))|0);
          HEAP32[((5243896)>>2)]=$add52;
        }
        var $call54=_eatbibwhitespace();
        var $tobool55=(($call54)|0)!=0;
        if (!($tobool55)) {
          _eatbibprint();
          STACKTOP = __stackBase__;
          return;
        }
        var $52=HEAP32[((5252244)>>2)];
        var $53=HEAP32[((5252252)>>2)];
        var $arrayidx58=(($53+$52)|0);
        var $54=HEAP8[($arrayidx58)];
        var $conv59=(($54)&255);
        var $cmp60=(($conv59)|0)==123;
        do {
          if ($cmp60) {
            HEAP8[(5243616)]=125;
          } else {
            var $55=HEAP32[((5252244)>>2)];
            var $56=HEAP32[((5252252)>>2)];
            var $arrayidx64=(($56+$55)|0);
            var $57=HEAP8[($arrayidx64)];
            var $conv65=(($57)&255);
            var $cmp66=(($conv65)|0)==40;
            if ($cmp66) {
              HEAP8[(5243616)]=41;
              break;
            } else {
              _zbiboneoftwoprint(123, 40);
              STACKTOP = __stackBase__;
              return;
            }
          }
        } while(0);
        var $58=HEAP32[((5252244)>>2)];
        var $add72=((($58)+(1))|0);
        HEAP32[((5252244)>>2)]=$add72;
        var $call73=_eatbibwhitespace();
        var $tobool74=(($call73)|0)!=0;
        if (!($tobool74)) {
          _eatbibprint();
          STACKTOP = __stackBase__;
          return;
        }
        HEAP32[((5243516)>>2)]=1;
        var $call77=_scanandstorethefieldvalueandeatwhite();
        var $tobool78=(($call77)|0)!=0;
        if (!($tobool78)) {
          STACKTOP = __stackBase__;
          return;
        }
        var $59=HEAP32[((5252244)>>2)];
        var $60=HEAP32[((5252252)>>2)];
        var $arrayidx81=(($60+$59)|0);
        var $61=HEAP8[($arrayidx81)];
        var $conv82=(($61)&255);
        var $62=HEAP8[(5243616)];
        var $conv83=(($62)&255);
        var $cmp84=(($conv82)|0)!=(($conv83)|0);
        if ($cmp84) {
          var $63=HEAP32[((5243908)>>2)];
          var $64=HEAP8[(5243616)];
          var $idxprom=(($64)&255);
          var $arrayidx87=((5243136+$idxprom)|0);
          var $65=HEAP8[($arrayidx87)];
          var $conv88=(($65)&255);
          var $call89=_fprintf($63, ((5263208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5259132)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv88,HEAP32[(((tempInt)+(8))>>2)]=((5259108)|0),tempInt));
          var $66=HEAP32[((5243524)>>2)];
          var $67=HEAP8[(5243616)];
          var $idxprom90=(($67)&255);
          var $arrayidx91=((5243136+$idxprom90)|0);
          var $68=HEAP8[($arrayidx91)];
          var $conv92=(($68)&255);
          var $call93=_fprintf($66, ((5263208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5259132)|0),HEAP32[(((tempInt)+(4))>>2)]=$conv92,HEAP32[(((tempInt)+(8))>>2)]=((5259108)|0),tempInt));
          _biberrprint();
          STACKTOP = __stackBase__;
          return;
        } else {
          var $69=HEAP32[((5252244)>>2)];
          var $add95=((($69)+(1))|0);
          HEAP32[((5252244)>>2)]=$add95;
          STACKTOP = __stackBase__;
          return;
        }
      } else {
        _bibcmdconfusion();
        break;
      }
    } else {
      var $109=HEAP32[((5252252)>>2)];
      var $110=HEAP32[((5252248)>>2)];
      var $111=HEAP32[((5252244)>>2)];
      var $112=HEAP32[((5252248)>>2)];
      var $sub173=((($111)-($112))|0);
      var $call174=_zstrlookup($109, $110, $sub173, 11, 0);
      HEAP32[((5251076)>>2)]=$call174;
      var $113=HEAP32[((5248776)>>2)];
      var $tobool175=(($113)|0)!=0;
      do {
        if ($tobool175) {
          var $114=HEAP32[((5251076)>>2)];
          var $115=HEAP32[((5248804)>>2)];
          var $arrayidx177=(($115+$114)|0);
          var $116=HEAP8[($arrayidx177)];
          var $conv178=(($116)&255);
          var $cmp179=(($conv178)|0)!=1;
          if ($cmp179) {
            label = 2894;
            break;
          }
          HEAP32[((5243436)>>2)]=1;
          break;
        } else {
          label = 2894;
        }
      } while(0);
      if (label == 2894) {
        HEAP32[((5243436)>>2)]=0;
      }
    }
  } while(0);
  var $call185=_eatbibwhitespace();
  var $tobool186=(($call185)|0)!=0;
  if (!($tobool186)) {
    _eatbibprint();
    STACKTOP = __stackBase__;
    return;
  }
  var $117=HEAP32[((5252244)>>2)];
  var $118=HEAP32[((5252252)>>2)];
  var $arrayidx189=(($118+$117)|0);
  var $119=HEAP8[($arrayidx189)];
  var $conv190=(($119)&255);
  var $cmp191=(($conv190)|0)==123;
  do {
    if ($cmp191) {
      HEAP8[(5243616)]=125;
    } else {
      var $120=HEAP32[((5252244)>>2)];
      var $121=HEAP32[((5252252)>>2)];
      var $arrayidx195=(($121+$120)|0);
      var $122=HEAP8[($arrayidx195)];
      var $conv196=(($122)&255);
      var $cmp197=(($conv196)|0)==40;
      if ($cmp197) {
        HEAP8[(5243616)]=41;
        break;
      } else {
        _zbiboneoftwoprint(123, 40);
        STACKTOP = __stackBase__;
        return;
      }
    }
  } while(0);
  var $123=HEAP32[((5252244)>>2)];
  var $add203=((($123)+(1))|0);
  HEAP32[((5252244)>>2)]=$add203;
  var $call204=_eatbibwhitespace();
  var $tobool205=(($call204)|0)!=0;
  if (!($tobool205)) {
    _eatbibprint();
    STACKTOP = __stackBase__;
    return;
  }
  var $124=HEAP8[(5243616)];
  var $conv208=(($124)&255);
  var $cmp209=(($conv208)|0)==41;
  if ($cmp209) {
    var $call212=_zscan1white(44);
    var $tobool213=(($call212)|0)!=0;
    if ($tobool213) {
    }
  } else {
    var $call217=_zscan2white(44, 125);
    var $tobool218=(($call217)|0)!=0;
    if ($tobool218) {
    }
  }
  var $125=HEAP32[((5252248)>>2)];
  HEAP32[((5243460)>>2)]=$125;
  while(1) {
    var $126=HEAP32[((5243460)>>2)];
    var $127=HEAP32[((5252244)>>2)];
    var $cmp223=(($126)|0) < (($127)|0);
    if (!($cmp223)) {
      break;
    }
    var $128=HEAP32[((5243460)>>2)];
    var $129=HEAP32[((5252252)>>2)];
    var $arrayidx226=(($129+$128)|0);
    var $130=HEAP8[($arrayidx226)];
    var $131=HEAP32[((5243460)>>2)];
    var $132=HEAP32[((5251064)>>2)];
    var $arrayidx227=(($132+$131)|0);
    HEAP8[($arrayidx227)]=$130;
    var $133=HEAP32[((5243460)>>2)];
    var $add228=((($133)+(1))|0);
    HEAP32[((5243460)>>2)]=$add228;
  }
  var $134=HEAP32[((5251064)>>2)];
  var $135=HEAP32[((5252248)>>2)];
  var $136=HEAP32[((5252244)>>2)];
  var $137=HEAP32[((5252248)>>2)];
  var $sub230=((($136)-($137))|0);
  _zlowercase($134, $135, $sub230);
  var $138=HEAP32[((5252888)>>2)];
  var $tobool231=(($138)|0)!=0;
  if ($tobool231) {
    var $139=HEAP32[((5251064)>>2)];
    var $140=HEAP32[((5252248)>>2)];
    var $141=HEAP32[((5252244)>>2)];
    var $142=HEAP32[((5252248)>>2)];
    var $sub233=((($141)-($142))|0);
    var $call234=_zstrlookup($139, $140, $sub233, 10, 1);
    HEAP32[((5244192)>>2)]=$call234;
  } else {
    var $143=HEAP32[((5251064)>>2)];
    var $144=HEAP32[((5252248)>>2)];
    var $145=HEAP32[((5252244)>>2)];
    var $146=HEAP32[((5252248)>>2)];
    var $sub236=((($145)-($146))|0);
    var $call237=_zstrlookup($143, $144, $sub236, 10, 0);
    HEAP32[((5244192)>>2)]=$call237;
  }
  var $147=HEAP32[((5248776)>>2)];
  var $tobool239=(($147)|0)!=0;
  do {
    if ($tobool239) {
      var $148=HEAP32[((5244192)>>2)];
      var $149=HEAP32[((5248484)>>2)];
      var $arrayidx241=(($149+($148<<2))|0);
      var $150=HEAP32[(($arrayidx241)>>2)];
      var $151=HEAP32[((5248484)>>2)];
      var $arrayidx242=(($151+($150<<2))|0);
      var $152=HEAP32[(($arrayidx242)>>2)];
      HEAP32[((5251096)>>2)]=$152;
      var $153=HEAP32[((5252888)>>2)];
      var $tobool243=(($153)|0)!=0;
      L3678: do {
        if ($tobool243) {
          var $154=HEAP32[((5251096)>>2)];
          var $155=HEAP32[((5252884)>>2)];
          var $cmp245=(($154)|0) < (($155)|0);
          if ($cmp245) {
            label = 2924;
            break;
          }
          var $156=HEAP32[((5251096)>>2)];
          var $157=HEAP32[((5243744)>>2)];
          var $cmp248=(($156)|0) >= (($157)|0);
          if ($cmp248) {
            label = 2924;
            break;
          }
          var $180=HEAP32[((5251096)>>2)];
          var $181=HEAP32[((5251092)>>2)];
          var $arrayidx271=(($181+($180<<2))|0);
          var $182=HEAP32[(($arrayidx271)>>2)];
          var $tobool272=(($182)|0)!=0;
          do {
            if (!($tobool272)) {
              HEAP32[((5251056)>>2)]=0;
              var $183=HEAP32[((5251096)>>2)];
              var $184=HEAP32[((5251188)>>2)];
              var $arrayidx274=(($184+($183<<2))|0);
              var $185=HEAP32[(($arrayidx274)>>2)];
              var $186=HEAP32[((5243488)>>2)];
              var $arrayidx275=(($186+($185<<2))|0);
              var $187=HEAP32[(($arrayidx275)>>2)];
              HEAP32[((5243460)>>2)]=$187;
              var $188=HEAP32[((5251096)>>2)];
              var $189=HEAP32[((5251188)>>2)];
              var $arrayidx276=(($189+($188<<2))|0);
              var $190=HEAP32[(($arrayidx276)>>2)];
              var $add277=((($190)+(1))|0);
              var $191=HEAP32[((5243488)>>2)];
              var $arrayidx278=(($191+($add277<<2))|0);
              var $192=HEAP32[(($arrayidx278)>>2)];
              HEAP32[((5243464)>>2)]=$192;
              while(1) {
                var $193=HEAP32[((5243460)>>2)];
                var $194=HEAP32[((5243464)>>2)];
                var $cmp280=(($193)|0) < (($194)|0);
                if (!($cmp280)) {
                  break;
                }
                var $195=HEAP32[((5243460)>>2)];
                var $196=HEAP32[((5243496)>>2)];
                var $arrayidx283=(($196+$195)|0);
                var $197=HEAP8[($arrayidx283)];
                var $198=HEAP32[((5251056)>>2)];
                var $199=HEAP32[((5251064)>>2)];
                var $arrayidx284=(($199+$198)|0);
                HEAP8[($arrayidx284)]=$197;
                var $200=HEAP32[((5251056)>>2)];
                var $add285=((($200)+(1))|0);
                HEAP32[((5251056)>>2)]=$add285;
                var $201=HEAP32[((5243460)>>2)];
                var $add286=((($201)+(1))|0);
                HEAP32[((5243460)>>2)]=$add286;
              }
              var $202=HEAP32[((5251064)>>2)];
              var $203=HEAP32[((5251096)>>2)];
              var $204=HEAP32[((5251188)>>2)];
              var $arrayidx288=(($204+($203<<2))|0);
              var $205=HEAP32[(($arrayidx288)>>2)];
              var $add289=((($205)+(1))|0);
              var $206=HEAP32[((5243488)>>2)];
              var $arrayidx290=(($206+($add289<<2))|0);
              var $207=HEAP32[(($arrayidx290)>>2)];
              var $208=HEAP32[((5251096)>>2)];
              var $209=HEAP32[((5251188)>>2)];
              var $arrayidx291=(($209+($208<<2))|0);
              var $210=HEAP32[(($arrayidx291)>>2)];
              var $211=HEAP32[((5243488)>>2)];
              var $arrayidx292=(($211+($210<<2))|0);
              var $212=HEAP32[(($arrayidx292)>>2)];
              var $sub293=((($207)-($212))|0);
              _zlowercase($202, 0, $sub293);
              var $213=HEAP32[((5251064)>>2)];
              var $214=HEAP32[((5251096)>>2)];
              var $215=HEAP32[((5251188)>>2)];
              var $arrayidx294=(($215+($214<<2))|0);
              var $216=HEAP32[(($arrayidx294)>>2)];
              var $add295=((($216)+(1))|0);
              var $217=HEAP32[((5243488)>>2)];
              var $arrayidx296=(($217+($add295<<2))|0);
              var $218=HEAP32[(($arrayidx296)>>2)];
              var $219=HEAP32[((5251096)>>2)];
              var $220=HEAP32[((5251188)>>2)];
              var $arrayidx297=(($220+($219<<2))|0);
              var $221=HEAP32[(($arrayidx297)>>2)];
              var $222=HEAP32[((5243488)>>2)];
              var $arrayidx298=(($222+($221<<2))|0);
              var $223=HEAP32[(($arrayidx298)>>2)];
              var $sub299=((($218)-($223))|0);
              var $call300=_zstrlookup($213, 0, $sub299, 10, 0);
              HEAP32[((5244188)>>2)]=$call300;
              var $224=HEAP32[((5248776)>>2)];
              var $tobool301=(($224)|0)!=0;
              if (!($tobool301)) {
                _citekeydisappearedconfusion();
              }
              var $225=HEAP32[((5244188)>>2)];
              var $226=HEAP32[((5244192)>>2)];
              var $cmp304=(($225)|0)==(($226)|0);
              if ($cmp304) {
                label = 2945;
                break L3678;
              } else {
                break;
              }
            }
          } while(0);
          break;
        } else {
          label = 2924;
        }
      } while(0);
      do {
        if (label == 2924) {
          var $158=HEAP32[((5251096)>>2)];
          var $159=HEAP32[((5243432)>>2)];
          var $arrayidx251=(($159+($158<<2))|0);
          var $160=HEAP32[(($arrayidx251)>>2)];
          var $cmp252=(($160)|0)==0;
          if (!($cmp252)) {
            break;
          }
          var $161=HEAP32[((5252888)>>2)];
          var $tobool255=(($161)|0)!=0;
          do {
            if (!($tobool255)) {
              var $162=HEAP32[((5251096)>>2)];
              var $163=HEAP32[((5243744)>>2)];
              var $cmp256=(($162)|0) >= (($163)|0);
              if (!($cmp256)) {
                break;
              }
              var $164=HEAP32[((5252252)>>2)];
              var $165=HEAP32[((5252248)>>2)];
              var $166=HEAP32[((5252244)>>2)];
              var $167=HEAP32[((5252248)>>2)];
              var $sub259=((($166)-($167))|0);
              var $call260=_zstrlookup($164, $165, $sub259, 9, 1);
              HEAP32[((5251180)>>2)]=$call260;
              var $168=HEAP32[((5248776)>>2)];
              var $tobool261=(($168)|0)!=0;
              if (!($tobool261)) {
                var $169=HEAP32[((5251180)>>2)];
                var $170=HEAP32[((5244192)>>2)];
                var $171=HEAP32[((5248484)>>2)];
                var $arrayidx263=(($171+($170<<2))|0);
                HEAP32[(($arrayidx263)>>2)]=$169;
                var $172=HEAP32[((5251096)>>2)];
                var $173=HEAP32[((5251180)>>2)];
                var $174=HEAP32[((5248484)>>2)];
                var $arrayidx264=(($174+($173<<2))|0);
                HEAP32[(($arrayidx264)>>2)]=$172;
                var $175=HEAP32[((5251180)>>2)];
                var $176=HEAP32[((5248752)>>2)];
                var $arrayidx265=(($176+($175<<2))|0);
                var $177=HEAP32[(($arrayidx265)>>2)];
                var $178=HEAP32[((5251096)>>2)];
                var $179=HEAP32[((5251184)>>2)];
                var $arrayidx266=(($179+($178<<2))|0);
                HEAP32[(($arrayidx266)>>2)]=$177;
                HEAP32[((5248776)>>2)]=1;
              }
            }
          } while(0);
          label = 2945;
          break;
        }
      } while(0);
      if (label == 2945) {
        break;
      }
      var $227=HEAP32[((5251096)>>2)];
      var $228=HEAP32[((5243432)>>2)];
      var $arrayidx310=(($228+($227<<2))|0);
      var $229=HEAP32[(($arrayidx310)>>2)];
      var $cmp311=(($229)|0)==0;
      if ($cmp311) {
        var $230=HEAP32[((5243908)>>2)];
        var $call314=_fputs(((5259008)|0), $230);
        var $231=HEAP32[((5243524)>>2)];
        var $call315=_fputs(((5259008)|0), $231);
        _printconfusion();
        _longjmp(((5248396)|0), 1);
        throw "Reached an unreachable!"
      }
      var $232=HEAP32[((5243908)>>2)];
      var $call317=_fputs(((5258992)|0), $232);
      var $233=HEAP32[((5243524)>>2)];
      var $call318=_fputs(((5258992)|0), $233);
      _biberrprint();
      STACKTOP = __stackBase__;
      return;
    }
  } while(0);
  HEAP32[((5243520)>>2)]=1;
  var $234=HEAP32[((5252888)>>2)];
  var $tobool320=(($234)|0)!=0;
  if ($tobool320) {
    var $235=HEAP32[((5248776)>>2)];
    var $tobool322=(($235)|0)!=0;
    do {
      if ($tobool322) {
        var $236=HEAP32[((5251096)>>2)];
        var $237=HEAP32[((5252884)>>2)];
        var $cmp324=(($236)|0) < (($237)|0);
        if ($cmp324) {
          break;
        }
        var $238=HEAP32[((5251096)>>2)];
        var $239=HEAP32[((5251092)>>2)];
        var $arrayidx328=(($239+($238<<2))|0);
        HEAP32[(($arrayidx328)>>2)]=1;
        var $240=HEAP32[((5244192)>>2)];
        var $241=HEAP32[((5248484)>>2)];
        var $arrayidx329=(($241+($240<<2))|0);
        var $242=HEAP32[(($arrayidx329)>>2)];
        HEAP32[((5251180)>>2)]=$242;
        label = 2955;
        break;
      } else {
        var $243=HEAP32[((5252252)>>2)];
        var $244=HEAP32[((5252248)>>2)];
        var $245=HEAP32[((5252244)>>2)];
        var $246=HEAP32[((5252248)>>2)];
        var $sub332=((($245)-($246))|0);
        var $call333=_zstrlookup($243, $244, $sub332, 9, 1);
        HEAP32[((5251180)>>2)]=$call333;
        var $247=HEAP32[((5248776)>>2)];
        var $tobool334=(($247)|0)!=0;
        if ($tobool334) {
          _hashciteconfusion();
        }
        label = 2955;
        break;
      }
    } while(0);
    if (label == 2955) {
      var $248=HEAP32[((5251172)>>2)];
      HEAP32[((5251096)>>2)]=$248;
      _zzadddatabasecite(5251172);
    }
  } else {
    var $249=HEAP32[((5248776)>>2)];
    var $tobool339=(($249)|0)!=0;
    if (!($tobool339)) {
      HEAP32[((5243520)>>2)]=0;
    }
  }
  var $250=HEAP32[((5243520)>>2)];
  var $tobool343=(($250)|0)!=0;
  if ($tobool343) {
    var $251=HEAP32[((5243436)>>2)];
    var $tobool345=(($251)|0)!=0;
    if ($tobool345) {
      var $252=HEAP32[((5251076)>>2)];
      var $253=HEAP32[((5251096)>>2)];
      var $254=HEAP32[((5243432)>>2)];
      var $arrayidx347=(($254+($253<<2))|0);
      HEAP32[(($arrayidx347)>>2)]=$252;
    } else {
      var $255=HEAP32[((5243428)>>2)];
      var $256=HEAP32[((5251096)>>2)];
      var $257=HEAP32[((5243432)>>2)];
      var $arrayidx349=(($257+($256<<2))|0);
      HEAP32[(($arrayidx349)>>2)]=$255;
      var $258=HEAP32[((5243908)>>2)];
      var $call350=_fputs(((5258964)|0), $258);
      var $259=HEAP32[((5243524)>>2)];
      var $call351=_fputs(((5258964)|0), $259);
      _printatoken();
      var $260=HEAP32[((5243908)>>2)];
      var $call352=_fprintf($260, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5258936)|0),tempInt));
      var $261=HEAP32[((5243524)>>2)];
      var $call353=_fprintf($261, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5258936)|0),tempInt));
      _bibwarnprint();
    }
  }
  var $call356=_eatbibwhitespace();
  var $tobool357=(($call356)|0)!=0;
  if (!($tobool357)) {
    _eatbibprint();
    STACKTOP = __stackBase__;
    return;
  }
  while(1) {
    var $262=HEAP32[((5252244)>>2)];
    var $263=HEAP32[((5252252)>>2)];
    var $arrayidx361=(($263+$262)|0);
    var $264=HEAP8[($arrayidx361)];
    var $conv362=(($264)&255);
    var $265=HEAP8[(5243616)];
    var $conv363=(($265)&255);
    var $cmp364=(($conv362)|0)!=(($conv363)|0);
    if (!($cmp364)) {
      label = 2994;
      break;
    }
    var $266=HEAP32[((5252244)>>2)];
    var $267=HEAP32[((5252252)>>2)];
    var $arrayidx367=(($267+$266)|0);
    var $268=HEAP8[($arrayidx367)];
    var $conv368=(($268)&255);
    var $cmp369=(($conv368)|0)!=44;
    if ($cmp369) {
      label = 2970;
      break;
    }
    var $270=HEAP32[((5252244)>>2)];
    var $add373=((($270)+(1))|0);
    HEAP32[((5252244)>>2)]=$add373;
    var $call374=_eatbibwhitespace();
    var $tobool375=(($call374)|0)!=0;
    if (!($tobool375)) {
      label = 2972;
      break;
    }
    var $271=HEAP32[((5252244)>>2)];
    var $272=HEAP32[((5252252)>>2)];
    var $arrayidx378=(($272+$271)|0);
    var $273=HEAP8[($arrayidx378)];
    var $conv379=(($273)&255);
    var $274=HEAP8[(5243616)];
    var $conv380=(($274)&255);
    var $cmp381=(($conv379)|0)==(($conv380)|0);
    if ($cmp381) {
      label = 2974;
      break;
    }
    _zscanidentifier(61, 61, 61);
    var $275=HEAP8[(5243584)];
    var $conv385=(($275)&255);
    var $cmp386=(($conv385)|0)==3;
    if (!($cmp386)) {
      var $276=HEAP8[(5243584)];
      var $conv389=(($276)&255);
      var $cmp390=(($conv389)|0)==1;
      if (!($cmp390)) {
        label = 2978;
        break;
      }
    }
    HEAP32[((5243516)>>2)]=0;
    var $279=HEAP32[((5243520)>>2)];
    var $tobool397=(($279)|0)!=0;
    if ($tobool397) {
      var $280=HEAP32[((5252252)>>2)];
      var $281=HEAP32[((5252248)>>2)];
      var $282=HEAP32[((5252244)>>2)];
      var $283=HEAP32[((5252248)>>2)];
      var $sub399=((($282)-($283))|0);
      _zlowercase($280, $281, $sub399);
      var $284=HEAP32[((5252252)>>2)];
      var $285=HEAP32[((5252248)>>2)];
      var $286=HEAP32[((5252244)>>2)];
      var $287=HEAP32[((5252248)>>2)];
      var $sub400=((($286)-($287))|0);
      var $call401=_zstrlookup($284, $285, $sub400, 11, 0);
      HEAP32[((5248836)>>2)]=$call401;
      var $288=HEAP32[((5248776)>>2)];
      var $tobool402=(($288)|0)!=0;
      if ($tobool402) {
        var $289=HEAP32[((5248836)>>2)];
        var $290=HEAP32[((5248804)>>2)];
        var $arrayidx404=(($290+$289)|0);
        var $291=HEAP8[($arrayidx404)];
        var $conv405=(($291)&255);
        var $cmp406=(($conv405)|0)==4;
        if ($cmp406) {
          HEAP32[((5243516)>>2)]=1;
        }
      }
    }
    var $call412=_eatbibwhitespace();
    var $tobool413=(($call412)|0)!=0;
    if (!($tobool413)) {
      label = 2986;
      break;
    }
    var $292=HEAP32[((5252244)>>2)];
    var $293=HEAP32[((5252252)>>2)];
    var $arrayidx416=(($293+$292)|0);
    var $294=HEAP8[($arrayidx416)];
    var $conv417=(($294)&255);
    var $cmp418=(($conv417)|0)!=61;
    if ($cmp418) {
      label = 2988;
      break;
    }
    var $295=HEAP32[((5252244)>>2)];
    var $add422=((($295)+(1))|0);
    HEAP32[((5252244)>>2)]=$add422;
    var $call423=_eatbibwhitespace();
    var $tobool424=(($call423)|0)!=0;
    if (!($tobool424)) {
      label = 2990;
      break;
    }
    var $call427=_scanandstorethefieldvalueandeatwhite();
    var $tobool428=(($call427)|0)!=0;
    if (!($tobool428)) {
      label = 2992;
      break;
    }
  }
  if (label == 2974) {
  }
  else if (label == 2978) {
    _bibidprint();
    var $277=HEAP32[((5243908)>>2)];
    var $call394=_fputs(((5258920)|0), $277);
    var $278=HEAP32[((5243524)>>2)];
    var $call395=_fputs(((5258920)|0), $278);
    _biberrprint();
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 2986) {
    _eatbibprint();
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 2988) {
    _bibequalssignprint();
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 2970) {
    var $269=HEAP8[(5243616)];
    _zbiboneoftwoprint(44, $269);
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 2972) {
    _eatbibprint();
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 2990) {
    _eatbibprint();
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 2992) {
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 2994) {
  }
  var $296=HEAP32[((5252244)>>2)];
  var $add432=((($296)+(1))|0);
  HEAP32[((5252244)>>2)]=$add432;
  STACKTOP = __stackBase__;
  return;
}
_getbibcommandorentryandprocess["X"]=1;

function _bstreadcommand() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $0=HEAP32[((5243632)>>2)];
  var $tobool=(($0)|0)!=0;
  if ($tobool) {
    var $1=HEAP32[((5243908)>>2)];
    var $call=_fputs(((5258876)|0), $1);
    var $2=HEAP32[((5243524)>>2)];
    var $call1=_fputs(((5258876)|0), $2);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  HEAP32[((5243632)>>2)]=1;
  var $3=HEAP32[((5251084)>>2)];
  var $tobool2=(($3)|0)!=0;
  if (!($tobool2)) {
    var $4=HEAP32[((5243908)>>2)];
    var $call4=_fputs(((5258832)|0), $4);
    var $5=HEAP32[((5243524)>>2)];
    var $call5=_fputs(((5258832)|0), $5);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  var $6=HEAP32[((5252244)>>2)];
  HEAP32[((5243480)>>2)]=$6;
  var $7=HEAP32[((5244208)>>2)];
  HEAP32[((5243476)>>2)]=$7;
  var $8=HEAP32[((5243480)>>2)];
  HEAP32[((5243460)>>2)]=$8;
  while(1) {
    var $9=HEAP32[((5243460)>>2)];
    var $10=HEAP32[((5243476)>>2)];
    var $cmp=(($9)|0) < (($10)|0);
    if (!($cmp)) {
      break;
    }
    var $11=HEAP32[((5243460)>>2)];
    var $12=HEAP32[((5252252)>>2)];
    var $arrayidx=(($12+$11)|0);
    var $13=HEAP8[($arrayidx)];
    var $14=HEAP32[((5243460)>>2)];
    var $15=HEAP32[((5243484)>>2)];
    var $arrayidx7=(($15+$14)|0);
    HEAP8[($arrayidx7)]=$13;
    var $16=HEAP32[((5243460)>>2)];
    var $add=((($16)+(1))|0);
    HEAP32[((5243460)>>2)]=$add;
  }
  var $17=HEAP32[((5243784)>>2)];
  var $18=HEAP32[((5243800)>>2)];
  var $mul=((($17)*($18))&-1);
  _zcheckfieldoverflow($mul);
  HEAP32[((5248828)>>2)]=0;
  while(1) {
    var $19=HEAP32[((5248828)>>2)];
    var $20=HEAP32[((5243888)>>2)];
    var $cmp9=(($19)|0) < (($20)|0);
    if (!($cmp9)) {
      break;
    }
    var $21=HEAP32[((5248828)>>2)];
    var $22=HEAP32[((5248840)>>2)];
    var $arrayidx11=(($22+($21<<2))|0);
    HEAP32[(($arrayidx11)>>2)]=0;
    var $23=HEAP32[((5248828)>>2)];
    var $add12=((($23)+(1))|0);
    HEAP32[((5248828)>>2)]=$add12;
  }
  HEAP32[((5251172)>>2)]=0;
  while(1) {
    var $24=HEAP32[((5251172)>>2)];
    var $25=HEAP32[((5243892)>>2)];
    var $cmp15=(($24)|0) < (($25)|0);
    if (!($cmp15)) {
      break;
    }
    var $26=HEAP32[((5251172)>>2)];
    var $27=HEAP32[((5243432)>>2)];
    var $arrayidx17=(($27+($26<<2))|0);
    HEAP32[(($arrayidx17)>>2)]=0;
    var $28=HEAP32[((5251172)>>2)];
    var $29=HEAP32[((5251188)>>2)];
    var $arrayidx18=(($29+($28<<2))|0);
    HEAP32[(($arrayidx18)>>2)]=0;
    var $30=HEAP32[((5251172)>>2)];
    var $add19=((($30)+(1))|0);
    HEAP32[((5251172)>>2)]=$add19;
  }
  var $31=HEAP32[((5243800)>>2)];
  HEAP32[((5243744)>>2)]=$31;
  var $32=HEAP32[((5252888)>>2)];
  var $tobool21=(($32)|0)!=0;
  if ($tobool21) {
    var $33=HEAP32[((5252884)>>2)];
    HEAP32[((5251172)>>2)]=$33;
    while(1) {
      var $34=HEAP32[((5251172)>>2)];
      var $35=HEAP32[((5243744)>>2)];
      var $cmp24=(($34)|0) < (($35)|0);
      if (!($cmp24)) {
        break;
      }
      var $36=HEAP32[((5251172)>>2)];
      var $37=HEAP32[((5251184)>>2)];
      var $arrayidx26=(($37+($36<<2))|0);
      var $38=HEAP32[(($arrayidx26)>>2)];
      var $39=HEAP32[((5251172)>>2)];
      var $40=HEAP32[((5251188)>>2)];
      var $arrayidx27=(($40+($39<<2))|0);
      HEAP32[(($arrayidx27)>>2)]=$38;
      var $41=HEAP32[((5251172)>>2)];
      var $42=HEAP32[((5251092)>>2)];
      var $arrayidx28=(($42+($41<<2))|0);
      HEAP32[(($arrayidx28)>>2)]=0;
      var $43=HEAP32[((5251172)>>2)];
      var $add29=((($43)+(1))|0);
      HEAP32[((5251172)>>2)]=$add29;
    }
    var $44=HEAP32[((5252884)>>2)];
    HEAP32[((5251172)>>2)]=$44;
  } else {
    var $45=HEAP32[((5243800)>>2)];
    HEAP32[((5251172)>>2)]=$45;
    HEAP32[((5252884)>>2)]=0;
  }
  HEAP32[((5243636)>>2)]=1;
  HEAP32[((5252520)>>2)]=0;
  while(1) {
    var $46=HEAP32[((5252520)>>2)];
    var $47=HEAP32[((5243804)>>2)];
    var $cmp33=(($46)|0) < (($47)|0);
    if (!($cmp33)) {
      break;
    }
    var $48=HEAP32[((5243420)>>2)];
    var $tobool35=(($48)|0)!=0;
    if ($tobool35) {
      var $49=HEAP32[((5243908)>>2)];
      var $50=HEAP32[((5252520)>>2)];
      var $add37=((($50)+(1))|0);
      var $call38=_fprintf($49, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5258816)|0),HEAP32[(((tempInt)+(4))>>2)]=$add37,HEAP32[(((tempInt)+(8))>>2)]=((5260216)|0),tempInt));
      var $51=HEAP32[((5243524)>>2)];
      var $52=HEAP32[((5252520)>>2)];
      var $add39=((($52)+(1))|0);
      var $call40=_fprintf($51, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5258816)|0),HEAP32[(((tempInt)+(4))>>2)]=$add39,HEAP32[(((tempInt)+(8))>>2)]=((5260216)|0),tempInt));
      _printbibname();
    } else {
      var $53=HEAP32[((5243908)>>2)];
      var $54=HEAP32[((5252520)>>2)];
      var $add42=((($54)+(1))|0);
      var $call43=_fprintf($53, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5258816)|0),HEAP32[(((tempInt)+(4))>>2)]=$add42,HEAP32[(((tempInt)+(8))>>2)]=((5260216)|0),tempInt));
      _logprbibname();
    }
    HEAP32[((5252528)>>2)]=0;
    var $55=HEAP32[((5244208)>>2)];
    HEAP32[((5252244)>>2)]=$55;
    while(1) {
      var $56=HEAP32[((5252520)>>2)];
      var $57=HEAP32[((5252532)>>2)];
      var $arrayidx46=(($57+($56<<2))|0);
      var $58=HEAP32[(($arrayidx46)>>2)];
      var $call47=_eof($58);
      var $tobool48=(($call47)|0)!=0;
      var $lnot=$tobool48 ^ 1;
      if (!($lnot)) {
        break;
      }
      _getbibcommandorentryandprocess();
    }
    var $59=HEAP32[((5252520)>>2)];
    var $60=HEAP32[((5252532)>>2)];
    var $arrayidx51=(($60+($59<<2))|0);
    var $61=HEAP32[(($arrayidx51)>>2)];
    _close_file($61);
    var $62=HEAP32[((5252520)>>2)];
    var $add52=((($62)+(1))|0);
    HEAP32[((5252520)>>2)]=$add52;
  }
  HEAP32[((5243640)>>2)]=1;
  var $63=HEAP32[((5251172)>>2)];
  HEAP32[((5243800)>>2)]=$63;
  var $64=HEAP32[((5243660)>>2)];
  HEAP32[((5243772)>>2)]=$64;
  var $65=HEAP32[((5243800)>>2)];
  var $sub=((($65)-(1))|0);
  var $66=HEAP32[((5243784)>>2)];
  var $mul54=((($sub)*($66))&-1);
  var $67=HEAP32[((5251140)>>2)];
  var $add55=((($mul54)+($67))|0);
  var $68=HEAP32[((5243888)>>2)];
  var $cmp56=(($add55)|0) >= (($68)|0);
  if ($cmp56) {
    var $69=HEAP32[((5243908)>>2)];
    var $call58=_fputs(((5262880)|0), $69);
    var $70=HEAP32[((5243524)>>2)];
    var $call59=_fputs(((5262880)|0), $70);
    _printconfusion();
    _longjmp(((5248396)|0), 1);
    throw "Reached an unreachable!"
  }
  HEAP32[((5251172)>>2)]=0;
  while(1) {
    var $71=HEAP32[((5251172)>>2)];
    var $72=HEAP32[((5243800)>>2)];
    var $cmp62=(($71)|0) < (($72)|0);
    if (!($cmp62)) {
      break;
    }
    var $73=HEAP32[((5251172)>>2)];
    var $74=HEAP32[((5243784)>>2)];
    var $mul64=((($73)*($74))&-1);
    var $75=HEAP32[((5251140)>>2)];
    var $add65=((($mul64)+($75))|0);
    HEAP32[((5248828)>>2)]=$add65;
    var $76=HEAP32[((5248828)>>2)];
    var $77=HEAP32[((5248840)>>2)];
    var $arrayidx66=(($77+($76<<2))|0);
    var $78=HEAP32[(($arrayidx66)>>2)];
    var $cmp67=(($78)|0)!=0;
    if ($cmp67) {
      var $79=HEAP32[((5248828)>>2)];
      var $80=HEAP32[((5248840)>>2)];
      var $arrayidx69=(($80+($79<<2))|0);
      var $81=HEAP32[(($arrayidx69)>>2)];
      var $call70=_zfindcitelocsforthiscitekey($81);
      var $tobool71=(($call70)|0)!=0;
      if ($tobool71) {
        var $82=HEAP32[((5244192)>>2)];
        var $83=HEAP32[((5248484)>>2)];
        var $arrayidx73=(($83+($82<<2))|0);
        var $84=HEAP32[(($arrayidx73)>>2)];
        HEAP32[((5251180)>>2)]=$84;
        var $85=HEAP32[((5251180)>>2)];
        var $86=HEAP32[((5248752)>>2)];
        var $arrayidx74=(($86+($85<<2))|0);
        var $87=HEAP32[(($arrayidx74)>>2)];
        var $88=HEAP32[((5248828)>>2)];
        var $89=HEAP32[((5248840)>>2)];
        var $arrayidx75=(($89+($88<<2))|0);
        HEAP32[(($arrayidx75)>>2)]=$87;
        var $90=HEAP32[((5251180)>>2)];
        var $91=HEAP32[((5248484)>>2)];
        var $arrayidx76=(($91+($90<<2))|0);
        var $92=HEAP32[(($arrayidx76)>>2)];
        HEAP32[((5251176)>>2)]=$92;
        var $93=HEAP32[((5251172)>>2)];
        var $94=HEAP32[((5243784)>>2)];
        var $mul77=((($93)*($94))&-1);
        var $95=HEAP32[((5243768)>>2)];
        var $add78=((($mul77)+($95))|0);
        HEAP32[((5248828)>>2)]=$add78;
        var $96=HEAP32[((5248828)>>2)];
        var $97=HEAP32[((5243768)>>2)];
        var $sub79=((($96)-($97))|0);
        var $98=HEAP32[((5243784)>>2)];
        var $add80=((($sub79)+($98))|0);
        HEAP32[((5248844)>>2)]=$add80;
        var $99=HEAP32[((5251176)>>2)];
        var $100=HEAP32[((5243784)>>2)];
        var $mul81=((($99)*($100))&-1);
        var $101=HEAP32[((5243768)>>2)];
        var $add82=((($mul81)+($101))|0);
        HEAP32[((5248832)>>2)]=$add82;
        while(1) {
          var $102=HEAP32[((5248828)>>2)];
          var $103=HEAP32[((5248844)>>2)];
          var $cmp84=(($102)|0) < (($103)|0);
          if (!($cmp84)) {
            break;
          }
          var $104=HEAP32[((5248828)>>2)];
          var $105=HEAP32[((5248840)>>2)];
          var $arrayidx86=(($105+($104<<2))|0);
          var $106=HEAP32[(($arrayidx86)>>2)];
          var $cmp87=(($106)|0)==0;
          if ($cmp87) {
            var $107=HEAP32[((5248832)>>2)];
            var $108=HEAP32[((5248840)>>2)];
            var $arrayidx89=(($108+($107<<2))|0);
            var $109=HEAP32[(($arrayidx89)>>2)];
            var $110=HEAP32[((5248828)>>2)];
            var $111=HEAP32[((5248840)>>2)];
            var $arrayidx90=(($111+($110<<2))|0);
            HEAP32[(($arrayidx90)>>2)]=$109;
          }
          var $112=HEAP32[((5248828)>>2)];
          var $add92=((($112)+(1))|0);
          HEAP32[((5248828)>>2)]=$add92;
          var $113=HEAP32[((5248832)>>2)];
          var $add93=((($113)+(1))|0);
          HEAP32[((5248832)>>2)]=$add93;
        }
      }
    }
    var $114=HEAP32[((5251172)>>2)];
    var $add97=((($114)+(1))|0);
    HEAP32[((5251172)>>2)]=$add97;
  }
  var $115=HEAP32[((5243800)>>2)];
  var $sub99=((($115)-(1))|0);
  var $116=HEAP32[((5243784)>>2)];
  var $mul100=((($sub99)*($116))&-1);
  var $117=HEAP32[((5251140)>>2)];
  var $add101=((($mul100)+($117))|0);
  var $118=HEAP32[((5243888)>>2)];
  var $cmp102=(($add101)|0) >= (($118)|0);
  if ($cmp102) {
    var $119=HEAP32[((5243908)>>2)];
    var $call104=_fputs(((5262880)|0), $119);
    var $120=HEAP32[((5243524)>>2)];
    var $call105=_fputs(((5262880)|0), $120);
    _printconfusion();
    _longjmp(((5248396)|0), 1);
    throw "Reached an unreachable!"
  }
  HEAP32[((5251172)>>2)]=0;
  while(1) {
    var $121=HEAP32[((5251172)>>2)];
    var $122=HEAP32[((5243800)>>2)];
    var $cmp108=(($121)|0) < (($122)|0);
    if (!($cmp108)) {
      break;
    }
    var $123=HEAP32[((5251172)>>2)];
    var $124=HEAP32[((5243784)>>2)];
    var $mul110=((($123)*($124))&-1);
    var $125=HEAP32[((5251140)>>2)];
    var $add111=((($mul110)+($125))|0);
    HEAP32[((5248828)>>2)]=$add111;
    var $126=HEAP32[((5248828)>>2)];
    var $127=HEAP32[((5248840)>>2)];
    var $arrayidx112=(($127+($126<<2))|0);
    var $128=HEAP32[(($arrayidx112)>>2)];
    var $cmp113=(($128)|0)!=0;
    if ($cmp113) {
      var $129=HEAP32[((5248828)>>2)];
      var $130=HEAP32[((5248840)>>2)];
      var $arrayidx115=(($130+($129<<2))|0);
      var $131=HEAP32[(($arrayidx115)>>2)];
      var $call116=_zfindcitelocsforthiscitekey($131);
      var $tobool117=(($call116)|0)!=0;
      if ($tobool117) {
        var $135=HEAP32[((5251180)>>2)];
        var $136=HEAP32[((5244192)>>2)];
        var $137=HEAP32[((5248484)>>2)];
        var $arrayidx124=(($137+($136<<2))|0);
        var $138=HEAP32[(($arrayidx124)>>2)];
        var $cmp125=(($135)|0)!=(($138)|0);
        if ($cmp125) {
          _hashciteconfusion();
        }
        var $139=HEAP32[((5251180)>>2)];
        var $140=HEAP32[((5248484)>>2)];
        var $arrayidx128=(($140+($139<<2))|0);
        var $141=HEAP32[(($arrayidx128)>>2)];
        HEAP32[((5251176)>>2)]=$141;
        var $142=HEAP32[((5251176)>>2)];
        var $143=HEAP32[((5243432)>>2)];
        var $arrayidx129=(($143+($142<<2))|0);
        var $144=HEAP32[(($arrayidx129)>>2)];
        var $cmp130=(($144)|0)==0;
        if ($cmp130) {
          _nonexistentcrossreferenceerror();
          var $145=HEAP32[((5248828)>>2)];
          var $146=HEAP32[((5248840)>>2)];
          var $arrayidx132=(($146+($145<<2))|0);
          HEAP32[(($arrayidx132)>>2)]=0;
        } else {
          var $147=HEAP32[((5251176)>>2)];
          var $148=HEAP32[((5243784)>>2)];
          var $mul134=((($147)*($148))&-1);
          var $149=HEAP32[((5251140)>>2)];
          var $add135=((($mul134)+($149))|0);
          HEAP32[((5248832)>>2)]=$add135;
          var $150=HEAP32[((5248832)>>2)];
          var $151=HEAP32[((5248840)>>2)];
          var $arrayidx136=(($151+($150<<2))|0);
          var $152=HEAP32[(($arrayidx136)>>2)];
          var $cmp137=(($152)|0)!=0;
          if ($cmp137) {
            var $153=HEAP32[((5243908)>>2)];
            var $call139=_fputs(((5258776)|0), $153);
            var $154=HEAP32[((5243524)>>2)];
            var $call140=_fputs(((5258776)|0), $154);
            var $155=HEAP32[((5251176)>>2)];
            var $156=HEAP32[((5251184)>>2)];
            var $arrayidx141=(($156+($155<<2))|0);
            var $157=HEAP32[(($arrayidx141)>>2)];
            _zbadcrossreferenceprint($157);
            var $158=HEAP32[((5243908)>>2)];
            var $call142=_fprintf($158, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5258740)|0),tempInt));
            var $159=HEAP32[((5243524)>>2)];
            var $call143=_fprintf($159, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5258740)|0),tempInt));
            _markwarning();
          }
          var $160=HEAP32[((5252888)>>2)];
          var $tobool145=(($160)|0)!=0;
          do {
            if (!($tobool145)) {
              var $161=HEAP32[((5251176)>>2)];
              var $162=HEAP32[((5243744)>>2)];
              var $cmp146=(($161)|0) >= (($162)|0);
              if (!($cmp146)) {
                break;
              }
              var $163=HEAP32[((5251176)>>2)];
              var $164=HEAP32[((5251188)>>2)];
              var $arrayidx148=(($164+($163<<2))|0);
              var $165=HEAP32[(($arrayidx148)>>2)];
              var $166=HEAP32[((5243872)>>2)];
              var $cmp149=(($165)|0) < (($166)|0);
              if (!($cmp149)) {
                break;
              }
              var $167=HEAP32[((5248828)>>2)];
              var $168=HEAP32[((5248840)>>2)];
              var $arrayidx151=(($168+($167<<2))|0);
              HEAP32[(($arrayidx151)>>2)]=0;
            }
          } while(0);
        }
      } else {
        var $132=HEAP32[((5251192)>>2)];
        var $tobool119=(($132)|0)!=0;
        if ($tobool119) {
          _hashciteconfusion();
        }
        _nonexistentcrossreferenceerror();
        var $133=HEAP32[((5248828)>>2)];
        var $134=HEAP32[((5248840)>>2)];
        var $arrayidx122=(($134+($133<<2))|0);
        HEAP32[(($arrayidx122)>>2)]=0;
      }
    }
    var $169=HEAP32[((5251172)>>2)];
    var $add156=((($169)+(1))|0);
    HEAP32[((5251172)>>2)]=$add156;
  }
  HEAP32[((5251172)>>2)]=0;
  while(1) {
    var $170=HEAP32[((5251172)>>2)];
    var $171=HEAP32[((5243800)>>2)];
    var $cmp159=(($170)|0) < (($171)|0);
    if (!($cmp159)) {
      break;
    }
    var $172=HEAP32[((5251172)>>2)];
    var $173=HEAP32[((5243432)>>2)];
    var $arrayidx161=(($173+($172<<2))|0);
    var $174=HEAP32[(($arrayidx161)>>2)];
    var $cmp162=(($174)|0)==0;
    if ($cmp162) {
      var $175=HEAP32[((5251172)>>2)];
      var $176=HEAP32[((5251184)>>2)];
      var $arrayidx164=(($176+($175<<2))|0);
      var $177=HEAP32[(($arrayidx164)>>2)];
      _zprintmissingentry($177);
    } else {
      var $178=HEAP32[((5252888)>>2)];
      var $tobool166=(($178)|0)!=0;
      do {
        if ($tobool166) {
          label = 3102;
        } else {
          var $179=HEAP32[((5251172)>>2)];
          var $180=HEAP32[((5243744)>>2)];
          var $cmp167=(($179)|0) < (($180)|0);
          if ($cmp167) {
            label = 3102;
            break;
          }
          var $181=HEAP32[((5251172)>>2)];
          var $182=HEAP32[((5251188)>>2)];
          var $arrayidx169=(($182+($181<<2))|0);
          var $183=HEAP32[(($arrayidx169)>>2)];
          var $184=HEAP32[((5243872)>>2)];
          var $cmp170=(($183)|0) >= (($184)|0);
          if ($cmp170) {
            label = 3102;
            break;
          } else {
            break;
          }
        }
      } while(0);
      if (label == 3102) {
        label = 0;
        var $185=HEAP32[((5251172)>>2)];
        var $186=HEAP32[((5251168)>>2)];
        var $cmp172=(($185)|0) > (($186)|0);
        if ($cmp172) {
          var $187=HEAP32[((5251168)>>2)];
          var $add174=((($187)+(1))|0);
          var $188=HEAP32[((5243784)>>2)];
          var $mul175=((($add174)*($188))&-1);
          var $189=HEAP32[((5243888)>>2)];
          var $cmp176=(($mul175)|0) > (($189)|0);
          if ($cmp176) {
            label = 3104;
            break;
          }
          var $192=HEAP32[((5251172)>>2)];
          var $193=HEAP32[((5251184)>>2)];
          var $arrayidx181=(($193+($192<<2))|0);
          var $194=HEAP32[(($arrayidx181)>>2)];
          var $195=HEAP32[((5251168)>>2)];
          var $196=HEAP32[((5251184)>>2)];
          var $arrayidx182=(($196+($195<<2))|0);
          HEAP32[(($arrayidx182)>>2)]=$194;
          var $197=HEAP32[((5251172)>>2)];
          var $198=HEAP32[((5243432)>>2)];
          var $arrayidx183=(($198+($197<<2))|0);
          var $199=HEAP32[(($arrayidx183)>>2)];
          var $200=HEAP32[((5251168)>>2)];
          var $201=HEAP32[((5243432)>>2)];
          var $arrayidx184=(($201+($200<<2))|0);
          HEAP32[(($arrayidx184)>>2)]=$199;
          var $202=HEAP32[((5251172)>>2)];
          var $203=HEAP32[((5251184)>>2)];
          var $arrayidx185=(($203+($202<<2))|0);
          var $204=HEAP32[(($arrayidx185)>>2)];
          var $call186=_zfindcitelocsforthiscitekey($204);
          var $tobool187=(($call186)|0)!=0;
          if (!($tobool187)) {
            _citekeydisappearedconfusion();
          }
          var $205=HEAP32[((5251192)>>2)];
          var $tobool190=(($205)|0)!=0;
          do {
            if ($tobool190) {
              var $206=HEAP32[((5251180)>>2)];
              var $207=HEAP32[((5244192)>>2)];
              var $208=HEAP32[((5248484)>>2)];
              var $arrayidx192=(($208+($207<<2))|0);
              var $209=HEAP32[(($arrayidx192)>>2)];
              var $cmp193=(($206)|0)!=(($209)|0);
              if ($cmp193) {
                label = 3109;
                break;
              } else {
                break;
              }
            } else {
              label = 3109;
            }
          } while(0);
          if (label == 3109) {
            label = 0;
            _hashciteconfusion();
          }
          var $210=HEAP32[((5251168)>>2)];
          var $211=HEAP32[((5251180)>>2)];
          var $212=HEAP32[((5248484)>>2)];
          var $arrayidx196=(($212+($211<<2))|0);
          HEAP32[(($arrayidx196)>>2)]=$210;
          var $213=HEAP32[((5251168)>>2)];
          var $214=HEAP32[((5243784)>>2)];
          var $mul197=((($213)*($214))&-1);
          HEAP32[((5248828)>>2)]=$mul197;
          var $215=HEAP32[((5248828)>>2)];
          var $216=HEAP32[((5243784)>>2)];
          var $add198=((($215)+($216))|0);
          HEAP32[((5248844)>>2)]=$add198;
          var $217=HEAP32[((5251172)>>2)];
          var $218=HEAP32[((5243784)>>2)];
          var $mul199=((($217)*($218))&-1);
          HEAP32[((5243460)>>2)]=$mul199;
          while(1) {
            var $219=HEAP32[((5248828)>>2)];
            var $220=HEAP32[((5248844)>>2)];
            var $cmp201=(($219)|0) < (($220)|0);
            if (!($cmp201)) {
              break;
            }
            var $221=HEAP32[((5243460)>>2)];
            var $222=HEAP32[((5248840)>>2)];
            var $arrayidx203=(($222+($221<<2))|0);
            var $223=HEAP32[(($arrayidx203)>>2)];
            var $224=HEAP32[((5248828)>>2)];
            var $225=HEAP32[((5248840)>>2)];
            var $arrayidx204=(($225+($224<<2))|0);
            HEAP32[(($arrayidx204)>>2)]=$223;
            var $226=HEAP32[((5248828)>>2)];
            var $add205=((($226)+(1))|0);
            HEAP32[((5248828)>>2)]=$add205;
            var $227=HEAP32[((5243460)>>2)];
            var $add206=((($227)+(1))|0);
            HEAP32[((5243460)>>2)]=$add206;
          }
        }
        var $228=HEAP32[((5251168)>>2)];
        var $add209=((($228)+(1))|0);
        HEAP32[((5251168)>>2)]=$add209;
      }
    }
    var $229=HEAP32[((5251172)>>2)];
    var $add212=((($229)+(1))|0);
    HEAP32[((5251172)>>2)]=$add212;
  }
  if (label == 3104) {
    var $190=HEAP32[((5243908)>>2)];
    var $call178=_fputs(((5262880)|0), $190);
    var $191=HEAP32[((5243524)>>2)];
    var $call179=_fputs(((5262880)|0), $191);
    _printconfusion();
    _longjmp(((5248396)|0), 1);
    throw "Reached an unreachable!"
  }
  var $230=HEAP32[((5251168)>>2)];
  HEAP32[((5243800)>>2)]=$230;
  var $231=HEAP32[((5252888)>>2)];
  var $tobool214=(($231)|0)!=0;
  if ($tobool214) {
    var $232=HEAP32[((5252884)>>2)];
    HEAP32[((5251172)>>2)]=$232;
    while(1) {
      var $233=HEAP32[((5251172)>>2)];
      var $234=HEAP32[((5243744)>>2)];
      var $cmp217=(($233)|0) < (($234)|0);
      if (!($cmp217)) {
        break;
      }
      var $235=HEAP32[((5251172)>>2)];
      var $236=HEAP32[((5251092)>>2)];
      var $arrayidx219=(($236+($235<<2))|0);
      var $237=HEAP32[(($arrayidx219)>>2)];
      var $tobool220=(($237)|0)!=0;
      if (!($tobool220)) {
        var $238=HEAP32[((5251172)>>2)];
        var $239=HEAP32[((5251188)>>2)];
        var $arrayidx222=(($239+($238<<2))|0);
        var $240=HEAP32[(($arrayidx222)>>2)];
        _zprintmissingentry($240);
      }
      var $241=HEAP32[((5251172)>>2)];
      var $add224=((($241)+(1))|0);
      HEAP32[((5251172)>>2)]=$add224;
    }
  }
  var $242=HEAP32[((5243792)>>2)];
  var $add227=((($242)+(1))|0);
  var $243=HEAP32[((5243800)>>2)];
  var $add228=((($243)+(1))|0);
  var $mul229=((($add227)*($add228))&-1);
  var $mul230=((($mul229<<2))&-1);
  var $call231=_xmalloc($mul230);
  var $244=$call231;
  HEAP32[((5251088)>>2)]=$244;
  HEAP32[((5248476)>>2)]=0;
  while(1) {
    var $245=HEAP32[((5248476)>>2)];
    var $246=HEAP32[((5243792)>>2)];
    var $247=HEAP32[((5243800)>>2)];
    var $mul233=((($246)*($247))&-1);
    var $cmp234=(($245)|0) < (($mul233)|0);
    if (!($cmp234)) {
      break;
    }
    var $248=HEAP32[((5248476)>>2)];
    var $249=HEAP32[((5251088)>>2)];
    var $arrayidx236=(($249+($248<<2))|0);
    HEAP32[(($arrayidx236)>>2)]=0;
    var $250=HEAP32[((5248476)>>2)];
    var $add237=((($250)+(1))|0);
    HEAP32[((5248476)>>2)]=$add237;
  }
  var $251=HEAP32[((5243788)>>2)];
  var $add239=((($251)+(1))|0);
  var $252=HEAP32[((5243800)>>2)];
  var $add240=((($252)+(1))|0);
  var $mul241=((($add239)*($add240))&-1);
  var $253=HEAP32[((5251072)>>2)];
  var $add242=((($253)+(1))|0);
  var $mul243=((($mul241)*($add242))&-1);
  var $mul244=(($mul243)&-1);
  var $call245=_xmalloc($mul244);
  HEAP32[((5251080)>>2)]=$call245;
  HEAP32[((5243508)>>2)]=0;
  while(1) {
    var $254=HEAP32[((5243508)>>2)];
    var $255=HEAP32[((5243788)>>2)];
    var $256=HEAP32[((5243800)>>2)];
    var $mul247=((($255)*($256))&-1);
    var $cmp248=(($254)|0) < (($mul247)|0);
    if (!($cmp248)) {
      break;
    }
    var $257=HEAP32[((5243508)>>2)];
    var $258=HEAP32[((5251072)>>2)];
    var $add250=((($258)+(1))|0);
    var $mul251=((($257)*($add250))&-1);
    var $add252=(($mul251)|0);
    var $259=HEAP32[((5251080)>>2)];
    var $arrayidx253=(($259+$add252)|0);
    HEAP8[($arrayidx253)]=127;
    var $260=HEAP32[((5243508)>>2)];
    var $add254=((($260)+(1))|0);
    HEAP32[((5243508)>>2)]=$add254;
  }
  HEAP32[((5251172)>>2)]=0;
  while(1) {
    var $261=HEAP32[((5251172)>>2)];
    var $262=HEAP32[((5243800)>>2)];
    var $cmp257=(($261)|0) < (($262)|0);
    if (!($cmp257)) {
      break;
    }
    var $263=HEAP32[((5251172)>>2)];
    var $264=HEAP32[((5251172)>>2)];
    var $265=HEAP32[((5251188)>>2)];
    var $arrayidx259=(($265+($264<<2))|0);
    HEAP32[(($arrayidx259)>>2)]=$263;
    var $266=HEAP32[((5251172)>>2)];
    var $add260=((($266)+(1))|0);
    HEAP32[((5251172)>>2)]=$add260;
  }
  HEAP32[((5243644)>>2)]=1;
  var $267=HEAP32[((5243480)>>2)];
  HEAP32[((5252244)>>2)]=$267;
  var $268=HEAP32[((5243476)>>2)];
  HEAP32[((5244208)>>2)]=$268;
  var $269=HEAP32[((5252244)>>2)];
  HEAP32[((5243460)>>2)]=$269;
  while(1) {
    var $270=HEAP32[((5243460)>>2)];
    var $271=HEAP32[((5244208)>>2)];
    var $cmp263=(($270)|0) < (($271)|0);
    if (!($cmp263)) {
      break;
    }
    var $272=HEAP32[((5243460)>>2)];
    var $273=HEAP32[((5243484)>>2)];
    var $arrayidx265=(($273+$272)|0);
    var $274=HEAP8[($arrayidx265)];
    var $275=HEAP32[((5243460)>>2)];
    var $276=HEAP32[((5252252)>>2)];
    var $arrayidx266=(($276+$275)|0);
    HEAP8[($arrayidx266)]=$274;
    var $277=HEAP32[((5243460)>>2)];
    var $add267=((($277)+(1))|0);
    HEAP32[((5243460)>>2)]=$add267;
  }
  STACKTOP = __stackBase__;
  return;
}
_bstreadcommand["X"]=1;

function _computehashprime() {
  var label = 0;

  var $hashwant;
  var $k;
  var $j;
  var $o;
  var $square;
  var $n;
  var $jprime;
  var $0=HEAP32[((5248756)>>2)];
  var $div=((((($0)|0))/(20))&-1);
  var $mul=((($div)*(17))&-1);
  $hashwant=$mul;
  $j=1;
  $k=1;
  HEAP32[((5248760)>>2)]=2;
  var $1=HEAP32[((5248760)>>2)];
  var $2=$k;
  var $3=HEAP32[((5248764)>>2)];
  var $arrayidx=(($3+($2<<2))|0);
  HEAP32[(($arrayidx)>>2)]=$1;
  $o=2;
  $square=9;
  while(1) {
    var $4=HEAP32[((5248760)>>2)];
    var $5=$hashwant;
    var $cmp=(($4)|0) < (($5)|0);
    if (!($cmp)) {
      break;
    }
    while(1) {
      var $6=$j;
      var $add=((($6)+(2))|0);
      $j=$add;
      var $7=$j;
      var $8=$square;
      var $cmp1=(($7)|0)==(($8)|0);
      if ($cmp1) {
        var $9=$j;
        var $10=$o;
        var $11=HEAP32[((5248752)>>2)];
        var $arrayidx2=(($11+($10<<2))|0);
        HEAP32[(($arrayidx2)>>2)]=$9;
        var $12=$j;
        var $add3=((($12)+(2))|0);
        $j=$add3;
        var $13=$o;
        var $add4=((($13)+(1))|0);
        $o=$add4;
        var $14=$o;
        var $15=HEAP32[((5248764)>>2)];
        var $arrayidx5=(($15+($14<<2))|0);
        var $16=HEAP32[(($arrayidx5)>>2)];
        var $17=$o;
        var $18=HEAP32[((5248764)>>2)];
        var $arrayidx6=(($18+($17<<2))|0);
        var $19=HEAP32[(($arrayidx6)>>2)];
        var $mul7=((($16)*($19))&-1);
        $square=$mul7;
      }
      $n=2;
      $jprime=1;
      while(1) {
        var $20=$n;
        var $21=$o;
        var $cmp9=(($20)|0) < (($21)|0);
        if ($cmp9) {
          var $22=$jprime;
          var $tobool=(($22)|0)!=0;
          var $23 = $tobool;
        } else {
          var $23 = 0;
        }
        var $23;
        if (!($23)) {
          break;
        }
        while(1) {
          var $24=$n;
          var $25=HEAP32[((5248752)>>2)];
          var $arrayidx12=(($25+($24<<2))|0);
          var $26=HEAP32[(($arrayidx12)>>2)];
          var $27=$j;
          var $cmp13=(($26)|0) < (($27)|0);
          if (!($cmp13)) {
            break;
          }
          var $28=$n;
          var $29=HEAP32[((5248752)>>2)];
          var $arrayidx15=(($29+($28<<2))|0);
          var $30=HEAP32[(($arrayidx15)>>2)];
          var $31=$n;
          var $32=HEAP32[((5248764)>>2)];
          var $arrayidx16=(($32+($31<<2))|0);
          var $33=HEAP32[(($arrayidx16)>>2)];
          var $mul17=((($33<<1))&-1);
          var $add18=((($30)+($mul17))|0);
          var $34=$n;
          var $35=HEAP32[((5248752)>>2)];
          var $arrayidx19=(($35+($34<<2))|0);
          HEAP32[(($arrayidx19)>>2)]=$add18;
        }
        var $36=$n;
        var $37=HEAP32[((5248752)>>2)];
        var $arrayidx20=(($37+($36<<2))|0);
        var $38=HEAP32[(($arrayidx20)>>2)];
        var $39=$j;
        var $cmp21=(($38)|0)==(($39)|0);
        if ($cmp21) {
          $jprime=0;
        }
        var $40=$n;
        var $add24=((($40)+(1))|0);
        $n=$add24;
      }
      var $41=$jprime;
      var $tobool26=(($41)|0)!=0;
      var $lnot=$tobool26 ^ 1;
      if (!($lnot)) {
        break;
      }
    }
    var $42=$k;
    var $add27=((($42)+(1))|0);
    $k=$add27;
    var $43=$j;
    HEAP32[((5248760)>>2)]=$43;
    var $44=HEAP32[((5248760)>>2)];
    var $45=$k;
    var $46=HEAP32[((5248764)>>2)];
    var $arrayidx28=(($46+($45<<2))|0);
    HEAP32[(($arrayidx28)>>2)]=$44;
  }

  return;
}
_computehashprime["X"]=1;

function _bstreversecommand() {
  var label = 0;

  var $0=HEAP32[((5243632)>>2)];
  var $tobool=(($0)|0)!=0;
  if (!($tobool)) {
    var $1=HEAP32[((5243908)>>2)];
    var $call=_fputs(((5258684)|0), $1);
    var $2=HEAP32[((5243524)>>2)];
    var $call1=_fputs(((5258684)|0), $2);
    _bsterrprintandlookforblankline();

    return;
  }
  var $call2=_eatbstwhitespace();
  var $tobool3=(($call2)|0)!=0;
  if (!($tobool3)) {
    _eatbstprint();
    var $3=HEAP32[((5243908)>>2)];
    var $call5=_fputs(((5258676)|0), $3);
    var $4=HEAP32[((5243524)>>2)];
    var $call6=_fputs(((5258676)|0), $4);
    _bsterrprintandlookforblankline();

    return;
  }
  var $5=HEAP32[((5252244)>>2)];
  var $6=HEAP32[((5252252)>>2)];
  var $arrayidx=(($6+$5)|0);
  var $7=HEAP8[($arrayidx)];
  var $conv=(($7)&255);
  var $cmp=(($conv)|0)!=123;
  if ($cmp) {
    _bstleftbraceprint();
    var $8=HEAP32[((5243908)>>2)];
    var $call10=_fputs(((5258676)|0), $8);
    var $9=HEAP32[((5243524)>>2)];
    var $call11=_fputs(((5258676)|0), $9);
    _bsterrprintandlookforblankline();

    return;
  }
  var $10=HEAP32[((5252244)>>2)];
  var $add=((($10)+(1))|0);
  HEAP32[((5252244)>>2)]=$add;
  var $call13=_eatbstwhitespace();
  var $tobool14=(($call13)|0)!=0;
  if (!($tobool14)) {
    _eatbstprint();
    var $11=HEAP32[((5243908)>>2)];
    var $call16=_fputs(((5258676)|0), $11);
    var $12=HEAP32[((5243524)>>2)];
    var $call17=_fputs(((5258676)|0), $12);
    _bsterrprintandlookforblankline();

    return;
  }
  _zscanidentifier(125, 37, 37);
  var $13=HEAP8[(5243584)];
  var $conv19=(($13)&255);
  var $cmp20=(($conv19)|0)==3;
  do {
    if (!($cmp20)) {
      var $14=HEAP8[(5243584)];
      var $conv22=(($14)&255);
      var $cmp23=(($conv22)|0)==1;
      if ($cmp23) {
        break;
      }
      _bstidprint();
      var $15=HEAP32[((5243908)>>2)];
      var $call26=_fputs(((5258676)|0), $15);
      var $16=HEAP32[((5243524)>>2)];
      var $call27=_fputs(((5258676)|0), $16);
      _bsterrprintandlookforblankline();

      return;
    }
  } while(0);
  var $call29=_badargumenttoken();
  var $tobool30=(($call29)|0)!=0;
  if ($tobool30) {

    return;
  }
  var $call33=_eatbstwhitespace();
  var $tobool34=(($call33)|0)!=0;
  if (!($tobool34)) {
    _eatbstprint();
    var $17=HEAP32[((5243908)>>2)];
    var $call36=_fputs(((5258676)|0), $17);
    var $18=HEAP32[((5243524)>>2)];
    var $call37=_fputs(((5258676)|0), $18);
    _bsterrprintandlookforblankline();

    return;
  }
  var $19=HEAP32[((5252244)>>2)];
  var $20=HEAP32[((5252252)>>2)];
  var $arrayidx39=(($20+$19)|0);
  var $21=HEAP8[($arrayidx39)];
  var $conv40=(($21)&255);
  var $cmp41=(($conv40)|0)!=125;
  if ($cmp41) {
    _bstrightbraceprint();
    var $22=HEAP32[((5243908)>>2)];
    var $call44=_fputs(((5258676)|0), $22);
    var $23=HEAP32[((5243524)>>2)];
    var $call45=_fputs(((5258676)|0), $23);
    _bsterrprintandlookforblankline();

    return;
  }
  var $24=HEAP32[((5252244)>>2)];
  var $add47=((($24)+(1))|0);
  HEAP32[((5252244)>>2)]=$add47;
  _initcommandexecution();
  HEAP32[((5243876)>>2)]=1;
  var $25=HEAP32[((5243800)>>2)];
  var $cmp48=(($25)|0) > 0;
  if ($cmp48) {
    var $26=HEAP32[((5243800)>>2)];
    HEAP32[((5243568)>>2)]=$26;
    while(1) {
      var $27=HEAP32[((5243568)>>2)];
      var $sub=((($27)-(1))|0);
      HEAP32[((5243568)>>2)]=$sub;
      var $28=HEAP32[((5243568)>>2)];
      var $29=HEAP32[((5251188)>>2)];
      var $arrayidx51=(($29+($28<<2))|0);
      var $30=HEAP32[(($arrayidx51)>>2)];
      HEAP32[((5251172)>>2)]=$30;
      var $31=HEAP32[((5248808)>>2)];
      _zexecutefn($31);
      _checkcommandexecution();
      var $32=HEAP32[((5243568)>>2)];
      var $cmp52=(($32)|0)==0;
      var $lnot=$cmp52 ^ 1;
      if (!($lnot)) {
        break;
      }
    }
  }

  return;
}
_bstreversecommand["X"]=1;

function _bstsortcommand() {
  var label = 0;

  var $0=HEAP32[((5243632)>>2)];
  var $tobool=(($0)|0)!=0;
  if (!($tobool)) {
    var $1=HEAP32[((5243908)>>2)];
    var $call=_fputs(((5258632)|0), $1);
    var $2=HEAP32[((5243524)>>2)];
    var $call1=_fputs(((5258632)|0), $2);
    _bsterrprintandlookforblankline();

    return;
  }
  var $3=HEAP32[((5243800)>>2)];
  var $cmp=(($3)|0) > 1;
  if ($cmp) {
    var $4=HEAP32[((5243800)>>2)];
    var $sub=((($4)-(1))|0);
    _zquicksort(0, $sub);
  }

  return;
}


function _bststringscommand() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $call=_eatbstwhitespace();
  var $tobool=(($call)|0)!=0;
  if (!($tobool)) {
    _eatbstprint();
    var $0=HEAP32[((5243908)>>2)];
    var $call1=_fputs(((5258624)|0), $0);
    var $1=HEAP32[((5243524)>>2)];
    var $call2=_fputs(((5258624)|0), $1);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  var $2=HEAP32[((5252244)>>2)];
  var $3=HEAP32[((5252252)>>2)];
  var $arrayidx=(($3+$2)|0);
  var $4=HEAP8[($arrayidx)];
  var $conv=(($4)&255);
  var $cmp=(($conv)|0)!=123;
  if ($cmp) {
    _bstleftbraceprint();
    var $5=HEAP32[((5243908)>>2)];
    var $call5=_fputs(((5258624)|0), $5);
    var $6=HEAP32[((5243524)>>2)];
    var $call6=_fputs(((5258624)|0), $6);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  var $7=HEAP32[((5252244)>>2)];
  var $add=((($7)+(1))|0);
  HEAP32[((5252244)>>2)]=$add;
  var $call8=_eatbstwhitespace();
  var $tobool9=(($call8)|0)!=0;
  if (!($tobool9)) {
    _eatbstprint();
    var $8=HEAP32[((5243908)>>2)];
    var $call11=_fputs(((5258624)|0), $8);
    var $9=HEAP32[((5243524)>>2)];
    var $call12=_fputs(((5258624)|0), $9);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  while(1) {
    var $10=HEAP32[((5252244)>>2)];
    var $11=HEAP32[((5252252)>>2)];
    var $arrayidx14=(($11+$10)|0);
    var $12=HEAP8[($arrayidx14)];
    var $conv15=(($12)&255);
    var $cmp16=(($conv15)|0)!=125;
    if (!($cmp16)) {
      label = 3226;
      break;
    }
    _zscanidentifier(125, 37, 37);
    var $13=HEAP8[(5243584)];
    var $conv18=(($13)&255);
    var $cmp19=(($conv18)|0)==3;
    if (!($cmp19)) {
      var $14=HEAP8[(5243584)];
      var $conv21=(($14)&255);
      var $cmp22=(($conv21)|0)==1;
      if (!($cmp22)) {
        label = 3213;
        break;
      }
    }
    var $17=HEAP32[((5252252)>>2)];
    var $18=HEAP32[((5252248)>>2)];
    var $19=HEAP32[((5252244)>>2)];
    var $20=HEAP32[((5252248)>>2)];
    var $sub=((($19)-($20))|0);
    _zlowercase($17, $18, $sub);
    var $21=HEAP32[((5252252)>>2)];
    var $22=HEAP32[((5252248)>>2)];
    var $23=HEAP32[((5252244)>>2)];
    var $24=HEAP32[((5252248)>>2)];
    var $sub28=((($23)-($24))|0);
    var $call29=_zstrlookup($21, $22, $sub28, 11, 1);
    HEAP32[((5248808)>>2)]=$call29;
    var $25=HEAP32[((5248776)>>2)];
    var $tobool30=(($25)|0)!=0;
    if ($tobool30) {
      label = 3215;
      break;
    }
    var $27=HEAP32[((5248808)>>2)];
    var $28=HEAP32[((5248804)>>2)];
    var $arrayidx33=(($28+$27)|0);
    HEAP8[($arrayidx33)]=8;
    var $29=HEAP32[((5243780)>>2)];
    var $30=HEAP32[((5248808)>>2)];
    var $31=HEAP32[((5248484)>>2)];
    var $arrayidx34=(($31+($30<<2))|0);
    HEAP32[(($arrayidx34)>>2)]=$29;
    var $32=HEAP32[((5243780)>>2)];
    var $33=HEAP32[((5243884)>>2)];
    var $cmp35=(($32)|0)==(($33)|0);
    if ($cmp35) {
      var $34=HEAP32[((5243908)>>2)];
      var $35=HEAP32[((5243884)>>2)];
      var $add38=((($35)+(10))|0);
      var $36=HEAP32[((5243884)>>2)];
      var $call39=_fprintf($34, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5258612)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add38,HEAP32[(((tempInt)+(12))>>2)]=$36,tempInt));
      var $37=HEAP32[((5248792)>>2)];
      var $38=$37;
      var $39=HEAP32[((5243884)>>2)];
      var $add40=((($39)+(10))|0);
      var $add41=((($add40)+(1))|0);
      var $mul=((($add41<<2))&-1);
      var $call42=_xrealloc($38, $mul);
      var $40=$call42;
      HEAP32[((5248792)>>2)]=$40;
      var $41=HEAP32[((5243908)>>2)];
      var $42=HEAP32[((5248780)>>2)];
      var $add43=((($42)+(1))|0);
      var $43=HEAP32[((5243884)>>2)];
      var $add44=((($43)+(10))|0);
      var $44=HEAP32[((5243884)>>2)];
      var $call45=_fprintf($41, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5258592)|0),HEAP32[(((tempInt)+(4))>>2)]=$add43,HEAP32[(((tempInt)+(8))>>2)]=$add44,HEAP32[(((tempInt)+(12))>>2)]=$44,tempInt));
      var $45=HEAP32[((5248788)>>2)];
      var $46=HEAP32[((5243884)>>2)];
      var $add46=((($46)+(10))|0);
      var $47=HEAP32[((5248780)>>2)];
      var $add47=((($47)+(1))|0);
      var $mul48=((($add46)*($add47))&-1);
      var $mul49=(($mul48)&-1);
      var $call50=_xrealloc($45, $mul49);
      HEAP32[((5248788)>>2)]=$call50;
      var $48=HEAP32[((5243908)>>2)];
      var $49=HEAP32[((5243884)>>2)];
      var $add51=((($49)+(10))|0);
      var $50=HEAP32[((5243884)>>2)];
      var $call52=_fprintf($48, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5258580)|0),HEAP32[(((tempInt)+(4))>>2)]=4,HEAP32[(((tempInt)+(8))>>2)]=$add51,HEAP32[(((tempInt)+(12))>>2)]=$50,tempInt));
      var $51=HEAP32[((5248796)>>2)];
      var $52=$51;
      var $53=HEAP32[((5243884)>>2)];
      var $add53=((($53)+(10))|0);
      var $add54=((($add53)+(1))|0);
      var $mul55=((($add54<<2))&-1);
      var $call56=_xrealloc($52, $mul55);
      var $54=$call56;
      HEAP32[((5248796)>>2)]=$54;
      var $55=HEAP32[((5243884)>>2)];
      var $add57=((($55)+(10))|0);
      HEAP32[((5243884)>>2)]=$add57;
      var $56=HEAP32[((5243780)>>2)];
      HEAP32[((5243504)>>2)]=$56;
      while(1) {
        var $57=HEAP32[((5243504)>>2)];
        var $58=HEAP32[((5243884)>>2)];
        var $cmp59=(($57)|0) < (($58)|0);
        if (!($cmp59)) {
          break;
        }
        var $59=HEAP32[((5243504)>>2)];
        var $60=HEAP32[((5248792)>>2)];
        var $arrayidx62=(($60+($59<<2))|0);
        HEAP32[(($arrayidx62)>>2)]=0;
        var $61=HEAP32[((5243504)>>2)];
        var $62=HEAP32[((5248796)>>2)];
        var $arrayidx63=(($62+($61<<2))|0);
        HEAP32[(($arrayidx63)>>2)]=0;
        var $63=HEAP32[((5243504)>>2)];
        var $add64=((($63)+(1))|0);
        HEAP32[((5243504)>>2)]=$add64;
      }
    }
    var $64=HEAP32[((5243780)>>2)];
    var $add66=((($64)+(1))|0);
    HEAP32[((5243780)>>2)]=$add66;
    var $call67=_eatbstwhitespace();
    var $tobool68=(($call67)|0)!=0;
    if (!($tobool68)) {
      label = 3224;
      break;
    }
  }
  if (label == 3224) {
    _eatbstprint();
    var $65=HEAP32[((5243908)>>2)];
    var $call70=_fputs(((5258624)|0), $65);
    var $66=HEAP32[((5243524)>>2)];
    var $call71=_fputs(((5258624)|0), $66);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 3226) {
    var $67=HEAP32[((5252244)>>2)];
    var $add74=((($67)+(1))|0);
    HEAP32[((5252244)>>2)]=$add74;
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 3213) {
    _bstidprint();
    var $15=HEAP32[((5243908)>>2)];
    var $call25=_fputs(((5258624)|0), $15);
    var $16=HEAP32[((5243524)>>2)];
    var $call26=_fputs(((5258624)|0), $16);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 3215) {
    var $26=HEAP32[((5248808)>>2)];
    _zalreadyseenfunctionprint($26);
    STACKTOP = __stackBase__;
    return;
  }
}
_bststringscommand["X"]=1;

function _setupparams() {
  var label = 0;

  var $bounddefault;
  var $boundname;
  var $0=HEAP32[((5252868)>>2)];
  var $arrayidx=(($0)|0);
  var $1=HEAP32[(($arrayidx)>>2)];
  _kpse_set_program_name($1, ((5258464)|0));
  $bounddefault=100;
  $boundname=((5258448)|0);
  var $2=$boundname;
  var $3=$bounddefault;
  _setupboundvariable(5251072, $2, $3);
  var $4=HEAP32[((5251072)>>2)];
  var $5=$bounddefault;
  var $cmp=(($4)|0) < (($5)|0);
  if ($cmp) {
    var $6=$bounddefault;
    HEAP32[((5251072)>>2)]=$6;
  }
  $bounddefault=1000;
  $boundname=((5258432)|0);
  var $7=$boundname;
  var $8=$bounddefault;
  _setupboundvariable(5248780, $7, $8);
  var $9=HEAP32[((5248780)>>2)];
  var $10=$bounddefault;
  var $cmp1=(($9)|0) < (($10)|0);
  if ($cmp1) {
    var $11=$bounddefault;
    HEAP32[((5248780)>>2)]=$11;
  }
  $bounddefault=4000;
  $boundname=((5258420)|0);
  var $12=$boundname;
  var $13=$bounddefault;
  _setupboundvariable(5243880, $12, $13);
  var $14=HEAP32[((5243880)>>2)];
  var $15=$bounddefault;
  var $cmp4=(($14)|0) < (($15)|0);
  if ($cmp4) {
    var $16=$bounddefault;
    HEAP32[((5243880)>>2)]=$16;
  }
  var $17=HEAP32[((5243880)>>2)];
  HEAP32[((5248756)>>2)]=$17;
  var $18=HEAP32[((5248756)>>2)];
  var $cmp7=(($18)|0) < 5000;
  if ($cmp7) {
    HEAP32[((5248756)>>2)]=5000;
  }
  var $19=HEAP32[((5248756)>>2)];
  var $add=((($19)+(1))|0);
  var $sub=((($add)-(1))|0);
  HEAP32[((5248768)>>2)]=$sub;
  var $20=HEAP32[((5248768)>>2)];
  var $add10=((($20)+(1))|0);
  HEAP32[((5251108)>>2)]=$add10;
  var $21=HEAP32[((5248768)>>2)];
  var $add11=((($21)+(1))|0);
  HEAP32[((5243428)>>2)]=$add11;

  return;
}
_setupparams["X"]=1;

function _getbstcommandandprocess() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $call=_scanalpha();
  var $tobool=(($call)|0)!=0;
  if (!($tobool)) {
    var $0=HEAP32[((5243908)>>2)];
    var $1=HEAP32[((5252244)>>2)];
    var $2=HEAP32[((5252252)>>2)];
    var $arrayidx=(($2+$1)|0);
    var $3=HEAP8[($arrayidx)];
    var $idxprom=(($3)&255);
    var $arrayidx1=((5243136+$idxprom)|0);
    var $4=HEAP8[($arrayidx1)];
    var $conv=(($4)&255);
    var $call2=_fprintf($0, ((5255672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=34,HEAP32[(((tempInt)+(4))>>2)]=$conv,HEAP32[(((tempInt)+(8))>>2)]=((5258544)|0),tempInt));
    var $5=HEAP32[((5243524)>>2)];
    var $6=HEAP32[((5252244)>>2)];
    var $7=HEAP32[((5252252)>>2)];
    var $arrayidx3=(($7+$6)|0);
    var $8=HEAP8[($arrayidx3)];
    var $idxprom4=(($8)&255);
    var $arrayidx5=((5243136+$idxprom4)|0);
    var $9=HEAP8[($arrayidx5)];
    var $conv6=(($9)&255);
    var $call7=_fprintf($5, ((5255672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=34,HEAP32[(((tempInt)+(4))>>2)]=$conv6,HEAP32[(((tempInt)+(8))>>2)]=((5258544)|0),tempInt));
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  var $10=HEAP32[((5252252)>>2)];
  var $11=HEAP32[((5252248)>>2)];
  var $12=HEAP32[((5252244)>>2)];
  var $13=HEAP32[((5252248)>>2)];
  var $sub=((($12)-($13))|0);
  _zlowercase($10, $11, $sub);
  var $14=HEAP32[((5252252)>>2)];
  var $15=HEAP32[((5252248)>>2)];
  var $16=HEAP32[((5252244)>>2)];
  var $17=HEAP32[((5252248)>>2)];
  var $sub8=((($16)-($17))|0);
  var $call9=_zstrlookup($14, $15, $sub8, 4, 0);
  var $18=HEAP32[((5248484)>>2)];
  var $arrayidx10=(($18+($call9<<2))|0);
  var $19=HEAP32[(($arrayidx10)>>2)];
  HEAP32[((5251152)>>2)]=$19;
  var $20=HEAP32[((5248776)>>2)];
  var $tobool11=(($20)|0)!=0;
  if (!($tobool11)) {
    _printatoken();
    var $21=HEAP32[((5243908)>>2)];
    var $call13=_fputs(((5258508)|0), $21);
    var $22=HEAP32[((5243524)>>2)];
    var $call14=_fputs(((5258508)|0), $22);
    _bsterrprintandlookforblankline();
    STACKTOP = __stackBase__;
    return;
  }
  var $23=HEAP32[((5251152)>>2)];
  if ((($23)|0)==3) {
    _bstintegerscommand();
  } else if ((($23)|0)==0) {
    _bstentrycommand();
  } else if ((($23)|0)==9) {
    _bststringscommand();
  } else if ((($23)|0)==1) {
    _bstexecutecommand();
  } else if ((($23)|0)==5) {
    _bstmacrocommand();
  } else if ((($23)|0)==4) {
    _bstiteratecommand();
  } else if ((($23)|0)==2) {
    _bstfunctioncommand();
  } else if ((($23)|0)==6) {
    _bstreadcommand();
  } else if ((($23)|0)==8) {
    _bstsortcommand();
  } else if ((($23)|0)==7) {
    _bstreversecommand();
  } else {
    var $24=HEAP32[((5243908)>>2)];
    var $call25=_fputs(((5258480)|0), $24);
    var $25=HEAP32[((5243524)>>2)];
    var $call26=_fputs(((5258480)|0), $25);
    _printconfusion();
    _longjmp(((5248396)|0), 1);
    throw "Reached an unreachable!"
  }
  STACKTOP = __stackBase__;
  return;
}
_getbstcommandandprocess["X"]=1;

function _initialize() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $i;
  var $k;
  var $for_end;
  var $for_end29;
  var $for_end42;
  var $for_end56;
  var $for_end68;
  var $for_end80;
  var $for_end92;
  var $for_end104;
  var $for_end116;
  var $for_end128;
  var $for_end140;
  var $for_end152;
  var $for_end164;
  HEAP32[((5252600)>>2)]=0;
  var $0=HEAP32[((5252240)>>2)];
  var $cmp=79 >= (($0)|0);
  if ($cmp) {
    var $1=HEAP32[((5252600)>>2)];
    var $mul=((($1)*(10))&-1);
    var $add=((($mul)+(3))|0);
    HEAP32[((5252600)>>2)]=$add;
  }
  var $2=HEAP32[((5248760)>>2)];
  var $cmp1=(($2)|0) < 128;
  if ($cmp1) {
    var $3=HEAP32[((5252600)>>2)];
    var $mul3=((($3)*(10))&-1);
    var $add4=((($mul3)+(4))|0);
    HEAP32[((5252600)>>2)]=$add4;
  }
  var $4=HEAP32[((5248760)>>2)];
  var $5=HEAP32[((5248756)>>2)];
  var $cmp6=(($4)|0) > (($5)|0);
  if ($cmp6) {
    var $6=HEAP32[((5252600)>>2)];
    var $mul8=((($6)*(10))&-1);
    var $add9=((($mul8)+(5))|0);
    HEAP32[((5252600)>>2)]=$add9;
  }
  var $7=HEAP32[((5243880)>>2)];
  var $8=HEAP32[((5248756)>>2)];
  var $cmp11=(($7)|0) > (($8)|0);
  if ($cmp11) {
    var $9=HEAP32[((5252600)>>2)];
    var $mul13=((($9)*(10))&-1);
    var $add14=((($mul13)+(7))|0);
    HEAP32[((5252600)>>2)]=$add14;
  }
  var $10=HEAP32[((5243892)>>2)];
  var $11=HEAP32[((5243880)>>2)];
  var $cmp16=(($10)|0) > (($11)|0);
  if ($cmp16) {
    var $12=HEAP32[((5252600)>>2)];
    var $mul18=((($12)*(10))&-1);
    var $add19=((($mul18)+(8))|0);
    HEAP32[((5252600)>>2)]=$add19;
  }
  var $13=HEAP32[((5252600)>>2)];
  var $cmp21=(($13)|0) > 0;
  if ($cmp21) {
    var $14=HEAP32[((5243524)>>2)];
    var $15=HEAP32[((5252600)>>2)];
    var $call=_fprintf($14, ((5258412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$15,HEAP32[(((tempInt)+(4))>>2)]=((5258392)|0),tempInt));
    _uexit(1);
    throw "Reached an unreachable!"
  }
  HEAP8[(5248744)]=0;
  HEAP8[(((5243168)|0))]=32;
  HEAP8[(((5243169)|0))]=33;
  HEAP8[(((5243170)|0))]=34;
  HEAP8[(((5243171)|0))]=35;
  HEAP8[(((5243172)|0))]=36;
  HEAP8[(((5243173)|0))]=37;
  HEAP8[(((5243174)|0))]=38;
  HEAP8[(((5243175)|0))]=39;
  HEAP8[(((5243176)|0))]=40;
  HEAP8[(((5243177)|0))]=41;
  HEAP8[(((5243178)|0))]=42;
  HEAP8[(((5243179)|0))]=43;
  HEAP8[(((5243180)|0))]=44;
  HEAP8[(((5243181)|0))]=45;
  HEAP8[(((5243182)|0))]=46;
  HEAP8[(((5243183)|0))]=47;
  HEAP8[(((5243184)|0))]=48;
  HEAP8[(((5243185)|0))]=49;
  HEAP8[(((5243186)|0))]=50;
  HEAP8[(((5243187)|0))]=51;
  HEAP8[(((5243188)|0))]=52;
  HEAP8[(((5243189)|0))]=53;
  HEAP8[(((5243190)|0))]=54;
  HEAP8[(((5243191)|0))]=55;
  HEAP8[(((5243192)|0))]=56;
  HEAP8[(((5243193)|0))]=57;
  HEAP8[(((5243194)|0))]=58;
  HEAP8[(((5243195)|0))]=59;
  HEAP8[(((5243196)|0))]=60;
  HEAP8[(((5243197)|0))]=61;
  HEAP8[(((5243198)|0))]=62;
  HEAP8[(((5243199)|0))]=63;
  HEAP8[(((5243200)|0))]=64;
  HEAP8[(((5243201)|0))]=65;
  HEAP8[(((5243202)|0))]=66;
  HEAP8[(((5243203)|0))]=67;
  HEAP8[(((5243204)|0))]=68;
  HEAP8[(((5243205)|0))]=69;
  HEAP8[(((5243206)|0))]=70;
  HEAP8[(((5243207)|0))]=71;
  HEAP8[(((5243208)|0))]=72;
  HEAP8[(((5243209)|0))]=73;
  HEAP8[(((5243210)|0))]=74;
  HEAP8[(((5243211)|0))]=75;
  HEAP8[(((5243212)|0))]=76;
  HEAP8[(((5243213)|0))]=77;
  HEAP8[(((5243214)|0))]=78;
  HEAP8[(((5243215)|0))]=79;
  HEAP8[(((5243216)|0))]=80;
  HEAP8[(((5243217)|0))]=81;
  HEAP8[(((5243218)|0))]=82;
  HEAP8[(((5243219)|0))]=83;
  HEAP8[(((5243220)|0))]=84;
  HEAP8[(((5243221)|0))]=85;
  HEAP8[(((5243222)|0))]=86;
  HEAP8[(((5243223)|0))]=87;
  HEAP8[(((5243224)|0))]=88;
  HEAP8[(((5243225)|0))]=89;
  HEAP8[(((5243226)|0))]=90;
  HEAP8[(((5243227)|0))]=91;
  HEAP8[(((5243228)|0))]=92;
  HEAP8[(((5243229)|0))]=93;
  HEAP8[(((5243230)|0))]=94;
  HEAP8[(((5243231)|0))]=95;
  HEAP8[(((5243232)|0))]=96;
  HEAP8[(((5243233)|0))]=97;
  HEAP8[(((5243234)|0))]=98;
  HEAP8[(((5243235)|0))]=99;
  HEAP8[(((5243236)|0))]=100;
  HEAP8[(((5243237)|0))]=101;
  HEAP8[(((5243238)|0))]=102;
  HEAP8[(((5243239)|0))]=103;
  HEAP8[(((5243240)|0))]=104;
  HEAP8[(((5243241)|0))]=105;
  HEAP8[(((5243242)|0))]=106;
  HEAP8[(((5243243)|0))]=107;
  HEAP8[(((5243244)|0))]=108;
  HEAP8[(((5243245)|0))]=109;
  HEAP8[(((5243246)|0))]=110;
  HEAP8[(((5243247)|0))]=111;
  HEAP8[(((5243248)|0))]=112;
  HEAP8[(((5243249)|0))]=113;
  HEAP8[(((5243250)|0))]=114;
  HEAP8[(((5243251)|0))]=115;
  HEAP8[(((5243252)|0))]=116;
  HEAP8[(((5243253)|0))]=117;
  HEAP8[(((5243254)|0))]=118;
  HEAP8[(((5243255)|0))]=119;
  HEAP8[(((5243256)|0))]=120;
  HEAP8[(((5243257)|0))]=121;
  HEAP8[(((5243258)|0))]=122;
  HEAP8[(((5243259)|0))]=123;
  HEAP8[(((5243260)|0))]=124;
  HEAP8[(((5243261)|0))]=125;
  HEAP8[(((5243262)|0))]=126;
  HEAP8[(((5243136)|0))]=32;
  HEAP8[(((5243263)|0))]=32;
  $i=0;
  $for_end=31;
  var $16=$i;
  var $17=$for_end;
  var $cmp24=(($16)|0) <= (($17)|0);
  if ($cmp24) {
    while(1) {
      var $18=$i;
      var $conv=(($18) & 255);
      var $19=$i;
      var $arrayidx=((5243136+$19)|0);
      HEAP8[($arrayidx)]=$conv;
      var $20=$i;
      var $inc=((($20)+(1))|0);
      $i=$inc;
      var $21=$for_end;
      var $cmp26=(($20)|0) < (($21)|0);
      if (!($cmp26)) {
        break;
      }
    }
  }
  $i=127;
  $for_end29=255;
  var $22=$i;
  var $23=$for_end29;
  var $cmp30=(($22)|0) <= (($23)|0);
  if ($cmp30) {
    while(1) {
      var $24=$i;
      var $conv34=(($24) & 255);
      var $25=$i;
      var $arrayidx35=((5243136+$25)|0);
      HEAP8[($arrayidx35)]=$conv34;
      var $26=$i;
      var $inc37=((($26)+(1))|0);
      $i=$inc37;
      var $27=$for_end29;
      var $cmp38=(($26)|0) < (($27)|0);
      if (!($cmp38)) {
        break;
      }
    }
  }
  $i=0;
  $for_end42=255;
  var $28=$i;
  var $29=$for_end42;
  var $cmp43=(($28)|0) <= (($29)|0);
  if ($cmp43) {
    while(1) {
      var $30=$i;
      var $conv47=(($30) & 255);
      var $31=$i;
      var $arrayidx48=((5243136+$31)|0);
      var $32=HEAP8[($arrayidx48)];
      var $idxprom=(($32)&255);
      var $arrayidx49=((5242880+$idxprom)|0);
      HEAP8[($arrayidx49)]=$conv47;
      var $33=$i;
      var $inc51=((($33)+(1))|0);
      $i=$inc51;
      var $34=$for_end42;
      var $cmp52=(($33)|0) < (($34)|0);
      if (!($cmp52)) {
        break;
      }
    }
  }
  $i=0;
  $for_end56=127;
  var $35=$i;
  var $36=$for_end56;
  var $cmp57=(($35)|0) <= (($36)|0);
  if ($cmp57) {
    while(1) {
      var $37=$i;
      var $arrayidx61=((5243932+$37)|0);
      HEAP8[($arrayidx61)]=5;
      var $38=$i;
      var $inc63=((($38)+(1))|0);
      $i=$inc63;
      var $39=$for_end56;
      var $cmp64=(($38)|0) < (($39)|0);
      if (!($cmp64)) {
        break;
      }
    }
  }
  $i=128;
  $for_end68=255;
  var $40=$i;
  var $41=$for_end68;
  var $cmp69=(($40)|0) <= (($41)|0);
  if ($cmp69) {
    while(1) {
      var $42=$i;
      var $arrayidx73=((5243932+$42)|0);
      HEAP8[($arrayidx73)]=2;
      var $43=$i;
      var $inc75=((($43)+(1))|0);
      $i=$inc75;
      var $44=$for_end68;
      var $cmp76=(($43)|0) < (($44)|0);
      if (!($cmp76)) {
        break;
      }
    }
  }
  $i=0;
  $for_end80=31;
  var $45=$i;
  var $46=$for_end80;
  var $cmp81=(($45)|0) <= (($46)|0);
  if ($cmp81) {
    while(1) {
      var $47=$i;
      var $arrayidx85=((5243932+$47)|0);
      HEAP8[($arrayidx85)]=0;
      var $48=$i;
      var $inc87=((($48)+(1))|0);
      $i=$inc87;
      var $49=$for_end80;
      var $cmp88=(($48)|0) < (($49)|0);
      if (!($cmp88)) {
        break;
      }
    }
  }
  HEAP8[(((5244059)|0))]=0;
  HEAP8[(((5243941)|0))]=1;
  HEAP8[(((5243945)|0))]=1;
  HEAP8[(((5243964)|0))]=1;
  HEAP8[(((5244058)|0))]=4;
  HEAP8[(((5243977)|0))]=4;
  $i=48;
  $for_end92=57;
  var $50=$i;
  var $51=$for_end92;
  var $cmp93=(($50)|0) <= (($51)|0);
  if ($cmp93) {
    while(1) {
      var $52=$i;
      var $arrayidx97=((5243932+$52)|0);
      HEAP8[($arrayidx97)]=3;
      var $53=$i;
      var $inc99=((($53)+(1))|0);
      $i=$inc99;
      var $54=$for_end92;
      var $cmp100=(($53)|0) < (($54)|0);
      if (!($cmp100)) {
        break;
      }
    }
  }
  $i=65;
  $for_end104=90;
  var $55=$i;
  var $56=$for_end104;
  var $cmp105=(($55)|0) <= (($56)|0);
  if ($cmp105) {
    while(1) {
      var $57=$i;
      var $arrayidx109=((5243932+$57)|0);
      HEAP8[($arrayidx109)]=2;
      var $58=$i;
      var $inc111=((($58)+(1))|0);
      $i=$inc111;
      var $59=$for_end104;
      var $cmp112=(($58)|0) < (($59)|0);
      if (!($cmp112)) {
        break;
      }
    }
  }
  $i=97;
  $for_end116=122;
  var $60=$i;
  var $61=$for_end116;
  var $cmp117=(($60)|0) <= (($61)|0);
  if ($cmp117) {
    while(1) {
      var $62=$i;
      var $arrayidx121=((5243932+$62)|0);
      HEAP8[($arrayidx121)]=2;
      var $63=$i;
      var $inc123=((($63)+(1))|0);
      $i=$inc123;
      var $64=$for_end116;
      var $cmp124=(($63)|0) < (($64)|0);
      if (!($cmp124)) {
        break;
      }
    }
  }
  $i=0;
  $for_end128=255;
  var $65=$i;
  var $66=$for_end128;
  var $cmp129=(($65)|0) <= (($66)|0);
  if ($cmp129) {
    while(1) {
      var $67=$i;
      var $arrayidx133=((5248488+$67)|0);
      HEAP8[($arrayidx133)]=1;
      var $68=$i;
      var $inc135=((($68)+(1))|0);
      $i=$inc135;
      var $69=$for_end128;
      var $cmp136=(($68)|0) < (($69)|0);
      if (!($cmp136)) {
        break;
      }
    }
  }
  $i=0;
  $for_end140=31;
  var $70=$i;
  var $71=$for_end140;
  var $cmp141=(($70)|0) <= (($71)|0);
  if ($cmp141) {
    while(1) {
      var $72=$i;
      var $arrayidx145=((5248488+$72)|0);
      HEAP8[($arrayidx145)]=0;
      var $73=$i;
      var $inc147=((($73)+(1))|0);
      $i=$inc147;
      var $74=$for_end140;
      var $cmp148=(($73)|0) < (($74)|0);
      if (!($cmp148)) {
        break;
      }
    }
  }
  HEAP8[(((5248520)|0))]=0;
  HEAP8[(((5248497)|0))]=0;
  HEAP8[(((5248522)|0))]=0;
  HEAP8[(((5248523)|0))]=0;
  HEAP8[(((5248525)|0))]=0;
  HEAP8[(((5248527)|0))]=0;
  HEAP8[(((5248528)|0))]=0;
  HEAP8[(((5248529)|0))]=0;
  HEAP8[(((5248532)|0))]=0;
  HEAP8[(((5248549)|0))]=0;
  HEAP8[(((5248611)|0))]=0;
  HEAP8[(((5248613)|0))]=0;
  $i=0;
  $for_end152=127;
  var $75=$i;
  var $76=$for_end152;
  var $cmp153=(($75)|0) <= (($76)|0);
  if ($cmp153) {
    while(1) {
      var $77=$i;
      var $arrayidx157=((5251200+($77<<2))|0);
      HEAP32[(($arrayidx157)>>2)]=0;
      var $78=$i;
      var $inc159=((($78)+(1))|0);
      $i=$inc159;
      var $79=$for_end152;
      var $cmp160=(($78)|0) < (($79)|0);
      if (!($cmp160)) {
        break;
      }
    }
  }
  HEAP32[((((5251328)|0))>>2)]=278;
  HEAP32[((((5251332)|0))>>2)]=278;
  HEAP32[((((5251336)|0))>>2)]=500;
  HEAP32[((((5251340)|0))>>2)]=833;
  HEAP32[((((5251344)|0))>>2)]=500;
  HEAP32[((((5251348)|0))>>2)]=833;
  HEAP32[((((5251352)|0))>>2)]=778;
  HEAP32[((((5251356)|0))>>2)]=278;
  HEAP32[((((5251360)|0))>>2)]=389;
  HEAP32[((((5251364)|0))>>2)]=389;
  HEAP32[((((5251368)|0))>>2)]=500;
  HEAP32[((((5251372)|0))>>2)]=778;
  HEAP32[((((5251376)|0))>>2)]=278;
  HEAP32[((((5251380)|0))>>2)]=333;
  HEAP32[((((5251384)|0))>>2)]=278;
  HEAP32[((((5251388)|0))>>2)]=500;
  HEAP32[((((5251392)|0))>>2)]=500;
  HEAP32[((((5251396)|0))>>2)]=500;
  HEAP32[((((5251400)|0))>>2)]=500;
  HEAP32[((((5251404)|0))>>2)]=500;
  HEAP32[((((5251408)|0))>>2)]=500;
  HEAP32[((((5251412)|0))>>2)]=500;
  HEAP32[((((5251416)|0))>>2)]=500;
  HEAP32[((((5251420)|0))>>2)]=500;
  HEAP32[((((5251424)|0))>>2)]=500;
  HEAP32[((((5251428)|0))>>2)]=500;
  HEAP32[((((5251432)|0))>>2)]=278;
  HEAP32[((((5251436)|0))>>2)]=278;
  HEAP32[((((5251440)|0))>>2)]=278;
  HEAP32[((((5251444)|0))>>2)]=778;
  HEAP32[((((5251448)|0))>>2)]=472;
  HEAP32[((((5251452)|0))>>2)]=472;
  HEAP32[((((5251456)|0))>>2)]=778;
  HEAP32[((((5251460)|0))>>2)]=750;
  HEAP32[((((5251464)|0))>>2)]=708;
  HEAP32[((((5251468)|0))>>2)]=722;
  HEAP32[((((5251472)|0))>>2)]=764;
  HEAP32[((((5251476)|0))>>2)]=681;
  HEAP32[((((5251480)|0))>>2)]=653;
  HEAP32[((((5251484)|0))>>2)]=785;
  HEAP32[((((5251488)|0))>>2)]=750;
  HEAP32[((((5251492)|0))>>2)]=361;
  HEAP32[((((5251496)|0))>>2)]=514;
  HEAP32[((((5251500)|0))>>2)]=778;
  HEAP32[((((5251504)|0))>>2)]=625;
  HEAP32[((((5251508)|0))>>2)]=917;
  HEAP32[((((5251512)|0))>>2)]=750;
  HEAP32[((((5251516)|0))>>2)]=778;
  HEAP32[((((5251520)|0))>>2)]=681;
  HEAP32[((((5251524)|0))>>2)]=778;
  HEAP32[((((5251528)|0))>>2)]=736;
  HEAP32[((((5251532)|0))>>2)]=556;
  HEAP32[((((5251536)|0))>>2)]=722;
  HEAP32[((((5251540)|0))>>2)]=750;
  HEAP32[((((5251544)|0))>>2)]=750;
  HEAP32[((((5251548)|0))>>2)]=1028;
  HEAP32[((((5251552)|0))>>2)]=750;
  HEAP32[((((5251556)|0))>>2)]=750;
  HEAP32[((((5251560)|0))>>2)]=611;
  HEAP32[((((5251564)|0))>>2)]=278;
  HEAP32[((((5251568)|0))>>2)]=500;
  HEAP32[((((5251572)|0))>>2)]=278;
  HEAP32[((((5251576)|0))>>2)]=500;
  HEAP32[((((5251580)|0))>>2)]=278;
  HEAP32[((((5251584)|0))>>2)]=278;
  HEAP32[((((5251588)|0))>>2)]=500;
  HEAP32[((((5251592)|0))>>2)]=556;
  HEAP32[((((5251596)|0))>>2)]=444;
  HEAP32[((((5251600)|0))>>2)]=556;
  HEAP32[((((5251604)|0))>>2)]=444;
  HEAP32[((((5251608)|0))>>2)]=306;
  HEAP32[((((5251612)|0))>>2)]=500;
  HEAP32[((((5251616)|0))>>2)]=556;
  HEAP32[((((5251620)|0))>>2)]=278;
  HEAP32[((((5251624)|0))>>2)]=306;
  HEAP32[((((5251628)|0))>>2)]=528;
  HEAP32[((((5251632)|0))>>2)]=278;
  HEAP32[((((5251636)|0))>>2)]=833;
  HEAP32[((((5251640)|0))>>2)]=556;
  HEAP32[((((5251644)|0))>>2)]=500;
  HEAP32[((((5251648)|0))>>2)]=556;
  HEAP32[((((5251652)|0))>>2)]=528;
  HEAP32[((((5251656)|0))>>2)]=392;
  HEAP32[((((5251660)|0))>>2)]=394;
  HEAP32[((((5251664)|0))>>2)]=389;
  HEAP32[((((5251668)|0))>>2)]=556;
  HEAP32[((((5251672)|0))>>2)]=528;
  HEAP32[((((5251676)|0))>>2)]=722;
  HEAP32[((((5251680)|0))>>2)]=528;
  HEAP32[((((5251684)|0))>>2)]=528;
  HEAP32[((((5251688)|0))>>2)]=444;
  HEAP32[((((5251692)|0))>>2)]=500;
  HEAP32[((((5251696)|0))>>2)]=1000;
  HEAP32[((((5251700)|0))>>2)]=500;
  HEAP32[((((5251704)|0))>>2)]=500;
  $k=1;
  var $80=HEAP32[((5248768)>>2)];
  $for_end164=$80;
  var $81=$k;
  var $82=$for_end164;
  var $cmp165=(($81)|0) <= (($82)|0);
  if ($cmp165) {
    while(1) {
      var $83=$k;
      var $84=HEAP32[((5248764)>>2)];
      var $arrayidx169=(($84+($83<<2))|0);
      HEAP32[(($arrayidx169)>>2)]=0;
      var $85=$k;
      var $86=HEAP32[((5248752)>>2)];
      var $arrayidx170=(($86+($85<<2))|0);
      HEAP32[(($arrayidx170)>>2)]=0;
      var $87=$k;
      var $inc172=((($87)+(1))|0);
      $k=$inc172;
      var $88=$for_end164;
      var $cmp173=(($87)|0) < (($88)|0);
      if (!($cmp173)) {
        break;
      }
    }
  }
  var $89=HEAP32[((5248768)>>2)];
  var $add177=((($89)+(1))|0);
  HEAP32[((5248748)>>2)]=$add177;
  HEAP32[((5243704)>>2)]=0;
  HEAP32[((5243492)>>2)]=1;
  var $90=HEAP32[((5243704)>>2)];
  var $91=HEAP32[((5243492)>>2)];
  var $92=HEAP32[((5243488)>>2)];
  var $arrayidx178=(($92+($91<<2))|0);
  HEAP32[(($arrayidx178)>>2)]=$90;
  HEAP32[((5252520)>>2)]=0;
  HEAP32[((5252516)>>2)]=0;
  HEAP32[((5252280)>>2)]=0;
  HEAP32[((5252284)>>2)]=0;
  HEAP32[((5251172)>>2)]=0;
  HEAP32[((5251196)>>2)]=0;
  HEAP32[((5252888)>>2)]=0;
  HEAP32[((5243404)>>2)]=0;
  HEAP32[((5243792)>>2)]=0;
  HEAP32[((5243788)>>2)]=0;
  HEAP32[((5243784)>>2)]=0;
  HEAP32[((5243504)>>2)]=0;
  while(1) {
    var $93=HEAP32[((5243504)>>2)];
    var $94=HEAP32[((5243884)>>2)];
    var $cmp179=(($93)|0) < (($94)|0);
    if (!($cmp179)) {
      break;
    }
    var $95=HEAP32[((5243504)>>2)];
    var $96=HEAP32[((5248792)>>2)];
    var $arrayidx181=(($96+($95<<2))|0);
    HEAP32[(($arrayidx181)>>2)]=0;
    var $97=HEAP32[((5243504)>>2)];
    var $98=HEAP32[((5248796)>>2)];
    var $arrayidx182=(($98+($97<<2))|0);
    HEAP32[(($arrayidx182)>>2)]=0;
    var $99=HEAP32[((5243504)>>2)];
    var $add183=((($99)+(1))|0);
    HEAP32[((5243504)>>2)]=$add183;
  }
  HEAP32[((5243780)>>2)]=0;
  HEAP32[((5251084)>>2)]=0;
  HEAP32[((5243632)>>2)]=0;
  HEAP32[((5243636)>>2)]=0;
  HEAP32[((5243640)>>2)]=0;
  HEAP32[((5243644)>>2)]=0;
  HEAP32[((5248480)>>2)]=0;
  HEAP32[((5243716)>>2)]=0;
  _predefcertainstrings();
  _getthetoplevelauxfilename();
  STACKTOP = __stackBase__;
  return;
}
_initialize["X"]=1;

function _eof($file) {
  var label = 0;

  var $retval;
  var $file_addr;
  var $c;
  $file_addr=$file;
  var $0=$file_addr;
  var $tobool=(($0)|0)!=0;
  do {
    if ($tobool) {
      var $1=$file_addr;
      var $call=_feof($1);
      var $tobool1=(($call)|0)!=0;
      if ($tobool1) {
        $retval=1;
        break;
      }
      var $2=$file_addr;
      var $call4=_fgetc($2);
      $c=$call4;
      var $cmp=(($call4)|0)==-1;
      if ($cmp) {
        $retval=1;
        break;
      } else {
        var $3=$c;
        var $4=$file_addr;
        var $call7=_ungetc($3, $4);
        $retval=0;
        break;
      }
    } else {
      $retval=1;
    }
  } while(0);
  var $5=$retval;

  return $5;
}


function _eoln($file) {
  var label = 0;

  var $retval;
  var $file_addr;
  var $c;
  $file_addr=$file;
  var $0=$file_addr;
  var $call=_feof($0);
  var $tobool=(($call)|0)!=0;
  if ($tobool) {
    $retval=1;
    var $9=$retval;

    return $9;
  }
  var $1=$file_addr;
  var $call1=_fgetc($1);
  $c=$call1;
  var $2=$c;
  var $cmp=(($2)|0)!=-1;
  if ($cmp) {
    var $3=$c;
    var $4=$file_addr;
    var $call3=_ungetc($3, $4);
  }
  var $5=$c;
  var $cmp5=(($5)|0)==10;
  do {
    if ($cmp5) {
      var $8 = 1;
    } else {
      var $6=$c;
      var $cmp6=(($6)|0)==13;
      if ($cmp6) {
        var $8 = 1;
        break;
      }
      var $7=$c;
      var $cmp7=(($7)|0)==-1;
      var $8 = $cmp7;
    }
  } while(0);
  var $8;
  var $lor_ext=(($8)&1);
  $retval=$lor_ext;
  var $9=$retval;

  return $9;
}


function _main($ac, $av) {
  var label = 0;

  var $retval;
  var $ac_addr;
  var $av_addr;
  $retval=0;
  $ac_addr=$ac;
  $av_addr=$av;
  var $0=$ac_addr;
  HEAP32[((5252872)>>2)]=$0;
  var $1=$av_addr;
  HEAP32[((5252868)>>2)]=$1;
  _mainbody();

  return 0;
}
Module["_main"] = _main;

function _recorder_record_input($name) {
  var label = 0;

  var $name_addr;
  $name_addr=$name;
  var $0=$name_addr;
  _recorder_record_name(((5265992)|0), $0);

  return;
}


function _recorder_record_name($prefix, $name) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $prefix_addr;
  var $name_addr;
  $prefix_addr=$prefix;
  $name_addr=$name;
  var $0=HEAP32[((5243628)>>2)];
  var $tobool=(($0)|0)!=0;
  if (!($tobool)) {
    STACKTOP = __stackBase__;
    return;
  }
  var $1=HEAP32[((5243624)>>2)];
  var $tobool1=(($1)|0)!=0;
  if (!($tobool1)) {
    _recorder_start();
  }
  var $2=HEAP32[((5243624)>>2)];
  var $3=$prefix_addr;
  var $4=$name_addr;
  var $call=_fprintf($2, ((5256232)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$3,HEAP32[(((tempInt)+(4))>>2)]=$4,tempInt));
  var $5=HEAP32[((5243624)>>2)];
  var $call3=_fflush($5);
  STACKTOP = __stackBase__;
  return;
}


function _recorder_record_output($name) {
  var label = 0;

  var $name_addr;
  $name_addr=$name;
  var $0=$name_addr;
  _recorder_record_name(((5261940)|0), $0);

  return;
}


function _open_input($f_ptr, $filefmt, $fopen_mode) {
  var label = 0;

  var $f_ptr_addr;
  var $filefmt_addr;
  var $fopen_mode_addr;
  var $fname;
  var $must_exist;
  var $i;
  $f_ptr_addr=$f_ptr;
  $filefmt_addr=$filefmt;
  $fopen_mode_addr=$fopen_mode;
  $fname=0;
  var $0=$f_ptr_addr;
  HEAP32[(($0)>>2)]=0;
  var $1=HEAP32[((5248800)>>2)];
  var $tobool=(($1)|0)!=0;
  if ($tobool) {
    var $2=HEAP32[((5248800)>>2)];
    _free($2);
  }
  HEAP32[((5248800)>>2)]=0;
  var $3=HEAP32[((5243708)>>2)];
  var $tobool1=(($3)|0)!=0;
  do {
    if ($tobool1) {
      var $4=HEAP32[((5243828)>>2)];
      var $add_ptr=(($4+1)|0);
      var $call=_kpse_absolute_p($add_ptr, 0);
      var $tobool2=(($call)|0)!=0;
      if ($tobool2) {
        break;
      }
      var $5=HEAP32[((5243708)>>2)];
      var $6=HEAP32[((5243828)>>2)];
      var $add_ptr4=(($6+1)|0);
      var $call5=_concat3($5, ((5257752)|0), $add_ptr4);
      $fname=$call5;
      var $7=$fname;
      var $8=$fopen_mode_addr;
      var $call6=_fopen($7, $8);
      var $9=$f_ptr_addr;
      HEAP32[(($9)>>2)]=$call6;
      var $10=$f_ptr_addr;
      var $11=HEAP32[(($10)>>2)];
      var $tobool7=(($11)|0)!=0;
      if ($tobool7) {
        var $12=HEAP32[((5243828)>>2)];
        _free($12);
        var $13=$fname;
        var $call9=_strlen($13);
        HEAP32[((5243832)>>2)]=$call9;
        var $14=HEAP32[((5243832)>>2)];
        var $add=((($14)+(2))|0);
        var $call10=_xmalloc($add);
        HEAP32[((5243828)>>2)]=$call10;
        var $15=HEAP32[((5243828)>>2)];
        var $add_ptr11=(($15+1)|0);
        var $16=$fname;
        var $call12=_strcpy($add_ptr11, $16);
        var $17=$fname;
        HEAP32[((5248800)>>2)]=$17;
      } else {
        var $18=$fname;
        _free($18);
      }
    }
  } while(0);
  var $19=$f_ptr_addr;
  var $20=HEAP32[(($19)>>2)];
  var $cmp=(($20)|0)==0;
  if ($cmp) {
    var $21=$filefmt_addr;
    var $cmp16=(($21)|0) < 0;
    if ($cmp16) {
      var $22=HEAP32[((5243828)>>2)];
      var $add_ptr18=(($22+1)|0);
      var $23=$fopen_mode_addr;
      var $call19=_fopen($add_ptr18, $23);
      var $24=$f_ptr_addr;
      HEAP32[(($24)>>2)]=$call19;
    } else {
      var $25=$filefmt_addr;
      var $cmp21=(($25)|0)!=26;
      do {
        if ($cmp21) {
          label = 3388;
        } else {
          var $26=HEAP32[((5243472)>>2)];
          var $tobool22=(($26)|0)!=0;
          if ($tobool22) {
            label = 3388;
            break;
          } else {
            var $28 = 0;
            break;
          }
        }
      } while(0);
      if (label == 3388) {
        var $27=$filefmt_addr;
        var $cmp23=(($27)|0)!=33;
        var $28 = $cmp23;
      }
      var $28;
      var $land_ext=(($28)&1);
      $must_exist=$land_ext;
      var $29=HEAP32[((5243828)>>2)];
      var $add_ptr24=(($29+1)|0);
      var $30=$filefmt_addr;
      var $31=$must_exist;
      var $call25=_kpse_find_file($add_ptr24, $30, $31);
      $fname=$call25;
      var $32=$fname;
      var $tobool26=(($32)|0)!=0;
      if ($tobool26) {
        var $33=$fname;
        var $call28=_xstrdup($33);
        HEAP32[((5248800)>>2)]=$call28;
        var $34=$fname;
        var $arrayidx=(($34)|0);
        var $35=HEAP8[($arrayidx)];
        var $conv=(($35 << 24) >> 24);
        var $cmp29=(($conv)|0)==46;
        do {
          if ($cmp29) {
            var $36=$fname;
            var $arrayidx32=(($36+1)|0);
            var $37=HEAP8[($arrayidx32)];
            var $conv33=(($37 << 24) >> 24);
            var $cmp34=(($conv33)|0)==47;
            if (!($cmp34)) {
              break;
            }
            var $38=HEAP32[((5243828)>>2)];
            var $arrayidx37=(($38+1)|0);
            var $39=HEAP8[($arrayidx37)];
            var $conv38=(($39 << 24) >> 24);
            var $cmp39=(($conv38)|0)!=46;
            if (!($cmp39)) {
              var $40=HEAP32[((5243828)>>2)];
              var $arrayidx42=(($40+2)|0);
              var $41=HEAP8[($arrayidx42)];
              var $conv43=(($41 << 24) >> 24);
              var $cmp44=(($conv43)|0)==47;
              if ($cmp44) {
                break;
              }
            }
            $i=0;
            while(1) {
              var $42=$i;
              var $add47=((($42)+(2))|0);
              var $43=$fname;
              var $arrayidx48=(($43+$add47)|0);
              var $44=HEAP8[($arrayidx48)];
              var $conv49=(($44 << 24) >> 24);
              var $cmp50=(($conv49)|0)!=0;
              if (!($cmp50)) {
                break;
              }
              var $45=$i;
              var $add52=((($45)+(2))|0);
              var $46=$fname;
              var $arrayidx53=(($46+$add52)|0);
              var $47=HEAP8[($arrayidx53)];
              var $48=$i;
              var $49=$fname;
              var $arrayidx54=(($49+$48)|0);
              HEAP8[($arrayidx54)]=$47;
              var $50=$i;
              var $inc=((($50)+(1))|0);
              $i=$inc;
            }
            var $51=$i;
            var $52=$fname;
            var $arrayidx55=(($52+$51)|0);
            HEAP8[($arrayidx55)]=0;
          }
        } while(0);
        var $53=HEAP32[((5243828)>>2)];
        _free($53);
        var $54=$fname;
        var $call57=_strlen($54);
        HEAP32[((5243832)>>2)]=$call57;
        var $55=HEAP32[((5243832)>>2)];
        var $add58=((($55)+(2))|0);
        var $call59=_xmalloc($add58);
        HEAP32[((5243828)>>2)]=$call59;
        var $56=HEAP32[((5243828)>>2)];
        var $add_ptr60=(($56+1)|0);
        var $57=$fname;
        var $call61=_strcpy($add_ptr60, $57);
        var $58=$fname;
        _free($58);
        var $59=HEAP32[((5243828)>>2)];
        var $add_ptr62=(($59+1)|0);
        var $60=$fopen_mode_addr;
        var $call63=_xfopen($add_ptr62, $60);
        var $61=$f_ptr_addr;
        HEAP32[(($61)>>2)]=$call63;
      }
    }
  }
  var $62=$f_ptr_addr;
  var $63=HEAP32[(($62)>>2)];
  var $tobool67=(($63)|0)!=0;
  if (!($tobool67)) {
    var $74=$f_ptr_addr;
    var $75=HEAP32[(($74)>>2)];
    var $cmp88=(($75)|0)!=0;
    var $conv89=(($cmp88)&1);

    return $conv89;
  }
  var $64=HEAP32[((5243828)>>2)];
  var $add_ptr69=(($64+1)|0);
  _recorder_record_input($add_ptr69);
  var $65=$filefmt_addr;
  var $cmp70=(($65)|0)==3;
  if ($cmp70) {
    var $66=$f_ptr_addr;
    var $67=HEAP32[(($66)>>2)];
    var $call73=_fgetc($67);
    HEAP32[((5243468)>>2)]=$call73;
  } else {
    var $68=$filefmt_addr;
    var $cmp75=(($68)|0)==19;
    if ($cmp75) {
      var $69=$f_ptr_addr;
      var $70=HEAP32[(($69)>>2)];
      var $call78=_fgetc($70);
      HEAP32[((5243756)>>2)]=$call78;
    } else {
      var $71=$filefmt_addr;
      var $cmp80=(($71)|0)==20;
      if ($cmp80) {
        var $72=$f_ptr_addr;
        var $73=HEAP32[(($72)>>2)];
        var $call83=_fgetc($73);
        HEAP32[((5243468)>>2)]=$call83;
      }
    }
  }
  var $74=$f_ptr_addr;
  var $75=HEAP32[(($74)>>2)];
  var $cmp88=(($75)|0)!=0;
  var $conv89=(($cmp88)&1);

  return $conv89;
}
_open_input["X"]=1;

function _mainbody() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  var mySetjmpIds = {};
  var setjmpTable = {"2": function(value) { label = 44; $call78 = value },"18": function(value) { label = 45; $call107 = value },dummy: 0};
  while(1) try { switch(label) {
    case 2: 
      var $0=HEAP32[((_stdin)>>2)];
      HEAP32[((5243528)>>2)]=$0;
      var $1=HEAP32[((_stdout)>>2)];
      HEAP32[((5243524)>>2)]=$1;
      HEAP32[((5243700)>>2)]=65000;
      HEAP32[((5252240)>>2)]=20000;
      HEAP32[((5243896)>>2)]=20;
      HEAP32[((5243884)>>2)]=10;
      HEAP32[((5243888)>>2)]=5000;
      HEAP32[((5243892)>>2)]=750;
      HEAP32[((5243400)>>2)]=3000;
      HEAP32[((5243916)>>2)]=50;
      _setupparams();
      var $2=HEAP32[((5243896)>>2)];
      var $add=((($2)+(1))|0);
      var $mul=((($add<<2))&-1);
      var $call=_xmalloc($mul);
      var $3=$call;
      HEAP32[((5252532)>>2)]=$3;
      var $4=HEAP32[((5243896)>>2)];
      var $add1=((($4)+(1))|0);
      var $mul2=((($add1<<2))&-1);
      var $call3=_xmalloc($mul2);
      var $5=$call3;
      HEAP32[((5252524)>>2)]=$5;
      HEAP32[((5251088)>>2)]=0;
      HEAP32[((5251080)>>2)]=0;
      var $6=HEAP32[((5243400)>>2)];
      var $add4=((($6)+(1))|0);
      var $mul5=((($add4<<2))&-1);
      var $call6=_xmalloc($mul5);
      var $7=$call6;
      HEAP32[((5243396)>>2)]=$7;
      var $8=HEAP32[((5243888)>>2)];
      var $add7=((($8)+(1))|0);
      var $mul8=((($add7<<2))&-1);
      var $call9=_xmalloc($mul8);
      var $9=$call9;
      HEAP32[((5248840)>>2)]=$9;
      var $10=HEAP32[((5243896)>>2)];
      var $add10=((($10)+(1))|0);
      var $mul11=((($add10<<2))&-1);
      var $call12=_xmalloc($mul11);
      var $11=$call12;
      HEAP32[((5243540)>>2)]=$11;
      var $12=HEAP32[((5243700)>>2)];
      var $add13=((($12)+(1))|0);
      var $mul14=(($add13)&-1);
      var $call15=_xmalloc($mul14);
      HEAP32[((5243496)>>2)]=$call15;
      var $13=HEAP32[((5252240)>>2)];
      var $add16=((($13)+(1))|0);
      var $mul17=(($add16)&-1);
      var $call18=_xmalloc($mul17);
      HEAP32[((5252252)>>2)]=$call18;
      var $14=HEAP32[((5252240)>>2)];
      var $add19=((($14)+(1))|0);
      var $mul20=(($add19)&-1);
      var $call21=_xmalloc($mul20);
      HEAP32[((5243484)>>2)]=$call21;
      var $15=HEAP32[((5252240)>>2)];
      var $add22=((($15)+(1))|0);
      var $mul23=(($add22)&-1);
      var $call24=_xmalloc($mul23);
      HEAP32[((5251064)>>2)]=$call24;
      var $16=HEAP32[((5252240)>>2)];
      var $add25=((($16)+(1))|0);
      var $mul26=(($add25)&-1);
      var $call27=_xmalloc($mul26);
      HEAP32[((5243720)>>2)]=$call27;
      var $17=HEAP32[((5252240)>>2)];
      var $add28=((($17)+(1))|0);
      var $mul29=((($add28<<2))&-1);
      var $call30=_xmalloc($mul29);
      var $18=$call30;
      HEAP32[((5243816)>>2)]=$18;
      var $19=HEAP32[((5252240)>>2)];
      var $add31=((($19)+(1))|0);
      var $mul32=(($add31)&-1);
      var $call33=_xmalloc($mul32);
      HEAP32[((5243820)>>2)]=$call33;
      var $20=HEAP32[((5243884)>>2)];
      var $mul34=((($20<<2))&-1);
      var $call35=_xmalloc($mul34);
      var $21=$call35;
      HEAP32[((5248792)>>2)]=$21;
      var $22=HEAP32[((5243884)>>2)];
      var $23=HEAP32[((5248780)>>2)];
      var $add36=((($23)+(1))|0);
      var $mul37=((($22)*($add36))&-1);
      var $mul38=(($mul37)&-1);
      var $call39=_xmalloc($mul38);
      HEAP32[((5248788)>>2)]=$call39;
      var $24=HEAP32[((5243884)>>2)];
      var $mul40=((($24<<2))&-1);
      var $call41=_xmalloc($mul40);
      var $25=$call41;
      HEAP32[((5248796)>>2)]=$25;
      var $26=HEAP32[((5243892)>>2)];
      var $add42=((($26)+(1))|0);
      var $mul43=((($add42<<2))&-1);
      var $call44=_xmalloc($mul43);
      var $27=$call44;
      HEAP32[((5251184)>>2)]=$27;
      var $28=HEAP32[((5243892)>>2)];
      var $add45=((($28)+(1))|0);
      var $mul46=((($add45<<2))&-1);
      var $call47=_xmalloc($mul46);
      var $29=$call47;
      HEAP32[((5243432)>>2)]=$29;
      var $30=HEAP32[((5243892)>>2)];
      var $add48=((($30)+(1))|0);
      var $mul49=((($add48<<2))&-1);
      var $call50=_xmalloc($mul49);
      var $31=$call50;
      HEAP32[((5251092)>>2)]=$31;
      var $32=HEAP32[((5243892)>>2)];
      var $add51=((($32)+(1))|0);
      var $mul52=((($add51<<2))&-1);
      var $call53=_xmalloc($mul52);
      var $33=$call53;
      HEAP32[((5251188)>>2)]=$33;
      var $34=HEAP32[((5243880)>>2)];
      var $add54=((($34)+(1))|0);
      var $mul55=((($add54<<2))&-1);
      var $call56=_xmalloc($mul55);
      var $35=$call56;
      HEAP32[((5243488)>>2)]=$35;
      var $36=HEAP32[((5248768)>>2)];
      var $add57=((($36)+(1))|0);
      var $mul58=((($add57<<2))&-1);
      var $call59=_xmalloc($mul58);
      var $37=$call59;
      HEAP32[((5248764)>>2)]=$37;
      var $38=HEAP32[((5248768)>>2)];
      var $add60=((($38)+(1))|0);
      var $mul61=((($add60<<2))&-1);
      var $call62=_xmalloc($mul61);
      var $39=$call62;
      HEAP32[((5248752)>>2)]=$39;
      var $40=HEAP32[((5248768)>>2)];
      var $add63=((($40)+(1))|0);
      var $mul64=(($add63)&-1);
      var $call65=_xmalloc($mul64);
      HEAP32[((5248772)>>2)]=$call65;
      var $41=HEAP32[((5248768)>>2)];
      var $add66=((($41)+(1))|0);
      var $mul67=((($add66<<2))&-1);
      var $call68=_xmalloc($mul67);
      var $42=$call68;
      HEAP32[((5248484)>>2)]=$42;
      var $43=HEAP32[((5248768)>>2)];
      var $add69=((($43)+(1))|0);
      var $mul70=(($add69)&-1);
      var $call71=_xmalloc($mul70);
      HEAP32[((5248804)>>2)]=$call71;
      var $44=HEAP32[((5243916)>>2)];
      var $add72=((($44)+(1))|0);
      var $mul73=((($add72<<2))&-1);
      var $call74=_xmalloc($mul73);
      var $45=$call74;
      HEAP32[((5243924)>>2)]=$45;
      var $46=HEAP32[((5243916)>>2)];
      var $add75=((($46)+(1))|0);
      var $mul76=(($add75)&-1);
      var $call77=_xmalloc($mul76);
      HEAP32[((5243912)>>2)]=$call77;
      _computehashprime();
      _initialize();
      var $call78=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[((((5248396)|0))>>2)]=tempInt, 0);
      label = 44; break;
    case 44: 
      var $cmp=(($call78)|0)==1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 26; break;
    case 4: 
      var $47=HEAP32[((5243420)>>2)];
      var $tobool=(($47)|0)!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $48=HEAP32[((5243908)>>2)];
      var $call80=_fputs(((5258224)|0), $48);
      var $49=HEAP32[((5243524)>>2)];
      var $call81=_fputs(((5258224)|0), $49);
      var $50=HEAP32[((5243908)>>2)];
      var $51=HEAP32[((5243416)>>2)];
      var $call82=_fprintf($50, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$51,tempInt));
      var $52=HEAP32[((5243524)>>2)];
      var $53=HEAP32[((5243416)>>2)];
      var $call83=_fprintf($52, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$53,tempInt));
      label = 7; break;
    case 6: 
      var $54=HEAP32[((5243908)>>2)];
      var $call84=_fputs(((5258224)|0), $54);
      var $55=HEAP32[((5243908)>>2)];
      var $56=HEAP32[((5243416)>>2)];
      var $call85=_fprintf($55, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$56,tempInt));
      label = 7; break;
    case 7: 
      var $57=HEAP32[((5243908)>>2)];
      var $58=HEAP32[((5243880)>>2)];
      var $59=HEAP32[((5248756)>>2)];
      var $60=HEAP32[((5248760)>>2)];
      var $call87=_fprintf($57, ((5258084)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5258048)|0),HEAP32[(((tempInt)+(4))>>2)]=$58,HEAP32[(((tempInt)+(8))>>2)]=((5258032)|0),HEAP32[(((tempInt)+(12))>>2)]=$59,HEAP32[(((tempInt)+(16))>>2)]=((5258016)|0),HEAP32[(((tempInt)+(20))>>2)]=$60,tempInt));
      var $61=HEAP32[((5243420)>>2)];
      var $tobool88=(($61)|0)!=0;
      if ($tobool88) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $62=HEAP32[((5243908)>>2)];
      var $call90=_fputs(((5257984)|0), $62);
      var $63=HEAP32[((5243524)>>2)];
      var $call91=_fputs(((5257984)|0), $63);
      _printauxname();
      label = 10; break;
    case 9: 
      var $64=HEAP32[((5243908)>>2)];
      var $call93=_fputs(((5257984)|0), $64);
      _logprauxname();
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $65=HEAP32[((5244212)>>2)];
      var $cmp95=(($65)|0)==0;
      if ($cmp95) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $66=HEAP32[((5252604)>>2)];
      var $arrayidx=((5252612+($66<<2))|0);
      var $67=HEAP32[(($arrayidx)>>2)];
      var $add96=((($67)+(1))|0);
      var $68=HEAP32[((5252604)>>2)];
      var $arrayidx97=((5252612+($68<<2))|0);
      HEAP32[(($arrayidx97)>>2)]=$add96;
      var $69=HEAP32[((5252604)>>2)];
      var $arrayidx98=((5252780+($69<<2))|0);
      var $70=HEAP32[(($arrayidx98)>>2)];
      var $call99=_zinputln($70);
      var $tobool100=(($call99)|0)!=0;
      if ($tobool100) { label = 14; break; } else { label = 13; break; }
    case 13: 
      _poptheauxstack();
      label = 15; break;
    case 14: 
      _getauxcommandandprocess();
      label = 15; break;
    case 15: 
      label = 11; break;
    case 16: 
      _lastcheckforauxerrors();
      var $71=HEAP32[((5252280)>>2)];
      var $cmp104=(($71)|0)==0;
      if ($cmp104) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 25; break;
    case 18: 
      HEAP32[((5252288)>>2)]=0;
      HEAP32[((5252588)>>2)]=1;
      var $72=HEAP32[((5244208)>>2)];
      HEAP32[((5252244)>>2)]=$72;
      var $call107=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[((((5248436)|0))>>2)]=tempInt, 0);
      label = 45; break;
    case 45: 
      var $cmp108=(($call107)|0)==0;
      if ($cmp108) { label = 19; break; } else { label = 24; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $call110=_eatbstwhitespace();
      var $tobool111=(($call110)|0)!=0;
      if ($tobool111) { label = 22; break; } else { label = 21; break; }
    case 21: 
      label = 23; break;
    case 22: 
      _getbstcommandandprocess();
      label = 20; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $73=HEAP32[((5252292)>>2)];
      _close_file($73);
      label = 25; break;
    case 25: 
      var $74=HEAP32[((5252592)>>2)];
      _close_file($74);
      label = 26; break;
    case 26: 
      var $75=HEAP32[((5243636)>>2)];
      var $tobool115=(($75)|0)!=0;
      if ($tobool115) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $76=HEAP32[((5243640)>>2)];
      var $tobool116=(($76)|0)!=0;
      if ($tobool116) { label = 29; break; } else { label = 28; break; }
    case 28: 
      var $77=HEAP32[((5243908)>>2)];
      var $78=HEAP32[((5252528)>>2)];
      var $call118=_fprintf($77, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257964)|0),HEAP32[(((tempInt)+(4))>>2)]=$78,HEAP32[(((tempInt)+(8))>>2)]=((5259716)|0),tempInt));
      var $79=HEAP32[((5243524)>>2)];
      var $80=HEAP32[((5252528)>>2)];
      var $call119=_fprintf($79, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257964)|0),HEAP32[(((tempInt)+(4))>>2)]=$80,HEAP32[(((tempInt)+(8))>>2)]=((5259716)|0),tempInt));
      _printbibname();
      label = 29; break;
    case 29: 
      _traceandstatprinting();
      var $81=HEAP8[(5248744)];
      var $conv=(($81)&255);
      if ((($conv)|0)==0) {
        label = 30; break;
      }
      else if ((($conv)|0)==1) {
        label = 31; break;
      }
      else if ((($conv)|0)==2) {
        label = 35; break;
      }
      else if ((($conv)|0)==3) {
        label = 39; break;
      }
      else {
      label = 40; break;
      }
      
    case 30: 
      label = 41; break;
    case 31: 
      var $82=HEAP32[((5251068)>>2)];
      var $cmp122=(($82)|0)==1;
      if ($cmp122) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $83=HEAP32[((5243908)>>2)];
      var $call125=_fprintf($83, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257928)|0),tempInt));
      var $84=HEAP32[((5243524)>>2)];
      var $call126=_fprintf($84, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257928)|0),tempInt));
      label = 34; break;
    case 33: 
      var $85=HEAP32[((5243908)>>2)];
      var $86=HEAP32[((5251068)>>2)];
      var $call128=_fprintf($85, ((5267400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257912)|0),HEAP32[(((tempInt)+(4))>>2)]=$86,HEAP32[(((tempInt)+(8))>>2)]=((5257900)|0),tempInt));
      var $87=HEAP32[((5243524)>>2)];
      var $88=HEAP32[((5251068)>>2)];
      var $call129=_fprintf($87, ((5267400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257912)|0),HEAP32[(((tempInt)+(4))>>2)]=$88,HEAP32[(((tempInt)+(8))>>2)]=((5257900)|0),tempInt));
      label = 34; break;
    case 34: 
      label = 41; break;
    case 35: 
      var $89=HEAP32[((5251068)>>2)];
      var $cmp132=(($89)|0)==1;
      if ($cmp132) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $90=HEAP32[((5243908)>>2)];
      var $call135=_fprintf($90, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257872)|0),tempInt));
      var $91=HEAP32[((5243524)>>2)];
      var $call136=_fprintf($91, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257872)|0),tempInt));
      label = 38; break;
    case 37: 
      var $92=HEAP32[((5243908)>>2)];
      var $93=HEAP32[((5251068)>>2)];
      var $call138=_fprintf($92, ((5267400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257912)|0),HEAP32[(((tempInt)+(4))>>2)]=$93,HEAP32[(((tempInt)+(8))>>2)]=((5257852)|0),tempInt));
      var $94=HEAP32[((5243524)>>2)];
      var $95=HEAP32[((5251068)>>2)];
      var $call139=_fprintf($94, ((5267400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257912)|0),HEAP32[(((tempInt)+(4))>>2)]=$95,HEAP32[(((tempInt)+(8))>>2)]=((5257852)|0),tempInt));
      label = 38; break;
    case 38: 
      label = 41; break;
    case 39: 
      var $96=HEAP32[((5243908)>>2)];
      var $call142=_fprintf($96, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257816)|0),tempInt));
      var $97=HEAP32[((5243524)>>2)];
      var $call143=_fprintf($97, ((5254384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257816)|0),tempInt));
      label = 41; break;
    case 40: 
      var $98=HEAP32[((5243908)>>2)];
      var $call144=_fputs(((5257800)|0), $98);
      var $99=HEAP32[((5243524)>>2)];
      var $call145=_fputs(((5257800)|0), $99);
      _printconfusion();
      label = 41; break;
    case 41: 
      var $100=HEAP32[((5243908)>>2)];
      _close_file($100);
      var $101=HEAP8[(5248744)];
      var $conv146=(($101)&255);
      var $cmp147=(($conv146)|0) > 1;
      if ($cmp147) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $102=HEAP8[(5248744)];
      var $conv150=(($102)&255);
      _uexit($conv150);
      throw "Reached an unreachable!"
    case 43: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
_mainbody["X"]=1;

function _cmdline($n) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $n_addr;
  $n_addr=$n;
  var $0=$n_addr;
  var $1=HEAP32[((5252872)>>2)];
  var $cmp=(($0)|0) >= (($1)|0);
  if ($cmp) {
    var $2=HEAP32[((_stderr)>>2)];
    var $3=HEAP32[((5252868)>>2)];
    var $arrayidx=(($3)|0);
    var $4=HEAP32[(($arrayidx)>>2)];
    var $call=_fprintf($2, ((5257764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$4,tempInt));
    _uexit(1);
    throw "Reached an unreachable!"
  } else {
    var $5=$n_addr;
    var $6=HEAP32[((5252868)>>2)];
    var $arrayidx1=(($6+($5<<2))|0);
    var $7=HEAP32[(($arrayidx1)>>2)];
    STACKTOP = __stackBase__;
    return $7;
  }
}


function _kpathsea_absolute_p($kpse, $filename, $relative_ok) {
  var label = 0;

  var $kpse_addr;
  var $filename_addr;
  var $relative_ok_addr;
  var $absolute;
  var $explicit_relative;
  $kpse_addr=$kpse;
  $filename_addr=$filename;
  $relative_ok_addr=$relative_ok;
  var $0=$filename_addr;
  var $1=HEAP8[($0)];
  var $conv=(($1 << 24) >> 24);
  var $cmp=(($conv)|0)==47;
  var $conv1=(($cmp)&1);
  $absolute=$conv1;
  var $2=$relative_ok_addr;
  var $tobool=(($2)|0)!=0;
  if ($tobool) {
    var $3=$filename_addr;
    var $4=HEAP8[($3)];
    var $conv2=(($4 << 24) >> 24);
    var $cmp3=(($conv2)|0)==46;
    if ($cmp3) {
      var $5=$filename_addr;
      var $arrayidx=(($5+1)|0);
      var $6=HEAP8[($arrayidx)];
      var $conv6=(($6 << 24) >> 24);
      var $cmp7=(($conv6)|0)==47;
      if ($cmp7) {
        var $12 = 1;
      } else {
        var $7=$filename_addr;
        var $arrayidx9=(($7+1)|0);
        var $8=HEAP8[($arrayidx9)];
        var $conv10=(($8 << 24) >> 24);
        var $cmp11=(($conv10)|0)==46;
        if ($cmp11) {
          var $9=$filename_addr;
          var $arrayidx14=(($9+2)|0);
          var $10=HEAP8[($arrayidx14)];
          var $conv15=(($10 << 24) >> 24);
          var $cmp16=(($conv15)|0)==47;
          var $11 = $cmp16;
        } else {
          var $11 = 0;
        }
        var $11;
        var $12 = $11;
      }
      var $12;
      var $13 = $12;
    } else {
      var $13 = 0;
    }
    var $13;
    var $14 = $13;
  } else {
    var $14 = 0;
  }
  var $14;
  var $land_ext=(($14)&1);
  $explicit_relative=$land_ext;
  var $15=$kpse_addr;
  var $16=$absolute;
  var $tobool20=(($16)|0)!=0;
  if ($tobool20) {
    var $18 = 1;
    var $18;
    var $lor_ext=(($18)&1);

    return $lor_ext;
  }
  var $17=$explicit_relative;
  var $tobool22=(($17)|0)!=0;
  var $18 = $tobool22;
  var $18;
  var $lor_ext=(($18)&1);

  return $lor_ext;
}
_kpathsea_absolute_p["X"]=1;

function _open_output($f_ptr, $fopen_mode) {
  var label = 0;

  var $f_ptr_addr;
  var $fopen_mode_addr;
  var $fname;
  var $absolute;
  var $texmfoutput;
  $f_ptr_addr=$f_ptr;
  $fopen_mode_addr=$fopen_mode;
  var $0=HEAP32[((5243828)>>2)];
  var $add_ptr=(($0+1)|0);
  var $call=_kpse_absolute_p($add_ptr, 0);
  $absolute=$call;
  var $1=HEAP32[((5243708)>>2)];
  var $tobool=(($1)|0)!=0;
  do {
    if ($tobool) {
      var $2=$absolute;
      var $tobool1=(($2)|0)!=0;
      if ($tobool1) {
        label = 3433;
        break;
      }
      var $3=HEAP32[((5243708)>>2)];
      var $4=HEAP32[((5243828)>>2)];
      var $add_ptr2=(($4+1)|0);
      var $call3=_concat3($3, ((5257752)|0), $add_ptr2);
      $fname=$call3;
      break;
    } else {
      label = 3433;
    }
  } while(0);
  if (label == 3433) {
    var $5=HEAP32[((5243828)>>2)];
    var $add_ptr4=(($5+1)|0);
    $fname=$add_ptr4;
  }
  var $6=$fname;
  var $7=$fopen_mode_addr;
  var $call5=_fopen($6, $7);
  var $8=$f_ptr_addr;
  HEAP32[(($8)>>2)]=$call5;
  var $9=$f_ptr_addr;
  var $10=HEAP32[(($9)>>2)];
  var $tobool6=(($10)|0)!=0;
  if (!($tobool6)) {
    var $call8=_kpse_var_value(((5258372)|0));
    $texmfoutput=$call8;
    var $11=$texmfoutput;
    var $tobool9=(($11)|0)!=0;
    do {
      if ($tobool9) {
        var $12=$texmfoutput;
        var $13=HEAP8[($12)];
        var $conv=(($13 << 24) >> 24);
        var $tobool11=(($conv)|0)!=0;
        if (!($tobool11)) {
          break;
        }
        var $14=$absolute;
        var $tobool13=(($14)|0)!=0;
        if ($tobool13) {
          break;
        }
        var $15=$fname;
        var $16=HEAP32[((5243828)>>2)];
        var $add_ptr15=(($16+1)|0);
        var $cmp=(($15)|0)!=(($add_ptr15)|0);
        if ($cmp) {
          var $17=$fname;
          _free($17);
        }
        var $18=$texmfoutput;
        var $19=HEAP32[((5243828)>>2)];
        var $add_ptr19=(($19+1)|0);
        var $call20=_concat3($18, ((5257752)|0), $add_ptr19);
        $fname=$call20;
        var $20=$fname;
        var $21=$fopen_mode_addr;
        var $call21=_fopen($20, $21);
        var $22=$f_ptr_addr;
        HEAP32[(($22)>>2)]=$call21;
      }
    } while(0);
  }
  var $23=$f_ptr_addr;
  var $24=HEAP32[(($23)>>2)];
  var $tobool24=(($24)|0)!=0;
  if ($tobool24) {
    var $25=$fname;
    var $26=HEAP32[((5243828)>>2)];
    var $add_ptr26=(($26+1)|0);
    var $cmp27=(($25)|0)!=(($add_ptr26)|0);
    if ($cmp27) {
      var $27=HEAP32[((5243828)>>2)];
      _free($27);
      var $28=$fname;
      var $call30=_strlen($28);
      HEAP32[((5243832)>>2)]=$call30;
      var $29=HEAP32[((5243832)>>2)];
      var $add=((($29)+(2))|0);
      var $call31=_xmalloc($add);
      HEAP32[((5243828)>>2)]=$call31;
      var $30=HEAP32[((5243828)>>2)];
      var $add_ptr32=(($30+1)|0);
      var $31=$fname;
      var $call33=_strcpy($add_ptr32, $31);
    }
    var $32=$fname;
    _recorder_record_output($32);
  }
  var $33=$fname;
  var $34=HEAP32[((5243828)>>2)];
  var $add_ptr36=(($34+1)|0);
  var $cmp37=(($33)|0)!=(($add_ptr36)|0);
  if (!($cmp37)) {
    var $36=$f_ptr_addr;
    var $37=HEAP32[(($36)>>2)];
    var $cmp41=(($37)|0)!=0;
    var $conv42=(($cmp41)&1);

    return $conv42;
  }
  var $35=$fname;
  _free($35);
  var $36=$f_ptr_addr;
  var $37=HEAP32[(($36)>>2)];
  var $cmp41=(($37)|0)!=0;
  var $conv42=(($cmp41)&1);

  return $conv42;
}
_open_output["X"]=1;

function _close_file($f) {
  var label = 0;

  var $f_addr;
  $f_addr=$f;
  var $0=$f_addr;
  var $tobool=(($0)|0)!=0;
  if (!($tobool)) {

    return;
  }
  var $1=$f_addr;
  var $call=_fclose($1);
  var $cmp=(($call)|0)==-1;
  if (!($cmp)) {

    return;
  }
  _perror(((5257224)|0));

  return;
}


function _recorder_start() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $cwd;
  var $pid;
  var $pid_str=__stackBase__;
  var $temp;
  var $call=_getgid();
  $pid=$call;
  var $arraydecay=(($pid_str)|0);
  var $0=$pid;
  var $call1=_sprintf($arraydecay, ((5255536)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$0,tempInt));
  var $1=HEAP32[((((5244328)|0))>>2)];
  var $call2=_strlen($1);
  var $arraydecay3=(($pid_str)|0);
  var $call4=_strlen($arraydecay3);
  var $add=((($call2)+($call4))|0);
  var $add5=((($add)+(5))|0);
  var $call6=_xmalloc($add5);
  HEAP32[((5243620)>>2)]=$call6;
  var $2=HEAP32[((5243620)>>2)];
  var $3=HEAP32[((((5244328)|0))>>2)];
  var $call7=_strcpy($2, $3);
  var $4=HEAP32[((5243620)>>2)];
  var $arraydecay8=(($pid_str)|0);
  var $call9=_strcat($4, $arraydecay8);
  var $5=HEAP32[((5243620)>>2)];
  var $call10=_strcat($5, ((5254916)|0));
  var $6=HEAP32[((5243708)>>2)];
  var $tobool=(($6)|0)!=0;
  if ($tobool) {
    var $7=HEAP32[((5243708)>>2)];
    var $8=HEAP32[((5243620)>>2)];
    var $call11=_concat3($7, ((5257752)|0), $8);
    $temp=$call11;
    var $9=HEAP32[((5243620)>>2)];
    _free($9);
    var $10=$temp;
    HEAP32[((5243620)>>2)]=$10;
  }
  var $11=HEAP32[((5243620)>>2)];
  var $call12=_xfopen($11, ((5254100)|0));
  HEAP32[((5243624)>>2)]=$call12;
  var $call13=_xgetcwd();
  $cwd=$call13;
  var $12=HEAP32[((5243624)>>2)];
  var $13=$cwd;
  var $call14=_fprintf($12, ((5253252)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$13,tempInt));
  var $14=$cwd;
  _free($14);
  STACKTOP = __stackBase__;
  return;
}


function _setupboundvariable($var, $var_name, $dflt) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $var_addr;
  var $var_name_addr;
  var $dflt_addr;
  var $expansion;
  var $conf_val;
  $var_addr=$var;
  $var_name_addr=$var_name;
  $dflt_addr=$dflt;
  var $0=$var_name_addr;
  var $call=_kpse_var_value($0);
  $expansion=$call;
  var $1=$dflt_addr;
  var $2=$var_addr;
  HEAP32[(($2)>>2)]=$1;
  var $3=$expansion;
  var $tobool=(($3)|0)!=0;
  if (!($tobool)) {
    STACKTOP = __stackBase__;
    return;
  }
  var $4=$expansion;
  var $call1=_atoi($4);
  $conf_val=$call1;
  var $5=$conf_val;
  var $cmp=(($5)|0) < 0;
  do {
    if ($cmp) {
      label = 3466;
    } else {
      var $6=$conf_val;
      var $cmp2=(($6)|0)==0;
      if ($cmp2) {
        var $7=$dflt_addr;
        var $cmp3=(($7)|0) > 0;
        if ($cmp3) {
          label = 3466;
          break;
        }
      }
      var $13=$conf_val;
      var $14=$var_addr;
      HEAP32[(($14)>>2)]=$13;
      break;
    }
  } while(0);
  if (label == 3466) {
    var $8=HEAP32[((_stderr)>>2)];
    var $9=HEAP32[((((5244320)|0))>>2)];
    var $10=$conf_val;
    var $11=$var_name_addr;
    var $12=$dflt_addr;
    var $call5=_fprintf($8, ((5257508)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$9,HEAP32[(((tempInt)+(4))>>2)]=$10,HEAP32[(((tempInt)+(8))>>2)]=$11,HEAP32[(((tempInt)+(12))>>2)]=$12,tempInt));
  }
  var $15=$expansion;
  _free($15);
  STACKTOP = __stackBase__;
  return;
}


function _kpse_absolute_p($filename, $relative_ok) {
  var label = 0;

  var $filename_addr;
  var $relative_ok_addr;
  $filename_addr=$filename;
  $relative_ok_addr=$relative_ok;
  var $0=HEAP32[((5248384)>>2)];
  var $1=$filename_addr;
  var $2=$relative_ok_addr;
  var $call=_kpathsea_absolute_p($0, $1, $2);

  return $call;
}


function _concat3($s1, $s2, $s3) {
  var label = 0;

  var $s1_addr;
  var $s2_addr;
  var $s3_addr;
  var $s2l;
  var $s3l;
  var $answer;
  $s1_addr=$s1;
  $s2_addr=$s2;
  $s3_addr=$s3;
  var $0=$s2_addr;
  var $tobool=(($0)|0)!=0;
  if ($tobool) {
    var $1=$s2_addr;
    var $call=_strlen($1);
    var $cond = $call;
  } else {
    var $cond = 0;
  }
  var $cond;
  $s2l=$cond;
  var $2=$s3_addr;
  var $tobool1=(($2)|0)!=0;
  if ($tobool1) {
    var $3=$s3_addr;
    var $call3=_strlen($3);
    var $cond6 = $call3;
  } else {
    var $cond6 = 0;
  }
  var $cond6;
  $s3l=$cond6;
  var $4=$s1_addr;
  var $call7=_strlen($4);
  var $5=$s2l;
  var $add=((($call7)+($5))|0);
  var $6=$s3l;
  var $add8=((($add)+($6))|0);
  var $add9=((($add8)+(1))|0);
  var $call10=_xmalloc($add9);
  $answer=$call10;
  var $7=$answer;
  var $8=$s1_addr;
  var $call11=_strcpy($7, $8);
  var $9=$s2_addr;
  var $tobool12=(($9)|0)!=0;
  if ($tobool12) {
    var $10=$answer;
    var $11=$s2_addr;
    var $call13=_strcat($10, $11);
  }
  var $12=$s3_addr;
  var $tobool14=(($12)|0)!=0;
  if (!($tobool14)) {
    var $15=$answer;

    return $15;
  }
  var $13=$answer;
  var $14=$s3_addr;
  var $call16=_strcat($13, $14);
  var $15=$answer;

  return $15;
}
_concat3["X"]=1;

function _printversionandexit($banner, $copyright_holder, $author, $extra_info) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $banner_addr;
  var $copyright_holder_addr;
  var $author_addr;
  var $extra_info_addr;
  var $prog_name;
  var $len;
  var $prog_name_end;
  var $prog_version;
  $banner_addr=$banner;
  $copyright_holder_addr=$copyright_holder;
  $author_addr=$author;
  $extra_info_addr=$extra_info;
  var $0=$banner_addr;
  var $call=_strchr($0, 44);
  $prog_name_end=$call;
  var $1=$banner_addr;
  var $call1=_strrchr($1, 32);
  $prog_version=$call1;
  var $2=$prog_name_end;
  var $tobool=(($2)|0)!=0;
  do {
    if ($tobool) {
      var $3=$prog_version;
      var $tobool2=(($3)|0)!=0;
      if (!($tobool2)) {
        label = 3489;
        break;
      }
      break;
    } else {
      label = 3489;
    }
  } while(0);
  if (label == 3489) {
    ___assert_func(((5257672)|0), 33, ((5268476)|0), ((5265916)|0));
  }
  var $4=$prog_version;
  var $incdec_ptr=(($4+1)|0);
  $prog_version=$incdec_ptr;
  var $5=$prog_name_end;
  var $6=$banner_addr;
  var $sub_ptr_lhs_cast=$5;
  var $sub_ptr_rhs_cast=$6;
  var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
  var $sub=((($sub_ptr_sub)-(8))|0);
  $len=$sub;
  var $7=$len;
  var $add=((($7)+(1))|0);
  var $call3=_xmalloc($add);
  $prog_name=$call3;
  var $8=$prog_name;
  var $9=$banner_addr;
  var $add_ptr=(($9+8)|0);
  var $10=$len;
  var $call4=_strncpy($8, $add_ptr, $10);
  var $11=$len;
  var $12=$prog_name;
  var $arrayidx=(($12+$11)|0);
  HEAP8[($arrayidx)]=0;
  var $13=$prog_name;
  var $14=$prog_version;
  var $15=HEAP32[((5243416)>>2)];
  var $call5=_printf(((5261848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$13,HEAP32[(((tempInt)+(4))>>2)]=$14,HEAP32[(((tempInt)+(8))>>2)]=$15,tempInt));
  var $16=HEAP32[((5248388)>>2)];
  var $call6=_puts($16);
  var $17=$copyright_holder_addr;
  var $tobool7=(($17)|0)!=0;
  if ($tobool7) {
    var $18=$copyright_holder_addr;
    var $call8=_printf(((5258336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$18,tempInt));
    var $19=$author_addr;
    var $tobool9=(($19)|0)!=0;
    if (!($tobool9)) {
      var $20=$copyright_holder_addr;
      $author_addr=$20;
    }
  }
  var $call12=_puts(((5257164)|0));
  var $21=HEAP32[((_stdout)>>2)];
  var $call13=_fputs(((5256204)|0), $21);
  var $22=$prog_name;
  var $call14=_printf(((5255508)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$22,tempInt));
  var $call15=_puts(((5254876)|0));
  var $call16=_puts(((5254044)|0));
  var $23=$prog_name;
  var $call17=_printf(((5253216)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$23,tempInt));
  var $24=$prog_name;
  var $25=$author_addr;
  var $call18=_printf(((5267656)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$24,HEAP32[(((tempInt)+(4))>>2)]=$25,tempInt));
  var $26=$extra_info_addr;
  var $tobool19=(($26)|0)!=0;
  if (!($tobool19)) {
    _uexit(0);
    throw "Reached an unreachable!"
  }
  var $27=$extra_info_addr;
  var $28=HEAP32[((_stdout)>>2)];
  var $call21=_fputs($27, $28);
  _uexit(0);
  throw "Reached an unreachable!"
}
_printversionandexit["X"]=1;

function _uexit($unix_code) {
  var label = 0;

  var $unix_code_addr;
  var $final_code;
  $unix_code_addr=$unix_code;
  var $0=$unix_code_addr;
  var $cmp=(($0)|0)==0;
  if ($cmp) {
    $final_code=0;
  } else {
    var $1=$unix_code_addr;
    var $cmp1=(($1)|0)==1;
    if ($cmp1) {
      $final_code=1;
    } else {
      var $2=$unix_code_addr;
      $final_code=$2;
    }
  }
  var $3=$final_code;
  _exit($3);
  throw "Reached an unreachable!"
}


function _usage($str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $str_addr;
  $str_addr=$str;
  var $0=HEAP32[((_stderr)>>2)];
  var $1=$str_addr;
  var $call=_fprintf($0, ((5257428)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$1,tempInt));
  _uexit(1);
  throw "Reached an unreachable!"
}


function _usagehelp($message, $bug_email) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $message_addr;
  var $bug_email_addr;
  $message_addr=$message;
  $bug_email_addr=$bug_email;
  var $0=$bug_email_addr;
  var $tobool=(($0)|0)!=0;
  if (!($tobool)) {
    $bug_email_addr=((5265848)|0);
  }
  while(1) {
    var $1=$message_addr;
    var $2=HEAP32[(($1)>>2)];
    var $tobool1=(($2)|0)!=0;
    if (!($tobool1)) {
      break;
    }
    var $3=$message_addr;
    var $4=HEAP32[(($3)>>2)];
    var $call=_printf(((5261780)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$4,tempInt));
    var $5=$message_addr;
    var $incdec_ptr=(($5+4)|0);
    $message_addr=$incdec_ptr;
  }
  var $6=$bug_email_addr;
  var $call2=_printf(((5258292)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$6,tempInt));
  _uexit(0);
  throw "Reached an unreachable!"
}



function __getopt_internal($argc, $argv, $optstring, $longopts, $longind, $long_only) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $retval;
  var $argc_addr;
  var $argv_addr;
  var $optstring_addr;
  var $longopts_addr;
  var $longind_addr;
  var $long_only_addr;
  var $nameend;
  var $p;
  var $pfound;
  var $exact;
  var $ambig;
  var $indfound;
  var $option_index;
  var $c;
  var $temp;
  var $nameend320;
  var $p321;
  var $pfound322;
  var $exact323;
  var $ambig324;
  var $indfound325;
  var $option_index326;
  $argc_addr=$argc;
  $argv_addr=$argv;
  $optstring_addr=$optstring;
  $longopts_addr=$longopts;
  $longind_addr=$longind;
  $long_only_addr=$long_only;
  HEAP32[((5243740)>>2)]=0;
  var $0=HEAP32[((5268440)>>2)];
  var $tobool=(($0)|0)!=0;
  do {
    if ($tobool) {
      var $1=HEAP32[((5243732)>>2)];
      var $cmp=(($1)|0)==0;
      if ($cmp) {
        label = 3;
        break;
      } else {
        break;
      }
    } else {
      label = 3;
    }
  } while(0);
  if (label == 3) {
    var $2=$argc_addr;
    var $3=$argv_addr;
    var $4=$optstring_addr;
    var $call=__getopt_initialize($2, $3, $4);
    $optstring_addr=$call;
    HEAP32[((5243732)>>2)]=1;
    HEAP32[((5268440)>>2)]=1;
  }
  var $5=HEAP32[((5243812)>>2)];
  var $cmp1=(($5)|0)==0;
  do {
    if ($cmp1) {
      label = 6;
    } else {
      var $6=HEAP32[((5243812)>>2)];
      var $7=HEAP8[($6)];
      var $conv=(($7 << 24) >> 24);
      var $cmp3=(($conv)|0)==0;
      if ($cmp3) {
        label = 6;
        break;
      } else {
        break;
      }
    }
  } while(0);
  L8: do {
    if (label == 6) {
      var $8=HEAP32[((5244204)>>2)];
      var $9=HEAP32[((5243732)>>2)];
      var $cmp6=(($8)|0) > (($9)|0);
      if ($cmp6) {
        var $10=HEAP32[((5243732)>>2)];
        HEAP32[((5244204)>>2)]=$10;
      }
      var $11=HEAP32[((5248820)>>2)];
      var $12=HEAP32[((5243732)>>2)];
      var $cmp10=(($11)|0) > (($12)|0);
      if ($cmp10) {
        var $13=HEAP32[((5243732)>>2)];
        HEAP32[((5248820)>>2)]=$13;
      }
      var $14=HEAP32[((5243724)>>2)];
      var $cmp14=(($14)|0)==1;
      if ($cmp14) {
        var $15=HEAP32[((5248820)>>2)];
        var $16=HEAP32[((5244204)>>2)];
        var $cmp17=(($15)|0)!=(($16)|0);
        do {
          if ($cmp17) {
            var $17=HEAP32[((5244204)>>2)];
            var $18=HEAP32[((5243732)>>2)];
            var $cmp19=(($17)|0)!=(($18)|0);
            if (!($cmp19)) {
              label = 14;
              break;
            }
            var $19=$argv_addr;
            _exchange($19);
            break;
          } else {
            label = 14;
          }
        } while(0);
        if (label == 14) {
          var $20=HEAP32[((5244204)>>2)];
          var $21=HEAP32[((5243732)>>2)];
          var $cmp22=(($20)|0)!=(($21)|0);
          if ($cmp22) {
            var $22=HEAP32[((5243732)>>2)];
            HEAP32[((5248820)>>2)]=$22;
          }
        }
        while(1) {
          var $23=HEAP32[((5243732)>>2)];
          var $24=$argc_addr;
          var $cmp27=(($23)|0) < (($24)|0);
          if ($cmp27) {
            var $25=HEAP32[((5243732)>>2)];
            var $26=$argv_addr;
            var $arrayidx=(($26+($25<<2))|0);
            var $27=HEAP32[(($arrayidx)>>2)];
            var $arrayidx29=(($27)|0);
            var $28=HEAP8[($arrayidx29)];
            var $conv30=(($28 << 24) >> 24);
            var $cmp31=(($conv30)|0)!=45;
            if ($cmp31) {
              var $33 = 1;
            } else {
              var $29=HEAP32[((5243732)>>2)];
              var $30=$argv_addr;
              var $arrayidx33=(($30+($29<<2))|0);
              var $31=HEAP32[(($arrayidx33)>>2)];
              var $arrayidx34=(($31+1)|0);
              var $32=HEAP8[($arrayidx34)];
              var $conv35=(($32 << 24) >> 24);
              var $cmp36=(($conv35)|0)==0;
              var $33 = $cmp36;
            }
            var $33;
            var $34 = $33;
          } else {
            var $34 = 0;
          }
          var $34;
          if (!($34)) {
            break;
          }
          var $35=HEAP32[((5243732)>>2)];
          var $inc=((($35)+(1))|0);
          HEAP32[((5243732)>>2)]=$inc;
        }
        var $36=HEAP32[((5243732)>>2)];
        HEAP32[((5244204)>>2)]=$36;
      }
      var $37=HEAP32[((5243732)>>2)];
      var $38=$argc_addr;
      var $cmp39=(($37)|0)!=(($38)|0);
      do {
        if ($cmp39) {
          var $39=HEAP32[((5243732)>>2)];
          var $40=$argv_addr;
          var $arrayidx42=(($40+($39<<2))|0);
          var $41=HEAP32[(($arrayidx42)>>2)];
          var $call43=_strcmp($41, ((5257292)|0));
          var $tobool44=(($call43)|0)!=0;
          if ($tobool44) {
            break;
          }
          var $42=HEAP32[((5243732)>>2)];
          var $inc46=((($42)+(1))|0);
          HEAP32[((5243732)>>2)]=$inc46;
          var $43=HEAP32[((5248820)>>2)];
          var $44=HEAP32[((5244204)>>2)];
          var $cmp47=(($43)|0)!=(($44)|0);
          do {
            if ($cmp47) {
              var $45=HEAP32[((5244204)>>2)];
              var $46=HEAP32[((5243732)>>2)];
              var $cmp50=(($45)|0)!=(($46)|0);
              if (!($cmp50)) {
                label = 30;
                break;
              }
              var $47=$argv_addr;
              _exchange($47);
              break;
            } else {
              label = 30;
            }
          } while(0);
          if (label == 30) {
            var $48=HEAP32[((5248820)>>2)];
            var $49=HEAP32[((5244204)>>2)];
            var $cmp54=(($48)|0)==(($49)|0);
            if ($cmp54) {
              var $50=HEAP32[((5243732)>>2)];
              HEAP32[((5248820)>>2)]=$50;
            }
          }
          var $51=$argc_addr;
          HEAP32[((5244204)>>2)]=$51;
          var $52=$argc_addr;
          HEAP32[((5243732)>>2)]=$52;
        }
      } while(0);
      var $53=HEAP32[((5243732)>>2)];
      var $54=$argc_addr;
      var $cmp60=(($53)|0)==(($54)|0);
      if ($cmp60) {
        var $55=HEAP32[((5248820)>>2)];
        var $56=HEAP32[((5244204)>>2)];
        var $cmp63=(($55)|0)!=(($56)|0);
        if ($cmp63) {
          var $57=HEAP32[((5248820)>>2)];
          HEAP32[((5243732)>>2)]=$57;
        }
        $retval=-1;
        var $374=$retval;
        STACKTOP = __stackBase__;
        return $374;
      }
      var $58=HEAP32[((5243732)>>2)];
      var $59=$argv_addr;
      var $arrayidx68=(($59+($58<<2))|0);
      var $60=HEAP32[(($arrayidx68)>>2)];
      var $arrayidx69=(($60)|0);
      var $61=HEAP8[($arrayidx69)];
      var $conv70=(($61 << 24) >> 24);
      var $cmp71=(($conv70)|0)!=45;
      do {
        if (!($cmp71)) {
          var $62=HEAP32[((5243732)>>2)];
          var $63=$argv_addr;
          var $arrayidx74=(($63+($62<<2))|0);
          var $64=HEAP32[(($arrayidx74)>>2)];
          var $arrayidx75=(($64+1)|0);
          var $65=HEAP8[($arrayidx75)];
          var $conv76=(($65 << 24) >> 24);
          var $cmp77=(($conv76)|0)==0;
          if ($cmp77) {
            break;
          }
          var $70=HEAP32[((5243732)>>2)];
          var $71=$argv_addr;
          var $arrayidx87=(($71+($70<<2))|0);
          var $72=HEAP32[(($arrayidx87)>>2)];
          var $add_ptr=(($72+1)|0);
          var $73=$longopts_addr;
          var $cmp88=(($73)|0)!=0;
          if ($cmp88) {
            var $74=HEAP32[((5243732)>>2)];
            var $75=$argv_addr;
            var $arrayidx91=(($75+($74<<2))|0);
            var $76=HEAP32[(($arrayidx91)>>2)];
            var $arrayidx92=(($76+1)|0);
            var $77=HEAP8[($arrayidx92)];
            var $conv93=(($77 << 24) >> 24);
            var $cmp94=(($conv93)|0)==45;
            var $78 = $cmp94;
          } else {
            var $78 = 0;
          }
          var $78;
          var $land_ext=(($78)&1);
          var $add_ptr97=(($add_ptr+$land_ext)|0);
          HEAP32[((5243812)>>2)]=$add_ptr97;
          break L8;
        }
      } while(0);
      var $66=HEAP32[((5243724)>>2)];
      var $cmp80=(($66)|0)==0;
      if ($cmp80) {
        $retval=-1;
        var $374=$retval;
        STACKTOP = __stackBase__;
        return $374;
      } else {
        var $67=HEAP32[((5243732)>>2)];
        var $inc84=((($67)+(1))|0);
        HEAP32[((5243732)>>2)]=$inc84;
        var $68=$argv_addr;
        var $arrayidx85=(($68+($67<<2))|0);
        var $69=HEAP32[(($arrayidx85)>>2)];
        HEAP32[((5243740)>>2)]=$69;
        $retval=1;
        var $374=$retval;
        STACKTOP = __stackBase__;
        return $374;
      }
    }
  } while(0);
  var $79=$longopts_addr;
  var $cmp99=(($79)|0)!=0;
  L71: do {
    if ($cmp99) {
      var $80=HEAP32[((5243732)>>2)];
      var $81=$argv_addr;
      var $arrayidx102=(($81+($80<<2))|0);
      var $82=HEAP32[(($arrayidx102)>>2)];
      var $arrayidx103=(($82+1)|0);
      var $83=HEAP8[($arrayidx103)];
      var $conv104=(($83 << 24) >> 24);
      var $cmp105=(($conv104)|0)==45;
      do {
        if (!($cmp105)) {
          var $84=$long_only_addr;
          var $tobool108=(($84)|0)!=0;
          if (!($tobool108)) {
            break L71;
          }
          var $85=HEAP32[((5243732)>>2)];
          var $86=$argv_addr;
          var $arrayidx110=(($86+($85<<2))|0);
          var $87=HEAP32[(($arrayidx110)>>2)];
          var $arrayidx111=(($87+2)|0);
          var $88=HEAP8[($arrayidx111)];
          var $conv112=(($88 << 24) >> 24);
          var $tobool113=(($conv112)|0)!=0;
          if ($tobool113) {
            break;
          }
          var $89=$optstring_addr;
          var $90=HEAP32[((5243732)>>2)];
          var $91=$argv_addr;
          var $arrayidx115=(($91+($90<<2))|0);
          var $92=HEAP32[(($arrayidx115)>>2)];
          var $arrayidx116=(($92+1)|0);
          var $93=HEAP8[($arrayidx116)];
          var $conv117=(($93 << 24) >> 24);
          var $call118=_my_index($89, $conv117);
          var $tobool119=(($call118)|0)!=0;
          if ($tobool119) {
            break L71;
          }
        }
      } while(0);
      $pfound=0;
      $exact=0;
      $ambig=0;
      $indfound=-1;
      var $94=HEAP32[((5243812)>>2)];
      $nameend=$94;
      while(1) {
        var $95=$nameend;
        var $96=HEAP8[($95)];
        var $conv121=(($96 << 24) >> 24);
        var $tobool122=(($conv121)|0)!=0;
        if ($tobool122) {
          var $97=$nameend;
          var $98=HEAP8[($97)];
          var $conv124=(($98 << 24) >> 24);
          var $cmp125=(($conv124)|0)!=61;
          var $99 = $cmp125;
        } else {
          var $99 = 0;
        }
        var $99;
        if (!($99)) {
          break;
        }
        var $100=$nameend;
        var $incdec_ptr=(($100+1)|0);
        $nameend=$incdec_ptr;
      }
      var $101=$longopts_addr;
      $p=$101;
      $option_index=0;
      while(1) {
        var $102=$p;
        var $name=(($102)|0);
        var $103=HEAP32[(($name)>>2)];
        var $tobool130=(($103)|0)!=0;
        if (!($tobool130)) {
          break;
        }
        var $104=$p;
        var $name132=(($104)|0);
        var $105=HEAP32[(($name132)>>2)];
        var $106=HEAP32[((5243812)>>2)];
        var $107=$nameend;
        var $108=HEAP32[((5243812)>>2)];
        var $sub_ptr_lhs_cast=$107;
        var $sub_ptr_rhs_cast=$108;
        var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
        var $call133=_strncmp($105, $106, $sub_ptr_sub);
        var $tobool134=(($call133)|0)!=0;
        if (!($tobool134)) {
          var $109=$nameend;
          var $110=HEAP32[((5243812)>>2)];
          var $sub_ptr_lhs_cast136=$109;
          var $sub_ptr_rhs_cast137=$110;
          var $sub_ptr_sub138=((($sub_ptr_lhs_cast136)-($sub_ptr_rhs_cast137))|0);
          var $111=$p;
          var $name139=(($111)|0);
          var $112=HEAP32[(($name139)>>2)];
          var $call140=_strlen($112);
          var $cmp141=(($sub_ptr_sub138)|0)==(($call140)|0);
          if ($cmp141) {
            label = 61;
            break;
          }
          var $115=$pfound;
          var $cmp145=(($115)|0)==0;
          if ($cmp145) {
            var $116=$p;
            $pfound=$116;
            var $117=$option_index;
            $indfound=$117;
          } else {
            $ambig=1;
          }
        }
        var $118=$p;
        var $incdec_ptr153=(($118+16)|0);
        $p=$incdec_ptr153;
        var $119=$option_index;
        var $inc154=((($119)+(1))|0);
        $option_index=$inc154;
      }
      if (label == 61) {
        var $113=$p;
        $pfound=$113;
        var $114=$option_index;
        $indfound=$114;
        $exact=1;
      }
      var $120=$ambig;
      var $tobool156=(($120)|0)!=0;
      do {
        if ($tobool156) {
          var $121=$exact;
          var $tobool158=(($121)|0)!=0;
          if ($tobool158) {
            break;
          }
          var $122=HEAP32[((5243736)>>2)];
          var $tobool160=(($122)|0)!=0;
          if ($tobool160) {
            var $123=HEAP32[((_stderr)>>2)];
            var $124=$argv_addr;
            var $arrayidx162=(($124)|0);
            var $125=HEAP32[(($arrayidx162)>>2)];
            var $126=HEAP32[((5243732)>>2)];
            var $127=$argv_addr;
            var $arrayidx163=(($127+($126<<2))|0);
            var $128=HEAP32[(($arrayidx163)>>2)];
            var $call164=_fprintf($123, ((5265756)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$125,HEAP32[(((tempInt)+(4))>>2)]=$128,tempInt));
          }
          var $129=HEAP32[((5243812)>>2)];
          var $call166=_strlen($129);
          var $130=HEAP32[((5243812)>>2)];
          var $add_ptr167=(($130+$call166)|0);
          HEAP32[((5243812)>>2)]=$add_ptr167;
          var $131=HEAP32[((5243732)>>2)];
          var $inc168=((($131)+(1))|0);
          HEAP32[((5243732)>>2)]=$inc168;
          HEAP32[((5243728)>>2)]=0;
          $retval=63;
          var $374=$retval;
          STACKTOP = __stackBase__;
          return $374;
        }
      } while(0);
      var $132=$pfound;
      var $cmp170=(($132)|0)!=0;
      if (!($cmp170)) {
        var $196=$long_only_addr;
        var $tobool245=(($196)|0)!=0;
        do {
          if ($tobool245) {
            var $197=HEAP32[((5243732)>>2)];
            var $198=$argv_addr;
            var $arrayidx247=(($198+($197<<2))|0);
            var $199=HEAP32[(($arrayidx247)>>2)];
            var $arrayidx248=(($199+1)|0);
            var $200=HEAP8[($arrayidx248)];
            var $conv249=(($200 << 24) >> 24);
            var $cmp250=(($conv249)|0)==45;
            if ($cmp250) {
              break;
            }
            var $201=$optstring_addr;
            var $202=HEAP32[((5243812)>>2)];
            var $203=HEAP8[($202)];
            var $conv253=(($203 << 24) >> 24);
            var $call254=_my_index($201, $conv253);
            var $cmp255=(($call254)|0)==0;
            if ($cmp255) {
              break;
            }
            break L71;
          }
        } while(0);
        var $204=HEAP32[((5243736)>>2)];
        var $tobool258=(($204)|0)!=0;
        if ($tobool258) {
          var $205=HEAP32[((5243732)>>2)];
          var $206=$argv_addr;
          var $arrayidx260=(($206+($205<<2))|0);
          var $207=HEAP32[(($arrayidx260)>>2)];
          var $arrayidx261=(($207+1)|0);
          var $208=HEAP8[($arrayidx261)];
          var $conv262=(($208 << 24) >> 24);
          var $cmp263=(($conv262)|0)==45;
          if ($cmp263) {
            var $209=HEAP32[((_stderr)>>2)];
            var $210=$argv_addr;
            var $arrayidx266=(($210)|0);
            var $211=HEAP32[(($arrayidx266)>>2)];
            var $212=HEAP32[((5243812)>>2)];
            var $call267=_fprintf($209, ((5256164)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$211,HEAP32[(((tempInt)+(4))>>2)]=$212,tempInt));
          } else {
            var $213=HEAP32[((_stderr)>>2)];
            var $214=$argv_addr;
            var $arrayidx269=(($214)|0);
            var $215=HEAP32[(($arrayidx269)>>2)];
            var $216=HEAP32[((5243732)>>2)];
            var $217=$argv_addr;
            var $arrayidx270=(($217+($216<<2))|0);
            var $218=HEAP32[(($arrayidx270)>>2)];
            var $arrayidx271=(($218)|0);
            var $219=HEAP8[($arrayidx271)];
            var $conv272=(($219 << 24) >> 24);
            var $220=HEAP32[((5243812)>>2)];
            var $call273=_fprintf($213, ((5255452)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$215,HEAP32[(((tempInt)+(4))>>2)]=$conv272,HEAP32[(((tempInt)+(8))>>2)]=$220,tempInt));
          }
        }
        HEAP32[((5243812)>>2)]=((5254844)|0);
        var $221=HEAP32[((5243732)>>2)];
        var $inc276=((($221)+(1))|0);
        HEAP32[((5243732)>>2)]=$inc276;
        HEAP32[((5243728)>>2)]=0;
        $retval=63;
        var $374=$retval;
        STACKTOP = __stackBase__;
        return $374;
      }
      var $133=$indfound;
      $option_index=$133;
      var $134=HEAP32[((5243732)>>2)];
      var $inc173=((($134)+(1))|0);
      HEAP32[((5243732)>>2)]=$inc173;
      var $135=$nameend;
      var $136=HEAP8[($135)];
      var $tobool174=(($136 << 24) >> 24)!=0;
      do {
        if ($tobool174) {
          var $137=$pfound;
          var $has_arg=(($137+4)|0);
          var $138=HEAP32[(($has_arg)>>2)];
          var $tobool176=(($138)|0)!=0;
          if ($tobool176) {
            var $139=$nameend;
            var $add_ptr178=(($139+1)|0);
            HEAP32[((5243740)>>2)]=$add_ptr178;
            break;
          }
          var $140=HEAP32[((5243736)>>2)];
          var $tobool180=(($140)|0)!=0;
          if ($tobool180) {
            var $141=HEAP32[((5243732)>>2)];
            var $sub=((($141)-(1))|0);
            var $142=$argv_addr;
            var $arrayidx182=(($142+($sub<<2))|0);
            var $143=HEAP32[(($arrayidx182)>>2)];
            var $arrayidx183=(($143+1)|0);
            var $144=HEAP8[($arrayidx183)];
            var $conv184=(($144 << 24) >> 24);
            var $cmp185=(($conv184)|0)==45;
            if ($cmp185) {
              var $145=HEAP32[((_stderr)>>2)];
              var $146=$argv_addr;
              var $arrayidx188=(($146)|0);
              var $147=HEAP32[(($arrayidx188)>>2)];
              var $148=$pfound;
              var $name189=(($148)|0);
              var $149=HEAP32[(($name189)>>2)];
              var $call190=_fprintf($145, ((5261608)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$147,HEAP32[(((tempInt)+(4))>>2)]=$149,tempInt));
            } else {
              var $150=HEAP32[((_stderr)>>2)];
              var $151=$argv_addr;
              var $arrayidx192=(($151)|0);
              var $152=HEAP32[(($arrayidx192)>>2)];
              var $153=HEAP32[((5243732)>>2)];
              var $sub193=((($153)-(1))|0);
              var $154=$argv_addr;
              var $arrayidx194=(($154+($sub193<<2))|0);
              var $155=HEAP32[(($arrayidx194)>>2)];
              var $arrayidx195=(($155)|0);
              var $156=HEAP8[($arrayidx195)];
              var $conv196=(($156 << 24) >> 24);
              var $157=$pfound;
              var $name197=(($157)|0);
              var $158=HEAP32[(($name197)>>2)];
              var $call198=_fprintf($150, ((5258176)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$152,HEAP32[(((tempInt)+(4))>>2)]=$conv196,HEAP32[(((tempInt)+(8))>>2)]=$158,tempInt));
            }
          }
          var $159=HEAP32[((5243812)>>2)];
          var $call201=_strlen($159);
          var $160=HEAP32[((5243812)>>2)];
          var $add_ptr202=(($160+$call201)|0);
          HEAP32[((5243812)>>2)]=$add_ptr202;
          var $161=$pfound;
          var $val=(($161+12)|0);
          var $162=HEAP32[(($val)>>2)];
          HEAP32[((5243728)>>2)]=$162;
          $retval=63;
          var $374=$retval;
          STACKTOP = __stackBase__;
          return $374;
        } else {
          var $163=$pfound;
          var $has_arg205=(($163+4)|0);
          var $164=HEAP32[(($has_arg205)>>2)];
          var $cmp206=(($164)|0)==1;
          do {
            if ($cmp206) {
              var $165=HEAP32[((5243732)>>2)];
              var $166=$argc_addr;
              var $cmp209=(($165)|0) < (($166)|0);
              if ($cmp209) {
                var $167=HEAP32[((5243732)>>2)];
                var $inc212=((($167)+(1))|0);
                HEAP32[((5243732)>>2)]=$inc212;
                var $168=$argv_addr;
                var $arrayidx213=(($168+($167<<2))|0);
                var $169=HEAP32[(($arrayidx213)>>2)];
                HEAP32[((5243740)>>2)]=$169;
                break;
              }
              var $170=HEAP32[((5243736)>>2)];
              var $tobool215=(($170)|0)!=0;
              if ($tobool215) {
                var $171=HEAP32[((_stderr)>>2)];
                var $172=$argv_addr;
                var $arrayidx217=(($172)|0);
                var $173=HEAP32[(($arrayidx217)>>2)];
                var $174=HEAP32[((5243732)>>2)];
                var $sub218=((($174)-(1))|0);
                var $175=$argv_addr;
                var $arrayidx219=(($175+($sub218<<2))|0);
                var $176=HEAP32[(($arrayidx219)>>2)];
                var $call220=_fprintf($171, ((5257112)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$173,HEAP32[(((tempInt)+(4))>>2)]=$176,tempInt));
              }
              var $177=HEAP32[((5243812)>>2)];
              var $call222=_strlen($177);
              var $178=HEAP32[((5243812)>>2)];
              var $add_ptr223=(($178+$call222)|0);
              HEAP32[((5243812)>>2)]=$add_ptr223;
              var $179=$pfound;
              var $val224=(($179+12)|0);
              var $180=HEAP32[(($val224)>>2)];
              HEAP32[((5243728)>>2)]=$180;
              var $181=$optstring_addr;
              var $arrayidx225=(($181)|0);
              var $182=HEAP8[($arrayidx225)];
              var $conv226=(($182 << 24) >> 24);
              var $cmp227=(($conv226)|0)==58;
              var $cond=$cmp227 ? 58 : 63;
              $retval=$cond;
              var $374=$retval;
              STACKTOP = __stackBase__;
              return $374;
            }
          } while(0);
        }
      } while(0);
      var $183=HEAP32[((5243812)>>2)];
      var $call232=_strlen($183);
      var $184=HEAP32[((5243812)>>2)];
      var $add_ptr233=(($184+$call232)|0);
      HEAP32[((5243812)>>2)]=$add_ptr233;
      var $185=$longind_addr;
      var $cmp234=(($185)|0)!=0;
      if ($cmp234) {
        var $186=$option_index;
        var $187=$longind_addr;
        HEAP32[(($187)>>2)]=$186;
      }
      var $188=$pfound;
      var $flag=(($188+8)|0);
      var $189=HEAP32[(($flag)>>2)];
      var $tobool238=(($189)|0)!=0;
      if ($tobool238) {
        var $190=$pfound;
        var $val240=(($190+12)|0);
        var $191=HEAP32[(($val240)>>2)];
        var $192=$pfound;
        var $flag241=(($192+8)|0);
        var $193=HEAP32[(($flag241)>>2)];
        HEAP32[(($193)>>2)]=$191;
        $retval=0;
        var $374=$retval;
        STACKTOP = __stackBase__;
        return $374;
      } else {
        var $194=$pfound;
        var $val243=(($194+12)|0);
        var $195=HEAP32[(($val243)>>2)];
        $retval=$195;
        var $374=$retval;
        STACKTOP = __stackBase__;
        return $374;
      }
    }
  } while(0);
  var $222=HEAP32[((5243812)>>2)];
  var $incdec_ptr279=(($222+1)|0);
  HEAP32[((5243812)>>2)]=$incdec_ptr279;
  var $223=HEAP8[($222)];
  $c=$223;
  var $224=$optstring_addr;
  var $225=$c;
  var $conv280=(($225 << 24) >> 24);
  var $call281=_my_index($224, $conv280);
  $temp=$call281;
  var $226=HEAP32[((5243812)>>2)];
  var $227=HEAP8[($226)];
  var $conv282=(($227 << 24) >> 24);
  var $cmp283=(($conv282)|0)==0;
  if ($cmp283) {
    var $228=HEAP32[((5243732)>>2)];
    var $inc286=((($228)+(1))|0);
    HEAP32[((5243732)>>2)]=$inc286;
  }
  var $229=$temp;
  var $cmp288=(($229)|0)==0;
  do {
    if (!($cmp288)) {
      var $230=$c;
      var $conv291=(($230 << 24) >> 24);
      var $cmp292=(($conv291)|0)==58;
      if ($cmp292) {
        break;
      }
      var $242=$temp;
      var $arrayidx310=(($242)|0);
      var $243=HEAP8[($arrayidx310)];
      var $conv311=(($243 << 24) >> 24);
      var $cmp312=(($conv311)|0)==87;
      do {
        if ($cmp312) {
          var $244=$temp;
          var $arrayidx315=(($244+1)|0);
          var $245=HEAP8[($arrayidx315)];
          var $conv316=(($245 << 24) >> 24);
          var $cmp317=(($conv316)|0)==59;
          if (!($cmp317)) {
            break;
          }
          $pfound322=0;
          $exact323=0;
          $ambig324=0;
          $indfound325=0;
          var $246=HEAP32[((5243812)>>2)];
          var $247=HEAP8[($246)];
          var $conv327=(($247 << 24) >> 24);
          var $cmp328=(($conv327)|0)!=0;
          do {
            if ($cmp328) {
              var $248=HEAP32[((5243812)>>2)];
              HEAP32[((5243740)>>2)]=$248;
              var $249=HEAP32[((5243732)>>2)];
              var $inc331=((($249)+(1))|0);
              HEAP32[((5243732)>>2)]=$inc331;
            } else {
              var $250=HEAP32[((5243732)>>2)];
              var $251=$argc_addr;
              var $cmp333=(($250)|0)==(($251)|0);
              if (!($cmp333)) {
                var $261=HEAP32[((5243732)>>2)];
                var $inc352=((($261)+(1))|0);
                HEAP32[((5243732)>>2)]=$inc352;
                var $262=$argv_addr;
                var $arrayidx353=(($262+($261<<2))|0);
                var $263=HEAP32[(($arrayidx353)>>2)];
                HEAP32[((5243740)>>2)]=$263;
                break;
              }
              var $252=HEAP32[((5243736)>>2)];
              var $tobool336=(($252)|0)!=0;
              if ($tobool336) {
                var $253=HEAP32[((_stderr)>>2)];
                var $254=$argv_addr;
                var $arrayidx338=(($254)|0);
                var $255=HEAP32[(($arrayidx338)>>2)];
                var $256=$c;
                var $conv339=(($256 << 24) >> 24);
                var $call340=_fprintf($253, ((5267584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$255,HEAP32[(((tempInt)+(4))>>2)]=$conv339,tempInt));
              }
              var $257=$c;
              var $conv342=(($257 << 24) >> 24);
              HEAP32[((5243728)>>2)]=$conv342;
              var $258=$optstring_addr;
              var $arrayidx343=(($258)|0);
              var $259=HEAP8[($arrayidx343)];
              var $conv344=(($259 << 24) >> 24);
              var $cmp345=(($conv344)|0)==58;
              if ($cmp345) {
                $c=58;
              } else {
                $c=63;
              }
              var $260=$c;
              var $conv350=(($260 << 24) >> 24);
              $retval=$conv350;
              var $374=$retval;
              STACKTOP = __stackBase__;
              return $374;
            }
          } while(0);
          var $264=HEAP32[((5243740)>>2)];
          $nameend320=$264;
          HEAP32[((5243812)>>2)]=$264;
          while(1) {
            var $265=$nameend320;
            var $266=HEAP8[($265)];
            var $conv357=(($266 << 24) >> 24);
            var $tobool358=(($conv357)|0)!=0;
            if ($tobool358) {
              var $267=$nameend320;
              var $268=HEAP8[($267)];
              var $conv360=(($268 << 24) >> 24);
              var $cmp361=(($conv360)|0)!=61;
              var $269 = $cmp361;
            } else {
              var $269 = 0;
            }
            var $269;
            if (!($269)) {
              break;
            }
            var $270=$nameend320;
            var $incdec_ptr367=(($270+1)|0);
            $nameend320=$incdec_ptr367;
          }
          var $271=$longopts_addr;
          $p321=$271;
          $option_index326=0;
          while(1) {
            var $272=$p321;
            var $name370=(($272)|0);
            var $273=HEAP32[(($name370)>>2)];
            var $tobool371=(($273)|0)!=0;
            if (!($tobool371)) {
              break;
            }
            var $274=$p321;
            var $name373=(($274)|0);
            var $275=HEAP32[(($name373)>>2)];
            var $276=HEAP32[((5243812)>>2)];
            var $277=$nameend320;
            var $278=HEAP32[((5243812)>>2)];
            var $sub_ptr_lhs_cast374=$277;
            var $sub_ptr_rhs_cast375=$278;
            var $sub_ptr_sub376=((($sub_ptr_lhs_cast374)-($sub_ptr_rhs_cast375))|0);
            var $call377=_strncmp($275, $276, $sub_ptr_sub376);
            var $tobool378=(($call377)|0)!=0;
            if (!($tobool378)) {
              var $279=$nameend320;
              var $280=HEAP32[((5243812)>>2)];
              var $sub_ptr_lhs_cast380=$279;
              var $sub_ptr_rhs_cast381=$280;
              var $sub_ptr_sub382=((($sub_ptr_lhs_cast380)-($sub_ptr_rhs_cast381))|0);
              var $281=$p321;
              var $name383=(($281)|0);
              var $282=HEAP32[(($name383)>>2)];
              var $call384=_strlen($282);
              var $cmp385=(($sub_ptr_sub382)|0)==(($call384)|0);
              if ($cmp385) {
                label = 141;
                break;
              }
              var $285=$pfound322;
              var $cmp389=(($285)|0)==0;
              if ($cmp389) {
                var $286=$p321;
                $pfound322=$286;
                var $287=$option_index326;
                $indfound325=$287;
              } else {
                $ambig324=1;
              }
            }
            var $288=$p321;
            var $incdec_ptr397=(($288+16)|0);
            $p321=$incdec_ptr397;
            var $289=$option_index326;
            var $inc398=((($289)+(1))|0);
            $option_index326=$inc398;
          }
          if (label == 141) {
            var $283=$p321;
            $pfound322=$283;
            var $284=$option_index326;
            $indfound325=$284;
            $exact323=1;
          }
          var $290=$ambig324;
          var $tobool400=(($290)|0)!=0;
          do {
            if ($tobool400) {
              var $291=$exact323;
              var $tobool402=(($291)|0)!=0;
              if ($tobool402) {
                break;
              }
              var $292=HEAP32[((5243736)>>2)];
              var $tobool404=(($292)|0)!=0;
              if ($tobool404) {
                var $293=HEAP32[((_stderr)>>2)];
                var $294=$argv_addr;
                var $arrayidx406=(($294)|0);
                var $295=HEAP32[(($arrayidx406)>>2)];
                var $296=HEAP32[((5243732)>>2)];
                var $297=$argv_addr;
                var $arrayidx407=(($297+($296<<2))|0);
                var $298=HEAP32[(($arrayidx407)>>2)];
                var $call408=_fprintf($293, ((5266972)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$295,HEAP32[(((tempInt)+(4))>>2)]=$298,tempInt));
              }
              var $299=HEAP32[((5243812)>>2)];
              var $call410=_strlen($299);
              var $300=HEAP32[((5243812)>>2)];
              var $add_ptr411=(($300+$call410)|0);
              HEAP32[((5243812)>>2)]=$add_ptr411;
              var $301=HEAP32[((5243732)>>2)];
              var $inc412=((($301)+(1))|0);
              HEAP32[((5243732)>>2)]=$inc412;
              $retval=63;
              var $374=$retval;
              STACKTOP = __stackBase__;
              return $374;
            }
          } while(0);
          var $302=$pfound322;
          var $cmp414=(($302)|0)!=0;
          if (!($cmp414)) {
            HEAP32[((5243812)>>2)]=0;
            $retval=87;
            var $374=$retval;
            STACKTOP = __stackBase__;
            return $374;
          }
          var $303=$indfound325;
          $option_index326=$303;
          var $304=$nameend320;
          var $305=HEAP8[($304)];
          var $tobool417=(($305 << 24) >> 24)!=0;
          do {
            if ($tobool417) {
              var $306=$pfound322;
              var $has_arg419=(($306+4)|0);
              var $307=HEAP32[(($has_arg419)>>2)];
              var $tobool420=(($307)|0)!=0;
              if ($tobool420) {
                var $308=$nameend320;
                var $add_ptr422=(($308+1)|0);
                HEAP32[((5243740)>>2)]=$add_ptr422;
                break;
              }
              var $309=HEAP32[((5243736)>>2)];
              var $tobool424=(($309)|0)!=0;
              if ($tobool424) {
                var $310=HEAP32[((_stderr)>>2)];
                var $311=$argv_addr;
                var $arrayidx426=(($311)|0);
                var $312=HEAP32[(($arrayidx426)>>2)];
                var $313=$pfound322;
                var $name427=(($313)|0);
                var $314=HEAP32[(($name427)>>2)];
                var $call428=_fprintf($310, ((5266488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$312,HEAP32[(((tempInt)+(4))>>2)]=$314,tempInt));
              }
              var $315=HEAP32[((5243812)>>2)];
              var $call430=_strlen($315);
              var $316=HEAP32[((5243812)>>2)];
              var $add_ptr431=(($316+$call430)|0);
              HEAP32[((5243812)>>2)]=$add_ptr431;
              $retval=63;
              var $374=$retval;
              STACKTOP = __stackBase__;
              return $374;
            } else {
              var $317=$pfound322;
              var $has_arg434=(($317+4)|0);
              var $318=HEAP32[(($has_arg434)>>2)];
              var $cmp435=(($318)|0)==1;
              do {
                if ($cmp435) {
                  var $319=HEAP32[((5243732)>>2)];
                  var $320=$argc_addr;
                  var $cmp438=(($319)|0) < (($320)|0);
                  if ($cmp438) {
                    var $321=HEAP32[((5243732)>>2)];
                    var $inc441=((($321)+(1))|0);
                    HEAP32[((5243732)>>2)]=$inc441;
                    var $322=$argv_addr;
                    var $arrayidx442=(($322+($321<<2))|0);
                    var $323=HEAP32[(($arrayidx442)>>2)];
                    HEAP32[((5243740)>>2)]=$323;
                    break;
                  }
                  var $324=HEAP32[((5243736)>>2)];
                  var $tobool444=(($324)|0)!=0;
                  if ($tobool444) {
                    var $325=HEAP32[((_stderr)>>2)];
                    var $326=$argv_addr;
                    var $arrayidx446=(($326)|0);
                    var $327=HEAP32[(($arrayidx446)>>2)];
                    var $328=HEAP32[((5243732)>>2)];
                    var $sub447=((($328)-(1))|0);
                    var $329=$argv_addr;
                    var $arrayidx448=(($329+($sub447<<2))|0);
                    var $330=HEAP32[(($arrayidx448)>>2)];
                    var $call449=_fprintf($325, ((5257112)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$327,HEAP32[(((tempInt)+(4))>>2)]=$330,tempInt));
                  }
                  var $331=HEAP32[((5243812)>>2)];
                  var $call451=_strlen($331);
                  var $332=HEAP32[((5243812)>>2)];
                  var $add_ptr452=(($332+$call451)|0);
                  HEAP32[((5243812)>>2)]=$add_ptr452;
                  var $333=$optstring_addr;
                  var $arrayidx453=(($333)|0);
                  var $334=HEAP8[($arrayidx453)];
                  var $conv454=(($334 << 24) >> 24);
                  var $cmp455=(($conv454)|0)==58;
                  var $cond457=$cmp455 ? 58 : 63;
                  $retval=$cond457;
                  var $374=$retval;
                  STACKTOP = __stackBase__;
                  return $374;
                }
              } while(0);
            }
          } while(0);
          var $335=HEAP32[((5243812)>>2)];
          var $call461=_strlen($335);
          var $336=HEAP32[((5243812)>>2)];
          var $add_ptr462=(($336+$call461)|0);
          HEAP32[((5243812)>>2)]=$add_ptr462;
          var $337=$longind_addr;
          var $cmp463=(($337)|0)!=0;
          if ($cmp463) {
            var $338=$option_index326;
            var $339=$longind_addr;
            HEAP32[(($339)>>2)]=$338;
          }
          var $340=$pfound322;
          var $flag467=(($340+8)|0);
          var $341=HEAP32[(($flag467)>>2)];
          var $tobool468=(($341)|0)!=0;
          if ($tobool468) {
            var $342=$pfound322;
            var $val470=(($342+12)|0);
            var $343=HEAP32[(($val470)>>2)];
            var $344=$pfound322;
            var $flag471=(($344+8)|0);
            var $345=HEAP32[(($flag471)>>2)];
            HEAP32[(($345)>>2)]=$343;
            $retval=0;
            var $374=$retval;
            STACKTOP = __stackBase__;
            return $374;
          } else {
            var $346=$pfound322;
            var $val473=(($346+12)|0);
            var $347=HEAP32[(($val473)>>2)];
            $retval=$347;
            var $374=$retval;
            STACKTOP = __stackBase__;
            return $374;
          }
        }
      } while(0);
      var $348=$temp;
      var $arrayidx476=(($348+1)|0);
      var $349=HEAP8[($arrayidx476)];
      var $conv477=(($349 << 24) >> 24);
      var $cmp478=(($conv477)|0)==58;
      if ($cmp478) {
        var $350=$temp;
        var $arrayidx481=(($350+2)|0);
        var $351=HEAP8[($arrayidx481)];
        var $conv482=(($351 << 24) >> 24);
        var $cmp483=(($conv482)|0)==58;
        if ($cmp483) {
          var $352=HEAP32[((5243812)>>2)];
          var $353=HEAP8[($352)];
          var $conv486=(($353 << 24) >> 24);
          var $cmp487=(($conv486)|0)!=0;
          if ($cmp487) {
            var $354=HEAP32[((5243812)>>2)];
            HEAP32[((5243740)>>2)]=$354;
            var $355=HEAP32[((5243732)>>2)];
            var $inc490=((($355)+(1))|0);
            HEAP32[((5243732)>>2)]=$inc490;
          } else {
            HEAP32[((5243740)>>2)]=0;
          }
          HEAP32[((5243812)>>2)]=0;
        } else {
          var $356=HEAP32[((5243812)>>2)];
          var $357=HEAP8[($356)];
          var $conv494=(($357 << 24) >> 24);
          var $cmp495=(($conv494)|0)!=0;
          if ($cmp495) {
            var $358=HEAP32[((5243812)>>2)];
            HEAP32[((5243740)>>2)]=$358;
            var $359=HEAP32[((5243732)>>2)];
            var $inc498=((($359)+(1))|0);
            HEAP32[((5243732)>>2)]=$inc498;
          } else {
            var $360=HEAP32[((5243732)>>2)];
            var $361=$argc_addr;
            var $cmp500=(($360)|0)==(($361)|0);
            if ($cmp500) {
              var $362=HEAP32[((5243736)>>2)];
              var $tobool503=(($362)|0)!=0;
              if ($tobool503) {
                var $363=HEAP32[((_stderr)>>2)];
                var $364=$argv_addr;
                var $arrayidx505=(($364)|0);
                var $365=HEAP32[(($arrayidx505)>>2)];
                var $366=$c;
                var $conv506=(($366 << 24) >> 24);
                var $call507=_fprintf($363, ((5267584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$365,HEAP32[(((tempInt)+(4))>>2)]=$conv506,tempInt));
              }
              var $367=$c;
              var $conv509=(($367 << 24) >> 24);
              HEAP32[((5243728)>>2)]=$conv509;
              var $368=$optstring_addr;
              var $arrayidx510=(($368)|0);
              var $369=HEAP8[($arrayidx510)];
              var $conv511=(($369 << 24) >> 24);
              var $cmp512=(($conv511)|0)==58;
              if ($cmp512) {
                $c=58;
              } else {
                $c=63;
              }
            } else {
              var $370=HEAP32[((5243732)>>2)];
              var $inc518=((($370)+(1))|0);
              HEAP32[((5243732)>>2)]=$inc518;
              var $371=$argv_addr;
              var $arrayidx519=(($371+($370<<2))|0);
              var $372=HEAP32[(($arrayidx519)>>2)];
              HEAP32[((5243740)>>2)]=$372;
            }
          }
          HEAP32[((5243812)>>2)]=0;
        }
      }
      var $373=$c;
      var $conv524=(($373 << 24) >> 24);
      $retval=$conv524;
      var $374=$retval;
      STACKTOP = __stackBase__;
      return $374;
    }
  } while(0);
  var $231=HEAP32[((5243736)>>2)];
  var $tobool295=(($231)|0)!=0;
  if ($tobool295) {
    var $232=HEAP32[((5243672)>>2)];
    var $tobool297=(($232)|0)!=0;
    if ($tobool297) {
      var $233=HEAP32[((_stderr)>>2)];
      var $234=$argv_addr;
      var $arrayidx299=(($234)|0);
      var $235=HEAP32[(($arrayidx299)>>2)];
      var $236=$c;
      var $conv300=(($236 << 24) >> 24);
      var $call301=_fprintf($233, ((5253984)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$235,HEAP32[(((tempInt)+(4))>>2)]=$conv300,tempInt));
    } else {
      var $237=HEAP32[((_stderr)>>2)];
      var $238=$argv_addr;
      var $arrayidx303=(($238)|0);
      var $239=HEAP32[(($arrayidx303)>>2)];
      var $240=$c;
      var $conv304=(($240 << 24) >> 24);
      var $call305=_fprintf($237, ((5253164)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$239,HEAP32[(((tempInt)+(4))>>2)]=$conv304,tempInt));
    }
  }
  var $241=$c;
  var $conv308=(($241 << 24) >> 24);
  HEAP32[((5243728)>>2)]=$conv308;
  $retval=63;
  var $374=$retval;
  STACKTOP = __stackBase__;
  return $374;
}
__getopt_internal["X"]=1;

function _exchange($argv) {
  var label = 0;

  var $argv_addr;
  var $bottom;
  var $middle;
  var $top;
  var $tem;
  var $len;
  var $i;
  var $len17;
  var $i19;
  $argv_addr=$argv;
  var $0=HEAP32[((5248820)>>2)];
  $bottom=$0;
  var $1=HEAP32[((5244204)>>2)];
  $middle=$1;
  var $2=HEAP32[((5243732)>>2)];
  $top=$2;
  while(1) {
    var $3=$top;
    var $4=$middle;
    var $cmp=(($3)|0) > (($4)|0);
    if ($cmp) {
      var $5=$middle;
      var $6=$bottom;
      var $cmp1=(($5)|0) > (($6)|0);
      var $7 = $cmp1;
    } else {
      var $7 = 0;
    }
    var $7;
    if (!($7)) {
      break;
    }
    var $8=$top;
    var $9=$middle;
    var $sub=((($8)-($9))|0);
    var $10=$middle;
    var $11=$bottom;
    var $sub2=((($10)-($11))|0);
    var $cmp3=(($sub)|0) > (($sub2)|0);
    if ($cmp3) {
      var $12=$middle;
      var $13=$bottom;
      var $sub4=((($12)-($13))|0);
      $len=$sub4;
      $i=0;
      while(1) {
        var $14=$i;
        var $15=$len;
        var $cmp5=(($14)|0) < (($15)|0);
        if (!($cmp5)) {
          break;
        }
        var $16=$bottom;
        var $17=$i;
        var $add=((($16)+($17))|0);
        var $18=$argv_addr;
        var $arrayidx=(($18+($add<<2))|0);
        var $19=HEAP32[(($arrayidx)>>2)];
        $tem=$19;
        var $20=$top;
        var $21=$middle;
        var $22=$bottom;
        var $sub6=((($21)-($22))|0);
        var $sub7=((($20)-($sub6))|0);
        var $23=$i;
        var $add8=((($sub7)+($23))|0);
        var $24=$argv_addr;
        var $arrayidx9=(($24+($add8<<2))|0);
        var $25=HEAP32[(($arrayidx9)>>2)];
        var $26=$bottom;
        var $27=$i;
        var $add10=((($26)+($27))|0);
        var $28=$argv_addr;
        var $arrayidx11=(($28+($add10<<2))|0);
        HEAP32[(($arrayidx11)>>2)]=$25;
        var $29=$tem;
        var $30=$top;
        var $31=$middle;
        var $32=$bottom;
        var $sub12=((($31)-($32))|0);
        var $sub13=((($30)-($sub12))|0);
        var $33=$i;
        var $add14=((($sub13)+($33))|0);
        var $34=$argv_addr;
        var $arrayidx15=(($34+($add14<<2))|0);
        HEAP32[(($arrayidx15)>>2)]=$29;
        var $35=$i;
        var $inc=((($35)+(1))|0);
        $i=$inc;
      }
      var $36=$len;
      var $37=$top;
      var $sub16=((($37)-($36))|0);
      $top=$sub16;
    } else {
      var $38=$top;
      var $39=$middle;
      var $sub18=((($38)-($39))|0);
      $len17=$sub18;
      $i19=0;
      while(1) {
        var $40=$i19;
        var $41=$len17;
        var $cmp21=(($40)|0) < (($41)|0);
        if (!($cmp21)) {
          break;
        }
        var $42=$bottom;
        var $43=$i19;
        var $add23=((($42)+($43))|0);
        var $44=$argv_addr;
        var $arrayidx24=(($44+($add23<<2))|0);
        var $45=HEAP32[(($arrayidx24)>>2)];
        $tem=$45;
        var $46=$middle;
        var $47=$i19;
        var $add25=((($46)+($47))|0);
        var $48=$argv_addr;
        var $arrayidx26=(($48+($add25<<2))|0);
        var $49=HEAP32[(($arrayidx26)>>2)];
        var $50=$bottom;
        var $51=$i19;
        var $add27=((($50)+($51))|0);
        var $52=$argv_addr;
        var $arrayidx28=(($52+($add27<<2))|0);
        HEAP32[(($arrayidx28)>>2)]=$49;
        var $53=$tem;
        var $54=$middle;
        var $55=$i19;
        var $add29=((($54)+($55))|0);
        var $56=$argv_addr;
        var $arrayidx30=(($56+($add29<<2))|0);
        HEAP32[(($arrayidx30)>>2)]=$53;
        var $57=$i19;
        var $inc32=((($57)+(1))|0);
        $i19=$inc32;
      }
      var $58=$len17;
      var $59=$bottom;
      var $add34=((($59)+($58))|0);
      $bottom=$add34;
    }
  }
  var $60=HEAP32[((5243732)>>2)];
  var $61=HEAP32[((5244204)>>2)];
  var $sub35=((($60)-($61))|0);
  var $62=HEAP32[((5248820)>>2)];
  var $add36=((($62)+($sub35))|0);
  HEAP32[((5248820)>>2)]=$add36;
  var $63=HEAP32[((5243732)>>2)];
  HEAP32[((5244204)>>2)]=$63;

  return;
}
_exchange["X"]=1;

function _my_index($str, $chr) {
  var label = 0;

  var $retval;
  var $str_addr;
  var $chr_addr;
  $str_addr=$str;
  $chr_addr=$chr;
  while(1) {
    var $0=$str_addr;
    var $1=HEAP8[($0)];
    var $tobool=(($1 << 24) >> 24)!=0;
    if (!($tobool)) {
      label = 237;
      break;
    }
    var $2=$str_addr;
    var $3=HEAP8[($2)];
    var $conv=(($3 << 24) >> 24);
    var $4=$chr_addr;
    var $cmp=(($conv)|0)==(($4)|0);
    if ($cmp) {
      label = 235;
      break;
    }
    var $6=$str_addr;
    var $incdec_ptr=(($6+1)|0);
    $str_addr=$incdec_ptr;
  }
  if (label == 235) {
    var $5=$str_addr;
    $retval=$5;
    var $7=$retval;

    return $7;
  }
  else if (label == 237) {
    $retval=0;
    var $7=$retval;

    return $7;
  }
}


function __getopt_initialize($argc, $argv, $optstring) {
  var label = 0;

  var $argc_addr;
  var $argv_addr;
  var $optstring_addr;
  $argc_addr=$argc;
  $argv_addr=$argv;
  $optstring_addr=$optstring;
  HEAP32[((5243732)>>2)]=1;
  HEAP32[((5244204)>>2)]=1;
  HEAP32[((5248820)>>2)]=1;
  HEAP32[((5243812)>>2)]=0;
  var $call=_getenv(((5266068)|0));
  HEAP32[((5243672)>>2)]=$call;
  var $0=$optstring_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAP8[($arrayidx)];
  var $conv=(($1 << 24) >> 24);
  var $cmp=(($conv)|0)==45;
  if ($cmp) {
    HEAP32[((5243724)>>2)]=2;
    var $2=$optstring_addr;
    var $incdec_ptr=(($2+1)|0);
    $optstring_addr=$incdec_ptr;
    var $7=$optstring_addr;

    return $7;
  }
  var $3=$optstring_addr;
  var $arrayidx2=(($3)|0);
  var $4=HEAP8[($arrayidx2)];
  var $conv3=(($4 << 24) >> 24);
  var $cmp4=(($conv3)|0)==43;
  if ($cmp4) {
    HEAP32[((5243724)>>2)]=0;
    var $5=$optstring_addr;
    var $incdec_ptr7=(($5+1)|0);
    $optstring_addr=$incdec_ptr7;
  } else {
    var $6=HEAP32[((5243672)>>2)];
    var $cmp9=(($6)|0)!=0;
    if ($cmp9) {
      HEAP32[((5243724)>>2)]=0;
    } else {
      HEAP32[((5243724)>>2)]=1;
    }
  }
  var $7=$optstring_addr;

  return $7;
}


function _getopt_long_only($argc, $argv, $options, $long_options, $opt_index) {
  var label = 0;

  var $argc_addr;
  var $argv_addr;
  var $options_addr;
  var $long_options_addr;
  var $opt_index_addr;
  $argc_addr=$argc;
  $argv_addr=$argv;
  $options_addr=$options;
  $long_options_addr=$long_options;
  $opt_index_addr=$opt_index;
  var $0=$argc_addr;
  var $1=$argv_addr;
  var $2=$options_addr;
  var $3=$long_options_addr;
  var $4=$opt_index_addr;
  var $call=__getopt_internal($0, $1, $2, $3, $4, 1);

  return $call;
}


function _kpathsea_selfdir($kpse, $argv0) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $argv0_addr;
  var $self;
  var $name;
  var $ret;
  var $elt;
  var $s=__stackBase__;
  $kpse_addr=$kpse;
  $argv0_addr=$argv0;
  $self=0;
  var $0=$kpse_addr;
  var $1=$argv0_addr;
  var $call=_kpathsea_absolute_p($0, $1, 1);
  var $tobool=(($call)|0)!=0;
  if ($tobool) {
    var $2=$argv0_addr;
    var $call1=_xstrdup($2);
    $self=$call1;
  } else {
    var $3=$kpse_addr;
    var $call2=_getenv(((5257240)|0));
    var $call3=_kpathsea_path_element($3, $call2);
    $elt=$call3;
    while(1) {
      var $4=$self;
      var $tobool4=(($4)|0)!=0;
      if ($tobool4) {
        var $6 = 0;
      } else {
        var $5=$elt;
        var $tobool5=(($5)|0)!=0;
        var $6 = $tobool5;
      }
      var $6;
      if (!($6)) {
        break;
      }
      var $7=$elt;
      var $8=HEAP8[($7)];
      var $conv=(($8 << 24) >> 24);
      var $cmp=(($conv)|0)==0;
      if ($cmp) {
        $elt=((5265700)|0);
      }
      var $9=$elt;
      var $10=$argv0_addr;
      var $call8=_concat3($9, ((5261476)|0), $10);
      $name=$call8;
      var $11=$name;
      var $call9=_stat($11, $s);
      var $cmp10=(($call9)|0)==0;
      do {
        if ($cmp10) {
          var $st_mode=(($s+8)|0);
          var $12=HEAP32[(($st_mode)>>2)];
          var $and=$12 & 73;
          var $tobool12=(($and)|0)!=0;
          if (!($tobool12)) {
            label = 266;
            break;
          }
          var $st_mode14=(($s+8)|0);
          var $13=HEAP32[(($st_mode14)>>2)];
          var $and15=$13 & 61440;
          var $cmp16=(($and15)|0)==16384;
          if ($cmp16) {
            label = 266;
            break;
          }
          var $14=$name;
          $self=$14;
          break;
        } else {
          label = 266;
        }
      } while(0);
      if (label == 266) {
        label = 0;
        var $15=$name;
        _free($15);
      }
      var $16=$kpse_addr;
      var $call21=_kpathsea_path_element($16, 0);
      $elt=$call21;
    }
  }
  var $17=$self;
  var $tobool23=(($17)|0)!=0;
  if ($tobool23) {
    var $19=$kpse_addr;
    var $20=$kpse_addr;
    var $21=$self;
    var $call27=_expand_symlinks($20, $21);
    var $call28=_remove_dots($19, $call27);
    $name=$call28;
    var $22=$self;
    _free($22);
    var $23=$name;
    var $call29=_xdirname($23);
    $ret=$call29;
    var $24=$name;
    _free($24);
    var $25=$ret;
    STACKTOP = __stackBase__;
    return $25;
  }
  var $18=$argv0_addr;
  var $call25=_concat3(((5265700)|0), ((5261476)|0), $18);
  $self=$call25;
  var $19=$kpse_addr;
  var $20=$kpse_addr;
  var $21=$self;
  var $call27=_expand_symlinks($20, $21);
  var $call28=_remove_dots($19, $call27);
  $name=$call28;
  var $22=$self;
  _free($22);
  var $23=$name;
  var $call29=_xdirname($23);
  $ret=$call29;
  var $24=$name;
  _free($24);
  var $25=$ret;
  STACKTOP = __stackBase__;
  return $25;
}
_kpathsea_selfdir["X"]=1;

function _remove_dots($kpse, $dir) {
  var label = 0;

  var $kpse_addr;
  var $dir_addr;
  var $c;
  var $len;
  var $ret;
  var $dot;
  var $last;
  var $p;
  var $temp;
  $kpse_addr=$kpse;
  $dir_addr=$dir;
  $ret=0;
  var $0=$kpse_addr;
  var $1=$dir_addr;
  var $call=_kpathsea_filename_component($0, $1);
  $c=$call;
  while(1) {
    var $2=$c;
    var $tobool=(($2)|0)!=0;
    if (!($tobool)) {
      break;
    }
    var $3=$c;
    var $cmp=(($3)|0)!=0;
    do {
      if ($cmp) {
        var $4=$c;
        var $call1=_strcmp($4, ((5265700)|0));
        var $cmp2=(($call1)|0)==0;
        if (!($cmp2)) {
          label = 282;
          break;
        }
        var $5=$ret;
        var $tobool3=(($5)|0)!=0;
        if (!($tobool3)) {
          var $call5=_xgetcwd();
          $ret=$call5;
        }
        break;
      } else {
        label = 282;
      }
    } while(0);
    if (label == 282) {
      label = 0;
      var $6=$c;
      var $cmp6=(($6)|0)!=0;
      do {
        if ($cmp6) {
          var $7=$c;
          var $call8=_strcmp($7, ((5265664)|0));
          var $cmp9=(($call8)|0)==0;
          if (!($cmp9)) {
            label = 297;
            break;
          }
          var $8=$ret;
          var $tobool11=(($8)|0)!=0;
          if ($tobool11) {
            var $11=$ret;
            $p=$11;
            var $12=$p;
            var $call16=_strlen($12);
            $last=$call16;
            while(1) {
              var $13=$last;
              var $cmp18=(($13)>>>0) > 0;
              if (!($cmp18)) {
                break;
              }
              var $14=$last;
              var $sub=((($14)-(1))|0);
              var $15=$p;
              var $arrayidx=(($15+$sub)|0);
              var $16=HEAP8[($arrayidx)];
              var $conv=(($16 << 24) >> 24);
              var $cmp20=(($conv)|0)==47;
              if ($cmp20) {
                label = 289;
                break;
              }
              var $20=$last;
              var $dec=((($20)-(1))|0);
              $last=$dec;
            }
            if (label == 289) {
              label = 0;
              var $17=$last;
              var $cmp23=(($17)>>>0) > 1;
              if ($cmp23) {
                var $18=$last;
                var $sub25=((($18)-(1))|0);
                var $cond = $sub25;
              } else {
                var $cond = 1;
              }
              var $cond;
              var $19=$p;
              var $arrayidx26=(($19+$cond)|0);
              HEAP8[($arrayidx26)]=0;
            }
          } else {
            var $call13=_xgetcwd();
            $dot=$call13;
            var $9=$dot;
            var $call14=_xdirname($9);
            $ret=$call14;
            var $10=$dot;
            _free($10);
          }
          break;
        } else {
          label = 297;
        }
      } while(0);
      if (label == 297) {
        label = 0;
        var $21=$ret;
        var $tobool30=(($21)|0)!=0;
        if ($tobool30) {
          var $23=$ret;
          $temp=$23;
          var $24=$ret;
          var $call34=_strlen($24);
          $len=$call34;
          var $25=$ret;
          var $26=$len;
          var $sub35=((($26)-(1))|0);
          var $27=$ret;
          var $arrayidx36=(($27+$sub35)|0);
          var $28=HEAP8[($arrayidx36)];
          var $conv37=(($28 << 24) >> 24);
          var $cmp38=(($conv37)|0)==47;
          var $cond40=$cmp38 ? (((5253160)|0)) : (((5261476)|0));
          var $29=$c;
          var $call41=_concat3($25, $cond40, $29);
          $ret=$call41;
          var $30=$temp;
          _free($30);
        } else {
          var $22=$c;
          var $call32=_concat(((5261476)|0), $22);
          $ret=$call32;
        }
      }
    }
    var $31=$kpse_addr;
    var $call46=_kpathsea_filename_component($31, 0);
    $c=$call46;
  }
  var $32=$ret;
  var $call48=_strlen($32);
  $len=$call48;
  var $33=$len;
  var $cmp49=(($33)>>>0) > 0;
  if (!($cmp49)) {
    var $39=$ret;

    return $39;
  }
  var $34=$len;
  var $sub52=((($34)-(1))|0);
  var $35=$ret;
  var $arrayidx53=(($35+$sub52)|0);
  var $36=HEAP8[($arrayidx53)];
  var $conv54=(($36 << 24) >> 24);
  var $cmp55=(($conv54)|0)==47;
  if (!($cmp55)) {
    var $39=$ret;

    return $39;
  }
  var $37=$len;
  var $sub58=((($37)-(1))|0);
  var $38=$ret;
  var $arrayidx59=(($38+$sub58)|0);
  HEAP8[($arrayidx59)]=0;
  var $39=$ret;

  return $39;
}
_remove_dots["X"]=1;

function _fix_selfdir($dir) {
  var label = 0;

  var $dir_addr;
  $dir_addr=$dir;
  var $0=$dir_addr;

  return $0;
}


function _kpathsea_set_program_enabled($kpse, $fmt, $value, $level) {
  var label = 0;

  var $kpse_addr;
  var $fmt_addr;
  var $value_addr;
  var $level_addr;
  var $f;
  $kpse_addr=$kpse;
  $fmt_addr=$fmt;
  $value_addr=$value;
  $level_addr=$level;
  var $0=$fmt_addr;
  var $1=$kpse_addr;
  var $format_info=(($1+132)|0);
  var $arrayidx=(($format_info+($0)*(68))|0);
  $f=$arrayidx;
  var $2=$level_addr;
  var $3=$f;
  var $program_enable_level=(($3+60)|0);
  var $4=HEAP32[(($program_enable_level)>>2)];
  var $cmp=(($2)>>>0) >= (($4)>>>0);
  if (!($cmp)) {

    return;
  }
  var $5=$value_addr;
  var $6=$f;
  var $program_enabled_p=(($6+56)|0);
  HEAP32[(($program_enabled_p)>>2)]=$5;
  var $7=$level_addr;
  var $8=$f;
  var $program_enable_level1=(($8+60)|0);
  HEAP32[(($program_enable_level1)>>2)]=$7;

  return;
}


function _expand_symlinks($kpse, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8264)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $retval;
  var $kpse_addr;
  var $s_addr;
  var $post=__stackBase__;
  var $sym=(__stackBase__)+(2048);
  var $tmp=(__stackBase__)+(4096);
  var $before=(__stackBase__)+(6144);
  var $cp;
  var $a;
  var $st=(__stackBase__)+(8192);
  var $done;
  $kpse_addr=$kpse;
  $s_addr=$s;
  var $arraydecay=(($post)|0);
  var $0=$s_addr;
  var $call=_strcpy($arraydecay, $0);
  var $call6=_strcpy(((5248848)|0), ((5253160)|0));
  while(1) {
    var $arraydecay7=(($post)|0);
    var $call8=_strlen($arraydecay7);
    var $cmp=(($call8)|0)!=0;
    if (!($cmp)) {
      label = 379;
      break;
    }
    var $arraydecay9=(($post)|0);
    _CopyFirst(((5248848)|0), $arraydecay9);
    var $call10=_lstat(((5248848)|0), $st);
    var $cmp11=(($call10)|0)!=0;
    if ($cmp11) {
      label = 320;
      break;
    }
    var $st_mode=(($st+8)|0);
    var $2=HEAP32[(($st_mode)>>2)];
    var $and=$2 & 61440;
    var $cmp13=(($and)|0)==40960;
    if ($cmp13) {
      var $arraydecay15=(($sym)|0);
      _ReadSymLink(((5248848)|0), $arraydecay15);
      var $arraydecay16=(($sym)|0);
      var $call17=_strncmp($arraydecay16, ((5261476)|0), 1);
      var $tobool=(($call17)|0)!=0;
      if ($tobool) {
        var $7=HEAP8[(((5248848)|0))];
        $a=$7;
        var $arraydecay42=(($tmp)|0);
        var $call43=_StripLast(((5248848)|0));
        var $call44=_strcpy($arraydecay42, $call43);
        var $call45=_strlen(((5248848)|0));
        var $tobool46=(($call45)|0)!=0;
        do {
          if (!($tobool46)) {
            var $8=$a;
            var $conv=(($8 << 24) >> 24);
            var $cmp47=(($conv)|0)==47;
            if (!($cmp47)) {
              break;
            }
            var $call50=_strcpy(((5248848)|0), ((5261476)|0));
          }
        } while(0);
        var $9=$kpse_addr;
        var $ll_verbose52=(($9+116)|0);
        var $10=HEAP32[(($ll_verbose52)>>2)];
        var $tobool53=(($10)|0)!=0;
        if ($tobool53) {
          var $arraydecay55=(($before)|0);
          var $call56=_strlen(((5248848)|0));
          var $tobool57=(($call56)|0)!=0;
          if ($tobool57) {
            var $call59=_strcmp(((5248848)|0), ((5261476)|0));
            var $tobool60=(($call59)|0)!=0;
            var $11 = $tobool60;
          } else {
            var $11 = 0;
          }
          var $11;
          var $cond62=$11 ? (((5261476)|0)) : (((5253160)|0));
          var $arraydecay63=(($tmp)|0);
          var $arraydecay64=(($post)|0);
          var $call65=_strlen($arraydecay64);
          var $tobool66=(($call65)|0)!=0;
          if ($tobool66) {
            var $arraydecay68=(($post)|0);
            var $call69=_strcmp($arraydecay68, ((5261476)|0));
            var $tobool70=(($call69)|0)!=0;
            var $12 = $tobool70;
          } else {
            var $12 = 0;
          }
          var $12;
          var $cond72=$12 ? (((5261476)|0)) : (((5253160)|0));
          var $arraydecay73=(($post)|0);
          var $call74=_sprintf($arraydecay55, ((5266472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5248848)|0),HEAP32[(((tempInt)+(4))>>2)]=$cond62,HEAP32[(((tempInt)+(8))>>2)]=$arraydecay63,HEAP32[(((tempInt)+(12))>>2)]=$cond72,HEAP32[(((tempInt)+(16))>>2)]=$arraydecay73,tempInt));
          var $arraydecay75=(($before)|0);
          var $call76=_strlen(((5248848)|0));
          var $tobool77=(($call76)|0)!=0;
          if ($tobool77) {
            var $call79=_strcmp(((5248848)|0), ((5261476)|0));
            var $tobool80=(($call79)|0)!=0;
            var $13 = $tobool80;
          } else {
            var $13 = 0;
          }
          var $13;
          var $cond82=$13 ? (((5261476)|0)) : (((5253160)|0));
          var $arraydecay83=(($sym)|0);
          var $arraydecay84=(($post)|0);
          var $call85=_strlen($arraydecay84);
          var $tobool86=(($call85)|0)!=0;
          if ($tobool86) {
            var $arraydecay88=(($post)|0);
            var $call89=_strcmp($arraydecay88, ((5261476)|0));
            var $tobool90=(($call89)|0)!=0;
            var $14 = $tobool90;
          } else {
            var $14 = 0;
          }
          var $14;
          var $cond92=$14 ? (((5261476)|0)) : (((5253160)|0));
          var $arraydecay93=(($post)|0);
          var $call94=_printf(((5266048)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$arraydecay75,HEAP32[(((tempInt)+(4))>>2)]=((5248848)|0),HEAP32[(((tempInt)+(8))>>2)]=$cond82,HEAP32[(((tempInt)+(12))>>2)]=$arraydecay83,HEAP32[(((tempInt)+(16))>>2)]=$cond92,HEAP32[(((tempInt)+(20))>>2)]=$arraydecay93,tempInt));
        }
        $done=0;
        var $15=HEAP8[(((5248848)|0))];
        $a=$15;
        while(1) {
          var $arraydecay97=(($sym)|0);
          var $call98=_strncmp($arraydecay97, ((5265664)|0), 2);
          var $tobool99=(($call98)|0)!=0;
          do {
            if ($tobool99) {
              var $19 = 0;
            } else {
              var $arrayidx=(($sym+2)|0);
              var $16=HEAP8[($arrayidx)];
              var $conv101=(($16 << 24) >> 24);
              var $cmp102=(($conv101)|0)==0;
              if (!($cmp102)) {
                var $arrayidx104=(($sym+2)|0);
                var $17=HEAP8[($arrayidx104)];
                var $conv105=(($17 << 24) >> 24);
                var $cmp106=(($conv105)|0)==47;
                if (!($cmp106)) {
                  var $19 = 0;
                  break;
                }
              }
              var $call109=_strlen(((5248848)|0));
              var $cmp110=(($call109)|0)!=0;
              if (!($cmp110)) {
                var $19 = 0;
                break;
              }
              var $call113=_strcmp(((5248848)|0), ((5265700)|0));
              var $tobool114=(($call113)|0)!=0;
              if (!($tobool114)) {
                var $19 = 0;
                break;
              }
              var $call116=_strcmp(((5248848)|0), ((5265664)|0));
              var $tobool117=(($call116)|0)!=0;
              if (!($tobool117)) {
                var $19 = 0;
                break;
              }
              var $call119=_strlen(((5248848)|0));
              var $cmp120=(($call119)>>>0) < 3;
              if ($cmp120) {
                var $18 = 1;
              } else {
                var $call122=_strlen(((5248848)|0));
                var $add_ptr=((((5248848)|0)+$call122)|0);
                var $add_ptr123=((($add_ptr)-(3))|0);
                var $call124=_strcmp($add_ptr123, ((5265364)|0));
                var $tobool125=(($call124)|0)!=0;
                var $18 = $tobool125;
              }
              var $18;
              var $19 = $18;
            }
          } while(0);
          var $19;
          if (!($19)) {
            break;
          }
          $done=1;
          var $arraydecay128=(($sym)|0);
          var $call129=_StripFirst($arraydecay128);
          var $call130=_StripLast(((5248848)|0));
        }
        var $20=$done;
        var $tobool131=(($20)|0)!=0;
        do {
          if ($tobool131) {
            var $21=$kpse_addr;
            var $ll_verbose133=(($21+116)|0);
            var $22=HEAP32[(($ll_verbose133)>>2)];
            var $tobool134=(($22)|0)!=0;
            if (!($tobool134)) {
              break;
            }
            var $arraydecay136=(($before)|0);
            $cp=$arraydecay136;
            while(1) {
              var $23=$cp;
              var $24=HEAP8[($23)];
              var $tobool137=(($24 << 24) >> 24)!=0;
              if (!($tobool137)) {
                break;
              }
              var $25=$cp;
              var $incdec_ptr=(($25+1)|0);
              $cp=$incdec_ptr;
              HEAP8[($25)]=32;
            }
            var $arraydecay138=(($sym)|0);
            var $call139=_strlen($arraydecay138);
            var $tobool140=(($call139)|0)!=0;
            if ($tobool140) {
              var $arraydecay142=(($before)|0);
              var $call143=_strlen(((5248848)|0));
              var $tobool144=(($call143)|0)!=0;
              if ($tobool144) {
                var $call146=_strcmp(((5248848)|0), ((5261476)|0));
                var $tobool147=(($call146)|0)!=0;
                var $26 = $tobool147;
              } else {
                var $26 = 0;
              }
              var $26;
              var $cond149=$26 ? (((5261476)|0)) : (((5253160)|0));
              var $arraydecay150=(($sym)|0);
              var $arraydecay151=(($post)|0);
              var $call152=_strlen($arraydecay151);
              var $tobool153=(($call152)|0)!=0;
              if ($tobool153) {
                var $arraydecay155=(($post)|0);
                var $call156=_strcmp($arraydecay155, ((5261476)|0));
                var $tobool157=(($call156)|0)!=0;
                var $27 = $tobool157;
              } else {
                var $27 = 0;
              }
              var $27;
              var $cond159=$27 ? (((5261476)|0)) : (((5253160)|0));
              var $arraydecay160=(($post)|0);
              var $call161=_printf(((5265048)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$arraydecay142,HEAP32[(((tempInt)+(4))>>2)]=((5248848)|0),HEAP32[(((tempInt)+(8))>>2)]=$cond149,HEAP32[(((tempInt)+(12))>>2)]=$arraydecay150,HEAP32[(((tempInt)+(16))>>2)]=$cond159,HEAP32[(((tempInt)+(20))>>2)]=$arraydecay160,tempInt));
            } else {
              var $arraydecay163=(($before)|0);
              var $arraydecay164=(($post)|0);
              var $call165=_strlen($arraydecay164);
              var $tobool166=(($call165)|0)!=0;
              if ($tobool166) {
                var $arraydecay168=(($post)|0);
                var $call169=_strcmp($arraydecay168, ((5261476)|0));
                var $tobool170=(($call169)|0)!=0;
                var $28 = $tobool170;
              } else {
                var $28 = 0;
              }
              var $28;
              var $cond172=$28 ? (((5261476)|0)) : (((5253160)|0));
              var $arraydecay173=(($post)|0);
              var $call174=_printf(((5264704)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$arraydecay163,HEAP32[(((tempInt)+(4))>>2)]=((5248848)|0),HEAP32[(((tempInt)+(8))>>2)]=$cond172,HEAP32[(((tempInt)+(12))>>2)]=$arraydecay173,tempInt));
            }
          }
        } while(0);
        var $call177=_strlen(((5248848)|0));
        var $tobool178=(($call177)|0)!=0;
        do {
          if (!($tobool178)) {
            var $29=$a;
            var $conv180=(($29 << 24) >> 24);
            var $cmp181=(($conv180)|0)==47;
            if (!($cmp181)) {
              break;
            }
            var $call184=_strcpy(((5248848)|0), ((5261476)|0));
          }
        } while(0);
      } else {
        var $3=$kpse_addr;
        var $ll_verbose=(($3+116)|0);
        var $4=HEAP32[(($ll_verbose)>>2)];
        var $tobool19=(($4)|0)!=0;
        if ($tobool19) {
          var $arraydecay21=(($post)|0);
          var $call22=_strlen($arraydecay21);
          var $tobool23=(($call22)|0)!=0;
          if ($tobool23) {
            var $arraydecay24=(($post)|0);
            var $call25=_strcmp($arraydecay24, ((5261476)|0));
            var $tobool26=(($call25)|0)!=0;
            var $5 = $tobool26;
          } else {
            var $5 = 0;
          }
          var $5;
          var $cond=$5 ? (((5261476)|0)) : (((5253160)|0));
          var $arraydecay27=(($post)|0);
          var $arraydecay28=(($sym)|0);
          var $arraydecay29=(($post)|0);
          var $call30=_strlen($arraydecay29);
          var $tobool31=(($call30)|0)!=0;
          if ($tobool31) {
            var $arraydecay33=(($post)|0);
            var $call34=_strcmp($arraydecay33, ((5261476)|0));
            var $tobool35=(($call34)|0)!=0;
            var $6 = $tobool35;
          } else {
            var $6 = 0;
          }
          var $6;
          var $cond37=$6 ? (((5261476)|0)) : (((5253160)|0));
          var $arraydecay38=(($post)|0);
          var $call39=_printf(((5266948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5248848)|0),HEAP32[(((tempInt)+(4))>>2)]=$cond,HEAP32[(((tempInt)+(8))>>2)]=$arraydecay27,HEAP32[(((tempInt)+(12))>>2)]=$arraydecay28,HEAP32[(((tempInt)+(16))>>2)]=$cond37,HEAP32[(((tempInt)+(20))>>2)]=$arraydecay38,tempInt));
        }
        var $call41=_strcpy(((5248848)|0), ((5253160)|0));
      }
      var $arraydecay187=(($post)|0);
      var $call188=_strlen($arraydecay187);
      var $cmp189=(($call188)|0)!=0;
      do {
        if ($cmp189) {
          var $arraydecay192=(($sym)|0);
          var $call193=_strlen($arraydecay192);
          var $cmp194=(($call193)|0)!=0;
          if (!($cmp194)) {
            break;
          }
          var $arraydecay197=(($sym)|0);
          var $call198=_strcat($arraydecay197, ((5261476)|0));
        }
      } while(0);
      var $arraydecay200=(($sym)|0);
      var $arraydecay201=(($post)|0);
      var $call202=_strcat($arraydecay200, $arraydecay201);
      var $arraydecay203=(($post)|0);
      var $arraydecay204=(($sym)|0);
      var $call205=_strcpy($arraydecay203, $arraydecay204);
    }
  }
  if (label == 320) {
    var $1=HEAP32[((_stderr)>>2)];
    var $call12=_fprintf($1, ((5267560)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5248848)|0),tempInt));
    _perror(((5248848)|0));
    $retval=0;
    var $30=$retval;
    STACKTOP = __stackBase__;
    return $30;
  }
  else if (label == 379) {
    $retval=((5248848)|0);
    var $30=$retval;
    STACKTOP = __stackBase__;
    return $30;
  }
}
_expand_symlinks["X"]=1;

function _kpathsea_set_program_name($kpse, $argv0, $progname) {
  var label = 0;

  var $kpse_addr;
  var $argv0_addr;
  var $progname_addr;
  var $ext;
  var $sdir;
  var $sdir_parent;
  var $sdir_grandparent;
  var $s;
  $kpse_addr=$kpse;
  $argv0_addr=$argv0;
  $progname_addr=$progname;
  var $call=_getenv(((5258104)|0));
  $s=$call;
  var $0=$s;
  var $tobool=(($0)|0)!=0;
  if ($tobool) {
    var $1=$s;
    var $call1=_atoi($1);
    var $2=$kpse_addr;
    var $debug=(($2+44)|0);
    var $3=HEAP32[(($debug)>>2)];
    var $or=$3 | $call1;
    HEAP32[(($debug)>>2)]=$or;
  }
  var $4=$argv0_addr;
  var $call2=_xstrdup($4);
  var $5=$kpse_addr;
  var $invocation_name=(($5+104)|0);
  HEAP32[(($invocation_name)>>2)]=$call2;
  var $6=$kpse_addr;
  var $7=$kpse_addr;
  var $invocation_name3=(($7+104)|0);
  var $8=HEAP32[(($invocation_name3)>>2)];
  var $call4=_kpathsea_selfdir($6, $8);
  $sdir=$call4;
  var $9=$kpse_addr;
  var $10=$sdir;
  var $call5=_fix_selfdir($10);
  _kpathsea_xputenv($9, ((5257100)|0), $call5);
  var $11=$sdir;
  var $call6=_xdirname($11);
  $sdir_parent=$call6;
  var $12=$kpse_addr;
  var $13=$sdir_parent;
  var $call7=_fix_selfdir($13);
  _kpathsea_xputenv($12, ((5256152)|0), $call7);
  var $14=$sdir_parent;
  var $call8=_xdirname($14);
  $sdir_grandparent=$call8;
  var $15=$kpse_addr;
  var $16=$sdir_grandparent;
  var $call9=_fix_selfdir($16);
  _kpathsea_xputenv($15, ((5255436)|0), $call9);
  var $17=$sdir;
  _free($17);
  var $18=$sdir_parent;
  _free($18);
  var $19=$sdir_grandparent;
  _free($19);
  var $20=$kpse_addr;
  var $invocation_name10=(($20+104)|0);
  var $21=HEAP32[(($invocation_name10)>>2)];
  var $call11=_xbasename($21);
  var $call12=_xstrdup($call11);
  var $22=$kpse_addr;
  var $invocation_short_name=(($22+108)|0);
  HEAP32[(($invocation_short_name)>>2)]=$call12;
  var $23=$progname_addr;
  var $tobool13=(($23)|0)!=0;
  if ($tobool13) {
    var $24=$progname_addr;
    var $call15=_xstrdup($24);
    var $25=$kpse_addr;
    var $program_name=(($25+112)|0);
    HEAP32[(($program_name)>>2)]=$call15;
  } else {
    var $26=$kpse_addr;
    var $invocation_short_name16=(($26+108)|0);
    var $27=HEAP32[(($invocation_short_name16)>>2)];
    var $call17=_find_suffix($27);
    $ext=$call17;
    var $28=$ext;
    var $tobool18=(($28)|0)!=0;
    do {
      if ($tobool18) {
        var $29=$ext;
        var $cmp=(($29)|0)!=0;
        if (!($cmp)) {
          label = 391;
          break;
        }
        var $30=$ext;
        var $call20=_strcmp($30, ((5254840)|0));
        var $cmp21=(($call20)|0)==0;
        if (!($cmp21)) {
          label = 391;
          break;
        }
        var $31=$kpse_addr;
        var $invocation_short_name23=(($31+108)|0);
        var $32=HEAP32[(($invocation_short_name23)>>2)];
        var $call24=_remove_suffix($32);
        var $33=$kpse_addr;
        var $program_name25=(($33+112)|0);
        HEAP32[(($program_name25)>>2)]=$call24;
        break;
      } else {
        label = 391;
      }
    } while(0);
    if (label == 391) {
      var $34=$kpse_addr;
      var $invocation_short_name27=(($34+108)|0);
      var $35=HEAP32[(($invocation_short_name27)>>2)];
      var $call28=_xstrdup($35);
      var $36=$kpse_addr;
      var $program_name29=(($36+112)|0);
      HEAP32[(($program_name29)>>2)]=$call28;
    }
  }
  var $37=$kpse_addr;
  var $38=HEAP32[((5248384)>>2)];
  var $cmp32=(($37)|0)!=(($38)|0);
  if (!($cmp32)) {
    var $45=$kpse_addr;
    var $46=$kpse_addr;
    var $program_name41=(($46+112)|0);
    var $47=HEAP32[(($program_name41)>>2)];
    _kpathsea_xputenv($45, ((5253972)|0), $47);

    return;
  }
  var $39=$kpse_addr;
  var $invocation_name34=(($39+104)|0);
  var $40=HEAP32[(($invocation_name34)>>2)];
  var $call35=_xstrdup($40);
  var $41=HEAP32[((5248384)>>2)];
  var $invocation_name36=(($41+104)|0);
  HEAP32[(($invocation_name36)>>2)]=$call35;
  var $42=$kpse_addr;
  var $invocation_short_name37=(($42+108)|0);
  var $43=HEAP32[(($invocation_short_name37)>>2)];
  var $call38=_xstrdup($43);
  var $44=HEAP32[((5248384)>>2)];
  var $invocation_short_name39=(($44+108)|0);
  HEAP32[(($invocation_short_name39)>>2)]=$call38;
  var $45=$kpse_addr;
  var $46=$kpse_addr;
  var $program_name41=(($46+112)|0);
  var $47=HEAP32[(($program_name41)>>2)];
  _kpathsea_xputenv($45, ((5253972)|0), $47);

  return;
}
_kpathsea_set_program_name["X"]=1;

function _kpse_set_program_name($argv0, $progname) {
  var label = 0;

  var $argv0_addr;
  var $progname_addr;
  $argv0_addr=$argv0;
  $progname_addr=$progname;
  var $0=HEAP32[((5248384)>>2)];
  var $1=$argv0_addr;
  var $2=$progname_addr;
  _kpathsea_set_program_name($0, $1, $2);

  return;
}


function _CopyFirst($a, $b) {
  var label = 0;

  var $a_addr;
  var $b_addr;
  var $length;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$a_addr;
  var $call=_strlen($0);
  $length=$call;
  var $1=$length;
  var $cmp=(($1)|0) > 0;
  do {
    if ($cmp) {
      var $2=$length;
      var $sub=((($2)-(1))|0);
      var $3=$a_addr;
      var $arrayidx=(($3+$sub)|0);
      var $4=HEAP8[($arrayidx)];
      var $conv=(($4 << 24) >> 24);
      var $cmp1=(($conv)|0)!=47;
      if (!($cmp1)) {
        break;
      }
      var $5=$length;
      var $6=$a_addr;
      var $arrayidx3=(($6+$5)|0);
      HEAP8[($arrayidx3)]=47;
      var $7=$length;
      var $add=((($7)+(1))|0);
      var $8=$a_addr;
      var $arrayidx4=(($8+$add)|0);
      HEAP8[($arrayidx4)]=0;
    }
  } while(0);
  var $9=$a_addr;
  var $10=$b_addr;
  var $call5=_StripFirst($10);
  var $call6=_strcat($9, $call5);

  return;
}


function _StripLast($s) {
  var label = 0;

  var $s_addr;
  var $s1;
  $s_addr=$s;
  var $0=$s_addr;
  var $1=$s_addr;
  var $call=_strlen($1);
  var $add_ptr=(($0+$call)|0);
  $s1=$add_ptr;
  while(1) {
    var $2=$s1;
    var $3=$s_addr;
    var $cmp=(($2)>>>0) > (($3)>>>0);
    if ($cmp) {
      var $4=$s1;
      var $5=HEAP8[($4)];
      var $conv=(($5 << 24) >> 24);
      var $cmp1=(($conv)|0)!=47;
      var $6 = $cmp1;
    } else {
      var $6 = 0;
    }
    var $6;
    if (!($6)) {
      break;
    }
    var $7=$s1;
    var $incdec_ptr=((($7)-(1))|0);
    $s1=$incdec_ptr;
  }
  var $8=$s1;
  var $9=$s1;
  var $10=HEAP8[($9)];
  var $conv3=(($10 << 24) >> 24);
  var $cmp4=(($conv3)|0)==47;
  var $conv5=(($cmp4)&1);
  var $add_ptr6=(($8+$conv5)|0);
  var $call7=_strcpy(((5268656)|0), $add_ptr6);
  var $11=$s1;
  HEAP8[($11)]=0;

  return ((5268656)|0);
}


function _StripFirst($s) {
  var label = 0;

  var $s_addr;
  var $s1;
  $s_addr=$s;
  var $0=$s_addr;
  $s1=$0;
  while(1) {
    var $1=$s1;
    var $2=HEAP8[($1)];
    var $conv=(($2 << 24) >> 24);
    var $tobool=(($conv)|0)!=0;
    if ($tobool) {
      var $3=$s1;
      var $4=HEAP8[($3)];
      var $conv1=(($4 << 24) >> 24);
      var $cmp=(($conv1)|0)!=47;
      if ($cmp) {
        var $7 = 1;
      } else {
        var $5=$s1;
        var $6=$s_addr;
        var $cmp3=(($5)|0)==(($6)|0);
        var $7 = $cmp3;
      }
      var $7;
      var $8 = $7;
    } else {
      var $8 = 0;
    }
    var $8;
    if (!($8)) {
      break;
    }
    var $9=$s1;
    var $incdec_ptr=(($9+1)|0);
    $s1=$incdec_ptr;
  }
  var $10=$s_addr;
  var $11=$s1;
  var $12=$s_addr;
  var $sub_ptr_lhs_cast=$11;
  var $sub_ptr_rhs_cast=$12;
  var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
  var $call=_strncpy(((5270704)|0), $10, $sub_ptr_sub);
  var $13=$s1;
  var $14=$s_addr;
  var $sub_ptr_lhs_cast5=$13;
  var $sub_ptr_rhs_cast6=$14;
  var $sub_ptr_sub7=((($sub_ptr_lhs_cast5)-($sub_ptr_rhs_cast6))|0);
  var $arrayidx=((5270704+$sub_ptr_sub7)|0);
  HEAP8[($arrayidx)]=0;
  var $15=$s1;
  var $16=HEAP8[($15)];
  var $conv8=(($16 << 24) >> 24);
  var $cmp9=(($conv8)|0)==47;
  if ($cmp9) {
    var $17=$s1;
    var $incdec_ptr11=(($17+1)|0);
    $s1=$incdec_ptr11;
  }
  while(1) {
    var $18=$s1;
    var $incdec_ptr12=(($18+1)|0);
    $s1=$incdec_ptr12;
    var $19=HEAP8[($18)];
    var $20=$s_addr;
    var $incdec_ptr13=(($20+1)|0);
    $s_addr=$incdec_ptr13;
    HEAP8[($20)]=$19;
    var $conv14=(($19 << 24) >> 24);
    var $cmp15=(($conv14)|0)!=0;
    if (!($cmp15)) {
      break;
    }
  }

  return ((5270704)|0);
}
_StripFirst["X"]=1;

function _remove_suffix($s) {
  var label = 0;

  var $s_addr;
  var $ret;
  var $suffix;
  $s_addr=$s;
  var $0=$s_addr;
  var $call=_find_suffix($0);
  $suffix=$call;
  var $1=$suffix;
  var $tobool=(($1)|0)!=0;
  if ($tobool) {
    var $2=$suffix;
    var $incdec_ptr=((($2)-(1))|0);
    $suffix=$incdec_ptr;
    var $3=$suffix;
    var $4=$s_addr;
    var $sub_ptr_lhs_cast=$3;
    var $sub_ptr_rhs_cast=$4;
    var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
    var $add=((($sub_ptr_sub)+(1))|0);
    var $call1=_xmalloc($add);
    $ret=$call1;
    var $5=$ret;
    var $6=$s_addr;
    var $7=$suffix;
    var $8=$s_addr;
    var $sub_ptr_lhs_cast2=$7;
    var $sub_ptr_rhs_cast3=$8;
    var $sub_ptr_sub4=((($sub_ptr_lhs_cast2)-($sub_ptr_rhs_cast3))|0);
    var $call5=_strncpy($5, $6, $sub_ptr_sub4);
    var $9=$suffix;
    var $10=$s_addr;
    var $sub_ptr_lhs_cast6=$9;
    var $sub_ptr_rhs_cast7=$10;
    var $sub_ptr_sub8=((($sub_ptr_lhs_cast6)-($sub_ptr_rhs_cast7))|0);
    var $11=$ret;
    var $arrayidx=(($11+$sub_ptr_sub8)|0);
    HEAP8[($arrayidx)]=0;
    var $13=$ret;

    return $13;
  } else {
    var $12=$s_addr;
    $ret=$12;
    var $13=$ret;

    return $13;
  }
}


function _kpathsea_set_suffixes($kpse, $format, $alternate, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $format_addr;
  var $alternate_addr;
  var $ap=__stackBase__;
  $kpse_addr=$kpse;
  $format_addr=$format;
  $alternate_addr=$alternate;
  var $ap1=$ap;
  HEAP32[(($ap1)>>2)]=varrp;
  var $0=$kpse_addr;
  var $1=$format_addr;
  var $2=$alternate_addr;
  var $3=HEAP32[(($ap)>>2)];
  _kpathsea_set_suffixes_va_list($0, $1, $2, $3);
  var $ap2=$ap;

  STACKTOP = __stackBase__;
  return;
}


function _kpathsea_set_suffixes_va_list($kpse, $format, $alternate, $ap) {
  var label = 0;

  var $kpse_addr;
  var $format_addr;
  var $alternate_addr;
  var $ap_addr;
  var $list;
  var $s;
  var $count;
  $kpse_addr=$kpse;
  $format_addr=$format;
  $alternate_addr=$alternate;
  $ap_addr=$ap;
  $count=0;
  var $0=$alternate_addr;
  var $tobool=(($0)|0)!=0;
  if ($tobool) {
    var $1=$format_addr;
    var $2=$kpse_addr;
    var $format_info=(($2+132)|0);
    var $arrayidx=(($format_info+($1)*(68))|0);
    var $alt_suffix=(($arrayidx+36)|0);
    $list=$alt_suffix;
  } else {
    var $3=$format_addr;
    var $4=$kpse_addr;
    var $format_info1=(($4+132)|0);
    var $arrayidx2=(($format_info1+($3)*(68))|0);
    var $suffix=(($arrayidx2+32)|0);
    $list=$suffix;
  }
  while(1) {
    var $ap_cur=$ap_addr;
    var $5=$ap_cur;
    var $ap_next=(($ap_cur+4)|0);
    $ap_addr=$ap_next;
    var $6=HEAP32[(($5)>>2)];
    $s=$6;
    var $cmp=(($6)|0)!=0;
    if (!($cmp)) {
      break;
    }
    var $7=$count;
    var $inc=((($7)+(1))|0);
    $count=$inc;
    var $8=$list;
    var $9=HEAP32[(($8)>>2)];
    var $10=$9;
    var $11=$count;
    var $add=((($11)+(1))|0);
    var $mul=((($add<<2))&-1);
    var $call=_xrealloc($10, $mul);
    var $12=$call;
    var $13=$list;
    HEAP32[(($13)>>2)]=$12;
    var $14=$s;
    var $15=$count;
    var $sub=((($15)-(1))|0);
    var $16=$list;
    var $17=HEAP32[(($16)>>2)];
    var $arrayidx3=(($17+($sub<<2))|0);
    HEAP32[(($arrayidx3)>>2)]=$14;
  }
  var $18=$count;
  var $19=$list;
  var $20=HEAP32[(($19)>>2)];
  var $arrayidx4=(($20+($18<<2))|0);
  HEAP32[(($arrayidx4)>>2)]=0;

  return;
}
_kpathsea_set_suffixes_va_list["X"]=1;

function _ReadSymLink($fn, $sym) {
  var label = 0;

  var $fn_addr;
  var $sym_addr;
  var $n;
  $fn_addr=$fn;
  $sym_addr=$sym;
  var $0=$fn_addr;
  var $1=$sym_addr;
  var $call=_readlink($0, $1, 2048);
  $n=$call;
  var $2=$n;
  var $cmp=(($2)|0) < 0;
  if ($cmp) {
    var $3=$fn_addr;
    _perror($3);
    _exit(1);
    throw "Reached an unreachable!"
  } else {
    var $4=$n;
    var $5=$sym_addr;
    var $arrayidx=(($5+$4)|0);
    HEAP8[($arrayidx)]=0;

    return;
  }
}


function _kpathsea_init_format($kpse, $format) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $retval;
  var $kpse_addr;
  var $format_addr;
  var $envvar_list;
  var $ext;
  var $alt;
  var $arg;
  $kpse_addr=$kpse;
  $format_addr=$format;
  var $0=$format_addr;
  var $1=$kpse_addr;
  var $format_info=(($1+132)|0);
  var $arrayidx=(($format_info+($0)*(68))|0);
  var $path=(($arrayidx+4)|0);
  var $2=HEAP32[(($path)>>2)];
  var $tobool=(($2)|0)!=0;
  if ($tobool) {
    var $3=$format_addr;
    var $4=$kpse_addr;
    var $format_info1=(($4+132)|0);
    var $arrayidx2=(($format_info1+($3)*(68))|0);
    var $path3=(($arrayidx2+4)|0);
    var $5=HEAP32[(($path3)>>2)];
    $retval=$5;
    var $697=$retval;
    STACKTOP = __stackBase__;
    return $697;
  }
  var $6=$format_addr;
  if ((($6)|0)==0) {
    var $7=$format_addr;
    var $8=$kpse_addr;
    var $format_info4=(($8+132)|0);
    var $arrayidx5=(($format_info4+($7)*(68))|0);
    var $type=(($arrayidx5)|0);
    HEAP32[(($type)>>2)]=((5266036)|0);
    var $9=$kpse_addr;
    var $10=$format_addr;
    var $11=$kpse_addr;
    var $format_info6=(($11+132)|0);
    var $arrayidx7=(($format_info6+($10)*(68))|0);
    _init_path($9, $arrayidx7, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5265344)|0),HEAP32[(((tempInt)+(4))>>2)]=((5265024)|0),HEAP32[(((tempInt)+(8))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(12))>>2)]=0,tempInt));
    var $call=_concatn_with_spaces(((5265344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5265024)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    $envvar_list=$call;
    var $12=$kpse_addr;
    var $13=$format_addr;
    _kpathsea_set_suffixes($12, $13, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5266036)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $14=$format_addr;
    var $15=$kpse_addr;
    var $format_info8=(($15+132)|0);
    var $arrayidx9=(($format_info8+($14)*(68))|0);
    var $suffix_search_only=(($arrayidx9+40)|0);
    HEAP32[(($suffix_search_only)>>2)]=1;
    var $16=$format_addr;
    var $17=$kpse_addr;
    var $format_info10=(($17+132)|0);
    var $arrayidx11=(($format_info10+($16)*(68))|0);
    var $binmode=(($arrayidx11+64)|0);
    HEAP32[(($binmode)>>2)]=1;
  } else if ((($6)|0)==2) {
    var $31=$kpse_addr;
    var $32=$format_addr;
    _init_maketex($31, $32, ((5264268)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 36)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263832)|0),HEAP32[(((tempInt)+(4))>>2)]=((5263324)|0),HEAP32[(((tempInt)+(8))>>2)]=((5262968)|0),HEAP32[(((tempInt)+(12))>>2)]=((5262552)|0),HEAP32[(((tempInt)+(16))>>2)]=((5262004)|0),HEAP32[(((tempInt)+(20))>>2)]=((5261364)|0),HEAP32[(((tempInt)+(24))>>2)]=((5260956)|0),HEAP32[(((tempInt)+(28))>>2)]=((5260636)|0),HEAP32[(((tempInt)+(32))>>2)]=0,tempInt));
    var $33=$format_addr;
    var $34=$kpse_addr;
    var $format_info26=(($34+132)|0);
    var $arrayidx27=(($format_info26+($33)*(68))|0);
    var $type28=(($arrayidx27)|0);
    HEAP32[(($type28)>>2)]=((5259520)|0);
    var $35=$kpse_addr;
    var $36=$format_addr;
    var $37=$kpse_addr;
    var $format_info29=(($37+132)|0);
    var $arrayidx30=(($format_info29+($36)*(68))|0);
    _init_path($35, $arrayidx30, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5265024)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call31=_concatn_with_spaces(((5265024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264684)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call31;
    var $38=$format_addr;
    var $39=$kpse_addr;
    var $format_info32=(($39+132)|0);
    var $arrayidx33=(($format_info32+($38)*(68))|0);
    var $suffix_search_only34=(($arrayidx33+40)|0);
    HEAP32[(($suffix_search_only34)>>2)]=1;
    var $40=$format_addr;
    var $41=$kpse_addr;
    var $format_info35=(($41+132)|0);
    var $arrayidx36=(($format_info35+($40)*(68))|0);
    var $binmode37=(($arrayidx36+64)|0);
    HEAP32[(($binmode37)>>2)]=1;
  } else if ((($6)|0)==4) {
    var $55=$format_addr;
    var $56=$kpse_addr;
    var $format_info52=(($56+132)|0);
    var $arrayidx53=(($format_info52+($55)*(68))|0);
    var $type54=(($arrayidx53)|0);
    HEAP32[(($type54)>>2)]=((5258408)|0);
    var $57=$kpse_addr;
    var $58=$format_addr;
    var $59=$kpse_addr;
    var $format_info55=(($59+132)|0);
    var $arrayidx56=(($format_info55+($58)*(68))|0);
    _init_path($57, $arrayidx56, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5258072)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call57=_concatn_with_spaces(((5258072)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264684)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call57;
    var $60=$kpse_addr;
    var $61=$format_addr;
    _kpathsea_set_suffixes($60, $61, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257844)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
  } else if ((($6)|0)==5) {
    var $62=$kpse_addr;
    var $63=$format_addr;
    _init_maketex($62, $63, ((5257740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    var $64=$format_addr;
    var $65=$kpse_addr;
    var $format_info59=(($65+132)|0);
    var $arrayidx60=(($format_info59+($64)*(68))|0);
    var $type61=(($arrayidx60)|0);
    HEAP32[(($type61)>>2)]=((5257720)|0);
    var $66=$kpse_addr;
    var $67=$format_addr;
    var $68=$kpse_addr;
    var $format_info62=(($68+132)|0);
    var $arrayidx63=(($format_info62+($67)*(68))|0);
    _init_path($66, $arrayidx63, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257600)|0),HEAP32[(((tempInt)+(4))>>2)]=((5257416)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call64=_concatn_with_spaces(((5257600)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257416)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call64;
    var $69=$kpse_addr;
    var $70=$format_addr;
    _kpathsea_set_suffixes($69, $70, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257308)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $71=$format_addr;
    var $72=$kpse_addr;
    var $format_info65=(($72+132)|0);
    var $arrayidx66=(($format_info65+($71)*(68))|0);
    var $binmode67=(($arrayidx66+64)|0);
    HEAP32[(($binmode67)>>2)]=1;
  } else if ((($6)|0)==6) {
    var $73=$format_addr;
    var $74=$kpse_addr;
    var $format_info69=(($74+132)|0);
    var $arrayidx70=(($format_info69+($73)*(68))|0);
    var $type71=(($arrayidx70)|0);
    HEAP32[(($type71)>>2)]=((5257288)|0);
    var $75=$kpse_addr;
    var $76=$format_addr;
    var $77=$kpse_addr;
    var $format_info72=(($77+132)|0);
    var $arrayidx73=(($format_info72+($76)*(68))|0);
    _init_path($75, $arrayidx73, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257264)|0),HEAP32[(((tempInt)+(4))>>2)]=((5257232)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call74=_concatn_with_spaces(((5257264)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257232)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call74;
    var $78=$kpse_addr;
    var $79=$format_addr;
    _kpathsea_set_suffixes($78, $79, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257092)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $80=$format_addr;
    var $81=$kpse_addr;
    var $format_info75=(($81+132)|0);
    var $arrayidx76=(($format_info75+($80)*(68))|0);
    var $suffix_search_only77=(($arrayidx76+40)|0);
    HEAP32[(($suffix_search_only77)>>2)]=1;
  } else if ((($6)|0)==7) {
    var $82=$format_addr;
    var $83=$kpse_addr;
    var $format_info79=(($83+132)|0);
    var $arrayidx80=(($format_info79+($82)*(68))|0);
    var $type81=(($arrayidx80)|0);
    HEAP32[(($type81)>>2)]=((5257072)|0);
    var $84=$kpse_addr;
    var $85=$format_addr;
    var $86=$kpse_addr;
    var $format_info82=(($86+132)|0);
    var $arrayidx83=(($format_info82+($85)*(68))|0);
    _init_path($84, $arrayidx83, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257036)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call84=_concatn_with_spaces(((5257036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call84;
    var $87=$kpse_addr;
    var $88=$format_addr;
    _kpathsea_set_suffixes($87, $88, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257008)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
  } else if ((($6)|0)==8) {
    var $89=$format_addr;
    var $90=$kpse_addr;
    var $format_info86=(($90+132)|0);
    var $arrayidx87=(($format_info86+($89)*(68))|0);
    var $type88=(($arrayidx87)|0);
    HEAP32[(($type88)>>2)]=((5256948)|0);
    var $91=$kpse_addr;
    var $92=$format_addr;
    var $93=$kpse_addr;
    var $format_info89=(($93+132)|0);
    var $arrayidx90=(($format_info89+($92)*(68))|0);
    _init_path($91, $arrayidx90, ((5256400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5256316)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call91=_concatn_with_spaces(((5256316)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call91;
    var $94=$kpse_addr;
    var $95=$format_addr;
    _kpathsea_set_suffixes($94, $95, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5256292)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
  } else if ((($6)|0)==9) {
    var $96=$format_addr;
    var $97=$kpse_addr;
    var $format_info93=(($97+132)|0);
    var $arrayidx94=(($format_info93+($96)*(68))|0);
    var $type95=(($arrayidx94)|0);
    HEAP32[(($type95)>>2)]=((5256268)|0);
    var $98=$kpse_addr;
    var $99=$format_addr;
    var $100=$kpse_addr;
    var $format_info96=(($100+132)|0);
    var $arrayidx97=(($format_info96+($99)*(68))|0);
    _init_path($98, $arrayidx97, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5256240)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call98=_concatn_with_spaces(((5256240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call98;
    var $101=$kpse_addr;
    var $102=$format_addr;
    _kpathsea_set_suffixes($101, $102, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5256268)|0),HEAP32[(((tempInt)+(4))>>2)]=((5256144)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $103=$format_addr;
    var $104=$kpse_addr;
    var $format_info99=(($104+132)|0);
    var $arrayidx100=(($format_info99+($103)*(68))|0);
    var $path101=(($arrayidx100+4)|0);
    var $105=HEAP32[(($path101)>>2)];
    var $call102=_remove_dbonly($105);
    var $106=$format_addr;
    var $107=$kpse_addr;
    var $format_info103=(($107+132)|0);
    var $arrayidx104=(($format_info103+($106)*(68))|0);
    var $path105=(($arrayidx104+4)|0);
    HEAP32[(($path105)>>2)]=$call102;
  } else if ((($6)|0)==10) {
    var $108=$kpse_addr;
    var $109=$format_addr;
    _init_maketex($108, $109, ((5257740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    var $110=$format_addr;
    var $111=$kpse_addr;
    var $format_info107=(($111+132)|0);
    var $arrayidx108=(($format_info107+($110)*(68))|0);
    var $type109=(($arrayidx108)|0);
    HEAP32[(($type109)>>2)]=((5253148)|0);
    var $112=$kpse_addr;
    var $113=$format_addr;
    var $114=$kpse_addr;
    var $format_info110=(($114+132)|0);
    var $arrayidx111=(($format_info110+($113)*(68))|0);
    _init_path($112, $arrayidx111, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5256104)|0),HEAP32[(((tempInt)+(4))>>2)]=((5257416)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call112=_concatn_with_spaces(((5256104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257416)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call112;
    var $115=$kpse_addr;
    var $116=$format_addr;
    _kpathsea_set_suffixes($115, $116, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5256072)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $117=$format_addr;
    var $118=$kpse_addr;
    var $format_info113=(($118+132)|0);
    var $arrayidx114=(($format_info113+($117)*(68))|0);
    var $binmode115=(($arrayidx114+64)|0);
    HEAP32[(($binmode115)>>2)]=1;
  } else if ((($6)|0)==11) {
    var $119=$format_addr;
    var $120=$kpse_addr;
    var $format_info117=(($120+132)|0);
    var $arrayidx118=(($format_info117+($119)*(68))|0);
    var $type119=(($arrayidx118)|0);
    HEAP32[(($type119)>>2)]=((5256004)|0);
    var $121=$kpse_addr;
    var $122=$format_addr;
    var $123=$kpse_addr;
    var $format_info120=(($123+132)|0);
    var $arrayidx121=(($format_info120+($122)*(68))|0);
    _init_path($121, $arrayidx121, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255916)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call122=_concatn_with_spaces(((5255916)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264684)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call122;
    var $124=$kpse_addr;
    var $125=$format_addr;
    _kpathsea_set_suffixes($124, $125, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255788)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
  } else if ((($6)|0)==12) {
    var $126=$kpse_addr;
    var $127=$format_addr;
    _init_maketex($126, $127, ((5257740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    var $128=$format_addr;
    var $129=$kpse_addr;
    var $format_info124=(($129+132)|0);
    var $arrayidx125=(($format_info124+($128)*(68))|0);
    var $type126=(($arrayidx125)|0);
    HEAP32[(($type126)>>2)]=((5255668)|0);
    var $130=$kpse_addr;
    var $131=$format_addr;
    var $132=$kpse_addr;
    var $format_info127=(($132+132)|0);
    var $arrayidx128=(($format_info127+($131)*(68))|0);
    _init_path($130, $arrayidx128, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255628)|0),HEAP32[(((tempInt)+(4))>>2)]=((5257416)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call129=_concatn_with_spaces(((5255628)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257416)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call129;
    var $133=$kpse_addr;
    var $134=$format_addr;
    _kpathsea_set_suffixes($133, $134, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255576)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $135=$format_addr;
    var $136=$kpse_addr;
    var $format_info130=(($136+132)|0);
    var $arrayidx131=(($format_info130+($135)*(68))|0);
    var $binmode132=(($arrayidx131+64)|0);
    HEAP32[(($binmode132)>>2)]=1;
  } else if ((($6)|0)==13) {
    var $137=$kpse_addr;
    var $138=$format_addr;
    _init_maketex($137, $138, ((5255540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    var $139=$format_addr;
    var $140=$kpse_addr;
    var $format_info134=(($140+132)|0);
    var $arrayidx135=(($format_info134+($139)*(68))|0);
    var $type136=(($arrayidx135)|0);
    HEAP32[(($type136)>>2)]=((5255420)|0);
    var $141=$kpse_addr;
    var $142=$format_addr;
    var $143=$kpse_addr;
    var $format_info137=(($143+132)|0);
    var $arrayidx138=(($format_info137+($142)*(68))|0);
    _init_path($141, $arrayidx138, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255424)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call139=_concatn_with_spaces(((5255424)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call139;
    var $144=$kpse_addr;
    var $145=$format_addr;
    _kpathsea_set_suffixes($144, $145, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255400)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
  } else if ((($6)|0)==15) {
    var $146=$format_addr;
    var $147=$kpse_addr;
    var $format_info141=(($147+132)|0);
    var $arrayidx142=(($format_info141+($146)*(68))|0);
    var $type143=(($arrayidx142)|0);
    HEAP32[(($type143)>>2)]=((5255388)|0);
    var $148=$kpse_addr;
    var $149=$format_addr;
    var $150=$kpse_addr;
    var $format_info144=(($150+132)|0);
    var $arrayidx145=(($format_info144+($149)*(68))|0);
    _init_path($148, $arrayidx145, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255344)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call146=_concatn_with_spaces(((5255344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call146;
    var $151=$kpse_addr;
    var $152=$format_addr;
    _kpathsea_set_suffixes($151, $152, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255232)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
  } else if ((($6)|0)==14) {
    var $153=$format_addr;
    var $154=$kpse_addr;
    var $format_info148=(($154+132)|0);
    var $arrayidx149=(($format_info148+($153)*(68))|0);
    var $type150=(($arrayidx149)|0);
    HEAP32[(($type150)>>2)]=((5255196)|0);
    var $155=$kpse_addr;
    var $156=$format_addr;
    var $157=$kpse_addr;
    var $format_info151=(($157+132)|0);
    var $arrayidx152=(($format_info151+($156)*(68))|0);
    _init_path($155, $arrayidx152, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255056)|0),HEAP32[(((tempInt)+(4))>>2)]=((5257416)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call153=_concatn_with_spaces(((5255056)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257416)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call153;
    var $158=$kpse_addr;
    var $159=$format_addr;
    _kpathsea_set_suffixes($158, $159, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255036)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
  } else if ((($6)|0)==16) {
    var $160=$format_addr;
    var $161=$kpse_addr;
    var $format_info155=(($161+132)|0);
    var $arrayidx156=(($format_info155+($160)*(68))|0);
    var $type157=(($arrayidx156)|0);
    HEAP32[(($type157)>>2)]=((5255008)|0);
    var $162=$kpse_addr;
    var $163=$format_addr;
    var $164=$kpse_addr;
    var $format_info158=(($164+132)|0);
    var $arrayidx159=(($format_info158+($163)*(68))|0);
    _init_path($162, $arrayidx159, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5254924)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call160=_concatn_with_spaces(((5254924)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call160;
    var $165=$kpse_addr;
    var $166=$format_addr;
    _kpathsea_set_suffixes($165, $166, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5254836)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
  } else if ((($6)|0)==17) {
    var $167=$format_addr;
    var $168=$kpse_addr;
    var $format_info162=(($168+132)|0);
    var $arrayidx163=(($format_info162+($167)*(68))|0);
    var $type164=(($arrayidx163)|0);
    HEAP32[(($type164)>>2)]=((5254812)|0);
    var $169=$kpse_addr;
    var $170=$format_addr;
    var $171=$kpse_addr;
    var $format_info165=(($171+132)|0);
    var $arrayidx166=(($format_info165+($170)*(68))|0);
    _init_path($169, $arrayidx166, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5254780)|0),HEAP32[(((tempInt)+(4))>>2)]=((5257416)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call167=_concatn_with_spaces(((5254780)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257416)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call167;
    var $172=$kpse_addr;
    var $173=$format_addr;
    _kpathsea_set_suffixes($172, $173, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255036)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
  } else if ((($6)|0)==18) {
    var $174=$format_addr;
    var $175=$kpse_addr;
    var $format_info169=(($175+132)|0);
    var $arrayidx170=(($format_info169+($174)*(68))|0);
    var $type171=(($arrayidx170)|0);
    HEAP32[(($type171)>>2)]=((5254672)|0);
    var $176=$kpse_addr;
    var $177=$format_addr;
    var $178=$kpse_addr;
    var $format_info172=(($178+132)|0);
    var $arrayidx173=(($format_info172+($177)*(68))|0);
    _init_path($176, $arrayidx173, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5254592)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call174=_concatn_with_spaces(((5254592)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call174;
  } else if ((($6)|0)==19) {
    var $179=$kpse_addr;
    var $180=$format_addr;
    _init_maketex($179, $180, ((5254424)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    var $181=$format_addr;
    var $182=$kpse_addr;
    var $format_info176=(($182+132)|0);
    var $arrayidx177=(($format_info176+($181)*(68))|0);
    var $type178=(($arrayidx177)|0);
    HEAP32[(($type178)>>2)]=((5266936)|0);
    var $183=$kpse_addr;
    var $184=$format_addr;
    var $185=$kpse_addr;
    var $format_info179=(($185+132)|0);
    var $arrayidx180=(($format_info179+($184)*(68))|0);
    _init_path($183, $arrayidx180, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5254332)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call181=_concatn_with_spaces(((5254332)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call181;
    var $186=$kpse_addr;
    var $187=$format_addr;
    _kpathsea_set_suffixes($186, $187, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5254244)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $188=$format_addr;
    var $189=$kpse_addr;
    var $format_info182=(($189+132)|0);
    var $arrayidx183=(($format_info182+($188)*(68))|0);
    var $suffix_search_only184=(($arrayidx183+40)|0);
    HEAP32[(($suffix_search_only184)>>2)]=1;
    var $190=$format_addr;
    var $191=$kpse_addr;
    var $format_info185=(($191+132)|0);
    var $arrayidx186=(($format_info185+($190)*(68))|0);
    var $binmode187=(($arrayidx186+64)|0);
    HEAP32[(($binmode187)>>2)]=1;
  } else if ((($6)|0)==20) {
    var $192=$kpse_addr;
    var $193=$format_addr;
    _init_maketex($192, $193, ((5254136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    var $194=$format_addr;
    var $195=$kpse_addr;
    var $format_info189=(($195+132)|0);
    var $arrayidx190=(($format_info189+($194)*(68))|0);
    var $type191=(($arrayidx190)|0);
    HEAP32[(($type191)>>2)]=((5267548)|0);
    var $196=$kpse_addr;
    var $197=$format_addr;
    var $198=$kpse_addr;
    var $format_info192=(($198+132)|0);
    var $arrayidx193=(($format_info192+($197)*(68))|0);
    _init_path($196, $arrayidx193, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5254104)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call194=_concatn_with_spaces(((5254104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264684)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call194;
    var $199=$kpse_addr;
    var $200=$format_addr;
    _kpathsea_set_suffixes($199, $200, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5253964)|0),HEAP32[(((tempInt)+(4))>>2)]=((5258604)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $201=$format_addr;
    var $202=$kpse_addr;
    var $format_info195=(($202+132)|0);
    var $arrayidx196=(($format_info195+($201)*(68))|0);
    var $suffix_search_only197=(($arrayidx196+40)|0);
    HEAP32[(($suffix_search_only197)>>2)]=1;
    var $203=$format_addr;
    var $204=$kpse_addr;
    var $format_info198=(($204+132)|0);
    var $arrayidx199=(($format_info198+($203)*(68))|0);
    var $binmode200=(($arrayidx199+64)|0);
    HEAP32[(($binmode200)>>2)]=1;
  } else if ((($6)|0)==21) {
    var $205=$format_addr;
    var $206=$kpse_addr;
    var $format_info202=(($206+132)|0);
    var $arrayidx203=(($format_info202+($205)*(68))|0);
    var $type204=(($arrayidx203)|0);
    HEAP32[(($type204)>>2)]=((5253932)|0);
    var $207=$kpse_addr;
    var $208=$format_addr;
    var $209=$kpse_addr;
    var $format_info205=(($209+132)|0);
    var $arrayidx206=(($format_info205+($208)*(68))|0);
    _init_path($207, $arrayidx206, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5253860)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call207=_concatn_with_spaces(((5253860)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264684)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call207;
    var $210=$kpse_addr;
    var $211=$format_addr;
    _kpathsea_set_suffixes($210, $211, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5253820)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $212=$kpse_addr;
    var $213=$format_addr;
    _kpathsea_set_suffixes($212, $213, 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5253668)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $214=$format_addr;
    var $215=$kpse_addr;
    var $format_info208=(($215+132)|0);
    var $arrayidx209=(($format_info208+($214)*(68))|0);
    var $suffix_search_only210=(($arrayidx209+40)|0);
    HEAP32[(($suffix_search_only210)>>2)]=1;
  } else if ((($6)|0)==22) {
    var $216=$format_addr;
    var $217=$kpse_addr;
    var $format_info212=(($217+132)|0);
    var $arrayidx213=(($format_info212+($216)*(68))|0);
    var $type214=(($arrayidx213)|0);
    HEAP32[(($type214)>>2)]=((5253508)|0);
    var $218=$kpse_addr;
    var $219=$format_addr;
    var $220=$kpse_addr;
    var $format_info215=(($220+132)|0);
    var $arrayidx216=(($format_info215+($219)*(68))|0);
    _init_path($218, $arrayidx216, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5253428)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call217=_concatn_with_spaces(((5253428)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call217;
    var $221=$kpse_addr;
    var $222=$format_addr;
    _kpathsea_set_suffixes($221, $222, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5253356)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $223=$format_addr;
    var $224=$kpse_addr;
    var $format_info218=(($224+132)|0);
    var $arrayidx219=(($format_info218+($223)*(68))|0);
    var $suffix_search_only220=(($arrayidx219+40)|0);
    HEAP32[(($suffix_search_only220)>>2)]=1;
  } else if ((($6)|0)==23) {
    var $225=$format_addr;
    var $226=$kpse_addr;
    var $format_info222=(($226+132)|0);
    var $arrayidx223=(($format_info222+($225)*(68))|0);
    var $type224=(($arrayidx223)|0);
    HEAP32[(($type224)>>2)]=((5253288)|0);
    var $227=$kpse_addr;
    var $228=$format_addr;
    var $229=$kpse_addr;
    var $format_info225=(($229+132)|0);
    var $arrayidx226=(($format_info225+($228)*(68))|0);
    _init_path($227, $arrayidx226, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5253260)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call227=_concatn_with_spaces(((5253260)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264684)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call227;
    var $230=$kpse_addr;
    var $231=$format_addr;
    _kpathsea_set_suffixes($230, $231, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5253152)|0),HEAP32[(((tempInt)+(4))>>2)]=((5253108)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $232=$format_addr;
    var $233=$kpse_addr;
    var $format_info228=(($233+132)|0);
    var $arrayidx229=(($format_info228+($232)*(68))|0);
    var $suffix_search_only230=(($arrayidx229+40)|0);
    HEAP32[(($suffix_search_only230)>>2)]=1;
    var $234=$format_addr;
    var $235=$kpse_addr;
    var $format_info231=(($235+132)|0);
    var $arrayidx232=(($format_info231+($234)*(68))|0);
    var $binmode233=(($arrayidx232+64)|0);
    HEAP32[(($binmode233)>>2)]=1;
  } else if ((($6)|0)==24) {
    var $236=$format_addr;
    var $237=$kpse_addr;
    var $format_info235=(($237+132)|0);
    var $arrayidx236=(($format_info235+($236)*(68))|0);
    var $type237=(($arrayidx236)|0);
    HEAP32[(($type237)>>2)]=((5253068)|0);
    var $238=$kpse_addr;
    var $239=$format_addr;
    var $240=$kpse_addr;
    var $format_info238=(($240+132)|0);
    var $arrayidx239=(($format_info238+($239)*(68))|0);
    _init_path($238, $arrayidx239, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5252992)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call240=_concatn_with_spaces(((5252992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264684)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call240;
    var $241=$kpse_addr;
    var $242=$format_addr;
    _kpathsea_set_suffixes($241, $242, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5252956)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $243=$kpse_addr;
    var $244=$format_addr;
    _kpathsea_set_suffixes($243, $244, 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5252900)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $245=$format_addr;
    var $246=$kpse_addr;
    var $format_info241=(($246+132)|0);
    var $arrayidx242=(($format_info241+($245)*(68))|0);
    var $suffix_search_only243=(($arrayidx242+40)|0);
    HEAP32[(($suffix_search_only243)>>2)]=1;
  } else if ((($6)|0)==25) {
    var $247=$format_addr;
    var $248=$kpse_addr;
    var $format_info245=(($248+132)|0);
    var $arrayidx246=(($format_info245+($247)*(68))|0);
    var $type247=(($arrayidx246)|0);
    HEAP32[(($type247)>>2)]=((5267800)|0);
    var $249=$kpse_addr;
    var $250=$format_addr;
    var $251=$kpse_addr;
    var $format_info248=(($251+132)|0);
    var $arrayidx249=(($format_info248+($250)*(68))|0);
    _init_path($249, $arrayidx249, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5267748)|0),HEAP32[(((tempInt)+(4))>>2)]=((5267724)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call250=_concatn_with_spaces(((5267748)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5267724)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call250;
    var $252=$kpse_addr;
    var $253=$format_addr;
    _kpathsea_set_suffixes($252, $253, 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5267684)|0),HEAP32[(((tempInt)+(4))>>2)]=((5267552)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $254=$format_addr;
    var $255=$kpse_addr;
    var $format_info251=(($255+132)|0);
    var $arrayidx252=(($format_info251+($254)*(68))|0);
    var $binmode253=(($arrayidx252+64)|0);
    HEAP32[(($binmode253)>>2)]=1;
  } else if ((($6)|0)==26) {
    var $256=$kpse_addr;
    var $257=$format_addr;
    _init_maketex($256, $257, ((5267520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    var $258=$format_addr;
    var $259=$kpse_addr;
    var $format_info255=(($259+132)|0);
    var $arrayidx256=(($format_info255+($258)*(68))|0);
    var $type257=(($arrayidx256)|0);
    HEAP32[(($type257)>>2)]=((5254832)|0);
    var $260=$kpse_addr;
    var $261=$format_addr;
    var $262=$kpse_addr;
    var $format_info258=(($262+132)|0);
    var $arrayidx259=(($format_info258+($261)*(68))|0);
    _init_path($260, $arrayidx259, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5267724)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call260=_concatn_with_spaces(((5267724)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call260;
    var $263=$kpse_addr;
    var $264=$format_addr;
    _kpathsea_set_suffixes($263, $264, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5267504)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $265=$kpse_addr;
    var $266=$format_addr;
    _kpathsea_set_suffixes($265, $266, 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 36)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5267464)|0),HEAP32[(((tempInt)+(4))>>2)]=((5267264)|0),HEAP32[(((tempInt)+(8))>>2)]=((5267244)|0),HEAP32[(((tempInt)+(12))>>2)]=((5267120)|0),HEAP32[(((tempInt)+(16))>>2)]=((5267096)|0),HEAP32[(((tempInt)+(20))>>2)]=((5267072)|0),HEAP32[(((tempInt)+(24))>>2)]=((5267048)|0),HEAP32[(((tempInt)+(28))>>2)]=((5266940)|0),HEAP32[(((tempInt)+(32))>>2)]=0,tempInt));
  } else if ((($6)|0)==30) {
    var $267=$format_addr;
    var $268=$kpse_addr;
    var $format_info262=(($268+132)|0);
    var $arrayidx263=(($format_info262+($267)*(68))|0);
    var $type264=(($arrayidx263)|0);
    HEAP32[(($type264)>>2)]=((5266900)|0);
    var $269=$kpse_addr;
    var $270=$format_addr;
    var $271=$kpse_addr;
    var $format_info265=(($271+132)|0);
    var $arrayidx266=(($format_info265+($270)*(68))|0);
    _init_path($269, $arrayidx266, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5266876)|0),HEAP32[(((tempInt)+(4))>>2)]=((5266844)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call267=_concatn_with_spaces(((5266876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5266844)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call267;
    var $272=$kpse_addr;
    var $273=$format_addr;
    _kpathsea_set_suffixes($272, $273, 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5266712)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $274=$format_addr;
    var $275=$kpse_addr;
    var $format_info268=(($275+132)|0);
    var $arrayidx269=(($format_info268+($274)*(68))|0);
    var $binmode270=(($arrayidx269+64)|0);
    HEAP32[(($binmode270)>>2)]=1;
  } else if ((($6)|0)==27) {
    var $276=$format_addr;
    var $277=$kpse_addr;
    var $format_info272=(($277+132)|0);
    var $arrayidx273=(($format_info272+($276)*(68))|0);
    var $type274=(($arrayidx273)|0);
    HEAP32[(($type274)>>2)]=((5266672)|0);
    var $278=$kpse_addr;
    var $279=$format_addr;
    var $280=$kpse_addr;
    var $format_info275=(($280+132)|0);
    var $arrayidx276=(($format_info275+($279)*(68))|0);
    _init_path($278, $arrayidx276, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5266636)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call277=_concatn_with_spaces(((5266636)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call277;
  } else if ((($6)|0)==28) {
    var $281=$format_addr;
    var $282=$kpse_addr;
    var $format_info279=(($282+132)|0);
    var $arrayidx280=(($format_info279+($281)*(68))|0);
    var $type281=(($arrayidx280)|0);
    HEAP32[(($type281)>>2)]=((5266612)|0);
    var $283=$kpse_addr;
    var $284=$format_addr;
    var $285=$kpse_addr;
    var $format_info282=(($285+132)|0);
    var $arrayidx283=(($format_info282+($284)*(68))|0);
    _init_path($283, $arrayidx283, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5266588)|0),HEAP32[(((tempInt)+(4))>>2)]=((5257416)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call284=_concatn_with_spaces(((5266588)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257416)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call284;
    var $286=$kpse_addr;
    var $287=$format_addr;
    _kpathsea_set_suffixes($286, $287, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5255036)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
  } else if ((($6)|0)==29) {
    var $288=$format_addr;
    var $289=$kpse_addr;
    var $format_info286=(($289+132)|0);
    var $arrayidx287=(($format_info286+($288)*(68))|0);
    var $type288=(($arrayidx287)|0);
    HEAP32[(($type288)>>2)]=((5266552)|0);
    var $290=$kpse_addr;
    var $291=$format_addr;
    var $292=$kpse_addr;
    var $format_info289=(($292+132)|0);
    var $arrayidx290=(($format_info289+($291)*(68))|0);
    _init_path($290, $arrayidx290, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5266460)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call291=_concatn_with_spaces(((5266460)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call291;
    var $293=$kpse_addr;
    var $294=$format_addr;
    _kpathsea_set_suffixes($293, $294, 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5266436)|0),HEAP32[(((tempInt)+(4))>>2)]=((5266412)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
  } else if ((($6)|0)==31) {
    var $295=$format_addr;
    var $296=$kpse_addr;
    var $format_info293=(($296+132)|0);
    var $arrayidx294=(($format_info293+($295)*(68))|0);
    var $type295=(($arrayidx294)|0);
    HEAP32[(($type295)>>2)]=((5266336)|0);
    var $297=$kpse_addr;
    var $298=$format_addr;
    var $299=$kpse_addr;
    var $format_info296=(($299+132)|0);
    var $arrayidx297=(($format_info296+($298)*(68))|0);
    _init_path($297, $arrayidx297, ((5266240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5266216)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call298=_concatn_with_spaces(((5266216)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call298;
    var $300=$format_addr;
    var $301=$kpse_addr;
    var $format_info299=(($301+132)|0);
    var $arrayidx300=(($format_info299+($300)*(68))|0);
    var $binmode301=(($arrayidx300+64)|0);
    HEAP32[(($binmode301)>>2)]=1;
  } else if ((($6)|0)==32) {
    var $302=$format_addr;
    var $303=$kpse_addr;
    var $format_info303=(($303+132)|0);
    var $arrayidx304=(($format_info303+($302)*(68))|0);
    var $type305=(($arrayidx304)|0);
    HEAP32[(($type305)>>2)]=((5266176)|0);
    var $304=$kpse_addr;
    var $305=$format_addr;
    var $306=$kpse_addr;
    var $format_info306=(($306+132)|0);
    var $arrayidx307=(($format_info306+($305)*(68))|0);
    _init_path($304, $arrayidx307, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5266152)|0),HEAP32[(((tempInt)+(4))>>2)]=((5266124)|0),HEAP32[(((tempInt)+(8))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(12))>>2)]=((5266876)|0),HEAP32[(((tempInt)+(16))>>2)]=((5266844)|0),HEAP32[(((tempInt)+(20))>>2)]=0,tempInt));
    var $call308=_concatn_with_spaces(((5266152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5266124)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(8))>>2)]=((5266876)|0),HEAP32[(((tempInt)+(12))>>2)]=((5266844)|0),HEAP32[(((tempInt)+(16))>>2)]=0,tempInt));
    $envvar_list=$call308;
    var $307=$kpse_addr;
    var $308=$format_addr;
    _kpathsea_set_suffixes($307, $308, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5266100)|0),HEAP32[(((tempInt)+(4))>>2)]=((5266040)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $309=$format_addr;
    var $310=$kpse_addr;
    var $format_info309=(($310+132)|0);
    var $arrayidx310=(($format_info309+($309)*(68))|0);
    var $binmode311=(($arrayidx310+64)|0);
    HEAP32[(($binmode311)>>2)]=1;
  } else if ((($6)|0)==33) {
    var $311=$format_addr;
    var $312=$kpse_addr;
    var $format_info313=(($312+132)|0);
    var $arrayidx314=(($format_info313+($311)*(68))|0);
    var $type315=(($arrayidx314)|0);
    HEAP32[(($type315)>>2)]=((5266016)|0);
    var $313=$kpse_addr;
    var $314=$format_addr;
    var $315=$kpse_addr;
    var $format_info316=(($315+132)|0);
    var $arrayidx317=(($format_info316+($314)*(68))|0);
    _init_path($313, $arrayidx317, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5265984)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call318=_concatn_with_spaces(((5265984)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264684)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call318;
    var $316=$kpse_addr;
    var $317=$format_addr;
    _kpathsea_set_suffixes($316, $317, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5253108)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $318=$format_addr;
    var $319=$kpse_addr;
    var $format_info319=(($319+132)|0);
    var $arrayidx320=(($format_info319+($318)*(68))|0);
    var $suffix_search_only321=(($arrayidx320+40)|0);
    HEAP32[(($suffix_search_only321)>>2)]=1;
    var $320=$format_addr;
    var $321=$kpse_addr;
    var $format_info322=(($321+132)|0);
    var $arrayidx323=(($format_info322+($320)*(68))|0);
    var $binmode324=(($arrayidx323+64)|0);
    HEAP32[(($binmode324)>>2)]=1;
  } else if ((($6)|0)==34) {
    var $322=$format_addr;
    var $323=$kpse_addr;
    var $format_info326=(($323+132)|0);
    var $arrayidx327=(($format_info326+($322)*(68))|0);
    var $type328=(($arrayidx327)|0);
    HEAP32[(($type328)>>2)]=((5265948)|0);
    var $324=$kpse_addr;
    var $325=$format_addr;
    var $326=$kpse_addr;
    var $format_info329=(($326+132)|0);
    var $arrayidx330=(($format_info329+($325)*(68))|0);
    _init_path($324, $arrayidx330, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5265880)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call331=_concatn_with_spaces(((5265880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call331;
  } else if ((($6)|0)==35) {
    var $327=$format_addr;
    var $328=$kpse_addr;
    var $format_info333=(($328+132)|0);
    var $arrayidx334=(($format_info333+($327)*(68))|0);
    var $type335=(($arrayidx334)|0);
    HEAP32[(($type335)>>2)]=((5265844)|0);
    var $329=$kpse_addr;
    var $330=$format_addr;
    var $331=$kpse_addr;
    var $format_info336=(($331+132)|0);
    var $arrayidx337=(($format_info336+($330)*(68))|0);
    _init_path($329, $arrayidx337, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5265804)|0),HEAP32[(((tempInt)+(4))>>2)]=((5265744)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call338=_concatn_with_spaces(((5265804)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5265744)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call338;
    var $332=$kpse_addr;
    var $333=$format_addr;
    _kpathsea_set_suffixes($332, $333, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5265720)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
  } else if ((($6)|0)==36) {
    var $334=$format_addr;
    var $335=$kpse_addr;
    var $format_info340=(($335+132)|0);
    var $arrayidx341=(($format_info340+($334)*(68))|0);
    var $type342=(($arrayidx341)|0);
    HEAP32[(($type342)>>2)]=((5265684)|0);
    var $336=$kpse_addr;
    var $337=$format_addr;
    var $338=$kpse_addr;
    var $format_info343=(($338+132)|0);
    var $arrayidx344=(($format_info343+($337)*(68))|0);
    _init_path($336, $arrayidx344, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5265656)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call345=_concatn_with_spaces(((5265656)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264684)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call345;
    var $339=$kpse_addr;
    var $340=$format_addr;
    _kpathsea_set_suffixes($339, $340, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5265620)|0),HEAP32[(((tempInt)+(4))>>2)]=((5265596)|0),HEAP32[(((tempInt)+(8))>>2)]=((5265556)|0),HEAP32[(((tempInt)+(12))>>2)]=((5265524)|0),HEAP32[(((tempInt)+(16))>>2)]=((5265500)|0),HEAP32[(((tempInt)+(20))>>2)]=0,tempInt));
    var $341=$format_addr;
    var $342=$kpse_addr;
    var $format_info346=(($342+132)|0);
    var $arrayidx347=(($format_info346+($341)*(68))|0);
    var $suffix_search_only348=(($arrayidx347+40)|0);
    HEAP32[(($suffix_search_only348)>>2)]=0;
    var $343=$format_addr;
    var $344=$kpse_addr;
    var $format_info349=(($344+132)|0);
    var $arrayidx350=(($format_info349+($343)*(68))|0);
    var $binmode351=(($arrayidx350+64)|0);
    HEAP32[(($binmode351)>>2)]=1;
  } else if ((($6)|0)==37) {
    var $345=$format_addr;
    var $346=$kpse_addr;
    var $format_info353=(($346+132)|0);
    var $arrayidx354=(($format_info353+($345)*(68))|0);
    var $type355=(($arrayidx354)|0);
    HEAP32[(($type355)>>2)]=((5265460)|0);
    var $347=$kpse_addr;
    var $348=$format_addr;
    var $349=$kpse_addr;
    var $format_info356=(($349+132)|0);
    var $arrayidx357=(($format_info356+($348)*(68))|0);
    _init_path($347, $arrayidx357, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5265432)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call358=_concatn_with_spaces(((5265432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264684)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call358;
    var $350=$kpse_addr;
    var $351=$format_addr;
    _kpathsea_set_suffixes($350, $351, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5265408)|0),HEAP32[(((tempInt)+(4))>>2)]=((5265384)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $352=$format_addr;
    var $353=$kpse_addr;
    var $format_info359=(($353+132)|0);
    var $arrayidx360=(($format_info359+($352)*(68))|0);
    var $binmode361=(($arrayidx360+64)|0);
    HEAP32[(($binmode361)>>2)]=1;
  } else if ((($6)|0)==38) {
    var $354=$format_addr;
    var $355=$kpse_addr;
    var $format_info363=(($355+132)|0);
    var $arrayidx364=(($format_info363+($354)*(68))|0);
    var $type365=(($arrayidx364)|0);
    HEAP32[(($type365)>>2)]=((5265352)|0);
    var $356=$kpse_addr;
    var $357=$format_addr;
    var $358=$kpse_addr;
    var $format_info366=(($358+132)|0);
    var $arrayidx367=(($format_info366+($357)*(68))|0);
    _init_path($356, $arrayidx367, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5265320)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call368=_concatn_with_spaces(((5265320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call368;
  } else if ((($6)|0)==39) {
    var $359=$format_addr;
    var $360=$kpse_addr;
    var $format_info370=(($360+132)|0);
    var $arrayidx371=(($format_info370+($359)*(68))|0);
    var $type372=(($arrayidx371)|0);
    HEAP32[(($type372)>>2)]=((5265284)|0);
    var $361=$kpse_addr;
    var $362=$format_addr;
    var $363=$kpse_addr;
    var $format_info373=(($363+132)|0);
    var $arrayidx374=(($format_info373+($362)*(68))|0);
    var $364=$kpse_addr;
    var $program_name=(($364+112)|0);
    var $365=HEAP32[(($program_name)>>2)];
    var $call375=_concatn(((5265248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5265228)|0),HEAP32[(((tempInt)+(4))>>2)]=((5265204)|0),HEAP32[(((tempInt)+(8))>>2)]=$365,HEAP32[(((tempInt)+(12))>>2)]=((5265172)|0),HEAP32[(((tempInt)+(16))>>2)]=0,tempInt));
    var $366=$kpse_addr;
    var $program_name376=(($366+112)|0);
    var $367=HEAP32[(($program_name376)>>2)];
    var $call377=_uppercasify($367);
    var $call378=_concat($call377, ((5265148)|0));
    _init_path($361, $arrayidx374, $call375, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call378,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $368=$kpse_addr;
    var $program_name379=(($368+112)|0);
    var $369=HEAP32[(($program_name379)>>2)];
    var $call380=_uppercasify($369);
    var $call381=_concat($call380, ((5265148)|0));
    var $call382=_concatn_with_spaces($call381, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call382;
  } else if ((($6)|0)==40) {
    var $370=$format_addr;
    var $371=$kpse_addr;
    var $format_info384=(($371+132)|0);
    var $arrayidx385=(($format_info384+($370)*(68))|0);
    var $type386=(($arrayidx385)|0);
    HEAP32[(($type386)>>2)]=((5265112)|0);
    var $372=$kpse_addr;
    var $373=$format_addr;
    var $374=$kpse_addr;
    var $format_info387=(($374+132)|0);
    var $arrayidx388=(($format_info387+($373)*(68))|0);
    var $375=$kpse_addr;
    var $program_name389=(($375+112)|0);
    var $376=HEAP32[(($program_name389)>>2)];
    var $call390=_concatn(((5265248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5265228)|0),HEAP32[(((tempInt)+(4))>>2)]=((5265204)|0),HEAP32[(((tempInt)+(8))>>2)]=$376,HEAP32[(((tempInt)+(12))>>2)]=((5265172)|0),HEAP32[(((tempInt)+(16))>>2)]=0,tempInt));
    var $377=$kpse_addr;
    var $program_name391=(($377+112)|0);
    var $378=HEAP32[(($program_name391)>>2)];
    var $call392=_uppercasify($378);
    var $call393=_concat($call392, ((5265148)|0));
    _init_path($372, $arrayidx388, $call390, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call393,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $379=$kpse_addr;
    var $program_name394=(($379+112)|0);
    var $380=HEAP32[(($program_name394)>>2)];
    var $call395=_uppercasify($380);
    var $call396=_concat($call395, ((5265148)|0));
    var $call397=_concatn_with_spaces($call396, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call397;
    var $381=$format_addr;
    var $382=$kpse_addr;
    var $format_info398=(($382+132)|0);
    var $arrayidx399=(($format_info398+($381)*(68))|0);
    var $binmode400=(($arrayidx399+64)|0);
    HEAP32[(($binmode400)>>2)]=1;
  } else if ((($6)|0)==41) {
    var $383=$format_addr;
    var $384=$kpse_addr;
    var $format_info402=(($384+132)|0);
    var $arrayidx403=(($format_info402+($383)*(68))|0);
    var $type404=(($arrayidx403)|0);
    HEAP32[(($type404)>>2)]=((5265084)|0);
    var $385=$kpse_addr;
    var $386=$format_addr;
    var $387=$kpse_addr;
    var $format_info405=(($387+132)|0);
    var $arrayidx406=(($format_info405+($386)*(68))|0);
    _init_path($385, $arrayidx406, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5265036)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call407=_concatn_with_spaces(((5265036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264684)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call407;
    var $388=$format_addr;
    var $389=$kpse_addr;
    var $format_info408=(($389+132)|0);
    var $arrayidx409=(($format_info408+($388)*(68))|0);
    var $binmode410=(($arrayidx409+64)|0);
    HEAP32[(($binmode410)>>2)]=1;
  } else if ((($6)|0)==42) {
    var $390=$format_addr;
    var $391=$kpse_addr;
    var $format_info412=(($391+132)|0);
    var $arrayidx413=(($format_info412+($390)*(68))|0);
    var $type414=(($arrayidx413)|0);
    HEAP32[(($type414)>>2)]=((5265004)|0);
    var $392=$kpse_addr;
    var $393=$format_addr;
    var $394=$kpse_addr;
    var $format_info415=(($394+132)|0);
    var $arrayidx416=(($format_info415+($393)*(68))|0);
    _init_path($392, $arrayidx416, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264976)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call417=_concatn_with_spaces(((5264976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call417;
    var $395=$kpse_addr;
    var $396=$format_addr;
    _kpathsea_set_suffixes($395, $396, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264948)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $397=$kpse_addr;
    var $398=$format_addr;
    _kpathsea_set_suffixes($397, $398, 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264928)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
  } else if ((($6)|0)==43) {
    var $399=$format_addr;
    var $400=$kpse_addr;
    var $format_info419=(($400+132)|0);
    var $arrayidx420=(($format_info419+($399)*(68))|0);
    var $type421=(($arrayidx420)|0);
    HEAP32[(($type421)>>2)]=((5264904)|0);
    var $401=$kpse_addr;
    var $402=$format_addr;
    var $403=$kpse_addr;
    var $format_info422=(($403+132)|0);
    var $arrayidx423=(($format_info422+($402)*(68))|0);
    _init_path($401, $arrayidx423, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264860)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call424=_concatn_with_spaces(((5264860)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call424;
    var $404=$kpse_addr;
    var $405=$format_addr;
    _kpathsea_set_suffixes($404, $405, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264840)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264948)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $406=$kpse_addr;
    var $407=$format_addr;
    _kpathsea_set_suffixes($406, $407, 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264928)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
  } else if ((($6)|0)==44) {
    var $408=$format_addr;
    var $409=$kpse_addr;
    var $format_info426=(($409+132)|0);
    var $arrayidx427=(($format_info426+($408)*(68))|0);
    var $type428=(($arrayidx427)|0);
    HEAP32[(($type428)>>2)]=((5264812)|0);
    var $410=$kpse_addr;
    var $411=$format_addr;
    var $412=$kpse_addr;
    var $format_info429=(($412+132)|0);
    var $arrayidx430=(($format_info429+($411)*(68))|0);
    _init_path($410, $arrayidx430, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264736)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call431=_concatn_with_spaces(((5264736)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264684)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call431;
    var $413=$kpse_addr;
    var $414=$format_addr;
    _kpathsea_set_suffixes($413, $414, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264696)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $415=$format_addr;
    var $416=$kpse_addr;
    var $format_info432=(($416+132)|0);
    var $arrayidx433=(($format_info432+($415)*(68))|0);
    var $suffix_search_only434=(($arrayidx433+40)|0);
    HEAP32[(($suffix_search_only434)>>2)]=1;
  } else if ((($6)|0)==45) {
    var $417=$format_addr;
    var $418=$kpse_addr;
    var $format_info436=(($418+132)|0);
    var $arrayidx437=(($format_info436+($417)*(68))|0);
    var $type438=(($arrayidx437)|0);
    HEAP32[(($type438)>>2)]=((5264656)|0);
    var $419=$kpse_addr;
    var $420=$format_addr;
    var $421=$kpse_addr;
    var $format_info439=(($421+132)|0);
    var $arrayidx440=(($format_info439+($420)*(68))|0);
    _init_path($419, $arrayidx440, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264628)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call441=_concatn_with_spaces(((5264628)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264684)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call441;
  } else if ((($6)|0)==46) {
    var $422=$format_addr;
    var $423=$kpse_addr;
    var $format_info443=(($423+132)|0);
    var $arrayidx444=(($format_info443+($422)*(68))|0);
    var $type445=(($arrayidx444)|0);
    HEAP32[(($type445)>>2)]=((5264552)|0);
    var $424=$kpse_addr;
    var $425=$format_addr;
    var $426=$kpse_addr;
    var $format_info446=(($426+132)|0);
    var $arrayidx447=(($format_info446+($425)*(68))|0);
    _init_path($424, $arrayidx447, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264524)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call448=_concatn_with_spaces(((5264524)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264684)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call448;
    var $427=$kpse_addr;
    var $428=$format_addr;
    _kpathsea_set_suffixes($427, $428, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264500)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $429=$format_addr;
    var $430=$kpse_addr;
    var $format_info449=(($430+132)|0);
    var $arrayidx450=(($format_info449+($429)*(68))|0);
    var $suffix_search_only451=(($arrayidx450+40)|0);
    HEAP32[(($suffix_search_only451)>>2)]=1;
  } else if ((($6)|0)==47) {
    var $431=$format_addr;
    var $432=$kpse_addr;
    var $format_info453=(($432+132)|0);
    var $arrayidx454=(($format_info453+($431)*(68))|0);
    var $type455=(($arrayidx454)|0);
    HEAP32[(($type455)>>2)]=((5264432)|0);
    var $433=$kpse_addr;
    var $434=$format_addr;
    var $435=$kpse_addr;
    var $format_info456=(($435+132)|0);
    var $arrayidx457=(($format_info456+($434)*(68))|0);
    _init_path($433, $arrayidx457, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264388)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call458=_concatn_with_spaces(((5264388)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264684)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call458;
    var $436=$kpse_addr;
    var $437=$format_addr;
    _kpathsea_set_suffixes($436, $437, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264344)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $438=$format_addr;
    var $439=$kpse_addr;
    var $format_info459=(($439+132)|0);
    var $arrayidx460=(($format_info459+($438)*(68))|0);
    var $suffix_search_only461=(($arrayidx460+40)|0);
    HEAP32[(($suffix_search_only461)>>2)]=1;
    var $440=$format_addr;
    var $441=$kpse_addr;
    var $format_info462=(($441+132)|0);
    var $arrayidx463=(($format_info462+($440)*(68))|0);
    var $binmode464=(($arrayidx463+64)|0);
    HEAP32[(($binmode464)>>2)]=1;
  } else if ((($6)|0)==48) {
    var $442=$format_addr;
    var $443=$kpse_addr;
    var $format_info466=(($443+132)|0);
    var $arrayidx467=(($format_info466+($442)*(68))|0);
    var $type468=(($arrayidx467)|0);
    HEAP32[(($type468)>>2)]=((5264312)|0);
    var $444=$kpse_addr;
    var $445=$format_addr;
    var $446=$kpse_addr;
    var $format_info469=(($446+132)|0);
    var $arrayidx470=(($format_info469+($445)*(68))|0);
    _init_path($444, $arrayidx470, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264276)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call471=_concatn_with_spaces(((5264276)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call471;
  } else if ((($6)|0)==49) {
    var $447=$format_addr;
    var $448=$kpse_addr;
    var $format_info473=(($448+132)|0);
    var $arrayidx474=(($format_info473+($447)*(68))|0);
    var $type475=(($arrayidx474)|0);
    HEAP32[(($type475)>>2)]=((5264240)|0);
    var $449=$kpse_addr;
    var $450=$format_addr;
    var $451=$kpse_addr;
    var $format_info476=(($451+132)|0);
    var $arrayidx477=(($format_info476+($450)*(68))|0);
    _init_path($449, $arrayidx477, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264176)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call478=_concatn_with_spaces(((5264176)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264684)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call478;
    var $452=$kpse_addr;
    var $453=$format_addr;
    _kpathsea_set_suffixes($452, $453, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264148)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $454=$format_addr;
    var $455=$kpse_addr;
    var $format_info479=(($455+132)|0);
    var $arrayidx480=(($format_info479+($454)*(68))|0);
    var $suffix_search_only481=(($arrayidx480+40)|0);
    HEAP32[(($suffix_search_only481)>>2)]=1;
  } else if ((($6)|0)==50) {
    var $456=$format_addr;
    var $457=$kpse_addr;
    var $format_info483=(($457+132)|0);
    var $arrayidx484=(($format_info483+($456)*(68))|0);
    var $type485=(($arrayidx484)|0);
    HEAP32[(($type485)>>2)]=((5264092)|0);
    var $458=$kpse_addr;
    var $459=$format_addr;
    var $460=$kpse_addr;
    var $format_info486=(($460+132)|0);
    var $arrayidx487=(($format_info486+($459)*(68))|0);
    _init_path($458, $arrayidx487, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264056)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call488=_concatn_with_spaces(((5264056)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call488;
  } else if ((($6)|0)==51) {
    var $461=$format_addr;
    var $462=$kpse_addr;
    var $format_info490=(($462+132)|0);
    var $arrayidx491=(($format_info490+($461)*(68))|0);
    var $type492=(($arrayidx491)|0);
    HEAP32[(($type492)>>2)]=((5263992)|0);
    var $463=$kpse_addr;
    var $464=$format_addr;
    var $465=$kpse_addr;
    var $format_info493=(($465+132)|0);
    var $arrayidx494=(($format_info493+($464)*(68))|0);
    _init_path($463, $arrayidx494, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263952)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call495=_concatn_with_spaces(((5263952)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call495;
    var $466=$kpse_addr;
    var $467=$format_addr;
    _kpathsea_set_suffixes($466, $467, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 32)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263916)|0),HEAP32[(((tempInt)+(4))>>2)]=((5263868)|0),HEAP32[(((tempInt)+(8))>>2)]=((5263844)|0),HEAP32[(((tempInt)+(12))>>2)]=((5263808)|0),HEAP32[(((tempInt)+(16))>>2)]=((5263780)|0),HEAP32[(((tempInt)+(20))>>2)]=((5263696)|0),HEAP32[(((tempInt)+(24))>>2)]=((5263640)|0),HEAP32[(((tempInt)+(28))>>2)]=0,tempInt));
    var $468=$format_addr;
    var $469=$kpse_addr;
    var $format_info496=(($469+132)|0);
    var $arrayidx497=(($format_info496+($468)*(68))|0);
    var $suffix_search_only498=(($arrayidx497+40)|0);
    HEAP32[(($suffix_search_only498)>>2)]=1;
  } else if ((($6)|0)==54) {
    var $488=$format_addr;
    var $489=$kpse_addr;
    var $format_info520=(($489+132)|0);
    var $arrayidx521=(($format_info520+($488)*(68))|0);
    var $type522=(($arrayidx521)|0);
    HEAP32[(($type522)>>2)]=((5263260)|0);
    var $490=$kpse_addr;
    var $491=$format_addr;
    var $492=$kpse_addr;
    var $format_info523=(($492+132)|0);
    var $arrayidx524=(($format_info523+($491)*(68))|0);
    _init_path($490, $arrayidx524, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263216)|0),HEAP32[(((tempInt)+(4))>>2)]=((5257264)|0),HEAP32[(((tempInt)+(8))>>2)]=((5257232)|0),HEAP32[(((tempInt)+(12))>>2)]=0,tempInt));
    var $call525=_concatn_with_spaces(((5263216)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257264)|0),HEAP32[(((tempInt)+(4))>>2)]=((5257232)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    $envvar_list=$call525;
    var $493=$kpse_addr;
    var $494=$format_addr;
    _kpathsea_set_suffixes($493, $494, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263200)|0),HEAP32[(((tempInt)+(4))>>2)]=((5257092)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $495=$format_addr;
    var $496=$kpse_addr;
    var $format_info526=(($496+132)|0);
    var $arrayidx527=(($format_info526+($495)*(68))|0);
    var $suffix_search_only528=(($arrayidx527+40)|0);
    HEAP32[(($suffix_search_only528)>>2)]=1;
  } else if ((($6)|0)==57) {
    var $515=$format_addr;
    var $516=$kpse_addr;
    var $format_info550=(($516+132)|0);
    var $arrayidx551=(($format_info550+($515)*(68))|0);
    var $type552=(($arrayidx551)|0);
    HEAP32[(($type552)>>2)]=((5262856)|0);
    var $517=$kpse_addr;
    var $518=$format_addr;
    var $519=$kpse_addr;
    var $format_info553=(($519+132)|0);
    var $arrayidx554=(($format_info553+($518)*(68))|0);
    _init_path($517, $arrayidx554, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262820)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call555=_concatn_with_spaces(((5262820)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call555;
    var $520=$kpse_addr;
    var $521=$format_addr;
    _kpathsea_set_suffixes($520, $521, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262800)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $522=$format_addr;
    var $523=$kpse_addr;
    var $format_info556=(($523+132)|0);
    var $arrayidx557=(($format_info556+($522)*(68))|0);
    var $suffix_search_only558=(($arrayidx557+40)|0);
    HEAP32[(($suffix_search_only558)>>2)]=1;
  } else if ((($6)|0)==1) {
    var $18=$kpse_addr;
    var $19=$format_addr;
    _init_maketex($18, $19, ((5264268)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 36)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263832)|0),HEAP32[(((tempInt)+(4))>>2)]=((5263324)|0),HEAP32[(((tempInt)+(8))>>2)]=((5262968)|0),HEAP32[(((tempInt)+(12))>>2)]=((5262552)|0),HEAP32[(((tempInt)+(16))>>2)]=((5262004)|0),HEAP32[(((tempInt)+(20))>>2)]=((5261364)|0),HEAP32[(((tempInt)+(24))>>2)]=((5260956)|0),HEAP32[(((tempInt)+(28))>>2)]=((5260636)|0),HEAP32[(((tempInt)+(32))>>2)]=0,tempInt));
    var $20=$format_addr;
    var $21=$kpse_addr;
    var $format_info13=(($21+132)|0);
    var $arrayidx14=(($format_info13+($20)*(68))|0);
    var $type15=(($arrayidx14)|0);
    HEAP32[(($type15)>>2)]=((5256140)|0);
    var $22=$kpse_addr;
    var $23=$format_addr;
    var $24=$kpse_addr;
    var $format_info16=(($24+132)|0);
    var $arrayidx17=(($format_info16+($23)*(68))|0);
    _init_path($22, $arrayidx17, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5260208)|0),HEAP32[(((tempInt)+(4))>>2)]=((5259912)|0),HEAP32[(((tempInt)+(8))>>2)]=((5265024)|0),HEAP32[(((tempInt)+(12))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(16))>>2)]=0,tempInt));
    var $call18=_concatn_with_spaces(((5260208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5259912)|0),HEAP32[(((tempInt)+(4))>>2)]=((5265024)|0),HEAP32[(((tempInt)+(8))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(12))>>2)]=0,tempInt));
    $envvar_list=$call18;
    var $25=$kpse_addr;
    var $26=$format_addr;
    _kpathsea_set_suffixes($25, $26, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5256140)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $27=$format_addr;
    var $28=$kpse_addr;
    var $format_info19=(($28+132)|0);
    var $arrayidx20=(($format_info19+($27)*(68))|0);
    var $suffix_search_only21=(($arrayidx20+40)|0);
    HEAP32[(($suffix_search_only21)>>2)]=1;
    var $29=$format_addr;
    var $30=$kpse_addr;
    var $format_info22=(($30+132)|0);
    var $arrayidx23=(($format_info22+($29)*(68))|0);
    var $binmode24=(($arrayidx23+64)|0);
    HEAP32[(($binmode24)>>2)]=1;
  } else if ((($6)|0)==3) {
    var $42=$kpse_addr;
    var $43=$format_addr;
    _init_maketex($42, $43, ((5259160)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    var $44=$format_addr;
    var $45=$kpse_addr;
    var $format_info39=(($45+132)|0);
    var $arrayidx40=(($format_info39+($44)*(68))|0);
    var $type41=(($arrayidx40)|0);
    HEAP32[(($type41)>>2)]=((5253960)|0);
    var $46=$kpse_addr;
    var $47=$format_addr;
    var $48=$kpse_addr;
    var $format_info42=(($48+132)|0);
    var $arrayidx43=(($format_info42+($47)*(68))|0);
    _init_path($46, $arrayidx43, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5258908)|0),HEAP32[(((tempInt)+(4))>>2)]=((5264684)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call44=_concatn_with_spaces(((5258908)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5264684)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call44;
    var $49=$kpse_addr;
    var $50=$format_addr;
    _kpathsea_set_suffixes($49, $50, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5258604)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $51=$format_addr;
    var $52=$kpse_addr;
    var $format_info45=(($52+132)|0);
    var $arrayidx46=(($format_info45+($51)*(68))|0);
    var $suffix_search_only47=(($arrayidx46+40)|0);
    HEAP32[(($suffix_search_only47)>>2)]=1;
    var $53=$format_addr;
    var $54=$kpse_addr;
    var $format_info48=(($54+132)|0);
    var $arrayidx49=(($format_info48+($53)*(68))|0);
    var $binmode50=(($arrayidx49+64)|0);
    HEAP32[(($binmode50)>>2)]=1;
  } else if ((($6)|0)==58) {
    var $524=$format_addr;
    var $525=$kpse_addr;
    var $format_info560=(($525+132)|0);
    var $arrayidx561=(($format_info560+($524)*(68))|0);
    var $type562=(($arrayidx561)|0);
    HEAP32[(($type562)>>2)]=((5262744)|0);
    var $526=$kpse_addr;
    var $527=$format_addr;
    var $528=$kpse_addr;
    var $format_info563=(($528+132)|0);
    var $arrayidx564=(($format_info563+($527)*(68))|0);
    _init_path($526, $arrayidx564, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262700)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call565=_concatn_with_spaces(((5262700)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call565;
    var $529=$kpse_addr;
    var $530=$format_addr;
    _kpathsea_set_suffixes($529, $530, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262672)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $531=$format_addr;
    var $532=$kpse_addr;
    var $format_info566=(($532+132)|0);
    var $arrayidx567=(($format_info566+($531)*(68))|0);
    var $suffix_search_only568=(($arrayidx567+40)|0);
    HEAP32[(($suffix_search_only568)>>2)]=1;
  } else if ((($6)|0)==53) {
    var $479=$format_addr;
    var $480=$kpse_addr;
    var $format_info510=(($480+132)|0);
    var $arrayidx511=(($format_info510+($479)*(68))|0);
    var $type512=(($arrayidx511)|0);
    HEAP32[(($type512)>>2)]=((5263412)|0);
    var $481=$kpse_addr;
    var $482=$format_addr;
    var $483=$kpse_addr;
    var $format_info513=(($483+132)|0);
    var $arrayidx514=(($format_info513+($482)*(68))|0);
    _init_path($481, $arrayidx514, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263376)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call515=_concatn_with_spaces(((5263376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call515;
    var $484=$kpse_addr;
    var $485=$format_addr;
    _kpathsea_set_suffixes($484, $485, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263340)|0),HEAP32[(((tempInt)+(4))>>2)]=((5263304)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $486=$format_addr;
    var $487=$kpse_addr;
    var $format_info516=(($487+132)|0);
    var $arrayidx517=(($format_info516+($486)*(68))|0);
    var $suffix_search_only518=(($arrayidx517+40)|0);
    HEAP32[(($suffix_search_only518)>>2)]=1;
  } else if ((($6)|0)==55) {
    var $497=$format_addr;
    var $498=$kpse_addr;
    var $format_info530=(($498+132)|0);
    var $arrayidx531=(($format_info530+($497)*(68))|0);
    var $type532=(($arrayidx531)|0);
    HEAP32[(($type532)>>2)]=((5263184)|0);
    var $499=$kpse_addr;
    var $500=$format_addr;
    var $501=$kpse_addr;
    var $format_info533=(($501+132)|0);
    var $arrayidx534=(($format_info533+($500)*(68))|0);
    _init_path($499, $arrayidx534, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263144)|0),HEAP32[(((tempInt)+(4))>>2)]=((5257036)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $call535=_concatn_with_spaces(((5263144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5257036)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    $envvar_list=$call535;
    var $502=$kpse_addr;
    var $503=$format_addr;
    _kpathsea_set_suffixes($502, $503, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263096)|0),HEAP32[(((tempInt)+(4))>>2)]=((5257008)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $504=$format_addr;
    var $505=$kpse_addr;
    var $format_info536=(($505+132)|0);
    var $arrayidx537=(($format_info536+($504)*(68))|0);
    var $suffix_search_only538=(($arrayidx537+40)|0);
    HEAP32[(($suffix_search_only538)>>2)]=1;
  } else if ((($6)|0)==56) {
    var $506=$format_addr;
    var $507=$kpse_addr;
    var $format_info540=(($507+132)|0);
    var $arrayidx541=(($format_info540+($506)*(68))|0);
    var $type542=(($arrayidx541)|0);
    HEAP32[(($type542)>>2)]=((5263072)|0);
    var $508=$kpse_addr;
    var $509=$format_addr;
    var $510=$kpse_addr;
    var $format_info543=(($510+132)|0);
    var $arrayidx544=(($format_info543+($509)*(68))|0);
    _init_path($508, $arrayidx544, ((5263004)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262976)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call545=_concatn_with_spaces(((5262976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call545;
    var $511=$kpse_addr;
    var $512=$format_addr;
    _kpathsea_set_suffixes($511, $512, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5262932)|0),HEAP32[(((tempInt)+(4))>>2)]=((5262916)|0),HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
    var $513=$format_addr;
    var $514=$kpse_addr;
    var $format_info546=(($514+132)|0);
    var $arrayidx547=(($format_info546+($513)*(68))|0);
    var $suffix_search_only548=(($arrayidx547+40)|0);
    HEAP32[(($suffix_search_only548)>>2)]=1;
  } else if ((($6)|0)==52) {
    var $470=$format_addr;
    var $471=$kpse_addr;
    var $format_info500=(($471+132)|0);
    var $arrayidx501=(($format_info500+($470)*(68))|0);
    var $type502=(($arrayidx501)|0);
    HEAP32[(($type502)>>2)]=((5263592)|0);
    var $472=$kpse_addr;
    var $473=$format_addr;
    var $474=$kpse_addr;
    var $format_info503=(($474+132)|0);
    var $arrayidx504=(($format_info503+($473)*(68))|0);
    _init_path($472, $arrayidx504, ((5265644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263480)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $call505=_concatn_with_spaces(((5263480)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    $envvar_list=$call505;
    var $475=$kpse_addr;
    var $476=$format_addr;
    _kpathsea_set_suffixes($475, $476, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5263460)|0),HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
    var $477=$format_addr;
    var $478=$kpse_addr;
    var $format_info506=(($478+132)|0);
    var $arrayidx507=(($format_info506+($477)*(68))|0);
    var $suffix_search_only508=(($arrayidx507+40)|0);
    HEAP32[(($suffix_search_only508)>>2)]=1;
  } else {
    var $533=HEAP32[((_stderr)>>2)];
    var $534=$kpse_addr;
    var $invocation_name=(($534+104)|0);
    var $535=HEAP32[(($invocation_name)>>2)];
    var $call569=_fprintf($533, ((5262620)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$535,tempInt));
    var $536=HEAP32[((_stderr)>>2)];
    var $537=$format_addr;
    var $call570=_fprintf($536, ((5262572)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$537,tempInt));
    var $538=HEAP32[((_stderr)>>2)];
    var $call571=_fputs(((5257088)|0), $538);
    _exit(1);
    throw "Reached an unreachable!"
  }
  var $539=$kpse_addr;
  var $debug=(($539+44)|0);
  var $540=HEAP32[(($debug)>>2)];
  var $and=$540 & 8;
  var $tobool572=(($and)|0)!=0;
  if ($tobool572) {
    var $541=HEAP32[((_stderr)>>2)];
    var $call575=_fputs(((5262528)|0), $541);
    var $542=HEAP32[((_stderr)>>2)];
    var $543=$format_addr;
    var $544=$kpse_addr;
    var $format_info576=(($544+132)|0);
    var $arrayidx577=(($format_info576+($543)*(68))|0);
    var $type578=(($arrayidx577)|0);
    var $545=HEAP32[(($type578)>>2)];
    var $546=$format_addr;
    var $547=$kpse_addr;
    var $format_info579=(($547+132)|0);
    var $arrayidx580=(($format_info579+($546)*(68))|0);
    var $path_source=(($arrayidx580+12)|0);
    var $548=HEAP32[(($path_source)>>2)];
    var $call581=_fprintf($542, ((5262452)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$545,HEAP32[(((tempInt)+(4))>>2)]=$548,tempInt));
    var $549=HEAP32[((_stderr)>>2)];
    var $call582=_fflush($549);
    var $550=HEAP32[((_stderr)>>2)];
    var $call585=_fputs(((5262528)|0), $550);
    var $551=HEAP32[((_stderr)>>2)];
    var $552=$format_addr;
    var $553=$kpse_addr;
    var $format_info586=(($553+132)|0);
    var $arrayidx587=(($format_info586+($552)*(68))|0);
    var $path588=(($arrayidx587+4)|0);
    var $554=HEAP32[(($path588)>>2)];
    var $call589=_fprintf($551, ((5262376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$554,tempInt));
    var $555=HEAP32[((_stderr)>>2)];
    var $call590=_fflush($555);
    var $556=HEAP32[((_stderr)>>2)];
    var $call593=_fputs(((5262528)|0), $556);
    var $557=HEAP32[((_stderr)>>2)];
    var $558=$format_addr;
    var $559=$kpse_addr;
    var $format_info594=(($559+132)|0);
    var $arrayidx595=(($format_info594+($558)*(68))|0);
    var $raw_path=(($arrayidx595+8)|0);
    var $560=HEAP32[(($raw_path)>>2)];
    var $call596=_fprintf($557, ((5262328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$560,tempInt));
    var $561=HEAP32[((_stderr)>>2)];
    var $call597=_fflush($561);
    var $562=HEAP32[((_stderr)>>2)];
    var $call600=_fputs(((5262528)|0), $562);
    var $563=HEAP32[((_stderr)>>2)];
    var $564=$format_addr;
    var $565=$kpse_addr;
    var $format_info601=(($565+132)|0);
    var $arrayidx602=(($format_info601+($564)*(68))|0);
    var $override_path=(($arrayidx602+16)|0);
    var $566=HEAP32[(($override_path)>>2)];
    var $tobool603=(($566)|0)!=0;
    if ($tobool603) {
      var $567=$format_addr;
      var $568=$kpse_addr;
      var $format_info604=(($568+132)|0);
      var $arrayidx605=(($format_info604+($567)*(68))|0);
      var $override_path606=(($arrayidx605+16)|0);
      var $569=HEAP32[(($override_path606)>>2)];
      var $cond = $569;
    } else {
      var $cond = ((5262208)|0);
    }
    var $cond;
    var $call607=_fprintf($563, ((5262276)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond,tempInt));
    var $570=HEAP32[((_stderr)>>2)];
    var $call608=_fflush($570);
    var $571=HEAP32[((_stderr)>>2)];
    var $call611=_fputs(((5262528)|0), $571);
    var $572=HEAP32[((_stderr)>>2)];
    var $573=$format_addr;
    var $574=$kpse_addr;
    var $format_info612=(($574+132)|0);
    var $arrayidx613=(($format_info612+($573)*(68))|0);
    var $client_path=(($arrayidx613+20)|0);
    var $575=HEAP32[(($client_path)>>2)];
    var $tobool614=(($575)|0)!=0;
    if ($tobool614) {
      var $576=$format_addr;
      var $577=$kpse_addr;
      var $format_info616=(($577+132)|0);
      var $arrayidx617=(($format_info616+($576)*(68))|0);
      var $client_path618=(($arrayidx617+20)|0);
      var $578=HEAP32[(($client_path618)>>2)];
      var $cond621 = $578;
    } else {
      var $cond621 = ((5262208)|0);
    }
    var $cond621;
    var $call622=_fprintf($572, ((5262152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond621,tempInt));
    var $579=HEAP32[((_stderr)>>2)];
    var $call623=_fflush($579);
    var $580=HEAP32[((_stderr)>>2)];
    var $call626=_fputs(((5262528)|0), $580);
    var $581=HEAP32[((_stderr)>>2)];
    var $582=$format_addr;
    var $583=$kpse_addr;
    var $format_info627=(($583+132)|0);
    var $arrayidx628=(($format_info627+($582)*(68))|0);
    var $cnf_path=(($arrayidx628+24)|0);
    var $584=HEAP32[(($cnf_path)>>2)];
    var $tobool629=(($584)|0)!=0;
    if ($tobool629) {
      var $585=$format_addr;
      var $586=$kpse_addr;
      var $format_info631=(($586+132)|0);
      var $arrayidx632=(($format_info631+($585)*(68))|0);
      var $cnf_path633=(($arrayidx632+24)|0);
      var $587=HEAP32[(($cnf_path633)>>2)];
      var $cond636 = $587;
    } else {
      var $cond636 = ((5262208)|0);
    }
    var $cond636;
    var $call637=_fprintf($581, ((5262120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond636,tempInt));
    var $588=HEAP32[((_stderr)>>2)];
    var $call638=_fflush($588);
    var $589=HEAP32[((_stderr)>>2)];
    var $call641=_fputs(((5262528)|0), $589);
    var $590=HEAP32[((_stderr)>>2)];
    var $591=$format_addr;
    var $592=$kpse_addr;
    var $format_info642=(($592+132)|0);
    var $arrayidx643=(($format_info642+($591)*(68))|0);
    var $default_path=(($arrayidx643+28)|0);
    var $593=HEAP32[(($default_path)>>2)];
    var $tobool644=(($593)|0)!=0;
    if ($tobool644) {
      var $594=$format_addr;
      var $595=$kpse_addr;
      var $format_info646=(($595+132)|0);
      var $arrayidx647=(($format_info646+($594)*(68))|0);
      var $default_path648=(($arrayidx647+28)|0);
      var $596=HEAP32[(($default_path648)>>2)];
      var $cond651 = $596;
    } else {
      var $cond651 = ((5262208)|0);
    }
    var $cond651;
    var $call652=_fprintf($590, ((5262080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond651,tempInt));
    var $597=HEAP32[((_stderr)>>2)];
    var $call653=_fflush($597);
    var $598=HEAP32[((_stderr)>>2)];
    var $call656=_fputs(((5262528)|0), $598);
    var $599=HEAP32[((_stderr)>>2)];
    var $600=$envvar_list;
    var $call657=_fprintf($599, ((5262012)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$600,tempInt));
    var $601=HEAP32[((_stderr)>>2)];
    var $call658=_fflush($601);
    var $602=HEAP32[((_stderr)>>2)];
    var $call661=_fputs(((5262528)|0), $602);
    var $603=HEAP32[((_stderr)>>2)];
    var $call662=_fputs(((5261952)|0), $603);
    var $604=HEAP32[((_stderr)>>2)];
    var $call663=_fflush($604);
    var $605=$format_addr;
    var $606=$kpse_addr;
    var $format_info665=(($606+132)|0);
    var $arrayidx666=(($format_info665+($605)*(68))|0);
    var $suffix=(($arrayidx666+32)|0);
    var $607=HEAP32[(($suffix)>>2)];
    var $tobool667=(($607)|0)!=0;
    if ($tobool667) {
      var $608=$format_addr;
      var $609=$kpse_addr;
      var $format_info669=(($609+132)|0);
      var $arrayidx670=(($format_info669+($608)*(68))|0);
      var $suffix671=(($arrayidx670+32)|0);
      var $610=HEAP32[(($suffix671)>>2)];
      $ext=$610;
      while(1) {
        var $611=$ext;
        var $tobool672=(($611)|0)!=0;
        if ($tobool672) {
          var $612=$ext;
          var $613=HEAP32[(($612)>>2)];
          var $tobool673=(($613)|0)!=0;
          var $614 = $tobool673;
        } else {
          var $614 = 0;
        }
        var $614;
        if (!($614)) {
          break;
        }
        var $615=HEAP32[((_stderr)>>2)];
        var $616=$ext;
        var $617=HEAP32[(($616)>>2)];
        var $call674=_fprintf($615, ((5261936)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$617,tempInt));
        var $618=$ext;
        var $incdec_ptr=(($618+4)|0);
        $ext=$incdec_ptr;
      }
      var $619=HEAP32[((_stderr)>>2)];
      var $call675=_fputc(10, $619);
    } else {
      var $620=HEAP32[((_stderr)>>2)];
      var $call676=_fputs(((5261860)|0), $620);
    }
    var $621=HEAP32[((_stderr)>>2)];
    var $call679=_fputs(((5262528)|0), $621);
    var $622=HEAP32[((_stderr)>>2)];
    var $call680=_fputs(((5261796)|0), $622);
    var $623=HEAP32[((_stderr)>>2)];
    var $call681=_fflush($623);
    var $624=$format_addr;
    var $625=$kpse_addr;
    var $format_info683=(($625+132)|0);
    var $arrayidx684=(($format_info683+($624)*(68))|0);
    var $alt_suffix=(($arrayidx684+36)|0);
    var $626=HEAP32[(($alt_suffix)>>2)];
    var $tobool685=(($626)|0)!=0;
    if ($tobool685) {
      var $627=$format_addr;
      var $628=$kpse_addr;
      var $format_info687=(($628+132)|0);
      var $arrayidx688=(($format_info687+($627)*(68))|0);
      var $alt_suffix689=(($arrayidx688+36)|0);
      var $629=HEAP32[(($alt_suffix689)>>2)];
      $alt=$629;
      while(1) {
        var $630=$alt;
        var $tobool691=(($630)|0)!=0;
        if ($tobool691) {
          var $631=$alt;
          var $632=HEAP32[(($631)>>2)];
          var $tobool693=(($632)|0)!=0;
          var $633 = $tobool693;
        } else {
          var $633 = 0;
        }
        var $633;
        if (!($633)) {
          break;
        }
        var $634=HEAP32[((_stderr)>>2)];
        var $635=$alt;
        var $636=HEAP32[(($635)>>2)];
        var $call696=_fprintf($634, ((5261936)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$636,tempInt));
        var $637=$alt;
        var $incdec_ptr698=(($637+4)|0);
        $alt=$incdec_ptr698;
      }
      var $638=HEAP32[((_stderr)>>2)];
      var $call700=_fputc(10, $638);
    } else {
      var $639=HEAP32[((_stderr)>>2)];
      var $call702=_fputs(((5261860)|0), $639);
    }
    var $640=HEAP32[((_stderr)>>2)];
    var $call705=_fputs(((5262528)|0), $640);
    var $641=HEAP32[((_stderr)>>2)];
    var $642=$format_addr;
    var $643=$kpse_addr;
    var $format_info706=(($643+132)|0);
    var $arrayidx707=(($format_info706+($642)*(68))|0);
    var $suffix_search_only708=(($arrayidx707+40)|0);
    var $644=HEAP32[(($suffix_search_only708)>>2)];
    var $call709=_fprintf($641, ((5261748)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$644,tempInt));
    var $645=HEAP32[((_stderr)>>2)];
    var $call710=_fflush($645);
    var $646=HEAP32[((_stderr)>>2)];
    var $call713=_fputs(((5262528)|0), $646);
    var $647=HEAP32[((_stderr)>>2)];
    var $648=$format_addr;
    var $649=$kpse_addr;
    var $format_info714=(($649+132)|0);
    var $arrayidx715=(($format_info714+($648)*(68))|0);
    var $program=(($arrayidx715+44)|0);
    var $650=HEAP32[(($program)>>2)];
    var $tobool716=(($650)|0)!=0;
    if ($tobool716) {
      var $651=$format_addr;
      var $652=$kpse_addr;
      var $format_info718=(($652+132)|0);
      var $arrayidx719=(($format_info718+($651)*(68))|0);
      var $program720=(($arrayidx719+44)|0);
      var $653=HEAP32[(($program720)>>2)];
      var $cond723 = $653;
    } else {
      var $cond723 = ((5262208)|0);
    }
    var $cond723;
    var $call724=_fprintf($647, ((5261684)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$cond723,tempInt));
    var $654=HEAP32[((_stderr)>>2)];
    var $call725=_fflush($654);
    var $655=HEAP32[((_stderr)>>2)];
    var $call728=_fputs(((5262528)|0), $655);
    var $656=HEAP32[((_stderr)>>2)];
    var $call729=_fputs(((5261576)|0), $656);
    var $657=HEAP32[((_stderr)>>2)];
    var $call730=_fflush($657);
    var $658=$format_addr;
    var $659=$kpse_addr;
    var $format_info732=(($659+132)|0);
    var $arrayidx733=(($format_info732+($658)*(68))|0);
    var $argv=(($arrayidx733+52)|0);
    var $660=HEAP32[(($argv)>>2)];
    var $tobool734=(($660)|0)!=0;
    if ($tobool734) {
      var $661=$format_addr;
      var $662=$kpse_addr;
      var $format_info736=(($662+132)|0);
      var $arrayidx737=(($format_info736+($661)*(68))|0);
      var $argv738=(($arrayidx737+52)|0);
      var $663=HEAP32[(($argv738)>>2)];
      $arg=$663;
      while(1) {
        var $664=$arg;
        var $665=HEAP32[(($664)>>2)];
        var $tobool740=(($665)|0)!=0;
        if (!($tobool740)) {
          break;
        }
        var $666=HEAP32[((_stderr)>>2)];
        var $667=$arg;
        var $668=HEAP32[(($667)>>2)];
        var $call742=_fprintf($666, ((5261936)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$668,tempInt));
        var $669=$arg;
        var $incdec_ptr744=(($669+4)|0);
        $arg=$incdec_ptr744;
      }
      var $670=HEAP32[((_stderr)>>2)];
      var $call746=_fputc(10, $670);
    } else {
      var $671=HEAP32[((_stderr)>>2)];
      var $call748=_fputs(((5261860)|0), $671);
    }
    var $672=HEAP32[((_stderr)>>2)];
    var $call751=_fputs(((5262528)|0), $672);
    var $673=HEAP32[((_stderr)>>2)];
    var $674=$format_addr;
    var $675=$kpse_addr;
    var $format_info752=(($675+132)|0);
    var $arrayidx753=(($format_info752+($674)*(68))|0);
    var $program_enabled_p=(($arrayidx753+56)|0);
    var $676=HEAP32[(($program_enabled_p)>>2)];
    var $call754=_fprintf($673, ((5261520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$676,tempInt));
    var $677=HEAP32[((_stderr)>>2)];
    var $call755=_fflush($677);
    var $678=HEAP32[((_stderr)>>2)];
    var $call758=_fputs(((5262528)|0), $678);
    var $679=HEAP32[((_stderr)>>2)];
    var $680=$format_addr;
    var $681=$kpse_addr;
    var $format_info759=(($681+132)|0);
    var $arrayidx760=(($format_info759+($680)*(68))|0);
    var $program_enable_level=(($arrayidx760+60)|0);
    var $682=HEAP32[(($program_enable_level)>>2)];
    var $call761=_fprintf($679, ((5261444)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$682,tempInt));
    var $683=HEAP32[((_stderr)>>2)];
    var $call762=_fflush($683);
    var $684=HEAP32[((_stderr)>>2)];
    var $call765=_fputs(((5262528)|0), $684);
    var $685=HEAP32[((_stderr)>>2)];
    var $686=$format_addr;
    var $687=$kpse_addr;
    var $format_info766=(($687+132)|0);
    var $arrayidx767=(($format_info766+($686)*(68))|0);
    var $binmode768=(($arrayidx767+64)|0);
    var $688=HEAP32[(($binmode768)>>2)];
    var $call769=_fprintf($685, ((5261380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$688,tempInt));
    var $689=HEAP32[((_stderr)>>2)];
    var $call770=_fflush($689);
    var $690=HEAP32[((_stderr)>>2)];
    var $call773=_fputs(((5262528)|0), $690);
    var $691=HEAP32[((_stderr)>>2)];
    var $692=$format_addr;
    var $call774=_fprintf($691, ((5261296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$692,tempInt));
    var $693=HEAP32[((_stderr)>>2)];
    var $call775=_fflush($693);
  }
  var $694=$format_addr;
  var $695=$kpse_addr;
  var $format_info778=(($695+132)|0);
  var $arrayidx779=(($format_info778+($694)*(68))|0);
  var $path780=(($arrayidx779+4)|0);
  var $696=HEAP32[(($path780)>>2)];
  $retval=$696;
  var $697=$retval;
  STACKTOP = __stackBase__;
  return $697;
}
_kpathsea_init_format["X"]=1;

function _init_path($kpse, $info, $default_path, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $info_addr;
  var $default_path_addr;
  var $env_name;
  var $env_value;
  var $var;
  var $tmp;
  var $ap=__stackBase__;
  var $evar;
  var $loc;
  $kpse_addr=$kpse;
  $info_addr=$info;
  $default_path_addr=$default_path;
  $env_value=0;
  $var=0;
  var $0=$default_path_addr;
  var $1=$info_addr;
  var $default_path2=(($1+28)|0);
  HEAP32[(($default_path2)>>2)]=$0;
  var $ap3=$ap;
  HEAP32[(($ap3)>>2)]=varrp;
  while(1) {
    var $ap_cur=HEAP32[(($ap)>>2)];
    var $2=$ap_cur;
    var $ap_next=(($ap_cur+4)|0);
    HEAP32[(($ap)>>2)]=$ap_next;
    var $3=HEAP32[(($2)>>2)];
    $env_name=$3;
    var $cmp=(($3)|0)!=0;
    if (!($cmp)) {
      break;
    }
    var $4=$var;
    var $tobool=(($4)|0)!=0;
    if (!($tobool)) {
      var $5=$env_name;
      var $6=$kpse_addr;
      var $program_name=(($6+112)|0);
      var $7=HEAP32[(($program_name)>>2)];
      var $call=_concat3($5, ((5265248)|0), $7);
      $evar=$call;
      var $8=$evar;
      var $call5=_getenv($8);
      $env_value=$call5;
      var $9=$env_value;
      var $tobool6=(($9)|0)!=0;
      do {
        if ($tobool6) {
          var $10=$env_value;
          var $11=HEAP8[($10)];
          var $conv=(($11 << 24) >> 24);
          var $tobool7=(($conv)|0)!=0;
          if (!($tobool7)) {
            label = 592;
            break;
          }
          var $12=$evar;
          $var=$12;
          break;
        } else {
          label = 592;
        }
      } while(0);
      if (label == 592) {
        label = 0;
        var $13=$evar;
        _free($13);
        var $14=$env_name;
        var $15=$kpse_addr;
        var $program_name9=(($15+112)|0);
        var $16=HEAP32[(($program_name9)>>2)];
        var $call10=_concat3($14, ((5260620)|0), $16);
        $evar=$call10;
        var $17=$evar;
        var $call11=_getenv($17);
        $env_value=$call11;
        var $18=$env_value;
        var $tobool12=(($18)|0)!=0;
        do {
          if ($tobool12) {
            var $19=$env_value;
            var $20=HEAP8[($19)];
            var $conv14=(($20 << 24) >> 24);
            var $tobool15=(($conv14)|0)!=0;
            if (!($tobool15)) {
              label = 595;
              break;
            }
            var $21=$evar;
            $var=$21;
            break;
          } else {
            label = 595;
          }
        } while(0);
        if (label == 595) {
          label = 0;
          var $22=$evar;
          _free($22);
          var $23=$env_name;
          var $call18=_getenv($23);
          $env_value=$call18;
          var $24=$env_value;
          var $tobool19=(($24)|0)!=0;
          do {
            if ($tobool19) {
              var $25=$env_value;
              var $26=HEAP8[($25)];
              var $conv21=(($26 << 24) >> 24);
              var $tobool22=(($conv21)|0)!=0;
              if (!($tobool22)) {
                break;
              }
              var $27=$env_name;
              $var=$27;
            }
          } while(0);
        }
      }
    }
    var $28=$info_addr;
    var $cnf_path=(($28+24)|0);
    var $29=HEAP32[(($cnf_path)>>2)];
    var $tobool27=(($29)|0)!=0;
    do {
      if (!($tobool27)) {
        var $30=$info_addr;
        var $31=$kpse_addr;
        var $format_info=(($31+132)|0);
        var $arrayidx=(($format_info+544)|0);
        var $cmp29=(($30)|0)!=(($arrayidx)|0);
        if (!($cmp29)) {
          break;
        }
        var $32=$kpse_addr;
        var $33=$env_name;
        var $call32=_kpathsea_cnf_get($32, $33);
        var $34=$info_addr;
        var $cnf_path33=(($34+24)|0);
        HEAP32[(($cnf_path33)>>2)]=$call32;
      }
    } while(0);
    var $35=$var;
    var $tobool35=(($35)|0)!=0;
    if ($tobool35) {
      var $36=$info_addr;
      var $cnf_path37=(($36+24)|0);
      var $37=HEAP32[(($cnf_path37)>>2)];
      var $tobool38=(($37)|0)!=0;
      if ($tobool38) {
        label = 606;
        break;
      }
    }
  }
  if (label == 606) {
  }
  var $ap41=$ap;

  var $38=$info_addr;
  var $default_path42=(($38+28)|0);
  var $39=HEAP32[(($default_path42)>>2)];
  var $40=$info_addr;
  var $raw_path=(($40+8)|0);
  HEAP32[(($raw_path)>>2)]=$39;
  var $41=$info_addr;
  var $raw_path43=(($41+8)|0);
  var $42=HEAP32[(($raw_path43)>>2)];
  var $call44=_xstrdup($42);
  var $43=$info_addr;
  var $path=(($43+4)|0);
  HEAP32[(($path)>>2)]=$call44;
  var $44=$info_addr;
  var $path_source=(($44+12)|0);
  HEAP32[(($path_source)>>2)]=((5260552)|0);
  var $45=$info_addr;
  var $cnf_path45=(($45+24)|0);
  var $46=HEAP32[(($cnf_path45)>>2)];
  var $tobool46=(($46)|0)!=0;
  if ($tobool46) {
    var $47=$info_addr;
    var $cnf_path48=(($47+24)|0);
    var $48=HEAP32[(($cnf_path48)>>2)];
    var $49=$info_addr;
    var $raw_path49=(($49+8)|0);
    HEAP32[(($raw_path49)>>2)]=$48;
    var $50=$info_addr;
    var $path50=(($50+4)|0);
    var $51=HEAP32[(($path50)>>2)];
    $tmp=$51;
    var $52=$kpse_addr;
    var $53=$info_addr;
    var $cnf_path51=(($53+24)|0);
    var $54=HEAP32[(($cnf_path51)>>2)];
    var $55=$info_addr;
    var $path52=(($55+4)|0);
    var $56=HEAP32[(($path52)>>2)];
    var $call53=_kpathsea_expand_default($52, $54, $56);
    var $57=$info_addr;
    var $path54=(($57+4)|0);
    HEAP32[(($path54)>>2)]=$call53;
    var $58=$tmp;
    _free($58);
    var $59=$info_addr;
    var $path_source55=(($59+12)|0);
    HEAP32[(($path_source55)>>2)]=((5260492)|0);
  }
  var $60=$info_addr;
  var $client_path=(($60+20)|0);
  var $61=HEAP32[(($client_path)>>2)];
  var $tobool57=(($61)|0)!=0;
  if ($tobool57) {
    var $62=$info_addr;
    var $client_path59=(($62+20)|0);
    var $63=HEAP32[(($client_path59)>>2)];
    var $64=$info_addr;
    var $raw_path60=(($64+8)|0);
    HEAP32[(($raw_path60)>>2)]=$63;
    var $65=$info_addr;
    var $path61=(($65+4)|0);
    var $66=HEAP32[(($path61)>>2)];
    $tmp=$66;
    var $67=$kpse_addr;
    var $68=$info_addr;
    var $client_path62=(($68+20)|0);
    var $69=HEAP32[(($client_path62)>>2)];
    var $70=$info_addr;
    var $path63=(($70+4)|0);
    var $71=HEAP32[(($path63)>>2)];
    var $call64=_kpathsea_expand_default($67, $69, $71);
    var $72=$info_addr;
    var $path65=(($72+4)|0);
    HEAP32[(($path65)>>2)]=$call64;
    var $73=$tmp;
    _free($73);
    var $74=$info_addr;
    var $path_source66=(($74+12)|0);
    HEAP32[(($path_source66)>>2)]=((5260440)|0);
  }
  var $75=$var;
  var $tobool68=(($75)|0)!=0;
  if ($tobool68) {
    var $76=$env_value;
    var $call71=_xstrdup($76);
    $env_value=$call71;
    var $77=$env_value;
    $loc=$77;
    while(1) {
      var $78=$loc;
      var $79=HEAP8[($78)];
      var $tobool72=(($79 << 24) >> 24)!=0;
      if (!($tobool72)) {
        break;
      }
      var $80=$loc;
      var $81=HEAP8[($80)];
      var $conv73=(($81 << 24) >> 24);
      var $cmp74=(($conv73)|0)==59;
      if ($cmp74) {
        var $82=$loc;
        HEAP8[($82)]=58;
      }
      var $83=$loc;
      var $incdec_ptr=(($83+1)|0);
      $loc=$incdec_ptr;
    }
    var $84=$env_value;
    var $tobool78=(($84)|0)!=0;
    if ($tobool78) {
      var $85=$env_value;
      var $86=$info_addr;
      var $raw_path80=(($86+8)|0);
      HEAP32[(($raw_path80)>>2)]=$85;
      var $87=$info_addr;
      var $path81=(($87+4)|0);
      var $88=HEAP32[(($path81)>>2)];
      $tmp=$88;
      var $89=$kpse_addr;
      var $90=$env_value;
      var $91=$info_addr;
      var $path82=(($91+4)|0);
      var $92=HEAP32[(($path82)>>2)];
      var $call83=_kpathsea_expand_default($89, $90, $92);
      var $93=$info_addr;
      var $path84=(($93+4)|0);
      HEAP32[(($path84)>>2)]=$call83;
      var $94=$tmp;
      _free($94);
      var $95=$var;
      var $call85=_concat($95, ((5260388)|0));
      var $96=$info_addr;
      var $path_source86=(($96+12)|0);
      HEAP32[(($path_source86)>>2)]=$call85;
    }
  }
  var $97=$info_addr;
  var $override_path=(($97+16)|0);
  var $98=HEAP32[(($override_path)>>2)];
  var $tobool89=(($98)|0)!=0;
  if (!($tobool89)) {
    var $112=$info_addr;
    var $path100=(($112+4)|0);
    var $113=HEAP32[(($path100)>>2)];
    $tmp=$113;
    var $114=$kpse_addr;
    var $115=$info_addr;
    var $path101=(($115+4)|0);
    var $116=HEAP32[(($path101)>>2)];
    var $call102=_kpathsea_brace_expand($114, $116);
    var $117=$info_addr;
    var $path103=(($117+4)|0);
    HEAP32[(($path103)>>2)]=$call102;
    var $118=$tmp;
    _free($118);
    STACKTOP = __stackBase__;
    return;
  }
  var $99=$info_addr;
  var $override_path91=(($99+16)|0);
  var $100=HEAP32[(($override_path91)>>2)];
  var $101=$info_addr;
  var $raw_path92=(($101+8)|0);
  HEAP32[(($raw_path92)>>2)]=$100;
  var $102=$info_addr;
  var $path93=(($102+4)|0);
  var $103=HEAP32[(($path93)>>2)];
  $tmp=$103;
  var $104=$kpse_addr;
  var $105=$info_addr;
  var $override_path94=(($105+16)|0);
  var $106=HEAP32[(($override_path94)>>2)];
  var $107=$info_addr;
  var $path95=(($107+4)|0);
  var $108=HEAP32[(($path95)>>2)];
  var $call96=_kpathsea_expand_default($104, $106, $108);
  var $109=$info_addr;
  var $path97=(($109+4)|0);
  HEAP32[(($path97)>>2)]=$call96;
  var $110=$tmp;
  _free($110);
  var $111=$info_addr;
  var $path_source98=(($111+12)|0);
  HEAP32[(($path_source98)>>2)]=((5260328)|0);
  var $112=$info_addr;
  var $path100=(($112+4)|0);
  var $113=HEAP32[(($path100)>>2)];
  $tmp=$113;
  var $114=$kpse_addr;
  var $115=$info_addr;
  var $path101=(($115+4)|0);
  var $116=HEAP32[(($path101)>>2)];
  var $call102=_kpathsea_brace_expand($114, $116);
  var $117=$info_addr;
  var $path103=(($117+4)|0);
  HEAP32[(($path103)>>2)]=$call102;
  var $118=$tmp;
  _free($118);
  STACKTOP = __stackBase__;
  return;
}
_init_path["X"]=1;

function _concatn_with_spaces($str1, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $retval;
  var $str1_addr;
  var $arg;
  var $ret;
  var $ap=__stackBase__;
  var $temp;
  $str1_addr=$str1;
  var $0=$str1_addr;
  var $tobool=(($0)|0)!=0;
  if (!($tobool)) {
    $retval=0;
    var $9=$retval;
    STACKTOP = __stackBase__;
    return $9;
  }
  var $1=$str1_addr;
  var $call=_xstrdup($1);
  $ret=$call;
  var $ap1=$ap;
  HEAP32[(($ap1)>>2)]=varrp;
  while(1) {
    var $ap_cur=HEAP32[(($ap)>>2)];
    var $2=$ap_cur;
    var $ap_next=(($ap_cur+4)|0);
    HEAP32[(($ap)>>2)]=$ap_next;
    var $3=HEAP32[(($2)>>2)];
    $arg=$3;
    var $cmp=(($3)|0)!=0;
    if (!($cmp)) {
      break;
    }
    var $4=$ret;
    var $5=$arg;
    var $call2=_concat3($4, ((5260652)|0), $5);
    $temp=$call2;
    var $6=$ret;
    _free($6);
    var $7=$temp;
    $ret=$7;
  }
  var $ap3=$ap;

  var $8=$ret;
  $retval=$8;
  var $9=$retval;
  STACKTOP = __stackBase__;
  return $9;
}


function _init_maketex($kpse, $fmt, $dflt_prog, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $fmt_addr;
  var $dflt_prog_addr;
  var $f;
  var $prog;
  var $PROG;
  var $progval;
  var $arg;
  var $ap=__stackBase__;
  $kpse_addr=$kpse;
  $fmt_addr=$fmt;
  $dflt_prog_addr=$dflt_prog;
  var $0=$fmt_addr;
  var $1=$kpse_addr;
  var $format_info=(($1+132)|0);
  var $arrayidx=(($format_info+($0)*(68))|0);
  $f=$arrayidx;
  var $2=$f;
  var $program=(($2+44)|0);
  var $3=HEAP32[(($program)>>2)];
  var $tobool=(($3)|0)!=0;
  if ($tobool) {
    var $4=$f;
    var $program1=(($4+44)|0);
    var $5=HEAP32[(($program1)>>2)];
    var $cond = $5;
  } else {
    var $6=$dflt_prog_addr;
    var $cond = $6;
  }
  var $cond;
  $prog=$cond;
  var $7=$prog;
  var $call=_uppercasify($7);
  $PROG=$call;
  var $8=$kpse_addr;
  var $9=$PROG;
  var $call2=_kpathsea_var_value($8, $9);
  $progval=$call2;
  var $10=$prog;
  var $11=$f;
  var $program3=(($11+44)|0);
  HEAP32[(($program3)>>2)]=$10;
  var $12=$f;
  var $argc=(($12+48)|0);
  HEAP32[(($argc)>>2)]=0;
  var $call4=_xmalloc(8);
  var $13=$call4;
  var $14=$f;
  var $argv=(($14+52)|0);
  HEAP32[(($argv)>>2)]=$13;
  var $15=$dflt_prog_addr;
  var $16=$f;
  var $argc5=(($16+48)|0);
  var $17=HEAP32[(($argc5)>>2)];
  var $inc=((($17)+(1))|0);
  HEAP32[(($argc5)>>2)]=$inc;
  var $18=$f;
  var $argv6=(($18+52)|0);
  var $19=HEAP32[(($argv6)>>2)];
  var $arrayidx7=(($19+($17<<2))|0);
  HEAP32[(($arrayidx7)>>2)]=$15;
  var $ap8=$ap;
  HEAP32[(($ap8)>>2)]=varrp;
  while(1) {
    var $ap_cur=HEAP32[(($ap)>>2)];
    var $20=$ap_cur;
    var $ap_next=(($ap_cur+4)|0);
    HEAP32[(($ap)>>2)]=$ap_next;
    var $21=HEAP32[(($20)>>2)];
    $arg=$21;
    var $cmp=(($21)|0)!=0;
    if (!($cmp)) {
      break;
    }
    var $22=$f;
    var $argc9=(($22+48)|0);
    var $23=HEAP32[(($argc9)>>2)];
    var $inc10=((($23)+(1))|0);
    HEAP32[(($argc9)>>2)]=$inc10;
    var $24=$f;
    var $argv11=(($24+52)|0);
    var $25=HEAP32[(($argv11)>>2)];
    var $26=$25;
    var $27=$f;
    var $argc12=(($27+48)|0);
    var $28=HEAP32[(($argc12)>>2)];
    var $add=((($28)+(1))|0);
    var $mul=((($add<<2))&-1);
    var $call13=_xrealloc($26, $mul);
    var $29=$call13;
    var $30=$f;
    var $argv14=(($30+52)|0);
    HEAP32[(($argv14)>>2)]=$29;
    var $31=$arg;
    var $32=$f;
    var $argc15=(($32+48)|0);
    var $33=HEAP32[(($argc15)>>2)];
    var $sub=((($33)-(1))|0);
    var $34=$f;
    var $argv16=(($34+52)|0);
    var $35=HEAP32[(($argv16)>>2)];
    var $arrayidx17=(($35+($sub<<2))|0);
    HEAP32[(($arrayidx17)>>2)]=$31;
  }
  var $ap18=$ap;

  var $36=$f;
  var $argc19=(($36+48)|0);
  var $37=HEAP32[(($argc19)>>2)];
  var $38=$f;
  var $argv20=(($38+52)|0);
  var $39=HEAP32[(($argv20)>>2)];
  var $arrayidx21=(($39+($37<<2))|0);
  HEAP32[(($arrayidx21)>>2)]=0;
  var $40=$progval;
  var $tobool22=(($40)|0)!=0;
  if (!($tobool22)) {
    var $47=$PROG;
    _free($47);
    STACKTOP = __stackBase__;
    return;
  }
  var $41=$progval;
  var $42=HEAP8[($41)];
  var $conv=(($42 << 24) >> 24);
  var $tobool23=(($conv)|0)!=0;
  if (!($tobool23)) {
    var $47=$PROG;
    _free($47);
    STACKTOP = __stackBase__;
    return;
  }
  var $43=$kpse_addr;
  var $44=$fmt_addr;
  var $45=$progval;
  var $46=HEAP8[($45)];
  var $conv24=(($46 << 24) >> 24);
  var $cmp25=(($conv24)|0)==49;
  var $conv26=(($cmp25)&1);
  _kpathsea_set_program_enabled($43, $44, $conv26, 3);
  var $47=$PROG;
  _free($47);
  STACKTOP = __stackBase__;
  return;
}
_init_maketex["X"]=1;

function _remove_dbonly($path) {
  var label = 0;

  var $path_addr;
  var $ret;
  var $q;
  var $p;
  var $new_elt;
  $path_addr=$path;
  var $0=$path_addr;
  var $call=_strlen($0);
  var $add=((($call)+(1))|0);
  var $mul=(($add)&-1);
  var $call1=_xmalloc($mul);
  $ret=$call1;
  var $1=$ret;
  $q=$1;
  var $2=$path_addr;
  $p=$2;
  $new_elt=1;
  while(1) {
    var $3=$p;
    var $4=HEAP8[($3)];
    var $tobool=(($4 << 24) >> 24)!=0;
    if (!($tobool)) {
      break;
    }
    var $5=$new_elt;
    var $tobool2=(($5)|0)!=0;
    do {
      if ($tobool2) {
        var $6=$p;
        var $7=HEAP8[($6)];
        var $conv=(($7 << 24) >> 24);
        var $tobool3=(($conv)|0)!=0;
        if (!($tobool3)) {
          label = 656;
          break;
        }
        var $8=$p;
        var $9=HEAP8[($8)];
        var $conv5=(($9 << 24) >> 24);
        var $cmp=(($conv5)|0)==33;
        if (!($cmp)) {
          label = 656;
          break;
        }
        var $10=$p;
        var $add_ptr=(($10+1)|0);
        var $11=HEAP8[($add_ptr)];
        var $conv8=(($11 << 24) >> 24);
        var $cmp9=(($conv8)|0)==33;
        if (!($cmp9)) {
          label = 656;
          break;
        }
        var $12=$p;
        var $add_ptr11=(($12+2)|0);
        $p=$add_ptr11;
        break;
      } else {
        label = 656;
      }
    } while(0);
    if (label == 656) {
      label = 0;
      var $13=$p;
      var $14=HEAP8[($13)];
      var $conv12=(($14 << 24) >> 24);
      var $cmp13=(($conv12)|0)==58;
      var $conv14=(($cmp13)&1);
      $new_elt=$conv14;
      var $15=$p;
      var $incdec_ptr=(($15+1)|0);
      $p=$incdec_ptr;
      var $16=HEAP8[($15)];
      var $17=$q;
      var $incdec_ptr15=(($17+1)|0);
      $q=$incdec_ptr15;
      HEAP8[($17)]=$16;
    }
  }
  var $18=$q;
  HEAP8[($18)]=0;
  var $19=$ret;

  return $19;
}
_remove_dbonly["X"]=1;

function _kpathsea_find_file($kpse, $name, $format, $must_exist) {
  var label = 0;

  var $kpse_addr;
  var $name_addr;
  var $format_addr;
  var $must_exist_addr;
  var $ret_list;
  var $ret;
  $kpse_addr=$kpse;
  $name_addr=$name;
  $format_addr=$format;
  $must_exist_addr=$must_exist;
  var $0=$kpse_addr;
  var $1=$name_addr;
  var $2=$format_addr;
  var $3=$must_exist_addr;
  var $call=_kpathsea_find_file_generic($0, $1, $2, $3, 0);
  $ret_list=$call;
  var $4=$ret_list;
  var $5=HEAP32[(($4)>>2)];
  $ret=$5;
  var $6=$ret_list;
  var $7=$6;
  _free($7);
  var $8=$ret;

  return $8;
}


function _kpathsea_find_file_generic($kpse, $const_name, $format, $must_exist, $all) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $const_name_addr;
  var $format_addr;
  var $must_exist_addr;
  var $all_addr;
  var $target=__stackBase__;
  var $name;
  var $ext;
  var $count=(__stackBase__)+(4);
  var $name_len;
  var $has_potential_suffix;
  var $has_any_suffix;
  var $try_std_extension_first;
  var $use_fontmaps;
  var $ret;
  var $p;
  var $suffix_len;
  var $suffix_len67;
  $kpse_addr=$kpse;
  $const_name_addr=$const_name;
  $format_addr=$format;
  $must_exist_addr=$must_exist;
  $all_addr=$all;
  $name_len=0;
  $has_potential_suffix=0;
  $has_any_suffix=0;
  $try_std_extension_first=0;
  var $0=$format_addr;
  var $cmp=(($0)|0)==3;
  do {
    if ($cmp) {
      var $4 = 1;
    } else {
      var $1=$format_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) {
        var $4 = 1;
        break;
      }
      var $2=$format_addr;
      var $cmp3=(($2)|0)==1;
      if ($cmp3) {
        var $4 = 1;
        break;
      }
      var $3=$format_addr;
      var $cmp4=(($3)|0)==20;
      var $4 = $cmp4;
    }
  } while(0);
  var $4;
  var $lor_ext=(($4)&1);
  $use_fontmaps=$lor_ext;
  $ret=0;
  var $5=$const_name_addr;
  var $tobool=(($5)|0)!=0;
  if ($tobool) {
  } else {
    ___assert_func(((5261232)|0), 1015, ((5268540)|0), ((5261192)|0));
  }
  var $6=$format_addr;
  var $7=$kpse_addr;
  var $format_info=(($7+132)|0);
  var $arrayidx=(($format_info+($6)*(68))|0);
  var $path=(($arrayidx+4)|0);
  var $8=HEAP32[(($path)>>2)];
  var $cmp5=(($8)|0)==0;
  if ($cmp5) {
    var $9=$kpse_addr;
    var $10=$format_addr;
    var $call=_kpathsea_init_format($9, $10);
  }
  var $11=$kpse_addr;
  var $debug=(($11+44)|0);
  var $12=HEAP32[(($debug)>>2)];
  var $and=$12 & 32;
  var $tobool6=(($and)|0)!=0;
  if ($tobool6) {
    var $13=HEAP32[((_stderr)>>2)];
    var $call8=_fputs(((5262528)|0), $13);
    var $14=HEAP32[((_stderr)>>2)];
    var $15=$const_name_addr;
    var $16=$format_addr;
    var $17=$kpse_addr;
    var $format_info9=(($17+132)|0);
    var $arrayidx10=(($format_info9+($16)*(68))|0);
    var $type=(($arrayidx10)|0);
    var $18=HEAP32[(($type)>>2)];
    var $19=$format_addr;
    var $20=$kpse_addr;
    var $format_info11=(($20+132)|0);
    var $arrayidx12=(($format_info11+($19)*(68))|0);
    var $path_source=(($arrayidx12+12)|0);
    var $21=HEAP32[(($path_source)>>2)];
    var $call13=_fprintf($14, ((5261124)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$15,HEAP32[(((tempInt)+(4))>>2)]=$18,HEAP32[(((tempInt)+(8))>>2)]=$21,tempInt));
    var $22=HEAP32[((_stderr)>>2)];
    var $call14=_fflush($22);
  }
  var $23=$kpse_addr;
  var $24=$const_name_addr;
  var $call16=_kpathsea_expand($23, $24);
  $name=$call16;
  var $25=$kpse_addr;
  var $call17=_kpathsea_var_value($25, ((5261092)|0));
  $try_std_extension_first=$call17;
  var $26=$name;
  var $call18=_strrchr($26, 46);
  $has_any_suffix=$call18;
  var $27=$has_any_suffix;
  var $tobool19=(($27)|0)!=0;
  if ($tobool19) {
    var $28=$has_any_suffix;
    var $call21=_strchr($28, 47);
    $p=$call21;
    var $29=$p;
    var $tobool22=(($29)|0)!=0;
    if ($tobool22) {
      $has_any_suffix=0;
    }
  }
  var $30=$name;
  var $call26=_strlen($30);
  $name_len=$call26;
  var $31=$format_addr;
  var $32=$kpse_addr;
  var $format_info27=(($32+132)|0);
  var $arrayidx28=(($format_info27+($31)*(68))|0);
  var $suffix=(($arrayidx28+32)|0);
  var $33=HEAP32[(($suffix)>>2)];
  var $tobool29=(($33)|0)!=0;
  if ($tobool29) {
    var $34=$format_addr;
    var $35=$kpse_addr;
    var $format_info31=(($35+132)|0);
    var $arrayidx32=(($format_info31+($34)*(68))|0);
    var $suffix33=(($arrayidx32+32)|0);
    var $36=HEAP32[(($suffix33)>>2)];
    $ext=$36;
    while(1) {
      var $37=$has_potential_suffix;
      var $tobool34=(($37)|0)!=0;
      if ($tobool34) {
        var $40 = 0;
      } else {
        var $38=$ext;
        var $39=HEAP32[(($38)>>2)];
        var $tobool35=(($39)|0)!=0;
        var $40 = $tobool35;
      }
      var $40;
      if (!($40)) {
        break;
      }
      var $41=$ext;
      var $42=HEAP32[(($41)>>2)];
      var $call36=_strlen($42);
      $suffix_len=$call36;
      var $43=$name_len;
      var $44=$suffix_len;
      var $cmp37=(($43)>>>0) >= (($44)>>>0);
      if ($cmp37) {
        var $45=$ext;
        var $46=HEAP32[(($45)>>2)];
        var $cmp39=(($46)|0)!=0;
        do {
          if ($cmp39) {
            var $47=$name;
            var $48=$name_len;
            var $add_ptr=(($47+$48)|0);
            var $49=$suffix_len;
            var $idx_neg=(((-$49))|0);
            var $add_ptr40=(($add_ptr+$idx_neg)|0);
            var $cmp41=(($add_ptr40)|0)!=0;
            if (!($cmp41)) {
              var $55 = 0;
              break;
            }
            var $50=$ext;
            var $51=HEAP32[(($50)>>2)];
            var $52=$name;
            var $53=$name_len;
            var $add_ptr43=(($52+$53)|0);
            var $54=$suffix_len;
            var $idx_neg44=(((-$54))|0);
            var $add_ptr45=(($add_ptr43+$idx_neg44)|0);
            var $call46=_strcmp($51, $add_ptr45);
            var $cmp47=(($call46)|0)==0;
            var $55 = $cmp47;
          } else {
            var $55 = 0;
          }
        } while(0);
        var $55;
        var $56 = $55;
      } else {
        var $56 = 0;
      }
      var $56;
      var $land_ext=(($56)&1);
      $has_potential_suffix=$land_ext;
      var $57=$ext;
      var $incdec_ptr=(($57+4)|0);
      $ext=$incdec_ptr;
    }
  }
  var $58=$has_potential_suffix;
  var $tobool51=(($58)|0)!=0;
  do {
    if (!($tobool51)) {
      var $59=$format_addr;
      var $60=$kpse_addr;
      var $format_info53=(($60+132)|0);
      var $arrayidx54=(($format_info53+($59)*(68))|0);
      var $alt_suffix=(($arrayidx54+36)|0);
      var $61=HEAP32[(($alt_suffix)>>2)];
      var $tobool55=(($61)|0)!=0;
      if (!($tobool55)) {
        break;
      }
      var $62=$format_addr;
      var $63=$kpse_addr;
      var $format_info57=(($63+132)|0);
      var $arrayidx58=(($format_info57+($62)*(68))|0);
      var $alt_suffix59=(($arrayidx58+36)|0);
      var $64=HEAP32[(($alt_suffix59)>>2)];
      $ext=$64;
      while(1) {
        var $65=$has_potential_suffix;
        var $tobool61=(($65)|0)!=0;
        if ($tobool61) {
          var $68 = 0;
        } else {
          var $66=$ext;
          var $67=HEAP32[(($66)>>2)];
          var $tobool63=(($67)|0)!=0;
          var $68 = $tobool63;
        }
        var $68;
        if (!($68)) {
          break;
        }
        var $69=$ext;
        var $70=HEAP32[(($69)>>2)];
        var $call68=_strlen($70);
        $suffix_len67=$call68;
        var $71=$name_len;
        var $72=$suffix_len67;
        var $cmp69=(($71)>>>0) >= (($72)>>>0);
        if ($cmp69) {
          var $73=$ext;
          var $74=HEAP32[(($73)>>2)];
          var $cmp71=(($74)|0)!=0;
          do {
            if ($cmp71) {
              var $75=$name;
              var $76=$name_len;
              var $add_ptr73=(($75+$76)|0);
              var $77=$suffix_len67;
              var $idx_neg74=(((-$77))|0);
              var $add_ptr75=(($add_ptr73+$idx_neg74)|0);
              var $cmp76=(($add_ptr75)|0)!=0;
              if (!($cmp76)) {
                var $83 = 0;
                break;
              }
              var $78=$ext;
              var $79=HEAP32[(($78)>>2)];
              var $80=$name;
              var $81=$name_len;
              var $add_ptr78=(($80+$81)|0);
              var $82=$suffix_len67;
              var $idx_neg79=(((-$82))|0);
              var $add_ptr80=(($add_ptr78+$idx_neg79)|0);
              var $call81=_strcmp($79, $add_ptr80);
              var $cmp82=(($call81)|0)==0;
              var $83 = $cmp82;
            } else {
              var $83 = 0;
            }
          } while(0);
          var $83;
          var $84 = $83;
        } else {
          var $84 = 0;
        }
        var $84;
        var $land_ext86=(($84)&1);
        $has_potential_suffix=$land_ext86;
        var $85=$ext;
        var $incdec_ptr88=(($85+4)|0);
        $ext=$incdec_ptr88;
      }
    }
  } while(0);
  HEAP32[(($count)>>2)]=0;
  var $call91=_xmalloc(4);
  var $86=$call91;
  HEAP32[(($target)>>2)]=$86;
  var $87=$has_any_suffix;
  var $tobool92=(($87)|0)!=0;
  L899: do {
    if ($tobool92) {
      var $88=$try_std_extension_first;
      var $cmp94=(($88)|0)==0;
      do {
        if (!($cmp94)) {
          var $89=$try_std_extension_first;
          var $90=HEAP8[($89)];
          var $conv=(($90 << 24) >> 24);
          var $cmp96=(($conv)|0)==102;
          if ($cmp96) {
            break;
          }
          var $91=$try_std_extension_first;
          var $92=HEAP8[($91)];
          var $conv99=(($92 << 24) >> 24);
          var $cmp100=(($conv99)|0)==48;
          if (!($cmp100)) {
            label = 709;
            break L899;
          }
        }
      } while(0);
      var $93=$kpse_addr;
      var $94=$format_addr;
      var $95=$name;
      var $96=$use_fontmaps;
      var $97=$has_potential_suffix;
      var $98=$has_any_suffix;
      _target_asis_name($93, $target, $count, $94, $95, $96, $97, $98);
      var $99=$kpse_addr;
      var $100=$format_addr;
      var $101=$name;
      var $102=$use_fontmaps;
      var $103=$has_potential_suffix;
      _target_suffixed_names($99, $target, $count, $100, $101, $102, $103);
      break;
    } else {
      label = 709;
    }
  } while(0);
  if (label == 709) {
    var $104=$kpse_addr;
    var $105=$format_addr;
    var $106=$name;
    var $107=$use_fontmaps;
    var $108=$has_potential_suffix;
    _target_suffixed_names($104, $target, $count, $105, $106, $107, $108);
    var $109=$kpse_addr;
    var $110=$format_addr;
    var $111=$name;
    var $112=$use_fontmaps;
    var $113=$has_potential_suffix;
    var $114=$has_any_suffix;
    _target_asis_name($109, $target, $count, $110, $111, $112, $113, $114);
  }
  var $115=HEAP32[(($count)>>2)];
  var $116=HEAP32[(($target)>>2)];
  var $arrayidx104=(($116+($115<<2))|0);
  HEAP32[(($arrayidx104)>>2)]=0;
  var $117=$try_std_extension_first;
  var $tobool105=(($117)|0)!=0;
  if ($tobool105) {
    var $118=$try_std_extension_first;
    _free($118);
  }
  var $119=$kpse_addr;
  var $120=$format_addr;
  var $121=$kpse_addr;
  var $format_info108=(($121+132)|0);
  var $arrayidx109=(($format_info108+($120)*(68))|0);
  var $path110=(($arrayidx109+4)|0);
  var $122=HEAP32[(($path110)>>2)];
  var $123=HEAP32[(($target)>>2)];
  var $124=$all_addr;
  var $call111=_kpathsea_path_search_list_generic($119, $122, $123, 0, $124);
  $ret=$call111;
  var $125=$ret;
  var $126=HEAP32[(($125)>>2)];
  var $tobool112=(($126)|0)!=0;
  do {
    if (!($tobool112)) {
      var $127=$must_exist_addr;
      var $tobool114=(($127)|0)!=0;
      if (!($tobool114)) {
        break;
      }
      HEAP32[(($count)>>2)]=0;
      while(1) {
        var $128=HEAP32[(($count)>>2)];
        var $129=HEAP32[(($target)>>2)];
        var $arrayidx117=(($129+($128<<2))|0);
        var $130=HEAP32[(($arrayidx117)>>2)];
        var $tobool118=(($130)|0)!=0;
        if (!($tobool118)) {
          break;
        }
        var $131=HEAP32[(($count)>>2)];
        var $132=HEAP32[(($target)>>2)];
        var $arrayidx120=(($132+($131<<2))|0);
        var $133=HEAP32[(($arrayidx120)>>2)];
        _free($133);
        var $134=HEAP32[(($count)>>2)];
        var $inc=((($134)+(1))|0);
        HEAP32[(($count)>>2)]=$inc;
      }
      HEAP32[(($count)>>2)]=0;
      var $135=$has_potential_suffix;
      var $tobool123=(($135)|0)!=0;
      do {
        if (!($tobool123)) {
          var $136=$format_addr;
          var $137=$kpse_addr;
          var $format_info125=(($137+132)|0);
          var $arrayidx126=(($format_info125+($136)*(68))|0);
          var $suffix_search_only=(($arrayidx126+40)|0);
          var $138=HEAP32[(($suffix_search_only)>>2)];
          var $tobool127=(($138)|0)!=0;
          if (!($tobool127)) {
            break;
          }
          var $139=$format_addr;
          var $140=$kpse_addr;
          var $format_info129=(($140+132)|0);
          var $arrayidx130=(($format_info129+($139)*(68))|0);
          var $suffix131=(($arrayidx130+32)|0);
          var $141=HEAP32[(($suffix131)>>2)];
          $ext=$141;
          while(1) {
            var $142=$ext;
            var $143=HEAP32[(($142)>>2)];
            var $tobool133=(($143)|0)!=0;
            if (!($tobool133)) {
              break;
            }
            var $144=$name;
            var $145=$ext;
            var $146=HEAP32[(($145)>>2)];
            var $call135=_concat($144, $146);
            var $147=HEAP32[(($count)>>2)];
            var $inc136=((($147)+(1))|0);
            HEAP32[(($count)>>2)]=$inc136;
            var $148=HEAP32[(($target)>>2)];
            var $arrayidx137=(($148+($147<<2))|0);
            HEAP32[(($arrayidx137)>>2)]=$call135;
            var $149=$ext;
            var $incdec_ptr139=(($149+4)|0);
            $ext=$incdec_ptr139;
          }
        }
      } while(0);
      var $150=$has_potential_suffix;
      var $tobool142=(($150)|0)!=0;
      do {
        if ($tobool142) {
          label = 727;
        } else {
          var $151=$format_addr;
          var $152=$kpse_addr;
          var $format_info144=(($152+132)|0);
          var $arrayidx145=(($format_info144+($151)*(68))|0);
          var $suffix_search_only146=(($arrayidx145+40)|0);
          var $153=HEAP32[(($suffix_search_only146)>>2)];
          var $tobool147=(($153)|0)!=0;
          if ($tobool147) {
            break;
          } else {
            label = 727;
            break;
          }
        }
      } while(0);
      if (label == 727) {
        var $154=$name;
        var $call149=_xstrdup($154);
        var $155=HEAP32[(($count)>>2)];
        var $inc150=((($155)+(1))|0);
        HEAP32[(($count)>>2)]=$inc150;
        var $156=HEAP32[(($target)>>2)];
        var $arrayidx151=(($156+($155<<2))|0);
        HEAP32[(($arrayidx151)>>2)]=$call149;
      }
      var $157=HEAP32[(($count)>>2)];
      var $158=HEAP32[(($target)>>2)];
      var $arrayidx153=(($158+($157<<2))|0);
      HEAP32[(($arrayidx153)>>2)]=0;
      var $159=$kpse_addr;
      var $160=$format_addr;
      var $161=$kpse_addr;
      var $format_info154=(($161+132)|0);
      var $arrayidx155=(($format_info154+($160)*(68))|0);
      var $path156=(($arrayidx155+4)|0);
      var $162=HEAP32[(($path156)>>2)];
      var $163=HEAP32[(($target)>>2)];
      var $164=$all_addr;
      var $call157=_kpathsea_path_search_list_generic($159, $162, $163, 1, $164);
      $ret=$call157;
    }
  } while(0);
  HEAP32[(($count)>>2)]=0;
  while(1) {
    var $165=HEAP32[(($count)>>2)];
    var $166=HEAP32[(($target)>>2)];
    var $arrayidx160=(($166+($165<<2))|0);
    var $167=HEAP32[(($arrayidx160)>>2)];
    var $tobool161=(($167)|0)!=0;
    if (!($tobool161)) {
      break;
    }
    var $168=HEAP32[(($count)>>2)];
    var $169=HEAP32[(($target)>>2)];
    var $arrayidx163=(($169+($168<<2))|0);
    var $170=HEAP32[(($arrayidx163)>>2)];
    _free($170);
    var $171=HEAP32[(($count)>>2)];
    var $inc165=((($171)+(1))|0);
    HEAP32[(($count)>>2)]=$inc165;
  }
  var $172=HEAP32[(($target)>>2)];
  var $173=$172;
  _free($173);
  var $174=$ret;
  var $175=HEAP32[(($174)>>2)];
  var $tobool167=(($175)|0)!=0;
  if ($tobool167) {
    var $185=$name;
    _free($185);
    var $186=$ret;
    STACKTOP = __stackBase__;
    return $186;
  }
  var $176=$must_exist_addr;
  var $tobool169=(($176)|0)!=0;
  if (!($tobool169)) {
    var $185=$name;
    _free($185);
    var $186=$ret;
    STACKTOP = __stackBase__;
    return $186;
  }
  var $call171=_xmalloc(8);
  var $177=$call171;
  $ret=$177;
  var $178=$kpse_addr;
  var $179=$format_addr;
  var $180=$name;
  var $call172=_kpathsea_make_tex($178, $179, $180);
  var $181=$ret;
  var $arrayidx173=(($181)|0);
  HEAP32[(($arrayidx173)>>2)]=$call172;
  var $182=$ret;
  var $arrayidx174=(($182)|0);
  var $183=HEAP32[(($arrayidx174)>>2)];
  var $tobool175=(($183)|0)!=0;
  if ($tobool175) {
    var $184=$ret;
    var $arrayidx177=(($184+4)|0);
    HEAP32[(($arrayidx177)>>2)]=0;
  }
  var $185=$name;
  _free($185);
  var $186=$ret;
  STACKTOP = __stackBase__;
  return $186;
}
_kpathsea_find_file_generic["X"]=1;

function _kpse_find_file($name, $format, $must_exist) {
  var label = 0;

  var $name_addr;
  var $format_addr;
  var $must_exist_addr;
  $name_addr=$name;
  $format_addr=$format;
  $must_exist_addr=$must_exist;
  var $0=HEAP32[((5248384)>>2)];
  var $1=$name_addr;
  var $2=$format_addr;
  var $3=$must_exist_addr;
  var $call=_kpathsea_find_file($0, $1, $2, $3);

  return $call;
}


function _target_asis_name($kpse, $target, $count, $format, $name, $use_fontmaps, $has_potential_suffix, $has_any_suffix) {
  var label = 0;

  var $kpse_addr;
  var $target_addr;
  var $count_addr;
  var $format_addr;
  var $name_addr;
  var $use_fontmaps_addr;
  var $has_potential_suffix_addr;
  var $has_any_suffix_addr;
  $kpse_addr=$kpse;
  $target_addr=$target;
  $count_addr=$count;
  $format_addr=$format;
  $name_addr=$name;
  $use_fontmaps_addr=$use_fontmaps;
  $has_potential_suffix_addr=$has_potential_suffix;
  $has_any_suffix_addr=$has_any_suffix;
  var $0=$has_any_suffix_addr;
  var $1=$has_potential_suffix_addr;
  var $tobool=(($1)|0)!=0;
  do {
    if (!($tobool)) {
      var $2=$format_addr;
      var $3=$kpse_addr;
      var $format_info=(($3+132)|0);
      var $arrayidx=(($format_info+($2)*(68))|0);
      var $suffix_search_only=(($arrayidx+40)|0);
      var $4=HEAP32[(($suffix_search_only)>>2)];
      var $tobool1=(($4)|0)!=0;
      if (!($tobool1)) {
        break;
      }

      return;
    }
  } while(0);
  var $5=$name_addr;
  var $call=_xstrdup($5);
  var $6=$count_addr;
  var $7=HEAP32[(($6)>>2)];
  var $8=$target_addr;
  var $9=HEAP32[(($8)>>2)];
  var $arrayidx2=(($9+($7<<2))|0);
  HEAP32[(($arrayidx2)>>2)]=$call;
  var $10=$count_addr;
  var $11=HEAP32[(($10)>>2)];
  var $inc=((($11)+(1))|0);
  HEAP32[(($10)>>2)]=$inc;
  var $12=$target_addr;
  var $13=HEAP32[(($12)>>2)];
  var $14=$13;
  var $15=$count_addr;
  var $16=HEAP32[(($15)>>2)];
  var $add=((($16)+(1))|0);
  var $mul=((($add<<2))&-1);
  var $call3=_xrealloc($14, $mul);
  var $17=$call3;
  var $18=$target_addr;
  HEAP32[(($18)>>2)]=$17;
  var $19=$use_fontmaps_addr;
  var $tobool4=(($19)|0)!=0;
  if ($tobool4) {
    var $20=$kpse_addr;
    var $21=$target_addr;
    var $22=$count_addr;
    var $23=$name_addr;
    _target_fontmaps($20, $21, $22, $23);
  }

  return;
}
_target_asis_name["X"]=1;

function _target_suffixed_names($kpse, $target, $count, $format, $name, $use_fontmaps, $has_potential_suffix) {
  var label = 0;

  var $kpse_addr;
  var $target_addr;
  var $count_addr;
  var $format_addr;
  var $name_addr;
  var $use_fontmaps_addr;
  var $has_potential_suffix_addr;
  var $ext;
  var $name_with_suffix;
  $kpse_addr=$kpse;
  $target_addr=$target;
  $count_addr=$count;
  $format_addr=$format;
  $name_addr=$name;
  $use_fontmaps_addr=$use_fontmaps;
  $has_potential_suffix_addr=$has_potential_suffix;
  var $0=$has_potential_suffix_addr;
  var $tobool=(($0)|0)!=0;
  do {
    if (!($tobool)) {
      var $1=$format_addr;
      var $2=$kpse_addr;
      var $format_info=(($2+132)|0);
      var $arrayidx=(($format_info+($1)*(68))|0);
      var $suffix=(($arrayidx+32)|0);
      var $3=HEAP32[(($suffix)>>2)];
      var $tobool1=(($3)|0)!=0;
      if (!($tobool1)) {
        break;
      }
      var $4=$format_addr;
      var $5=$kpse_addr;
      var $format_info2=(($5+132)|0);
      var $arrayidx3=(($format_info2+($4)*(68))|0);
      var $suffix4=(($arrayidx3+32)|0);
      var $6=HEAP32[(($suffix4)>>2)];
      $ext=$6;
      while(1) {
        var $7=$ext;
        var $8=HEAP32[(($7)>>2)];
        var $tobool5=(($8)|0)!=0;
        if (!($tobool5)) {
          break;
        }
        var $9=$name_addr;
        var $10=$ext;
        var $11=HEAP32[(($10)>>2)];
        var $call=_concat($9, $11);
        $name_with_suffix=$call;
        var $12=$name_with_suffix;
        var $13=$count_addr;
        var $14=HEAP32[(($13)>>2)];
        var $15=$target_addr;
        var $16=HEAP32[(($15)>>2)];
        var $arrayidx6=(($16+($14<<2))|0);
        HEAP32[(($arrayidx6)>>2)]=$12;
        var $17=$count_addr;
        var $18=HEAP32[(($17)>>2)];
        var $inc=((($18)+(1))|0);
        HEAP32[(($17)>>2)]=$inc;
        var $19=$target_addr;
        var $20=HEAP32[(($19)>>2)];
        var $21=$20;
        var $22=$count_addr;
        var $23=HEAP32[(($22)>>2)];
        var $add=((($23)+(1))|0);
        var $mul=((($add<<2))&-1);
        var $call7=_xrealloc($21, $mul);
        var $24=$call7;
        var $25=$target_addr;
        HEAP32[(($25)>>2)]=$24;
        var $26=$use_fontmaps_addr;
        var $tobool8=(($26)|0)!=0;
        if ($tobool8) {
          var $27=$kpse_addr;
          var $28=$target_addr;
          var $29=$count_addr;
          var $30=$name_with_suffix;
          _target_fontmaps($27, $28, $29, $30);
        }
        var $31=$ext;
        var $incdec_ptr=(($31+4)|0);
        $ext=$incdec_ptr;
      }

      return;
    }
  } while(0);

  return;
}
_target_suffixed_names["X"]=1;

function _kpathsea_name_ok($kpse, $fname, $check_var, $default_choice, $action, $silent) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $retval;
  var $kpse_addr;
  var $fname_addr;
  var $check_var_addr;
  var $default_choice_addr;
  var $action_addr;
  var $silent_addr;
  var $open_choice;
  var $q;
  var $qq;
  var $texmfoutput;
  var $dotpair;
  $kpse_addr=$kpse;
  $fname_addr=$fname;
  $check_var_addr=$check_var;
  $default_choice_addr=$default_choice;
  $action_addr=$action;
  $silent_addr=$silent;
  var $0=$kpse_addr;
  var $1=$check_var_addr;
  var $call=_kpathsea_var_value($0, $1);
  $open_choice=$call;
  var $2=$open_choice;
  var $tobool=(($2)|0)!=0;
  if (!($tobool)) {
    var $3=$default_choice_addr;
    $open_choice=$3;
  }
  var $4=$open_choice;
  var $5=HEAP8[($4)];
  var $conv=(($5 << 24) >> 24);
  var $cmp=(($conv)|0)==97;
  do {
    if (!($cmp)) {
      var $6=$open_choice;
      var $7=HEAP8[($6)];
      var $conv2=(($7 << 24) >> 24);
      var $cmp3=(($conv2)|0)==121;
      if ($cmp3) {
        break;
      }
      var $8=$open_choice;
      var $9=HEAP8[($8)];
      var $conv6=(($9 << 24) >> 24);
      var $cmp7=(($conv6)|0)==49;
      if ($cmp7) {
        break;
      }
      var $10=$fname_addr;
      $qq=$10;
      L981: while(1) {
        var $11=$qq;
        var $call11=_strchr($11, 46);
        $q=$call11;
        var $tobool12=(($call11)|0)!=0;
        if (!($tobool12)) {
          label = 780;
          break;
        }
        var $12=$q;
        var $13=$fname_addr;
        var $cmp13=(($12)|0)==(($13)|0);
        do {
          if ($cmp13) {
            label = 773;
          } else {
            var $14=$q;
            var $add_ptr=((($14)-(1))|0);
            var $15=HEAP8[($add_ptr)];
            var $conv16=(($15 << 24) >> 24);
            var $cmp17=(($conv16)|0)==47;
            if ($cmp17) {
              label = 773;
              break;
            } else {
              break;
            }
          }
        } while(0);
        do {
          if (label == 773) {
            label = 0;
            var $16=$q;
            var $add_ptr19=(($16+1)|0);
            var $17=HEAP8[($add_ptr19)];
            var $conv20=(($17 << 24) >> 24);
            var $cmp21=(($conv20)|0)==47;
            if ($cmp21) {
              break;
            }
            var $18=$q;
            var $add_ptr24=(($18+1)|0);
            var $19=HEAP8[($add_ptr24)];
            var $conv25=(($19 << 24) >> 24);
            var $cmp26=(($conv25)|0)==46;
            if ($cmp26) {
              var $20=$q;
              var $add_ptr29=(($20+2)|0);
              var $21=HEAP8[($add_ptr29)];
              var $conv30=(($21 << 24) >> 24);
              var $cmp31=(($conv30)|0)==47;
              if ($cmp31) {
                break;
              }
            }
            var $22=$q;
            var $cmp34=(($22)|0)!=0;
            if (!($cmp34)) {
              label = 778;
              break L981;
            }
            var $23=$q;
            var $call37=_strcmp($23, ((5267504)|0));
            var $cmp38=(($call37)|0)==0;
            if (!($cmp38)) {
              label = 778;
              break L981;
            }
          }
        } while(0);
        var $24=$q;
        var $add_ptr42=(($24+1)|0);
        $qq=$add_ptr42;
      }
      L994: do {
        if (label == 778) {
        }
        else if (label == 780) {
          var $25=$open_choice;
          var $26=HEAP8[($25)];
          var $conv43=(($26 << 24) >> 24);
          var $cmp44=(($conv43)|0)==114;
          do {
            if (!($cmp44)) {
              var $27=$open_choice;
              var $28=HEAP8[($27)];
              var $conv47=(($28 << 24) >> 24);
              var $cmp48=(($conv47)|0)==110;
              if ($cmp48) {
                break;
              }
              var $29=$open_choice;
              var $30=HEAP8[($29)];
              var $conv51=(($30 << 24) >> 24);
              var $cmp52=(($conv51)|0)==48;
              if ($cmp52) {
                break;
              }
              var $31=$kpse_addr;
              var $32=$fname_addr;
              var $call56=_kpathsea_absolute_p($31, $32, 0);
              var $tobool57=(($call56)|0)!=0;
              L1001: do {
                if ($tobool57) {
                  var $33=$kpse_addr;
                  var $call59=_kpathsea_var_value($33, ((5260812)|0));
                  $texmfoutput=$call59;
                  var $34=$texmfoutput;
                  var $tobool60=(($34)|0)!=0;
                  do {
                    if ($tobool60) {
                      var $35=$texmfoutput;
                      var $36=HEAP8[($35)];
                      var $conv62=(($36 << 24) >> 24);
                      var $cmp63=(($conv62)|0)==0;
                      if ($cmp63) {
                        break;
                      }
                      var $37=$fname_addr;
                      var $38=$fname_addr;
                      var $39=$texmfoutput;
                      var $call66=_strstr($38, $39);
                      var $cmp67=(($37)|0)!=(($call66)|0);
                      if ($cmp67) {
                        break;
                      }
                      var $40=$texmfoutput;
                      var $call70=_strlen($40);
                      var $41=$fname_addr;
                      var $arrayidx=(($41+$call70)|0);
                      var $42=HEAP8[($arrayidx)];
                      var $conv71=(($42 << 24) >> 24);
                      var $cmp72=(($conv71)|0)==47;
                      if (!($cmp72)) {
                        break;
                      }
                      break L1001;
                    }
                  } while(0);
                  break L994;
                }
              } while(0);
              var $43=$fname_addr;
              var $arrayidx77=(($43)|0);
              var $44=HEAP8[($arrayidx77)];
              var $conv78=(($44 << 24) >> 24);
              var $cmp79=(($conv78)|0)==46;
              do {
                if ($cmp79) {
                  var $45=$fname_addr;
                  var $arrayidx82=(($45+1)|0);
                  var $46=HEAP8[($arrayidx82)];
                  var $conv83=(($46 << 24) >> 24);
                  var $cmp84=(($conv83)|0)==46;
                  if (!($cmp84)) {
                    break;
                  }
                  var $47=$fname_addr;
                  var $arrayidx87=(($47+2)|0);
                  var $48=HEAP8[($arrayidx87)];
                  var $conv88=(($48 << 24) >> 24);
                  var $cmp89=(($conv88)|0)==47;
                  if (!($cmp89)) {
                    break;
                  }
                  break L994;
                }
              } while(0);
              var $49=$fname_addr;
              var $call92=_strstr($49, ((5260776)|0));
              $dotpair=$call92;
              while(1) {
                var $50=$dotpair;
                var $tobool94=(($50)|0)!=0;
                if (!($tobool94)) {
                  break;
                }
                var $51=$dotpair;
                var $arrayidx96=(($51+2)|0);
                var $52=HEAP8[($arrayidx96)];
                var $conv97=(($52 << 24) >> 24);
                var $cmp98=(($conv97)|0)==47;
                if ($cmp98) {
                  var $53=$dotpair;
                  var $arrayidx101=((($53)-(1))|0);
                  var $54=HEAP8[($arrayidx101)];
                  var $conv102=(($54 << 24) >> 24);
                  var $cmp103=(($conv102)|0)==47;
                  if ($cmp103) {
                    label = 799;
                    break;
                  }
                }
                var $55=$dotpair;
                var $add_ptr107=(($55+2)|0);
                var $call108=_strstr($add_ptr107, ((5260776)|0));
                $dotpair=$call108;
              }
              if (label == 799) {
                break L994;
              }
              $retval=1;
              var $65=$retval;
              STACKTOP = __stackBase__;
              return $65;
            }
          } while(0);
          $retval=1;
          var $65=$retval;
          STACKTOP = __stackBase__;
          return $65;
        }
      } while(0);
      var $56=$silent_addr;
      var $tobool111=(($56)|0)!=0;
      if (!($tobool111)) {
        var $57=HEAP32[((_stderr)>>2)];
        var $58=$kpse_addr;
        var $invocation_name=(($58+104)|0);
        var $59=HEAP32[(($invocation_name)>>2)];
        var $60=$action_addr;
        var $arrayidx113=((5243748+($60<<2))|0);
        var $61=HEAP32[(($arrayidx113)>>2)];
        var $62=$fname_addr;
        var $63=$check_var_addr;
        var $64=$open_choice;
        var $call114=_fprintf($57, ((5260744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$59,HEAP32[(((tempInt)+(4))>>2)]=$61,HEAP32[(((tempInt)+(8))>>2)]=$62,HEAP32[(((tempInt)+(12))>>2)]=$63,HEAP32[(((tempInt)+(16))>>2)]=$64,tempInt));
      }
      $retval=0;
      var $65=$retval;
      STACKTOP = __stackBase__;
      return $65;
    }
  } while(0);
  $retval=1;
  var $65=$retval;
  STACKTOP = __stackBase__;
  return $65;
}
_kpathsea_name_ok["X"]=1;

function _kpathsea_in_name_ok($kpse, $fname) {
  var label = 0;

  var $kpse_addr;
  var $fname_addr;
  $kpse_addr=$kpse;
  $fname_addr=$fname;
  var $0=$kpse_addr;
  var $1=$fname_addr;
  var $call=_kpathsea_name_ok($0, $1, ((5261056)|0), ((5261024)|0), 0, 0);

  return $call;
}


function _kpathsea_out_name_ok_1($kpse, $fname, $silent) {
  var label = 0;

  var $kpse_addr;
  var $fname_addr;
  var $silent_addr;
  $kpse_addr=$kpse;
  $fname_addr=$fname;
  $silent_addr=$silent;
  var $0=$kpse_addr;
  var $1=$fname_addr;
  var $2=$silent_addr;
  var $call=_kpathsea_name_ok($0, $1, ((5260864)|0), ((5260832)|0), 1, $2);

  return $call;
}


function _kpathsea_out_name_ok($kpse, $fname) {
  var label = 0;

  var $kpse_addr;
  var $fname_addr;
  $kpse_addr=$kpse;
  $fname_addr=$fname;
  var $0=$kpse_addr;
  var $1=$fname_addr;
  var $call=_kpathsea_out_name_ok_1($0, $1, 0);

  return $call;
}


function _kpse_in_name_ok($fname) {
  var label = 0;

  var $fname_addr;
  $fname_addr=$fname;
  var $0=HEAP32[((5248384)>>2)];
  var $1=$fname_addr;
  var $call=_kpathsea_in_name_ok($0, $1);

  return $call;
}


function _kpse_out_name_ok($fname) {
  var label = 0;

  var $fname_addr;
  $fname_addr=$fname;
  var $0=HEAP32[((5248384)>>2)];
  var $1=$fname_addr;
  var $call=_kpathsea_out_name_ok($0, $1);

  return $call;
}


function _target_fontmaps($kpse, $target, $count, $name) {
  var label = 0;

  var $kpse_addr;
  var $target_addr;
  var $count_addr;
  var $name_addr;
  var $mapped_names;
  var $mapped_name;
  $kpse_addr=$kpse;
  $target_addr=$target;
  $count_addr=$count;
  $name_addr=$name;
  var $0=$kpse_addr;
  var $1=$name_addr;
  var $call=_kpathsea_fontmap_lookup($0, $1);
  $mapped_names=$call;
  var $2=$mapped_names;
  var $cmp=(($2)|0)!=0;
  if (!($cmp)) {

    return;
  }
  while(1) {
    var $3=$mapped_names;
    var $incdec_ptr=(($3+4)|0);
    $mapped_names=$incdec_ptr;
    var $4=HEAP32[(($3)>>2)];
    $mapped_name=$4;
    var $cmp1=(($4)|0)!=0;
    if (!($cmp1)) {
      break;
    }
    var $5=$mapped_name;
    var $call2=_xstrdup($5);
    var $6=$count_addr;
    var $7=HEAP32[(($6)>>2)];
    var $8=$target_addr;
    var $9=HEAP32[(($8)>>2)];
    var $arrayidx=(($9+($7<<2))|0);
    HEAP32[(($arrayidx)>>2)]=$call2;
    var $10=$count_addr;
    var $11=HEAP32[(($10)>>2)];
    var $inc=((($11)+(1))|0);
    HEAP32[(($10)>>2)]=$inc;
    var $12=$target_addr;
    var $13=HEAP32[(($12)>>2)];
    var $14=$13;
    var $15=$count_addr;
    var $16=HEAP32[(($15)>>2)];
    var $add=((($16)+(1))|0);
    var $mul=((($add<<2))&-1);
    var $call3=_xrealloc($14, $mul);
    var $17=$call3;
    var $18=$target_addr;
    HEAP32[(($18)>>2)]=$17;
  }

  return;
}
_target_fontmaps["X"]=1;

function _kpathsea_make_tex($kpse, $format, $base) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 68)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $retval;
  var $kpse_addr;
  var $format_addr;
  var $base_addr;
  var $spec=__stackBase__;
  var $ret;
  var $args;
  var $argnum;
  var $i;
  $kpse_addr=$kpse;
  $format_addr=$format;
  $base_addr=$base;
  $ret=0;
  var $0=$format_addr;
  var $1=$kpse_addr;
  var $format_info=(($1+132)|0);
  var $arrayidx=(($format_info+($0)*(68))|0);
  var $2=$spec;
  var $3=$arrayidx;
  assert(68 % 1 === 0);for (var $$src = $3>>2, $$dest = $2>>2, $$stop = $$src + 17; $$src < $$stop; $$src++, $$dest++) {
    HEAP32[$$dest] = HEAP32[$$src]
  };
  var $type=(($spec)|0);
  var $4=HEAP32[(($type)>>2)];
  var $tobool=(($4)|0)!=0;
  if (!($tobool)) {
    var $5=$kpse_addr;
    var $6=$format_addr;
    var $call=_kpathsea_init_format($5, $6);
    var $7=$format_addr;
    var $8=$kpse_addr;
    var $format_info1=(($8+132)|0);
    var $arrayidx2=(($format_info1+($7)*(68))|0);
    var $9=$spec;
    var $10=$arrayidx2;
    assert(68 % 1 === 0);for (var $$src = $10>>2, $$dest = $9>>2, $$stop = $$src + 17; $$src < $$stop; $$src++, $$dest++) {
      HEAP32[$$dest] = HEAP32[$$src]
    };
  }
  var $program=(($spec+44)|0);
  var $11=HEAP32[(($program)>>2)];
  var $tobool3=(($11)|0)!=0;
  do {
    if ($tobool3) {
      var $program_enabled_p=(($spec+56)|0);
      var $12=HEAP32[(($program_enabled_p)>>2)];
      var $tobool4=(($12)|0)!=0;
      if (!($tobool4)) {
        break;
      }
      var $argc=(($spec+48)|0);
      var $13=HEAP32[(($argc)>>2)];
      var $add=((($13)+(2))|0);
      var $mul=((($add<<2))&-1);
      var $call6=_xmalloc($mul);
      var $14=$call6;
      $args=$14;
      var $15=$base_addr;
      var $arrayidx7=(($15)|0);
      var $16=HEAP8[($arrayidx7)];
      var $conv=(($16 << 24) >> 24);
      var $cmp=(($conv)|0)==45;
      if ($cmp) {
        var $17=HEAP32[((_stderr)>>2)];
        var $18=$base_addr;
        var $19=$base_addr;
        var $arrayidx10=(($19)|0);
        var $20=HEAP8[($arrayidx10)];
        var $conv11=(($20 << 24) >> 24);
        var $call12=_fprintf($17, ((5254936)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$18,HEAP32[(((tempInt)+(4))>>2)]=$conv11,tempInt));
        $retval=0;
        var $82=$retval;
        STACKTOP = __stackBase__;
        return $82;
      }
      $i=0;
      L1060: while(1) {
        var $21=$i;
        var $22=$base_addr;
        var $arrayidx14=(($22+$21)|0);
        var $23=HEAP8[($arrayidx14)];
        var $tobool15=(($23 << 24) >> 24)!=0;
        if (!($tobool15)) {
          break;
        }
        var $24=$i;
        var $25=$base_addr;
        var $arrayidx16=(($25+$24)|0);
        var $26=HEAP8[($arrayidx16)];
        var $conv17=(($26 << 24) >> 24);
        var $cmp18=(($conv17)>>>0) <= 127;
        do {
          if ($cmp18) {
            var $27=$i;
            var $28=$base_addr;
            var $arrayidx21=(($28+$27)|0);
            var $29=HEAP8[($arrayidx21)];
            var $conv22=(($29 << 24) >> 24);
            var $call23=_isalnum($conv22);
            var $tobool24=(($call23)|0)!=0;
            if ($tobool24) {
              break;
            } else {
              label = 834;
              break;
            }
          } else {
            label = 834;
          }
        } while(0);
        do {
          if (label == 834) {
            label = 0;
            var $30=$i;
            var $31=$base_addr;
            var $arrayidx26=(($31+$30)|0);
            var $32=HEAP8[($arrayidx26)];
            var $conv27=(($32 << 24) >> 24);
            var $cmp28=(($conv27)|0)!=45;
            if (!($cmp28)) {
              break;
            }
            var $33=$i;
            var $34=$base_addr;
            var $arrayidx31=(($34+$33)|0);
            var $35=HEAP8[($arrayidx31)];
            var $conv32=(($35 << 24) >> 24);
            var $cmp33=(($conv32)|0)!=43;
            if (!($cmp33)) {
              break;
            }
            var $36=$i;
            var $37=$base_addr;
            var $arrayidx36=(($37+$36)|0);
            var $38=HEAP8[($arrayidx36)];
            var $conv37=(($38 << 24) >> 24);
            var $cmp38=(($conv37)|0)!=95;
            if (!($cmp38)) {
              break;
            }
            var $39=$i;
            var $40=$base_addr;
            var $arrayidx41=(($40+$39)|0);
            var $41=HEAP8[($arrayidx41)];
            var $conv42=(($41 << 24) >> 24);
            var $cmp43=(($conv42)|0)!=46;
            if (!($cmp43)) {
              break;
            }
            var $42=$i;
            var $43=$base_addr;
            var $arrayidx46=(($43+$42)|0);
            var $44=HEAP8[($arrayidx46)];
            var $conv47=(($44 << 24) >> 24);
            var $cmp48=(($conv47)|0)==47;
            if (!($cmp48)) {
              label = 839;
              break L1060;
            }
          }
        } while(0);
        var $50=$i;
        var $inc=((($50)+(1))|0);
        $i=$inc;
      }
      if (label == 839) {
        var $45=HEAP32[((_stderr)>>2)];
        var $46=$base_addr;
        var $47=$i;
        var $48=$base_addr;
        var $arrayidx51=(($48+$47)|0);
        var $49=HEAP8[($arrayidx51)];
        var $conv52=(($49 << 24) >> 24);
        var $call53=_fprintf($45, ((5264748)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$46,HEAP32[(((tempInt)+(4))>>2)]=$conv52,tempInt));
        $retval=0;
        var $82=$retval;
        STACKTOP = __stackBase__;
        return $82;
      }
      var $51=$format_addr;
      var $cmp55=(($51)|0)==0;
      do {
        if ($cmp55) {
          label = 845;
        } else {
          var $52=$format_addr;
          var $cmp57=(($52)|0)==1;
          if ($cmp57) {
            label = 845;
            break;
          }
          var $53=$format_addr;
          var $cmp60=(($53)|0)==2;
          if ($cmp60) {
            label = 845;
            break;
          } else {
            break;
          }
        }
      } while(0);
      if (label == 845) {
        var $54=$kpse_addr;
        _set_maketex_mag($54);
      }
      $argnum=0;
      while(1) {
        var $55=$argnum;
        var $argc65=(($spec+48)|0);
        var $56=HEAP32[(($argc65)>>2)];
        var $cmp66=(($55)|0) < (($56)|0);
        if (!($cmp66)) {
          break;
        }
        var $57=$kpse_addr;
        var $58=$argnum;
        var $argv=(($spec+52)|0);
        var $59=HEAP32[(($argv)>>2)];
        var $arrayidx69=(($59+($58<<2))|0);
        var $60=HEAP32[(($arrayidx69)>>2)];
        var $call70=_kpathsea_var_expand($57, $60);
        var $61=$argnum;
        var $62=$args;
        var $arrayidx71=(($62+($61<<2))|0);
        HEAP32[(($arrayidx71)>>2)]=$call70;
        var $63=$argnum;
        var $inc73=((($63)+(1))|0);
        $argnum=$inc73;
      }
      var $64=$base_addr;
      var $call75=_xstrdup($64);
      var $65=$argnum;
      var $inc76=((($65)+(1))|0);
      $argnum=$inc76;
      var $66=$args;
      var $arrayidx77=(($66+($65<<2))|0);
      HEAP32[(($arrayidx77)>>2)]=$call75;
      var $67=$argnum;
      var $68=$args;
      var $arrayidx78=(($68+($67<<2))|0);
      HEAP32[(($arrayidx78)>>2)]=0;
      var $69=$kpse_addr;
      var $70=$format_addr;
      var $71=$args;
      var $call79=_maketex($69, $70, $71);
      $ret=$call79;
      $argnum=0;
      while(1) {
        var $72=$argnum;
        var $73=$args;
        var $arrayidx81=(($73+($72<<2))|0);
        var $74=HEAP32[(($arrayidx81)>>2)];
        var $cmp82=(($74)|0)!=0;
        if (!($cmp82)) {
          break;
        }
        var $75=$argnum;
        var $76=$args;
        var $arrayidx85=(($76+($75<<2))|0);
        var $77=HEAP32[(($arrayidx85)>>2)];
        _free($77);
        var $78=$argnum;
        var $inc87=((($78)+(1))|0);
        $argnum=$inc87;
      }
      var $79=$args;
      var $80=$79;
      _free($80);
    }
  } while(0);
  var $81=$ret;
  $retval=$81;
  var $82=$retval;
  STACKTOP = __stackBase__;
  return $82;
}
_kpathsea_make_tex["X"]=1;

function _set_maketex_mag($kpse) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $q=__stackBase__;
  var $m=(__stackBase__)+(68);
  var $dpi_str;
  var $bdpi_str;
  var $dpi;
  var $bdpi;
  var $f;
  var $r;
  var $sign;
  $kpse_addr=$kpse;
  var $call=_getenv(((5263228)|0));
  $dpi_str=$call;
  var $call1=_getenv(((5262860)|0));
  $bdpi_str=$call1;
  var $0=$dpi_str;
  var $tobool=(($0)|0)!=0;
  if ($tobool) {
    var $1=$dpi_str;
    var $call2=_atoi($1);
    var $cond = $call2;
  } else {
    var $cond = 0;
  }
  var $cond;
  $dpi=$cond;
  var $2=$bdpi_str;
  var $tobool3=(($2)|0)!=0;
  if ($tobool3) {
    var $3=$bdpi_str;
    var $call5=_atoi($3);
    var $cond8 = $call5;
  } else {
    var $cond8 = 0;
  }
  var $cond8;
  $bdpi=$cond8;
  var $4=$dpi;
  var $cmp=(($4)|0)!=0;
  do {
    if ($cmp) {
      var $5=$bdpi;
      var $cmp9=(($5)|0)!=0;
      if (!($cmp9)) {
        label = 869;
        break;
      }
      break;
    } else {
      label = 869;
    }
  } while(0);
  if (label == 869) {
    ___assert_func(((5262384)|0), 50, ((5268460)|0), ((5261872)|0));
  }
  var $6=$kpse_addr;
  var $7=$dpi;
  var $8=$bdpi;
  var $call13=_kpathsea_magstep_fix($6, $7, $8, $m);
  var $9=HEAP32[(($m)>>2)];
  var $cmp14=(($9)|0)==0;
  if (!($cmp14)) {
    $sign=((5253004)|0);
    var $41=HEAP32[(($m)>>2)];
    var $cmp43=(($41)|0) < 0;
    if ($cmp43) {
      var $42=HEAP32[(($m)>>2)];
      var $mul=((($42)*(-1))&-1);
      HEAP32[(($m)>>2)]=$mul;
      $sign=((5259832)|0);
    }
    var $arraydecay46=(($q)|0);
    var $43=$sign;
    var $44=HEAP32[(($m)>>2)];
    var $div47=((((($44)|0))/(2))&-1);
    var $45=HEAP32[(($m)>>2)];
    var $and=$45 & 1;
    var $mul48=((($and)*(5))&-1);
    var $call49=_sprintf($arraydecay46, ((5259428)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$43,HEAP32[(((tempInt)+(4))>>2)]=$div47,HEAP32[(((tempInt)+(8))>>2)]=$mul48,tempInt));
    var $46=$kpse_addr;
    var $arraydecay51=(($q)|0);
    _kpathsea_xputenv($46, ((5259096)|0), $arraydecay51);
    STACKTOP = __stackBase__;
    return;
  }
  var $10=$bdpi;
  var $cmp15=(($10)>>>0) <= 4000;
  if ($cmp15) {
    var $arraydecay=(($q)|0);
    var $11=$dpi;
    var $12=$bdpi;
    var $div=Math.floor(((($11)>>>0))/((($12)>>>0)));
    var $13=$dpi;
    var $14=$bdpi;
    var $rem=((($13)>>>0))%((($14)>>>0));
    var $15=$bdpi;
    var $call17=_sprintf($arraydecay, ((5261204)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$div,HEAP32[(((tempInt)+(4))>>2)]=$rem,HEAP32[(((tempInt)+(8))>>2)]=$15,tempInt));
  } else {
    var $16=$bdpi;
    var $div18=Math.floor(((($16)>>>0))/(4000));
    $f=$div18;
    var $17=$bdpi;
    var $rem19=((($17)>>>0))%(4000);
    $r=$rem19;
    var $18=$f;
    var $cmp20=(($18)>>>0) > 1;
    if ($cmp20) {
      var $19=$r;
      var $cmp22=(($19)>>>0) > 0;
      if ($cmp22) {
        var $arraydecay24=(($q)|0);
        var $20=$dpi;
        var $21=$bdpi;
        var $div25=Math.floor(((($20)>>>0))/((($21)>>>0)));
        var $22=$dpi;
        var $23=$bdpi;
        var $rem26=((($22)>>>0))%((($23)>>>0));
        var $24=$f;
        var $25=$bdpi;
        var $26=$r;
        var $sub=((($25)-($26))|0);
        var $27=$f;
        var $div27=Math.floor(((($sub)>>>0))/((($27)>>>0)));
        var $28=$r;
        var $call28=_sprintf($arraydecay24, ((5260876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$div25,HEAP32[(((tempInt)+(4))>>2)]=$rem26,HEAP32[(((tempInt)+(8))>>2)]=$24,HEAP32[(((tempInt)+(12))>>2)]=$div27,HEAP32[(((tempInt)+(16))>>2)]=$28,tempInt));
      } else {
        var $arraydecay30=(($q)|0);
        var $29=$dpi;
        var $30=$bdpi;
        var $div31=Math.floor(((($29)>>>0))/((($30)>>>0)));
        var $31=$dpi;
        var $32=$bdpi;
        var $rem32=((($31)>>>0))%((($32)>>>0));
        var $33=$f;
        var $34=$bdpi;
        var $35=$f;
        var $div33=Math.floor(((($34)>>>0))/((($35)>>>0)));
        var $call34=_sprintf($arraydecay30, ((5260504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$div31,HEAP32[(((tempInt)+(4))>>2)]=$rem32,HEAP32[(((tempInt)+(8))>>2)]=$33,HEAP32[(((tempInt)+(12))>>2)]=$div33,tempInt));
      }
    } else {
      var $arraydecay36=(($q)|0);
      var $36=$dpi;
      var $37=$bdpi;
      var $div37=Math.floor(((($36)>>>0))/((($37)>>>0)));
      var $38=$dpi;
      var $39=$bdpi;
      var $rem38=((($38)>>>0))%((($39)>>>0));
      var $40=$r;
      var $call39=_sprintf($arraydecay36, ((5260112)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$div37,HEAP32[(((tempInt)+(4))>>2)]=$rem38,HEAP32[(((tempInt)+(8))>>2)]=$40,tempInt));
    }
  }
  var $46=$kpse_addr;
  var $arraydecay51=(($q)|0);
  _kpathsea_xputenv($46, ((5259096)|0), $arraydecay51);
  STACKTOP = __stackBase__;
  return;
}
_set_maketex_mag["X"]=1;

function _misstex($kpse, $format, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $format_addr;
  var $args_addr;
  var $s;
  var $missfont_name;
  $kpse_addr=$kpse;
  $format_addr=$format;
  $args_addr=$args;
  var $0=$format_addr;
  var $cmp=(($0)|0)!=0;
  do {
    if ($cmp) {
      var $1=$format_addr;
      var $cmp1=(($1)|0)!=1;
      if (!($cmp1)) {
        break;
      }
      var $2=$format_addr;
      var $cmp3=(($2)|0)!=2;
      if (!($cmp3)) {
        break;
      }
      var $3=$format_addr;
      var $cmp5=(($3)|0)!=3;
      if (!($cmp5)) {
        break;
      }
      var $4=$format_addr;
      var $cmp7=(($4)|0)!=33;
      if (!($cmp7)) {
        break;
      }
      STACKTOP = __stackBase__;
      return;
    }
  } while(0);
  var $5=$kpse_addr;
  var $missfont=(($5+4148)|0);
  var $6=HEAP32[(($missfont)>>2)];
  var $tobool=(($6)|0)!=0;
  do {
    if (!($tobool)) {
      var $7=$kpse_addr;
      var $make_tex_discard_errors=(($7+4144)|0);
      var $8=HEAP32[(($make_tex_discard_errors)>>2)];
      var $tobool9=(($8)|0)!=0;
      if ($tobool9) {
        break;
      }
      var $9=$kpse_addr;
      var $call=_kpathsea_var_value($9, ((5265564)|0));
      $missfont_name=$call;
      var $10=$missfont_name;
      var $tobool11=(($10)|0)!=0;
      do {
        if ($tobool11) {
          var $11=$missfont_name;
          var $12=HEAP8[($11)];
          var $conv=(($12 << 24) >> 24);
          var $cmp12=(($conv)|0)==49;
          if ($cmp12) {
            label = 897;
            break;
          }
          var $13=$missfont_name;
          var $tobool15=(($13)|0)!=0;
          do {
            if ($tobool15) {
              var $14=$missfont_name;
              var $15=HEAP8[($14)];
              var $conv17=(($15 << 24) >> 24);
              var $cmp18=(($conv17)|0)==0;
              if (!($cmp18)) {
                var $16=$missfont_name;
                var $17=HEAP8[($16)];
                var $conv21=(($17 << 24) >> 24);
                var $cmp22=(($conv21)|0)==48;
                if (!($cmp22)) {
                  break;
                }
              }
              $missfont_name=0;
            }
          } while(0);
          break;
        } else {
          label = 897;
        }
      } while(0);
      if (label == 897) {
        $missfont_name=((5265252)|0);
      }
      var $18=$missfont_name;
      var $tobool27=(($18)|0)!=0;
      if ($tobool27) {
        var $19=$missfont_name;
        var $call28=_kpse_fopen_trace($19, ((5264956)|0));
        var $cond = $call28;
      } else {
        var $cond = 0;
      }
      var $cond;
      var $20=$kpse_addr;
      var $missfont29=(($20+4148)|0);
      HEAP32[(($missfont29)>>2)]=$cond;
      var $21=$kpse_addr;
      var $missfont30=(($21+4148)|0);
      var $22=HEAP32[(($missfont30)>>2)];
      var $tobool31=(($22)|0)!=0;
      do {
        if (!($tobool31)) {
          var $23=$kpse_addr;
          var $call33=_kpathsea_var_value($23, ((5264580)|0));
          var $tobool34=(($call33)|0)!=0;
          if (!($tobool34)) {
            break;
          }
          var $24=$kpse_addr;
          var $call36=_kpathsea_var_value($24, ((5264580)|0));
          var $25=$missfont_name;
          var $call37=_concat3($call36, ((5264156)|0), $25);
          $missfont_name=$call37;
          var $26=$missfont_name;
          var $call38=_kpse_fopen_trace($26, ((5264956)|0));
          var $27=$kpse_addr;
          var $missfont39=(($27+4148)|0);
          HEAP32[(($missfont39)>>2)]=$call38;
        }
      } while(0);
      var $28=$kpse_addr;
      var $missfont41=(($28+4148)|0);
      var $29=HEAP32[(($missfont41)>>2)];
      var $tobool42=(($29)|0)!=0;
      if ($tobool42) {
        var $30=HEAP32[((_stderr)>>2)];
        var $31=$missfont_name;
        var $call44=_fprintf($30, ((5263704)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$31,tempInt));
      }
    }
  } while(0);
  var $32=$kpse_addr;
  var $missfont47=(($32+4148)|0);
  var $33=HEAP32[(($missfont47)>>2)];
  var $tobool48=(($33)|0)!=0;
  if (!($tobool48)) {
    STACKTOP = __stackBase__;
    return;
  }
  var $34=$args_addr;
  var $arrayidx=(($34)|0);
  var $35=HEAP32[(($arrayidx)>>2)];
  var $36=$kpse_addr;
  var $missfont50=(($36+4148)|0);
  var $37=HEAP32[(($missfont50)>>2)];
  var $call51=_fputs($35, $37);
  var $38=$args_addr;
  var $arrayidx52=(($38+4)|0);
  $s=$arrayidx52;
  while(1) {
    var $39=$s;
    var $40=HEAP32[(($39)>>2)];
    var $cmp53=(($40)|0)!=0;
    if (!($cmp53)) {
      break;
    }
    var $41=$kpse_addr;
    var $missfont55=(($41+4148)|0);
    var $42=HEAP32[(($missfont55)>>2)];
    var $call56=_fputc(32, $42);
    var $43=$s;
    var $44=HEAP32[(($43)>>2)];
    var $45=$kpse_addr;
    var $missfont57=(($45+4148)|0);
    var $46=HEAP32[(($missfont57)>>2)];
    var $call58=_fputs($44, $46);
    var $47=$s;
    var $incdec_ptr=(($47+4)|0);
    $s=$incdec_ptr;
  }
  var $48=$kpse_addr;
  var $missfont59=(($48+4148)|0);
  var $49=HEAP32[(($missfont59)>>2)];
  var $call60=_fputc(10, $49);
  STACKTOP = __stackBase__;
  return;
}
_misstex["X"]=1;

function _uppercasify($s) {
  var label = 0;

  var $s_addr;
  var $target;
  var $ret;
  $s_addr=$s;
  var $0=$s_addr;
  var $call=_xstrdup($0);
  $ret=$call;
  var $1=$ret;
  $target=$1;
  while(1) {
    var $2=$target;
    var $3=HEAP8[($2)];
    var $tobool=(($3 << 24) >> 24)!=0;
    if (!($tobool)) {
      break;
    }
    var $4=$target;
    var $5=HEAP8[($4)];
    var $conv=(($5 << 24) >> 24);
    var $cmp=(($conv)>>>0) <= 127;
    do {
      if ($cmp) {
        var $6=$target;
        var $7=HEAP8[($6)];
        var $conv2=(($7 << 24) >> 24);
        var $call3=_islower($conv2);
        var $tobool4=(($call3)|0)!=0;
        if (!($tobool4)) {
          label = 927;
          break;
        }
        var $8=$target;
        var $9=HEAP8[($8)];
        var $conv5=(($9 << 24) >> 24);
        var $call6=_toupper($conv5);
        var $cond = $call6;
        break;
      } else {
        label = 927;
      }
    } while(0);
    if (label == 927) {
      label = 0;
      var $10=$target;
      var $11=HEAP8[($10)];
      var $conv7=(($11 << 24) >> 24);
      var $cond = $conv7;
    }
    var $cond;
    var $conv8=(($cond) & 255);
    var $12=$target;
    HEAP8[($12)]=$conv8;
    var $13=$target;
    var $incdec_ptr=(($13+1)|0);
    $target=$incdec_ptr;
  }
  var $14=$ret;

  return $14;
}


function _kpathsea_var_value($kpse, $var) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $var_addr;
  var $vtry;
  var $ret;
  var $value;
  $kpse_addr=$kpse;
  $var_addr=$var;
  var $0=$kpse_addr;
  var $program_name=(($0+112)|0);
  var $1=HEAP32[(($program_name)>>2)];
  var $tobool=(($1)|0)!=0;
  if ($tobool) {
  } else {
    ___assert_func(((5254740)|0), 36, ((5268496)|0), ((5264608)|0));
  }
  var $2=$var_addr;
  var $3=$kpse_addr;
  var $program_name1=(($3+112)|0);
  var $4=HEAP32[(($program_name1)>>2)];
  var $call=_concat3($2, ((5260156)|0), $4);
  $vtry=$call;
  var $5=$vtry;
  var $call2=_getenv($5);
  $value=$call2;
  var $6=$vtry;
  _free($6);
  var $7=$value;
  var $tobool3=(($7)|0)!=0;
  do {
    if ($tobool3) {
      var $8=$value;
      var $9=HEAP8[($8)];
      var $tobool4=(($9 << 24) >> 24)!=0;
      if ($tobool4) {
        break;
      } else {
        label = 936;
        break;
      }
    } else {
      label = 936;
    }
  } while(0);
  if (label == 936) {
    var $10=$var_addr;
    var $11=$kpse_addr;
    var $program_name5=(($11+112)|0);
    var $12=HEAP32[(($program_name5)>>2)];
    var $call6=_concat3($10, ((5257668)|0), $12);
    $vtry=$call6;
    var $13=$vtry;
    var $call7=_getenv($13);
    $value=$call7;
    var $14=$vtry;
    _free($14);
  }
  var $15=$value;
  var $tobool8=(($15)|0)!=0;
  do {
    if ($tobool8) {
      var $16=$value;
      var $17=HEAP8[($16)];
      var $tobool10=(($17 << 24) >> 24)!=0;
      if ($tobool10) {
        break;
      } else {
        label = 939;
        break;
      }
    } else {
      label = 939;
    }
  } while(0);
  if (label == 939) {
    var $18=$var_addr;
    var $call12=_getenv($18);
    $value=$call12;
  }
  var $19=$value;
  var $tobool14=(($19)|0)!=0;
  do {
    if ($tobool14) {
      var $20=$value;
      var $21=HEAP8[($20)];
      var $tobool16=(($21 << 24) >> 24)!=0;
      if ($tobool16) {
        break;
      } else {
        label = 942;
        break;
      }
    } else {
      label = 942;
    }
  } while(0);
  if (label == 942) {
    var $22=$kpse_addr;
    var $23=$var_addr;
    var $call18=_kpathsea_cnf_get($22, $23);
    $value=$call18;
  }
  var $24=$value;
  var $tobool20=(($24)|0)!=0;
  if ($tobool20) {
    var $25=$kpse_addr;
    var $26=$value;
    var $call22=_kpathsea_expand($25, $26);
    var $cond = $call22;
  } else {
    var $cond = 0;
  }
  var $cond;
  $ret=$cond;
  var $27=$kpse_addr;
  var $debug=(($27+44)|0);
  var $28=HEAP32[(($debug)>>2)];
  var $and=$28 & 64;
  var $tobool25=(($and)|0)!=0;
  if (!($tobool25)) {
    var $35=$ret;
    STACKTOP = __stackBase__;
    return $35;
  }
  var $29=HEAP32[((_stderr)>>2)];
  var $call27=_fputs(((5257000)|0), $29);
  var $30=HEAP32[((_stderr)>>2)];
  var $31=$var_addr;
  var $32=$ret;
  var $tobool28=(($32)|0)!=0;
  if ($tobool28) {
    var $33=$ret;
    var $cond32 = $33;
  } else {
    var $cond32 = ((5255336)|0);
  }
  var $cond32;
  var $call33=_fprintf($30, ((5255984)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$31,HEAP32[(((tempInt)+(4))>>2)]=$cond32,tempInt));
  var $34=HEAP32[((_stderr)>>2)];
  var $call34=_fflush($34);
  var $35=$ret;
  STACKTOP = __stackBase__;
  return $35;
}
_kpathsea_var_value["X"]=1;

function _kpse_var_value($var) {
  var label = 0;

  var $var_addr;
  $var_addr=$var;
  var $0=HEAP32[((5248384)>>2)];
  var $1=$var_addr;
  var $call=_kpathsea_var_value($0, $1);

  return $call;
}


function _maketex($kpse, $format, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1036)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $format_addr;
  var $args_addr;
  var $len;
  var $s;
  var $ret;
  var $fn;
  var $childin;
  var $childout=__stackBase__;
  var $childerr;
  var $childpid;
  var $buf=(__stackBase__)+(8);
  var $num;
  var $newfn;
  $kpse_addr=$kpse;
  $format_addr=$format;
  $args_addr=$args;
  $ret=0;
  var $0=$kpse_addr;
  var $make_tex_discard_errors=(($0+4144)|0);
  var $1=HEAP32[(($make_tex_discard_errors)>>2)];
  var $tobool=(($1)|0)!=0;
  if (!($tobool)) {
    var $2=HEAP32[((_stderr)>>2)];
    var $call=_fprintf($2, ((5260220)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
    var $3=$args_addr;
    var $arrayidx=(($3)|0);
    $s=$arrayidx;
    while(1) {
      var $4=$s;
      var $5=HEAP32[(($4)>>2)];
      var $cmp=(($5)|0)!=0;
      if (!($cmp)) {
        break;
      }
      var $6=HEAP32[((_stderr)>>2)];
      var $7=$s;
      var $8=HEAP32[(($7)>>2)];
      var $call1=_fprintf($6, ((5257728)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$8,tempInt));
      var $9=$s;
      var $incdec_ptr=(($9+4)|0);
      $s=$incdec_ptr;
    }
    var $10=HEAP32[((_stderr)>>2)];
    var $call2=_fputc(10, $10);
  }
  var $call3=_open(((5257016)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  $childin=$call3;
  var $cmp4=(($call3)|0) < 0;
  L1231: do {
    if ($cmp4) {
      _perror(((5256008)|0));
      label = 973;
      break;
    } else {
      var $arraydecay=(($childout)|0);
      var $call7=_pipe($arraydecay);
      var $cmp8=(($call7)|0) < 0;
      if ($cmp8) {
        _perror(((5255356)|0));
      } else {
        var $call11=_open(((5257016)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
        $childerr=$call11;
        var $cmp12=(($call11)|0) < 0;
        do {
          if ($cmp12) {
            _perror(((5254692)|0));
          } else {
            var $call15=_fork();
            $childpid=$call15;
            var $cmp16=(($call15)|0) < 0;
            if ($cmp16) {
              _perror(((5253828)|0));
              var $11=$childerr;
              var $call18=_close($11);
              break;
            }
            var $15=$childpid;
            var $cmp24=(($15)|0)==0;
            if (!($cmp24)) {
              var $33=$childin;
              var $call60=_close($33);
              var $arrayidx61=(($childout+4)|0);
              var $34=HEAP32[(($arrayidx61)>>2)];
              var $call62=_close($34);
              var $35=$childerr;
              var $call63=_close($35);
              var $call64=_xstrdup(((5253004)|0));
              $fn=$call64;
              while(1) {
                var $arrayidx65=(($childout)|0);
                var $36=HEAP32[(($arrayidx65)>>2)];
                var $arraydecay66=(($buf)|0);
                var $call67=_read($36, $arraydecay66, 1024);
                $num=$call67;
                var $cmp68=(($call67)|0)!=0;
                if (!($cmp68)) {
                  break;
                }
                var $37=$num;
                var $cmp69=(($37)|0)==-1;
                if ($cmp69) {
                  var $call71=___errno_location();
                  var $38=HEAP32[(($call71)>>2)];
                  var $cmp72=(($38)|0)!=4;
                  if ($cmp72) {
                    label = 990;
                    break;
                  }
                } else {
                  var $39=$num;
                  var $arrayidx76=(($buf+$39)|0);
                  HEAP8[($arrayidx76)]=0;
                  var $40=$fn;
                  var $arraydecay77=(($buf)|0);
                  var $call78=_concat($40, $arraydecay77);
                  $newfn=$call78;
                  var $41=$fn;
                  _free($41);
                  var $42=$newfn;
                  $fn=$42;
                }
              }
              if (label == 990) {
                _perror(((5267472)|0));
              }
              var $arrayidx80=(($childout)|0);
              var $43=HEAP32[(($arrayidx80)>>2)];
              var $call81=_close($43);
              var $call82=_wait(0);
              break L1231;
            }
            var $arrayidx26=(($childout)|0);
            var $16=HEAP32[(($arrayidx26)>>2)];
            var $call27=_close($16);
            var $17=$childin;
            var $cmp28=(($17)|0)!=0;
            if ($cmp28) {
              var $call30=_close(0);
              var $18=$childin;
              var $call31=_dup($18);
              var $19=$childin;
              var $call32=_close($19);
            }
            var $arrayidx34=(($childout+4)|0);
            var $20=HEAP32[(($arrayidx34)>>2)];
            var $cmp35=(($20)|0)!=1;
            if ($cmp35) {
              var $call37=_close(1);
              var $arrayidx38=(($childout+4)|0);
              var $21=HEAP32[(($arrayidx38)>>2)];
              var $call39=_dup($21);
              var $arrayidx40=(($childout+4)|0);
              var $22=HEAP32[(($arrayidx40)>>2)];
              var $call41=_close($22);
            }
            var $23=$childerr;
            var $cmp43=(($23)|0)!=2;
            if ($cmp43) {
              var $24=$kpse_addr;
              var $make_tex_discard_errors45=(($24+4144)|0);
              var $25=HEAP32[(($make_tex_discard_errors45)>>2)];
              var $tobool46=(($25)|0)!=0;
              if ($tobool46) {
                var $call48=_close(2);
                var $26=$childerr;
                var $call49=_dup($26);
              }
              var $27=$childerr;
              var $call51=_close($27);
            }
            var $28=$args_addr;
            var $arrayidx53=(($28)|0);
            var $29=HEAP32[(($arrayidx53)>>2)];
            var $30=$args_addr;
            var $call54=_execl($29, $30);
            var $tobool55=(($call54)|0)!=0;
            if (!($tobool55)) {
              __exit(1);
              throw "Reached an unreachable!"
            }
            var $31=$args_addr;
            var $arrayidx57=(($31)|0);
            var $32=HEAP32[(($arrayidx57)>>2)];
            _perror($32);
            __exit(1);
            throw "Reached an unreachable!"
          }
        } while(0);
        var $arrayidx19=(($childout)|0);
        var $12=HEAP32[(($arrayidx19)>>2)];
        var $call20=_close($12);
        var $arrayidx21=(($childout+4)|0);
        var $13=HEAP32[(($arrayidx21)>>2)];
        var $call22=_close($13);
      }
      var $14=$childin;
      var $call23=_close($14);
      label = 973;
      break;
    }
  } while(0);
  if (label == 973) {
    $fn=0;
  }
  var $44=$fn;
  var $tobool85=(($44)|0)!=0;
  if ($tobool85) {
    var $45=$fn;
    var $call87=_strlen($45);
    $len=$call87;
    while(1) {
      var $46=$len;
      var $tobool89=(($46)|0)!=0;
      if ($tobool89) {
        var $47=$len;
        var $sub=((($47)-(1))|0);
        var $48=$fn;
        var $arrayidx90=(($48+$sub)|0);
        var $49=HEAP8[($arrayidx90)];
        var $conv=(($49 << 24) >> 24);
        var $cmp91=(($conv)|0)==10;
        if ($cmp91) {
          var $53 = 1;
        } else {
          var $50=$len;
          var $sub93=((($50)-(1))|0);
          var $51=$fn;
          var $arrayidx94=(($51+$sub93)|0);
          var $52=HEAP8[($arrayidx94)];
          var $conv95=(($52 << 24) >> 24);
          var $cmp96=(($conv95)|0)==13;
          var $53 = $cmp96;
        }
        var $53;
        var $54 = $53;
      } else {
        var $54 = 0;
      }
      var $54;
      if (!($54)) {
        break;
      }
      var $55=$len;
      var $sub99=((($55)-(1))|0);
      var $56=$fn;
      var $arrayidx100=(($56+$sub99)|0);
      HEAP8[($arrayidx100)]=0;
      var $57=$len;
      var $dec=((($57)-(1))|0);
      $len=$dec;
    }
    var $58=$len;
    var $cmp102=(($58)|0)==0;
    if ($cmp102) {
      var $cond = 0;
    } else {
      var $59=$kpse_addr;
      var $60=$fn;
      var $call104=_kpathsea_readable_file($59, $60);
      var $cond = $call104;
    }
    var $cond;
    $ret=$cond;
    var $61=$ret;
    var $tobool105=(($61)|0)!=0;
    do {
      if (!($tobool105)) {
        var $62=$len;
        var $cmp106=(($62)>>>0) > 1;
        if (!($cmp106)) {
          break;
        }
        var $63=HEAP32[((_stderr)>>2)];
        var $call109=_fputs(((5266856)|0), $63);
        var $64=HEAP32[((_stderr)>>2)];
        var $65=$args_addr;
        var $arrayidx110=(($65)|0);
        var $66=HEAP32[(($arrayidx110)>>2)];
        var $67=$fn;
        var $call111=_fprintf($64, ((5266348)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$66,HEAP32[(((tempInt)+(4))>>2)]=$67,tempInt));
        var $68=HEAP32[((_stderr)>>2)];
        var $call112=_fputs(((5265964)|0), $68);
        var $69=HEAP32[((_stderr)>>2)];
        var $call113=_fflush($69);
      }
    } while(0);
    var $70=$fn;
    var $71=$ret;
    var $cmp115=(($70)|0)!=(($71)|0);
    if ($cmp115) {
      var $72=$fn;
      _free($72);
    }
  }
  var $73=$ret;
  var $cmp120=(($73)|0)==0;
  if ($cmp120) {
    var $74=$kpse_addr;
    var $75=$format_addr;
    var $76=$args_addr;
    _misstex($74, $75, $76);
    var $79=$ret;
    STACKTOP = __stackBase__;
    return $79;
  } else {
    var $77=$kpse_addr;
    var $78=$ret;
    _kpathsea_db_insert($77, $78);
    var $79=$ret;
    STACKTOP = __stackBase__;
    return $79;
  }
}
_maketex["X"]=1;

function _xbasename($name) {
  var label = 0;

  var $name_addr;
  var $base;
  var $p;
  $name_addr=$name;
  var $0=$name_addr;
  $base=$0;
  var $1=$base;
  $p=$1;
  while(1) {
    var $2=$p;
    var $3=HEAP8[($2)];
    var $tobool=(($3 << 24) >> 24)!=0;
    if (!($tobool)) {
      break;
    }
    var $4=$p;
    var $5=HEAP8[($4)];
    var $conv=(($5 << 24) >> 24);
    var $cmp=(($conv)|0)==47;
    if ($cmp) {
      var $6=$p;
      var $add_ptr=(($6+1)|0);
      $base=$add_ptr;
    }
    var $7=$p;
    var $incdec_ptr=(($7+1)|0);
    $p=$incdec_ptr;
  }
  var $8=$base;

  return $8;
}


function _kpathsea_var_expand($kpse, $src) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $src_addr;
  var $s;
  var $ret;
  var $expansion=__stackBase__;
  var $tmp=(__stackBase__)+(12);
  var $var_end;
  var $var_end33;
  $kpse_addr=$kpse;
  $src_addr=$src;
  _fn_init($tmp);
  var $0=$expansion;
  var $1=$tmp;
  assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
  var $2=$src_addr;
  $s=$2;
  while(1) {
    var $3=$s;
    var $4=HEAP8[($3)];
    var $tobool=(($4 << 24) >> 24)!=0;
    if (!($tobool)) {
      break;
    }
    var $5=$s;
    var $6=HEAP8[($5)];
    var $conv=(($6 << 24) >> 24);
    var $cmp=(($conv)|0)==36;
    if ($cmp) {
      var $7=$s;
      var $incdec_ptr=(($7+1)|0);
      $s=$incdec_ptr;
      var $8=$s;
      var $9=HEAP8[($8)];
      var $conv2=(($9 << 24) >> 24);
      var $cmp3=(($conv2)>>>0) <= 127;
      do {
        if ($cmp3) {
          var $10=$s;
          var $11=HEAP8[($10)];
          var $conv5=(($11 << 24) >> 24);
          var $call=_isalnum($conv5);
          var $tobool6=(($call)|0)!=0;
          if ($tobool6) {
            label = 1036;
            break;
          } else {
            label = 1035;
            break;
          }
        } else {
          label = 1035;
        }
      } while(0);
      do {
        if (label == 1035) {
          label = 0;
          var $12=$s;
          var $13=HEAP8[($12)];
          var $conv7=(($13 << 24) >> 24);
          var $cmp8=(($conv7)|0)==95;
          if ($cmp8) {
            label = 1036;
            break;
          }
          var $31=$s;
          var $32=HEAP8[($31)];
          var $conv28=(($32 << 24) >> 24);
          var $cmp29=(($conv28)|0)==123;
          if ($cmp29) {
            var $33=$s;
            var $incdec_ptr34=(($33+1)|0);
            $s=$incdec_ptr34;
            $var_end33=$incdec_ptr34;
            while(1) {
              var $34=$var_end33;
              var $35=HEAP8[($34)];
              var $conv35=(($35 << 24) >> 24);
              var $tobool36=(($conv35)|0)!=0;
              if ($tobool36) {
                var $36=$var_end33;
                var $37=HEAP8[($36)];
                var $conv37=(($37 << 24) >> 24);
                var $cmp38=(($conv37)|0)==125;
                var $lnot=$cmp38 ^ 1;
                var $38 = $lnot;
              } else {
                var $38 = 0;
              }
              var $38;
              if (!($38)) {
                break;
              }
              var $39=$var_end33;
              var $incdec_ptr40=(($39+1)|0);
              $var_end33=$incdec_ptr40;
            }
            var $40=$var_end33;
            var $41=HEAP8[($40)];
            var $tobool41=(($41 << 24) >> 24)!=0;
            if ($tobool41) {
              var $48=$kpse_addr;
              var $49=$s;
              var $50=$var_end33;
              var $add_ptr52=((($50)-(1))|0);
              var $call53=_expand($48, $expansion, $49, $add_ptr52);
              var $51=$var_end33;
              $s=$51;
            } else {
              var $42=HEAP32[((_stderr)>>2)];
              var $call44=_fputs(((5254660)|0), $42);
              var $43=HEAP32[((_stderr)>>2)];
              var $44=$src_addr;
              var $call45=_fprintf($43, ((5253752)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$44,tempInt));
              var $45=HEAP32[((_stderr)>>2)];
              var $call46=_fputs(((5252988)|0), $45);
              var $46=HEAP32[((_stderr)>>2)];
              var $call47=_fflush($46);
              var $47=$var_end33;
              var $add_ptr50=((($47)-(1))|0);
              $s=$add_ptr50;
            }
          } else {
            var $52=HEAP32[((_stderr)>>2)];
            var $call57=_fputs(((5254660)|0), $52);
            var $53=HEAP32[((_stderr)>>2)];
            var $54=$src_addr;
            var $55=$s;
            var $56=HEAP8[($55)];
            var $conv58=(($56 << 24) >> 24);
            var $call59=_fprintf($53, ((5267412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$54,HEAP32[(((tempInt)+(4))>>2)]=$conv58,tempInt));
            var $57=HEAP32[((_stderr)>>2)];
            var $call60=_fputs(((5252988)|0), $57);
            var $58=HEAP32[((_stderr)>>2)];
            var $call61=_fflush($58);
            var $59=$s;
            var $add_ptr64=((($59)-(1))|0);
            _fn_grow($expansion, $add_ptr64, 2);
          }
          break;
        }
      } while(0);
      if (label == 1036) {
        label = 0;
        var $14=$s;
        $var_end=$14;
        while(1) {
          var $15=$var_end;
          var $incdec_ptr12=(($15+1)|0);
          $var_end=$incdec_ptr12;
          var $16=$var_end;
          var $17=HEAP8[($16)];
          var $conv13=(($17 << 24) >> 24);
          var $cmp14=(($conv13)>>>0) <= 127;
          do {
            if ($cmp14) {
              var $18=$var_end;
              var $19=HEAP8[($18)];
              var $conv17=(($19 << 24) >> 24);
              var $call18=_isalnum($conv17);
              var $tobool19=(($call18)|0)!=0;
              if ($tobool19) {
                var $22 = 1;
                break;
              } else {
                label = 1040;
                break;
              }
            } else {
              label = 1040;
            }
          } while(0);
          if (label == 1040) {
            label = 0;
            var $20=$var_end;
            var $21=HEAP8[($20)];
            var $conv20=(($21 << 24) >> 24);
            var $cmp21=(($conv20)|0)==95;
            var $22 = $cmp21;
          }
          var $22;
          if (!($22)) {
            break;
          }
        }
        var $23=$var_end;
        var $incdec_ptr23=((($23)-(1))|0);
        $var_end=$incdec_ptr23;
        var $24=$kpse_addr;
        var $25=$s;
        var $26=$var_end;
        var $call24=_expand($24, $expansion, $25, $26);
        var $tobool25=(($call24)|0)!=0;
        if (!($tobool25)) {
          var $27=$s;
          var $add_ptr=((($27)-(1))|0);
          var $28=$var_end;
          var $29=$s;
          var $sub_ptr_lhs_cast=$28;
          var $sub_ptr_rhs_cast=$29;
          var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
          var $add=((($sub_ptr_sub)+(1))|0);
          var $add27=((($add)+(1))|0);
          _fn_grow($expansion, $add_ptr, $add27);
        }
        var $30=$var_end;
        $s=$30;
      }
    } else {
      var $60=$s;
      var $61=HEAP8[($60)];
      _fn_1grow($expansion, $61);
    }
    var $62=$s;
    var $incdec_ptr69=(($62+1)|0);
    $s=$incdec_ptr69;
  }
  _fn_1grow($expansion, 0);
  var $str=(($expansion)|0);
  var $63=HEAP32[(($str)>>2)];
  $ret=$63;
  var $64=$ret;
  STACKTOP = __stackBase__;
  return $64;
}
_kpathsea_var_expand["X"]=1;

function _expand($kpse, $expansion, $start, $end) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $expansion_addr;
  var $start_addr;
  var $end_addr;
  var $ret;
  var $value;
  var $len;
  var $var;
  var $vtry;
  var $tmp;
  $kpse_addr=$kpse;
  $expansion_addr=$expansion;
  $start_addr=$start;
  $end_addr=$end;
  $ret=0;
  var $0=$end_addr;
  var $1=$start_addr;
  var $sub_ptr_lhs_cast=$0;
  var $sub_ptr_rhs_cast=$1;
  var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
  var $add=((($sub_ptr_sub)+(1))|0);
  $len=$add;
  var $2=$len;
  var $add1=((($2)+(1))|0);
  var $call=_xmalloc($add1);
  $var=$call;
  var $3=$var;
  var $4=$start_addr;
  var $5=$len;
  var $call2=_strncpy($3, $4, $5);
  var $6=$len;
  var $7=$var;
  var $arrayidx=(($7+$6)|0);
  HEAP8[($arrayidx)]=0;
  var $8=$kpse_addr;
  var $9=$var;
  var $call3=_expanding_p($8, $9);
  var $tobool=(($call3)|0)!=0;
  if ($tobool) {
    var $10=HEAP32[((_stderr)>>2)];
    var $call4=_fputs(((5254660)|0), $10);
    var $11=HEAP32[((_stderr)>>2)];
    var $12=$var;
    var $call5=_fprintf($11, ((5266788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$12,tempInt));
    var $13=HEAP32[((_stderr)>>2)];
    var $call6=_fputs(((5252988)|0), $13);
    var $14=HEAP32[((_stderr)>>2)];
    var $call7=_fflush($14);
    var $40=$var;
    _free($40);
    var $41=$ret;
    STACKTOP = __stackBase__;
    return $41;
  }
  var $15=$var;
  var $16=$kpse_addr;
  var $program_name=(($16+112)|0);
  var $17=HEAP32[(($program_name)>>2)];
  var $call8=_concat3($15, ((5257668)|0), $17);
  $vtry=$call8;
  var $18=$vtry;
  var $call9=_getenv($18);
  $value=$call9;
  var $19=$vtry;
  _free($19);
  var $20=$value;
  var $tobool10=(($20)|0)!=0;
  do {
    if ($tobool10) {
      var $21=$value;
      var $22=HEAP8[($21)];
      var $tobool11=(($22 << 24) >> 24)!=0;
      if ($tobool11) {
        break;
      } else {
        label = 1072;
        break;
      }
    } else {
      label = 1072;
    }
  } while(0);
  if (label == 1072) {
    var $23=$var;
    var $call13=_getenv($23);
    $value=$call13;
  }
  var $24=$value;
  var $tobool14=(($24)|0)!=0;
  do {
    if ($tobool14) {
      var $25=$value;
      var $26=HEAP8[($25)];
      var $tobool16=(($26 << 24) >> 24)!=0;
      if ($tobool16) {
        break;
      } else {
        label = 1075;
        break;
      }
    } else {
      label = 1075;
    }
  } while(0);
  if (label == 1075) {
    var $27=$kpse_addr;
    var $28=$var;
    var $call18=_kpathsea_cnf_get($27, $28);
    $value=$call18;
  }
  var $29=$value;
  var $tobool20=(($29)|0)!=0;
  if ($tobool20) {
    $ret=1;
    var $30=$kpse_addr;
    var $31=$var;
    _expanding($30, $31, 1);
    var $32=$kpse_addr;
    var $33=$value;
    var $call22=_kpathsea_expand($32, $33);
    $tmp=$call22;
    var $34=$kpse_addr;
    var $35=$var;
    _expanding($34, $35, 0);
    var $36=$expansion_addr;
    var $37=$tmp;
    var $38=$tmp;
    var $call23=_strlen($38);
    _fn_grow($36, $37, $call23);
    var $39=$tmp;
    _free($39);
  }
  var $40=$var;
  _free($40);
  var $41=$ret;
  STACKTOP = __stackBase__;
  return $41;
}
_expand["X"]=1;

function _expanding_p($kpse, $var) {
  var label = 0;

  var $retval;
  var $kpse_addr;
  var $var_addr;
  var $e;
  $kpse_addr=$kpse;
  $var_addr=$var;
  $e=0;
  L1390: while(1) {
    var $0=$e;
    var $1=$kpse_addr;
    var $expansion_len=(($1+4156)|0);
    var $2=HEAP32[(($expansion_len)>>2)];
    var $cmp=(($0)>>>0) < (($2)>>>0);
    if (!($cmp)) {
      label = 1090;
      break;
    }
    var $3=$e;
    var $4=$kpse_addr;
    var $expansions=(($4+4152)|0);
    var $5=HEAP32[(($expansions)>>2)];
    var $arrayidx=(($5+($3<<3))|0);
    var $var1=(($arrayidx)|0);
    var $6=HEAP32[(($var1)>>2)];
    var $cmp2=(($6)|0)!=0;
    do {
      if ($cmp2) {
        var $7=$var_addr;
        var $cmp3=(($7)|0)!=0;
        if (!($cmp3)) {
          break;
        }
        var $8=$e;
        var $9=$kpse_addr;
        var $expansions5=(($9+4152)|0);
        var $10=HEAP32[(($expansions5)>>2)];
        var $arrayidx6=(($10+($8<<3))|0);
        var $var7=(($arrayidx6)|0);
        var $11=HEAP32[(($var7)>>2)];
        var $12=$var_addr;
        var $call=_strcmp($11, $12);
        var $cmp8=(($call)|0)==0;
        if ($cmp8) {
          label = 1087;
          break L1390;
        }
      }
    } while(0);
    var $17=$e;
    var $inc=((($17)+(1))|0);
    $e=$inc;
  }
  if (label == 1090) {
    $retval=0;
    var $18=$retval;

    return $18;
  }
  else if (label == 1087) {
    var $13=$e;
    var $14=$kpse_addr;
    var $expansions9=(($14+4152)|0);
    var $15=HEAP32[(($expansions9)>>2)];
    var $arrayidx10=(($15+($13<<3))|0);
    var $expanding=(($arrayidx10+4)|0);
    var $16=HEAP32[(($expanding)>>2)];
    $retval=$16;
    var $18=$retval;

    return $18;
  }
}
_expanding_p["X"]=1;

function _expanding($kpse, $var, $xp) {
  var label = 0;

  var $kpse_addr;
  var $var_addr;
  var $xp_addr;
  var $e;
  $kpse_addr=$kpse;
  $var_addr=$var;
  $xp_addr=$xp;
  $e=0;
  L1404: while(1) {
    var $0=$e;
    var $1=$kpse_addr;
    var $expansion_len=(($1+4156)|0);
    var $2=HEAP32[(($expansion_len)>>2)];
    var $cmp=(($0)>>>0) < (($2)>>>0);
    if (!($cmp)) {
      label = 1102;
      break;
    }
    var $3=$e;
    var $4=$kpse_addr;
    var $expansions=(($4+4152)|0);
    var $5=HEAP32[(($expansions)>>2)];
    var $arrayidx=(($5+($3<<3))|0);
    var $var1=(($arrayidx)|0);
    var $6=HEAP32[(($var1)>>2)];
    var $cmp2=(($6)|0)!=0;
    do {
      if ($cmp2) {
        var $7=$var_addr;
        var $cmp3=(($7)|0)!=0;
        if (!($cmp3)) {
          break;
        }
        var $8=$e;
        var $9=$kpse_addr;
        var $expansions5=(($9+4152)|0);
        var $10=HEAP32[(($expansions5)>>2)];
        var $arrayidx6=(($10+($8<<3))|0);
        var $var7=(($arrayidx6)|0);
        var $11=HEAP32[(($var7)>>2)];
        var $12=$var_addr;
        var $call=_strcmp($11, $12);
        var $cmp8=(($call)|0)==0;
        if ($cmp8) {
          label = 1099;
          break L1404;
        }
      }
    } while(0);
    var $17=$e;
    var $inc=((($17)+(1))|0);
    $e=$inc;
  }
  if (label == 1099) {
    var $13=$xp_addr;
    var $14=$e;
    var $15=$kpse_addr;
    var $expansions9=(($15+4152)|0);
    var $16=HEAP32[(($expansions9)>>2)];
    var $arrayidx10=(($16+($14<<3))|0);
    var $expanding=(($arrayidx10+4)|0);
    HEAP32[(($expanding)>>2)]=$13;

    return;
  }
  else if (label == 1102) {
    var $18=$kpse_addr;
    var $expansion_len11=(($18+4156)|0);
    var $19=HEAP32[(($expansion_len11)>>2)];
    var $inc12=((($19)+(1))|0);
    HEAP32[(($expansion_len11)>>2)]=$inc12;
    var $20=$kpse_addr;
    var $expansions13=(($20+4152)|0);
    var $21=HEAP32[(($expansions13)>>2)];
    var $22=$21;
    var $23=$kpse_addr;
    var $expansion_len14=(($23+4156)|0);
    var $24=HEAP32[(($expansion_len14)>>2)];
    var $mul=((($24<<3))&-1);
    var $call15=_xrealloc($22, $mul);
    var $25=$call15;
    var $26=$kpse_addr;
    var $expansions16=(($26+4152)|0);
    HEAP32[(($expansions16)>>2)]=$25;
    var $27=$var_addr;
    var $call17=_xstrdup($27);
    var $28=$kpse_addr;
    var $expansion_len18=(($28+4156)|0);
    var $29=HEAP32[(($expansion_len18)>>2)];
    var $sub=((($29)-(1))|0);
    var $30=$kpse_addr;
    var $expansions19=(($30+4152)|0);
    var $31=HEAP32[(($expansions19)>>2)];
    var $arrayidx20=(($31+($sub<<3))|0);
    var $var21=(($arrayidx20)|0);
    HEAP32[(($var21)>>2)]=$call17;
    var $32=$xp_addr;
    var $33=$kpse_addr;
    var $expansion_len22=(($33+4156)|0);
    var $34=HEAP32[(($expansion_len22)>>2)];
    var $sub23=((($34)-(1))|0);
    var $35=$kpse_addr;
    var $expansions24=(($35+4152)|0);
    var $36=HEAP32[(($expansions24)>>2)];
    var $arrayidx25=(($36+($sub23<<3))|0);
    var $expanding26=(($arrayidx25+4)|0);
    HEAP32[(($expanding26)>>2)]=$32;

    return;
  }
}
_expanding["X"]=1;

function _xdirname($name) {
  var label = 0;

  var $retval;
  var $name_addr;
  var $ret;
  var $limit;
  var $loc;
  $name_addr=$name;
  $limit=0;
  var $0=$name_addr;
  var $tobool=(($0)|0)!=0;
  if (!($tobool)) {
    $retval=0;
    var $36=$retval;

    return $36;
  }
  var $1=$name_addr;
  var $call=_strlen($1);
  $loc=$call;
  while(1) {
    var $2=$loc;
    var $3=$limit;
    var $cmp=(($2)>>>0) > (($3)>>>0);
    if ($cmp) {
      var $4=$loc;
      var $sub=((($4)-(1))|0);
      var $5=$name_addr;
      var $arrayidx=(($5+$sub)|0);
      var $6=HEAP8[($arrayidx)];
      var $conv=(($6 << 24) >> 24);
      var $cmp1=(($conv)|0)==47;
      var $lnot=$cmp1 ^ 1;
      var $7 = $lnot;
    } else {
      var $7 = 0;
    }
    var $7;
    if (!($7)) {
      break;
    }
    var $8=$loc;
    var $dec=((($8)-(1))|0);
    $loc=$dec;
  }
  var $9=$loc;
  var $10=$limit;
  var $cmp3=(($9)|0)==(($10)|0);
  if ($cmp3) {
    var $11=$limit;
    var $cmp6=(($11)|0)==0;
    if ($cmp6) {
      var $call9=_xstrdup(((5254432)|0));
      $ret=$call9;
    } else {
      var $12=$limit;
      var $cmp10=(($12)|0)==2;
      if ($cmp10) {
        var $call13=_xmalloc(4);
        $ret=$call13;
        var $13=$name_addr;
        var $arrayidx14=(($13)|0);
        var $14=HEAP8[($arrayidx14)];
        var $15=$ret;
        var $arrayidx15=(($15)|0);
        HEAP8[($arrayidx15)]=$14;
        var $16=$name_addr;
        var $arrayidx16=(($16+1)|0);
        var $17=HEAP8[($arrayidx16)];
        var $18=$ret;
        var $arrayidx17=(($18+1)|0);
        HEAP8[($arrayidx17)]=$17;
        var $19=$ret;
        var $arrayidx18=(($19+2)|0);
        HEAP8[($arrayidx18)]=46;
        var $20=$ret;
        var $arrayidx19=(($20+3)|0);
        HEAP8[($arrayidx19)]=0;
      } else {
        var $21=$name_addr;
        var $call21=_xstrdup($21);
        $ret=$call21;
      }
    }
  } else {
    while(1) {
      var $22=$loc;
      var $23=$limit;
      var $add=((($23)+(1))|0);
      var $cmp25=(($22)>>>0) > (($add)>>>0);
      if ($cmp25) {
        var $24=$loc;
        var $sub28=((($24)-(1))|0);
        var $25=$name_addr;
        var $arrayidx29=(($25+$sub28)|0);
        var $26=HEAP8[($arrayidx29)];
        var $conv30=(($26 << 24) >> 24);
        var $cmp31=(($conv30)|0)==47;
        var $27 = $cmp31;
      } else {
        var $27 = 0;
      }
      var $27;
      if (!($27)) {
        break;
      }
      var $28=$loc;
      var $dec34=((($28)-(1))|0);
      $loc=$dec34;
    }
    var $29=$loc;
    var $add35=((($29)+(1))|0);
    var $call36=_xmalloc($add35);
    $ret=$call36;
    var $30=$ret;
    var $31=$name_addr;
    var $32=$loc;
    var $call37=_strncpy($30, $31, $32);
    var $33=$loc;
    var $34=$ret;
    var $arrayidx38=(($34+$33)|0);
    HEAP8[($arrayidx38)]=0;
  }
  var $35=$ret;
  $retval=$35;
  var $36=$retval;

  return $36;
}
_xdirname["X"]=1;

function _xfopen($filename, $mode) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $filename_addr;
  var $mode_addr;
  var $f;
  $filename_addr=$filename;
  $mode_addr=$mode;
  var $0=$filename_addr;
  var $tobool=(($0)|0)!=0;
  do {
    if ($tobool) {
      var $1=$mode_addr;
      var $tobool1=(($1)|0)!=0;
      if (!($tobool1)) {
        label = 1135;
        break;
      }
      break;
    } else {
      label = 1135;
    }
  } while(0);
  if (label == 1135) {
    ___assert_func(((5254388)|0), 30, ((5268444)|0), ((5264480)|0));
  }
  var $2=$filename_addr;
  var $3=$mode_addr;
  var $call=_kpse_fopen_trace($2, $3);
  $f=$call;
  var $4=$f;
  var $cmp=(($4)|0)==0;
  if (!($cmp)) {
    var $9=$f;
    STACKTOP = __stackBase__;
    return $9;
  }
  var $5=HEAP32[((_stderr)>>2)];
  var $6=HEAP32[((5248384)>>2)];
  var $invocation_name=(($6+104)|0);
  var $7=HEAP32[(($invocation_name)>>2)];
  var $call2=_fprintf($5, ((5260060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$7,tempInt));
  var $8=$filename_addr;
  _perror($8);
  _exit(1);
  throw "Reached an unreachable!"
}


function _xfclose($f, $filename) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $f_addr;
  var $filename_addr;
  $f_addr=$f;
  $filename_addr=$filename;
  var $0=$f_addr;
  var $tobool=(($0)|0)!=0;
  if ($tobool) {
  } else {
    ___assert_func(((5254388)|0), 43, ((5268452)|0), ((5257648)|0));
  }
  var $1=$f_addr;
  var $call=_kpse_fclose_trace($1);
  var $cmp=(($call)|0)==-1;
  if (!($cmp)) {
    STACKTOP = __stackBase__;
    return;
  }
  var $2=HEAP32[((_stderr)>>2)];
  var $3=HEAP32[((5248384)>>2)];
  var $invocation_name=(($3+104)|0);
  var $4=HEAP32[(($invocation_name)>>2)];
  var $call1=_fprintf($2, ((5260060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$4,tempInt));
  var $5=$filename_addr;
  _perror($5);
  _exit(1);
  throw "Reached an unreachable!"
}


function _xgetcwd() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4100)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $path=__stackBase__;
  var $arraydecay=(($path)|0);
  var $call=_getcwd($arraydecay, 4097);
  var $cmp=(($call)|0)==0;
  if (!($cmp)) {
    var $arraydecay2=(($path)|0);
    var $call3=_xstrdup($arraydecay2);
    STACKTOP = __stackBase__;
    return $call3;
  }
  var $0=HEAP32[((_stderr)>>2)];
  var $1=HEAP32[((5248384)>>2)];
  var $invocation_name=(($1+104)|0);
  var $2=HEAP32[(($invocation_name)>>2)];
  var $call1=_fprintf($0, ((5254344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$2,tempInt));
  _perror(((5264448)|0));
  _exit(1);
  throw "Reached an unreachable!"
}


function _xmalloc($size) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $size_addr;
  var $new_mem;
  $size_addr=$size;
  var $0=$size_addr;
  var $tobool=(($0)|0)!=0;
  if ($tobool) {
    var $1=$size_addr;
    var $cond = $1;
  } else {
    var $cond = 1;
  }
  var $cond;
  var $call=_malloc($cond);
  $new_mem=$call;
  var $2=$new_mem;
  var $cmp=(($2)|0)==0;
  if ($cmp) {
    var $3=HEAP32[((_stderr)>>2)];
    var $4=$size_addr;
    var $call1=_fprintf($3, ((5254280)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$4,tempInt));
    _exit(1);
    throw "Reached an unreachable!"
  } else {
    var $5=$new_mem;
    STACKTOP = __stackBase__;
    return $5;
  }
}


function _xstrdup($s) {
  var label = 0;

  var $s_addr;
  var $new_string;
  $s_addr=$s;
  var $0=$s_addr;
  var $call=_strlen($0);
  var $add=((($call)+(1))|0);
  var $call1=_xmalloc($add);
  $new_string=$call1;
  var $1=$new_string;
  var $2=$s_addr;
  var $call2=_strcpy($1, $2);

  return $call2;
}


function _kpathsea_cnf_get($kpse, $name) {
  var label = 0;

  var $retval;
  var $kpse_addr;
  var $name_addr;
  var $ret;
  var $ctry;
  var $ret_list;
  $kpse_addr=$kpse;
  $name_addr=$name;
  var $0=$kpse_addr;
  var $doing_cnf_init=(($0+16)|0);
  var $1=HEAP32[(($doing_cnf_init)>>2)];
  var $tobool=(($1)|0)!=0;
  if ($tobool) {
    $retval=0;
    var $33=$retval;

    return $33;
  }
  var $2=$kpse_addr;
  var $cnf_hash=(($2+8)|0);
  var $size=(($cnf_hash+4)|0);
  var $3=HEAP32[(($size)>>2)];
  var $cmp=(($3)|0)==0;
  if ($cmp) {
    var $4=$kpse_addr;
    var $doing_cnf_init2=(($4+16)|0);
    HEAP32[(($doing_cnf_init2)>>2)]=1;
    var $5=$kpse_addr;
    _read_all_cnf($5);
    var $6=$kpse_addr;
    var $doing_cnf_init3=(($6+16)|0);
    HEAP32[(($doing_cnf_init3)>>2)]=0;
    var $7=$kpse_addr;
    _kpathsea_init_db($7);
  }
  var $8=$kpse_addr;
  var $program_name=(($8+112)|0);
  var $9=HEAP32[(($program_name)>>2)];
  var $tobool5=(($9)|0)!=0;
  if ($tobool5) {
  } else {
    ___assert_func(((5254144)|0), 255, ((5268592)|0), ((5264352)|0));
  }
  var $10=$name_addr;
  var $11=$kpse_addr;
  var $program_name6=(($11+112)|0);
  var $12=HEAP32[(($program_name6)>>2)];
  var $call=_concat3($10, ((5259960)|0), $12);
  $ctry=$call;
  var $13=$kpse_addr;
  var $cnf_hash7=(($13+8)|0);
  var $14=$ctry;
  var $buckets=(($cnf_hash7)|0);
  var $15=HEAP32[(($buckets)>>2)];
  var $size8=(($cnf_hash7+4)|0);
  var $16=HEAP32[(($size8)>>2)];
  var $call9=_hash_lookup($15, $16, $14);
  $ret_list=$call9;
  var $17=$ctry;
  _free($17);
  var $18=$ret_list;
  var $tobool10=(($18)|0)!=0;
  if ($tobool10) {
    var $19=$ret_list;
    var $20=HEAP32[(($19)>>2)];
    $ret=$20;
    var $21=$ret_list;
    var $22=$21;
    _free($22);
  } else {
    var $23=$kpse_addr;
    var $cnf_hash12=(($23+8)|0);
    var $24=$name_addr;
    var $buckets13=(($cnf_hash12)|0);
    var $25=HEAP32[(($buckets13)>>2)];
    var $size14=(($cnf_hash12+4)|0);
    var $26=HEAP32[(($size14)>>2)];
    var $call15=_hash_lookup($25, $26, $24);
    $ret_list=$call15;
    var $27=$ret_list;
    var $tobool16=(($27)|0)!=0;
    if ($tobool16) {
      var $28=$ret_list;
      var $29=HEAP32[(($28)>>2)];
      $ret=$29;
      var $30=$ret_list;
      var $31=$30;
      _free($31);
    } else {
      $ret=0;
    }
  }
  var $32=$ret;
  $retval=$32;
  var $33=$retval;

  return $33;
}
_kpathsea_cnf_get["X"]=1;

function _read_all_cnf($kpse) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $cnf_files;
  var $cnf;
  var $cnf_path;
  var $tmp=__stackBase__;
  var $line;
  var $cnf_file;
  var $len;
  var $next_line;
  var $new_line;
  var $warn;
  $kpse_addr=$kpse;
  var $0=$kpse_addr;
  var $call=_kpathsea_init_format($0, 8);
  $cnf_path=$call;
  var $1=$kpse_addr;
  var $cnf_hash=(($1+8)|0);
  _hash_create($tmp, 751);
  var $2=$cnf_hash;
  var $3=$tmp;
  assert(8 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];
  var $4=$kpse_addr;
  var $5=$cnf_path;
  var $call1=_kpathsea_all_path_search($4, $5, ((5257632)|0));
  $cnf_files=$call1;
  var $6=$cnf_files;
  var $tobool=(($6)|0)!=0;
  do {
    if ($tobool) {
      var $7=$cnf_files;
      var $8=HEAP32[(($7)>>2)];
      var $tobool2=(($8)|0)!=0;
      if (!($tobool2)) {
        break;
      }
      var $9=$cnf_files;
      $cnf=$9;
      while(1) {
        var $10=$cnf;
        var $11=HEAP32[(($10)>>2)];
        var $tobool3=(($11)|0)!=0;
        if (!($tobool3)) {
          break;
        }
        var $12=$cnf;
        var $13=HEAP32[(($12)>>2)];
        var $call6=_xfopen($13, ((5256956)|0));
        $cnf_file=$call6;
        var $14=$kpse_addr;
        var $record_input=(($14)|0);
        var $15=HEAP32[(($record_input)>>2)];
        var $tobool7=(($15)|0)!=0;
        if ($tobool7) {
          var $16=$kpse_addr;
          var $record_input9=(($16)|0);
          var $17=HEAP32[(($record_input9)>>2)];
          var $18=$cnf;
          var $19=HEAP32[(($18)>>2)];
          FUNCTION_TABLE[$17]($19);
        }
        while(1) {
          var $20=$cnf_file;
          var $call10=_read_line($20);
          $line=$call10;
          var $cmp=(($call10)|0)!=0;
          if (!($cmp)) {
            break;
          }
          var $21=$line;
          var $call12=_strlen($21);
          $len=$call12;
          while(1) {
            var $22=$len;
            var $cmp14=(($22)>>>0) > 0;
            if ($cmp14) {
              var $23=$len;
              var $sub=((($23)-(1))|0);
              var $24=$line;
              var $arrayidx=(($24+$sub)|0);
              var $25=HEAP8[($arrayidx)];
              var $conv=(($25 << 24) >> 24);
              var $cmp15=(($conv)>>>0) <= 127;
              if ($cmp15) {
                var $26=$len;
                var $sub18=((($26)-(1))|0);
                var $27=$line;
                var $arrayidx19=(($27+$sub18)|0);
                var $28=HEAP8[($arrayidx19)];
                var $conv20=(($28 << 24) >> 24);
                var $call21=_isspace($conv20);
                var $tobool22=(($call21)|0)!=0;
                var $29 = $tobool22;
              } else {
                var $29 = 0;
              }
              var $29;
              var $30 = $29;
            } else {
              var $30 = 0;
            }
            var $30;
            if (!($30)) {
              break;
            }
            var $31=$len;
            var $sub25=((($31)-(1))|0);
            var $32=$line;
            var $arrayidx26=(($32+$sub25)|0);
            HEAP8[($arrayidx26)]=0;
            var $33=$len;
            var $dec=((($33)-(1))|0);
            $len=$dec;
          }
          while(1) {
            var $34=$len;
            var $cmp28=(($34)>>>0) > 0;
            if ($cmp28) {
              var $35=$len;
              var $sub31=((($35)-(1))|0);
              var $36=$line;
              var $arrayidx32=(($36+$sub31)|0);
              var $37=HEAP8[($arrayidx32)];
              var $conv33=(($37 << 24) >> 24);
              var $cmp34=(($conv33)|0)==92;
              var $38 = $cmp34;
            } else {
              var $38 = 0;
            }
            var $38;
            if (!($38)) {
              break;
            }
            var $39=$cnf_file;
            var $call39=_read_line($39);
            $next_line=$call39;
            var $40=$len;
            var $sub40=((($40)-(1))|0);
            var $41=$line;
            var $arrayidx41=(($41+$sub40)|0);
            HEAP8[($arrayidx41)]=0;
            var $42=$next_line;
            var $tobool42=(($42)|0)!=0;
            if ($tobool42) {
              var $49=$line;
              var $50=$next_line;
              var $call49=_concat($49, $50);
              $new_line=$call49;
              var $51=$line;
              _free($51);
              var $52=$new_line;
              $line=$52;
              var $53=$line;
              var $call50=_strlen($53);
              $len=$call50;
            } else {
              var $43=HEAP32[((_stderr)>>2)];
              var $call44=_fputs(((5255948)|0), $43);
              var $44=HEAP32[((_stderr)>>2)];
              var $45=$cnf;
              var $46=HEAP32[(($45)>>2)];
              var $call45=_fprintf($44, ((5255260)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$46,tempInt));
              var $47=HEAP32[((_stderr)>>2)];
              var $call46=_fputs(((5254640)|0), $47);
              var $48=HEAP32[((_stderr)>>2)];
              var $call47=_fflush($48);
            }
          }
          var $54=$kpse_addr;
          var $55=$line;
          _do_line($54, $55);
          var $56=$line;
          _free($56);
        }
        var $57=$cnf_file;
        var $58=$cnf;
        var $59=HEAP32[(($58)>>2)];
        _xfclose($57, $59);
        var $60=$cnf;
        var $61=HEAP32[(($60)>>2)];
        _free($61);
        var $62=$cnf;
        var $incdec_ptr=(($62+4)|0);
        $cnf=$incdec_ptr;
      }
      var $63=$cnf_files;
      var $64=$63;
      _free($64);
      STACKTOP = __stackBase__;
      return;
    }
  } while(0);
  var $call56=_getenv(((5253712)|0));
  $warn=$call56;
  var $65=$warn;
  var $tobool57=(($65)|0)!=0;
  do {
    if ($tobool57) {
      var $66=$warn;
      var $cmp59=(($66)|0)!=0;
      if (!($cmp59)) {
        label = 1210;
        break;
      }
      var $67=$warn;
      var $call62=_strcmp($67, ((5252968)|0));
      var $cmp63=(($call62)|0)==0;
      if ($cmp63) {
        break;
      } else {
        label = 1210;
        break;
      }
    } else {
      label = 1210;
    }
  } while(0);
  if (label == 1210) {
    var $68=HEAP32[((_stderr)>>2)];
    var $call67=_fputs(((5255948)|0), $68);
    var $69=HEAP32[((_stderr)>>2)];
    var $70=$cnf_path;
    var $call68=_fprintf($69, ((5267324)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$70,tempInt));
    var $71=HEAP32[((_stderr)>>2)];
    var $call69=_fputs(((5254640)|0), $71);
    var $72=HEAP32[((_stderr)>>2)];
    var $call70=_fflush($72);
  }
  STACKTOP = __stackBase__;
  return;
}
_read_all_cnf["X"]=1;

function _kpathsea_xputenv($kpse, $var, $value) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $var_addr;
  var $value_addr;
  var $cur_item;
  var $old_item;
  var $new_item;
  var $var_lim;
  var $cur_loc;
  $kpse_addr=$kpse;
  $var_addr=$var;
  $value_addr=$value;
  $old_item=0;
  var $0=$var_addr;
  var $1=$value_addr;
  var $call=_concat3($0, ((5254252)|0), $1);
  $cur_item=$call;
  var $2=$var_addr;
  var $call1=_strlen($2);
  var $add=((($call1)+(1))|0);
  $var_lim=$add;
  $cur_loc=0;
  while(1) {
    var $3=$cur_loc;
    var $4=$kpse_addr;
    var $saved_count=(($4+4164)|0);
    var $5=HEAP32[(($saved_count)>>2)];
    var $cmp=(($3)|0)!=(($5)|0);
    if (!($cmp)) {
      break;
    }
    var $6=$cur_loc;
    var $7=$kpse_addr;
    var $saved_env=(($7+4160)|0);
    var $8=HEAP32[(($saved_env)>>2)];
    var $arrayidx=(($8+($6<<2))|0);
    var $9=HEAP32[(($arrayidx)>>2)];
    var $10=$cur_item;
    var $11=$var_lim;
    var $call2=_strncmp($9, $10, $11);
    var $cmp3=(($call2)|0)==0;
    if ($cmp3) {
      label = 1220;
      break;
    }
    var $13=$cur_loc;
    var $inc=((($13)+(1))|0);
    $cur_loc=$inc;
  }
  if (label == 1220) {
    var $12=$var_addr;
    var $call4=_getenv($12);
    $old_item=$call4;
  }
  var $14=$old_item;
  var $tobool=(($14)|0)!=0;
  do {
    if ($tobool) {
      var $15=$old_item;
      var $16=$cur_item;
      var $17=$var_lim;
      var $add_ptr=(($16+$17)|0);
      var $call5=_strcmp($15, $add_ptr);
      var $cmp6=(($call5)|0)==0;
      if (!($cmp6)) {
        break;
      }
      var $18=$cur_item;
      _free($18);
      STACKTOP = __stackBase__;
      return;
    }
  } while(0);
  var $19=$cur_item;
  var $call8=_putenv($19);
  var $cmp9=(($call8)|0) < 0;
  if ($cmp9) {
    var $20=HEAP32[((_stderr)>>2)];
    var $21=$kpse_addr;
    var $invocation_name=(($21+104)|0);
    var $22=HEAP32[(($invocation_name)>>2)];
    var $call11=_fprintf($20, ((5264404)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$22,tempInt));
    var $23=HEAP32[((_stderr)>>2)];
    var $24=$cur_item;
    var $call12=_fprintf($23, ((5259984)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$24,tempInt));
    var $25=HEAP32[((_stderr)>>2)];
    var $call13=_fputs(((5257644)|0), $25);
    _exit(1);
    throw "Reached an unreachable!"
  }
  var $26=$var_addr;
  var $call15=_getenv($26);
  $new_item=$call15;
  var $27=$new_item;
  var $28=$cur_item;
  var $29=$var_lim;
  var $add_ptr16=(($28+$29)|0);
  var $cmp17=(($27)|0)!=(($add_ptr16)|0);
  if ($cmp17) {
    var $30=$cur_item;
    _free($30);
    STACKTOP = __stackBase__;
    return;
  }
  var $31=$cur_loc;
  var $32=$kpse_addr;
  var $saved_count21=(($32+4164)|0);
  var $33=HEAP32[(($saved_count21)>>2)];
  var $cmp22=(($31)|0)==(($33)|0);
  if ($cmp22) {
    var $34=$kpse_addr;
    var $saved_count24=(($34+4164)|0);
    var $35=HEAP32[(($saved_count24)>>2)];
    var $inc25=((($35)+(1))|0);
    HEAP32[(($saved_count24)>>2)]=$inc25;
    var $36=$kpse_addr;
    var $saved_env26=(($36+4160)|0);
    var $37=HEAP32[(($saved_env26)>>2)];
    var $38=$37;
    var $39=$kpse_addr;
    var $saved_count27=(($39+4164)|0);
    var $40=HEAP32[(($saved_count27)>>2)];
    var $mul=((($40<<2))&-1);
    var $call28=_xrealloc($38, $mul);
    var $41=$call28;
    var $42=$kpse_addr;
    var $saved_env29=(($42+4160)|0);
    HEAP32[(($saved_env29)>>2)]=$41;
  } else {
    var $43=$cur_loc;
    var $44=$kpse_addr;
    var $saved_env31=(($44+4160)|0);
    var $45=HEAP32[(($saved_env31)>>2)];
    var $arrayidx32=(($45+($43<<2))|0);
    var $46=HEAP32[(($arrayidx32)>>2)];
    _free($46);
  }
  var $47=$cur_item;
  var $48=$cur_loc;
  var $49=$kpse_addr;
  var $saved_env34=(($49+4160)|0);
  var $50=HEAP32[(($saved_env34)>>2)];
  var $arrayidx35=(($50+($48<<2))|0);
  HEAP32[(($arrayidx35)>>2)]=$47;
  STACKTOP = __stackBase__;
  return;
}
_kpathsea_xputenv["X"]=1;

function _xrealloc($old_ptr, $size) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $old_ptr_addr;
  var $size_addr;
  var $new_mem;
  $old_ptr_addr=$old_ptr;
  $size_addr=$size;
  var $0=$old_ptr_addr;
  var $cmp=(($0)|0)==0;
  if ($cmp) {
    var $1=$size_addr;
    var $call=_xmalloc($1);
    $new_mem=$call;
    var $8=$new_mem;
    STACKTOP = __stackBase__;
    return $8;
  }
  var $2=$old_ptr_addr;
  var $3=$size_addr;
  var $tobool=(($3)|0)!=0;
  if ($tobool) {
    var $4=$size_addr;
    var $cond = $4;
  } else {
    var $cond = 1;
  }
  var $cond;
  var $call1=_realloc($2, $cond);
  $new_mem=$call1;
  var $5=$new_mem;
  var $cmp2=(($5)|0)==0;
  if ($cmp2) {
    var $6=HEAP32[((_stderr)>>2)];
    var $7=$size_addr;
    var $call4=_fprintf($6, ((5254192)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$7,tempInt));
    _exit(1);
    throw "Reached an unreachable!"
  }
  var $8=$new_mem;
  STACKTOP = __stackBase__;
  return $8;
}


function _do_line($kpse, $line) {
  var label = 0;

  var $kpse_addr;
  var $line_addr;
  var $len;
  var $start;
  var $value;
  var $var;
  var $prog;
  var $loc;
  var $lhs;
  $kpse_addr=$kpse;
  $line_addr=$line;
  $prog=0;
  while(1) {
    var $0=$line_addr;
    var $1=HEAP8[($0)];
    var $conv=(($1 << 24) >> 24);
    var $cmp=(($conv)>>>0) <= 127;
    if ($cmp) {
      var $2=$line_addr;
      var $3=HEAP8[($2)];
      var $conv2=(($3 << 24) >> 24);
      var $call=_isspace($conv2);
      var $tobool=(($call)|0)!=0;
      var $4 = $tobool;
    } else {
      var $4 = 0;
    }
    var $4;
    if (!($4)) {
      break;
    }
    var $5=$line_addr;
    var $incdec_ptr=(($5+1)|0);
    $line_addr=$incdec_ptr;
  }
  var $6=$line_addr;
  var $7=HEAP8[($6)];
  var $conv3=(($7 << 24) >> 24);
  var $cmp4=(($conv3)|0)==0;
  do {
    if (!($cmp4)) {
      var $8=$line_addr;
      var $9=HEAP8[($8)];
      var $conv6=(($9 << 24) >> 24);
      var $cmp7=(($conv6)|0)==37;
      if ($cmp7) {
        break;
      }
      var $10=$line_addr;
      var $11=HEAP8[($10)];
      var $conv10=(($11 << 24) >> 24);
      var $cmp11=(($conv10)|0)==35;
      if ($cmp11) {
        break;
      }
      var $12=$line_addr;
      var $13=$line_addr;
      var $call13=_strlen($13);
      var $add_ptr=(($12+$call13)|0);
      var $add_ptr14=((($add_ptr)-(1))|0);
      $value=$add_ptr14;
      while(1) {
        var $14=$value;
        var $15=$line_addr;
        var $cmp16=(($14)>>>0) > (($15)>>>0);
        if (!($cmp16)) {
          break;
        }
        var $16=$value;
        var $17=HEAP8[($16)];
        var $conv19=(($17 << 24) >> 24);
        var $cmp20=(($conv19)|0)==37;
        do {
          if ($cmp20) {
            label = 1265;
          } else {
            var $18=$value;
            var $19=HEAP8[($18)];
            var $conv23=(($19 << 24) >> 24);
            var $cmp24=(($conv23)|0)==35;
            if ($cmp24) {
              label = 1265;
              break;
            } else {
              break;
            }
          }
        } while(0);
        if (label == 1265) {
          label = 0;
          var $20=$value;
          var $incdec_ptr27=((($20)-(1))|0);
          $value=$incdec_ptr27;
          while(1) {
            var $21=$value;
            var $22=HEAP8[($21)];
            var $conv29=(($22 << 24) >> 24);
            var $cmp30=(($conv29)>>>0) <= 127;
            if ($cmp30) {
              var $23=$value;
              var $24=HEAP8[($23)];
              var $conv33=(($24 << 24) >> 24);
              var $call34=_isspace($conv33);
              var $tobool35=(($call34)|0)!=0;
              var $25 = $tobool35;
            } else {
              var $25 = 0;
            }
            var $25;
            if (!($25)) {
              break;
            }
            var $26=$value;
            var $incdec_ptr38=((($26)-(1))|0);
            $value=$incdec_ptr38;
            HEAP8[($26)]=0;
          }
        }
        var $27=$value;
        var $incdec_ptr41=((($27)-(1))|0);
        $value=$incdec_ptr41;
      }
      var $28=$line_addr;
      $start=$28;
      while(1) {
        var $29=$line_addr;
        var $30=HEAP8[($29)];
        var $conv44=(($30 << 24) >> 24);
        var $cmp45=(($conv44)>>>0) <= 127;
        do {
          if ($cmp45) {
            var $31=$line_addr;
            var $32=HEAP8[($31)];
            var $conv47=(($32 << 24) >> 24);
            var $call48=_isspace($conv47);
            var $tobool49=(($call48)|0)!=0;
            if ($tobool49) {
              var $37 = 0;
              break;
            } else {
              label = 1275;
              break;
            }
          } else {
            label = 1275;
          }
        } while(0);
        do {
          if (label == 1275) {
            label = 0;
            var $33=$line_addr;
            var $34=HEAP8[($33)];
            var $conv51=(($34 << 24) >> 24);
            var $cmp52=(($conv51)|0)!=61;
            if (!($cmp52)) {
              var $37 = 0;
              break;
            }
            var $35=$line_addr;
            var $36=HEAP8[($35)];
            var $conv55=(($36 << 24) >> 24);
            var $cmp56=(($conv55)|0)!=46;
            var $37 = $cmp56;
          }
        } while(0);
        var $37;
        if (!($37)) {
          break;
        }
        var $38=$line_addr;
        var $incdec_ptr60=(($38+1)|0);
        $line_addr=$incdec_ptr60;
      }
      var $39=$line_addr;
      var $40=$start;
      var $sub_ptr_lhs_cast=$39;
      var $sub_ptr_rhs_cast=$40;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $len=$sub_ptr_sub;
      var $41=$len;
      var $add=((($41)+(1))|0);
      var $call62=_xmalloc($add);
      $var=$call62;
      var $42=$var;
      var $43=$start;
      var $44=$len;
      var $call63=_strncpy($42, $43, $44);
      var $45=$len;
      var $46=$var;
      var $arrayidx=(($46+$45)|0);
      HEAP8[($arrayidx)]=0;
      while(1) {
        var $47=$line_addr;
        var $48=HEAP8[($47)];
        var $conv65=(($48 << 24) >> 24);
        var $cmp66=(($conv65)>>>0) <= 127;
        if ($cmp66) {
          var $49=$line_addr;
          var $50=HEAP8[($49)];
          var $conv69=(($50 << 24) >> 24);
          var $call70=_isspace($conv69);
          var $tobool71=(($call70)|0)!=0;
          var $51 = $tobool71;
        } else {
          var $51 = 0;
        }
        var $51;
        if (!($51)) {
          break;
        }
        var $52=$line_addr;
        var $incdec_ptr74=(($52+1)|0);
        $line_addr=$incdec_ptr74;
      }
      var $53=$line_addr;
      var $54=HEAP8[($53)];
      var $conv76=(($54 << 24) >> 24);
      var $cmp77=(($conv76)|0)==46;
      if ($cmp77) {
        var $55=$line_addr;
        var $incdec_ptr80=(($55+1)|0);
        $line_addr=$incdec_ptr80;
        while(1) {
          var $56=$line_addr;
          var $57=HEAP8[($56)];
          var $conv82=(($57 << 24) >> 24);
          var $cmp83=(($conv82)>>>0) <= 127;
          if ($cmp83) {
            var $58=$line_addr;
            var $59=HEAP8[($58)];
            var $conv86=(($59 << 24) >> 24);
            var $call87=_isspace($conv86);
            var $tobool88=(($call87)|0)!=0;
            var $60 = $tobool88;
          } else {
            var $60 = 0;
          }
          var $60;
          if (!($60)) {
            break;
          }
          var $61=$line_addr;
          var $incdec_ptr91=(($61+1)|0);
          $line_addr=$incdec_ptr91;
        }
        var $62=$line_addr;
        $start=$62;
        while(1) {
          var $63=$line_addr;
          var $64=HEAP8[($63)];
          var $conv94=(($64 << 24) >> 24);
          var $cmp95=(($conv94)>>>0) <= 127;
          do {
            if ($cmp95) {
              var $65=$line_addr;
              var $66=HEAP8[($65)];
              var $conv98=(($66 << 24) >> 24);
              var $call99=_isspace($conv98);
              var $tobool100=(($call99)|0)!=0;
              if ($tobool100) {
                var $69 = 0;
                break;
              } else {
                label = 1293;
                break;
              }
            } else {
              label = 1293;
            }
          } while(0);
          if (label == 1293) {
            label = 0;
            var $67=$line_addr;
            var $68=HEAP8[($67)];
            var $conv102=(($68 << 24) >> 24);
            var $cmp103=(($conv102)|0)!=61;
            var $69 = $cmp103;
          }
          var $69;
          if (!($69)) {
            break;
          }
          var $70=$line_addr;
          var $incdec_ptr107=(($70+1)|0);
          $line_addr=$incdec_ptr107;
        }
        var $71=$line_addr;
        var $72=$start;
        var $sub_ptr_lhs_cast109=$71;
        var $sub_ptr_rhs_cast110=$72;
        var $sub_ptr_sub111=((($sub_ptr_lhs_cast109)-($sub_ptr_rhs_cast110))|0);
        $len=$sub_ptr_sub111;
        var $73=$len;
        var $add112=((($73)+(1))|0);
        var $call113=_xmalloc($add112);
        $prog=$call113;
        var $74=$prog;
        var $75=$start;
        var $76=$len;
        var $call114=_strncpy($74, $75, $76);
        var $77=$len;
        var $78=$prog;
        var $arrayidx115=(($78+$77)|0);
        HEAP8[($arrayidx115)]=0;
      }
      while(1) {
        var $79=$line_addr;
        var $80=HEAP8[($79)];
        var $conv118=(($80 << 24) >> 24);
        var $cmp119=(($conv118)>>>0) <= 127;
        if ($cmp119) {
          var $81=$line_addr;
          var $82=HEAP8[($81)];
          var $conv122=(($82 << 24) >> 24);
          var $call123=_isspace($conv122);
          var $tobool124=(($call123)|0)!=0;
          var $83 = $tobool124;
        } else {
          var $83 = 0;
        }
        var $83;
        if (!($83)) {
          break;
        }
        var $84=$line_addr;
        var $incdec_ptr127=(($84+1)|0);
        $line_addr=$incdec_ptr127;
      }
      var $85=$line_addr;
      var $86=HEAP8[($85)];
      var $conv129=(($86 << 24) >> 24);
      var $cmp130=(($conv129)|0)==61;
      if ($cmp130) {
        var $87=$line_addr;
        var $incdec_ptr133=(($87+1)|0);
        $line_addr=$incdec_ptr133;
        while(1) {
          var $88=$line_addr;
          var $89=HEAP8[($88)];
          var $conv135=(($89 << 24) >> 24);
          var $cmp136=(($conv135)>>>0) <= 127;
          if ($cmp136) {
            var $90=$line_addr;
            var $91=HEAP8[($90)];
            var $conv139=(($91 << 24) >> 24);
            var $call140=_isspace($conv139);
            var $tobool141=(($call140)|0)!=0;
            var $92 = $tobool141;
          } else {
            var $92 = 0;
          }
          var $92;
          if (!($92)) {
            break;
          }
          var $93=$line_addr;
          var $incdec_ptr144=(($93+1)|0);
          $line_addr=$incdec_ptr144;
        }
      }
      var $94=$line_addr;
      $start=$94;
      var $95=$start;
      var $call147=_strlen($95);
      $len=$call147;
      while(1) {
        var $96=$len;
        var $cmp149=(($96)>>>0) > 0;
        if ($cmp149) {
          var $97=$len;
          var $sub=((($97)-(1))|0);
          var $98=$start;
          var $arrayidx152=(($98+$sub)|0);
          var $99=HEAP8[($arrayidx152)];
          var $conv153=(($99 << 24) >> 24);
          var $cmp154=(($conv153)>>>0) <= 127;
          if ($cmp154) {
            var $100=$len;
            var $sub157=((($100)-(1))|0);
            var $101=$start;
            var $arrayidx158=(($101+$sub157)|0);
            var $102=HEAP8[($arrayidx158)];
            var $conv159=(($102 << 24) >> 24);
            var $call160=_isspace($conv159);
            var $tobool161=(($call160)|0)!=0;
            var $103 = $tobool161;
          } else {
            var $103 = 0;
          }
          var $103;
          var $104 = $103;
        } else {
          var $104 = 0;
        }
        var $104;
        if (!($104)) {
          break;
        }
        var $105=$len;
        var $dec=((($105)-(1))|0);
        $len=$dec;
      }
      var $106=$len;
      var $add166=((($106)+(1))|0);
      var $call167=_xmalloc($add166);
      $value=$call167;
      var $107=$value;
      var $108=$start;
      var $109=$len;
      var $call168=_strncpy($107, $108, $109);
      var $110=$len;
      var $111=$value;
      var $arrayidx169=(($111+$110)|0);
      HEAP8[($arrayidx169)]=0;
      var $112=$value;
      $loc=$112;
      while(1) {
        var $113=$loc;
        var $114=HEAP8[($113)];
        var $tobool170=(($114 << 24) >> 24)!=0;
        if (!($tobool170)) {
          break;
        }
        var $115=$loc;
        var $116=HEAP8[($115)];
        var $conv171=(($116 << 24) >> 24);
        var $cmp172=(($conv171)|0)==59;
        if ($cmp172) {
          var $117=$loc;
          HEAP8[($117)]=58;
        }
        var $118=$loc;
        var $incdec_ptr176=(($118+1)|0);
        $loc=$incdec_ptr176;
      }
      var $119=$prog;
      var $tobool177=(($119)|0)!=0;
      if ($tobool177) {
        var $120=$var;
        var $121=$prog;
        var $call179=_concat3($120, ((5259960)|0), $121);
        $lhs=$call179;
        var $122=$var;
        _free($122);
        var $123=$prog;
        _free($123);
        var $124=$lhs;
        $var=$124;
      }
      var $125=$kpse_addr;
      var $cnf_hash=(($125+8)|0);
      var $126=$var;
      var $127=$value;
      _hash_insert($cnf_hash, $126, $127);

      return;
    }
  } while(0);

  return;
}
_do_line["X"]=1;

function _concat($s1, $s2) {
  var label = 0;

  var $s1_addr;
  var $s2_addr;
  var $s1len;
  var $s2len;
  var $answer;
  $s1_addr=$s1;
  $s2_addr=$s2;
  var $0=$s1_addr;
  var $call=_strlen($0);
  $s1len=$call;
  var $1=$s2_addr;
  var $call1=_strlen($1);
  $s2len=$call1;
  var $2=$s1len;
  var $3=$s2len;
  var $add=((($2)+($3))|0);
  var $add2=((($add)+(1))|0);
  var $call3=_xmalloc($add2);
  $answer=$call3;
  var $4=$answer;
  var $5=$s1_addr;
  var $call4=_strcpy($4, $5);
  var $6=$answer;
  var $7=$s1len;
  var $add_ptr=(($6+$7)|0);
  var $8=$s2_addr;
  var $call5=_strcat($add_ptr, $8);
  var $9=$answer;

  return $9;
}


function _concatn($str1, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $retval;
  var $str1_addr;
  var $arg;
  var $ret;
  var $ap=__stackBase__;
  var $temp;
  $str1_addr=$str1;
  var $0=$str1_addr;
  var $tobool=(($0)|0)!=0;
  if (!($tobool)) {
    $retval=0;
    var $9=$retval;
    STACKTOP = __stackBase__;
    return $9;
  }
  var $1=$str1_addr;
  var $call=_xstrdup($1);
  $ret=$call;
  var $ap1=$ap;
  HEAP32[(($ap1)>>2)]=varrp;
  while(1) {
    var $ap_cur=HEAP32[(($ap)>>2)];
    var $2=$ap_cur;
    var $ap_next=(($ap_cur+4)|0);
    HEAP32[(($ap)>>2)]=$ap_next;
    var $3=HEAP32[(($2)>>2)];
    $arg=$3;
    var $cmp=(($3)|0)!=0;
    if (!($cmp)) {
      break;
    }
    var $4=$ret;
    var $5=$arg;
    var $call2=_concat($4, $5);
    $temp=$call2;
    var $6=$ret;
    _free($6);
    var $7=$temp;
    $ret=$7;
  }
  var $ap3=$ap;

  var $8=$ret;
  $retval=$8;
  var $9=$retval;
  STACKTOP = __stackBase__;
  return $9;
}


function _kpathsea_db_insert($kpse, $passed_fname) {
  var label = 0;

  var $kpse_addr;
  var $passed_fname_addr;
  var $dir_part;
  var $fname;
  var $baseptr;
  var $file_part;
  $kpse_addr=$kpse;
  $passed_fname_addr=$passed_fname;
  var $0=$kpse_addr;
  var $db=(($0+20)|0);
  var $buckets=(($db)|0);
  var $1=HEAP32[(($buckets)>>2)];
  var $tobool=(($1)|0)!=0;
  if (!($tobool)) {

    return;
  }
  var $2=$passed_fname_addr;
  var $call=_xstrdup($2);
  $fname=$call;
  var $3=$fname;
  var $4=$fname;
  var $call1=_xbasename($4);
  var $5=$fname;
  var $sub_ptr_lhs_cast=$call1;
  var $sub_ptr_rhs_cast=$5;
  var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
  var $add_ptr=(($3+$sub_ptr_sub)|0);
  $baseptr=$add_ptr;
  var $6=$baseptr;
  var $call2=_xstrdup($6);
  $file_part=$call2;
  var $7=$baseptr;
  HEAP8[($7)]=0;
  var $8=$fname;
  $dir_part=$8;
  var $9=$kpse_addr;
  var $db3=(($9+20)|0);
  var $10=$file_part;
  var $11=$dir_part;
  _hash_insert($db3, $10, $11);

  return;
}


function _kpathsea_init_db($kpse) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $ok;
  var $db_path;
  var $db_files;
  var $orig_db_files;
  var $tmp=__stackBase__;
  var $tmp13=(__stackBase__)+(8);
  $kpse_addr=$kpse;
  $ok=0;
  var $0=$kpse_addr;
  var $call=_kpathsea_init_format($0, 9);
  $db_path=$call;
  var $1=$kpse_addr;
  var $2=$db_path;
  var $call1=_kpathsea_all_path_search_list($1, $2, ((5251120)|0));
  $db_files=$call1;
  var $3=$db_files;
  $orig_db_files=$3;
  var $4=$kpse_addr;
  var $db=(($4+20)|0);
  _hash_create($tmp, 32003);
  var $5=$db;
  var $6=$tmp;
  assert(8 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];
  while(1) {
    var $7=$db_files;
    var $tobool=(($7)|0)!=0;
    if ($tobool) {
      var $8=$db_files;
      var $9=HEAP32[(($8)>>2)];
      var $tobool2=(($9)|0)!=0;
      var $10 = $tobool2;
    } else {
      var $10 = 0;
    }
    var $10;
    if (!($10)) {
      break;
    }
    var $11=$kpse_addr;
    var $12=$kpse_addr;
    var $db3=(($12+20)|0);
    var $13=$db_files;
    var $14=HEAP32[(($13)>>2)];
    var $call4=_db_build($11, $db3, $14);
    var $tobool5=(($call4)|0)!=0;
    if ($tobool5) {
      $ok=1;
    }
    var $15=$db_files;
    var $16=HEAP32[(($15)>>2)];
    _free($16);
    var $17=$db_files;
    var $incdec_ptr=(($17+4)|0);
    $db_files=$incdec_ptr;
  }
  var $18=$ok;
  var $tobool6=(($18)|0)!=0;
  if (!($tobool6)) {
    var $19=$kpse_addr;
    var $db8=(($19+20)|0);
    var $buckets=(($db8)|0);
    var $20=HEAP32[(($buckets)>>2)];
    var $21=$20;
    _free($21);
    var $22=$kpse_addr;
    var $db9=(($22+20)|0);
    var $buckets10=(($db9)|0);
    HEAP32[(($buckets10)>>2)]=0;
  }
  var $23=$orig_db_files;
  var $24=$23;
  _free($24);
  $ok=0;
  var $25=$kpse_addr;
  var $26=$db_path;
  var $call12=_kpathsea_all_path_search($25, $26, ((5254036)|0));
  $db_files=$call12;
  var $27=$db_files;
  $orig_db_files=$27;
  var $28=$kpse_addr;
  var $alias_db=(($28+28)|0);
  _hash_create($tmp13, 1009);
  var $29=$alias_db;
  var $30=$tmp13;
  assert(8 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];
  while(1) {
    var $31=$db_files;
    var $tobool15=(($31)|0)!=0;
    if ($tobool15) {
      var $32=$db_files;
      var $33=HEAP32[(($32)>>2)];
      var $tobool17=(($33)|0)!=0;
      var $34 = $tobool17;
    } else {
      var $34 = 0;
    }
    var $34;
    if (!($34)) {
      break;
    }
    var $35=$kpse_addr;
    var $36=$kpse_addr;
    var $alias_db20=(($36+28)|0);
    var $37=$db_files;
    var $38=HEAP32[(($37)>>2)];
    var $call21=_alias_build($35, $alias_db20, $38);
    var $tobool22=(($call21)|0)!=0;
    if ($tobool22) {
      $ok=1;
    }
    var $39=$db_files;
    var $40=HEAP32[(($39)>>2)];
    _free($40);
    var $41=$db_files;
    var $incdec_ptr25=(($41+4)|0);
    $db_files=$incdec_ptr25;
  }
  var $42=$ok;
  var $tobool27=(($42)|0)!=0;
  if ($tobool27) {
    var $47=$orig_db_files;
    var $48=$47;
    _free($48);
    STACKTOP = __stackBase__;
    return;
  }
  var $43=$kpse_addr;
  var $alias_db29=(($43+28)|0);
  var $buckets30=(($alias_db29)|0);
  var $44=HEAP32[(($buckets30)>>2)];
  var $45=$44;
  _free($45);
  var $46=$kpse_addr;
  var $alias_db31=(($46+28)|0);
  var $buckets32=(($alias_db31)|0);
  HEAP32[(($buckets32)>>2)]=0;
  var $47=$orig_db_files;
  var $48=$47;
  _free($48);
  STACKTOP = __stackBase__;
  return;
}
_kpathsea_init_db["X"]=1;

function _db_build($kpse, $table, $db_filename) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $table_addr;
  var $db_filename_addr;
  var $line;
  var $dir_count;
  var $file_count;
  var $ignore_dir_count;
  var $len;
  var $top_dir;
  var $cur_dir;
  var $db_file;
  var $hash_summary_only;
  $kpse_addr=$kpse;
  $table_addr=$table;
  $db_filename_addr=$db_filename;
  $dir_count=0;
  $file_count=0;
  $ignore_dir_count=0;
  var $0=$db_filename_addr;
  var $call=_strlen($0);
  var $sub=((($call)-(5))|0);
  var $add=((($sub)+(1))|0);
  $len=$add;
  var $1=$len;
  var $add1=((($1)+(1))|0);
  var $call2=_xmalloc($add1);
  $top_dir=$call2;
  $cur_dir=0;
  var $2=$db_filename_addr;
  var $call3=_kpse_fopen_trace($2, ((5256952)|0));
  $db_file=$call3;
  var $3=$top_dir;
  var $4=$db_filename_addr;
  var $5=$len;
  var $call4=_strncpy($3, $4, $5);
  var $6=$len;
  var $7=$top_dir;
  var $arrayidx=(($7+$6)|0);
  HEAP8[($arrayidx)]=0;
  var $8=$db_file;
  var $tobool=(($8)|0)!=0;
  if (!($tobool)) {
    var $74=$top_dir;
    _free($74);
    var $75=$db_file;
    var $cmp87=(($75)|0)!=0;
    var $conv88=(($cmp87)&1);
    STACKTOP = __stackBase__;
    return $conv88;
  }
  while(1) {
    var $9=$db_file;
    var $call5=_read_line($9);
    $line=$call5;
    var $cmp=(($call5)|0)!=0;
    if (!($cmp)) {
      break;
    }
    var $10=$line;
    var $call6=_strlen($10);
    $len=$call6;
    var $11=$len;
    var $cmp7=(($11)>>>0) > 0;
    do {
      if ($cmp7) {
        var $12=$len;
        var $sub8=((($12)-(1))|0);
        var $13=$line;
        var $arrayidx9=(($13+$sub8)|0);
        var $14=HEAP8[($arrayidx9)];
        var $conv=(($14 << 24) >> 24);
        var $cmp10=(($conv)|0)==58;
        if (!($cmp10)) {
          label = 1377;
          break;
        }
        var $15=$kpse_addr;
        var $16=$line;
        var $call13=_kpathsea_absolute_p($15, $16, 1);
        var $tobool14=(($call13)|0)!=0;
        if (!($tobool14)) {
          label = 1377;
          break;
        }
        var $17=$line;
        var $call16=_ignore_dir_p($17);
        var $tobool17=(($call16)|0)!=0;
        if ($tobool17) {
          $cur_dir=0;
          var $26=$ignore_dir_count;
          var $inc26=((($26)+(1))|0);
          $ignore_dir_count=$inc26;
        } else {
          var $18=$len;
          var $sub19=((($18)-(1))|0);
          var $19=$line;
          var $arrayidx20=(($19+$sub19)|0);
          HEAP8[($arrayidx20)]=47;
          var $20=$line;
          var $21=HEAP8[($20)];
          var $conv21=(($21 << 24) >> 24);
          var $cmp22=(($conv21)|0)==46;
          if ($cmp22) {
            var $22=$top_dir;
            var $23=$line;
            var $add_ptr=(($23+2)|0);
            var $call24=_concat($22, $add_ptr);
            var $cond = $call24;
          } else {
            var $24=$line;
            var $call25=_xstrdup($24);
            var $cond = $call25;
          }
          var $cond;
          $cur_dir=$cond;
          var $25=$dir_count;
          var $inc=((($25)+(1))|0);
          $dir_count=$inc;
        }
        break;
      } else {
        label = 1377;
      }
    } while(0);
    if (label == 1377) {
      label = 0;
      var $27=$line;
      var $28=HEAP8[($27)];
      var $conv28=(($28 << 24) >> 24);
      var $cmp29=(($conv28)|0)!=0;
      L1766: do {
        if ($cmp29) {
          var $29=$cur_dir;
          var $tobool32=(($29)|0)!=0;
          if (!($tobool32)) {
            break;
          }
          var $30=$line;
          var $31=HEAP8[($30)];
          var $conv34=(($31 << 24) >> 24);
          var $cmp35=(($conv34)|0)==46;
          do {
            if ($cmp35) {
              var $32=$line;
              var $arrayidx38=(($32+1)|0);
              var $33=HEAP8[($arrayidx38)];
              var $conv39=(($33 << 24) >> 24);
              var $cmp40=(($conv39)|0)==0;
              if ($cmp40) {
                break L1766;
              }
              var $34=$line;
              var $arrayidx42=(($34+1)|0);
              var $35=HEAP8[($arrayidx42)];
              var $conv43=(($35 << 24) >> 24);
              var $cmp44=(($conv43)|0)==46;
              if (!($cmp44)) {
                break;
              }
              var $36=$line;
              var $arrayidx47=(($36+2)|0);
              var $37=HEAP8[($arrayidx47)];
              var $conv48=(($37 << 24) >> 24);
              var $cmp49=(($conv48)|0)==0;
              if ($cmp49) {
                break L1766;
              }
            }
          } while(0);
          var $38=$table_addr;
          var $39=$line;
          var $call52=_xstrdup($39);
          var $40=$cur_dir;
          _hash_insert_normalized($38, $call52, $40);
          var $41=$file_count;
          var $inc53=((($41)+(1))|0);
          $file_count=$inc53;
        }
      } while(0);
    }
    var $42=$line;
    _free($42);
  }
  var $43=$db_file;
  var $44=$db_filename_addr;
  _xfclose($43, $44);
  var $45=$file_count;
  var $cmp56=(($45)|0)==0;
  if ($cmp56) {
    var $46=HEAP32[((_stderr)>>2)];
    var $call59=_fputs(((5254628)|0), $46);
    var $47=HEAP32[((_stderr)>>2)];
    var $48=$db_filename_addr;
    var $call60=_fprintf($47, ((5253672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$48,tempInt));
    var $49=HEAP32[((_stderr)>>2)];
    var $call61=_fputs(((5252964)|0), $49);
    var $50=HEAP32[((_stderr)>>2)];
    var $call62=_fflush($50);
    var $51=HEAP32[((_stderr)>>2)];
    var $call64=_fputs(((5254628)|0), $51);
    var $52=HEAP32[((_stderr)>>2)];
    var $call65=_fputs(((5267272)|0), $52);
    var $53=HEAP32[((_stderr)>>2)];
    var $call66=_fputs(((5252964)|0), $53);
    var $54=HEAP32[((_stderr)>>2)];
    var $call67=_fflush($54);
    $db_file=0;
  } else {
    var $55=$kpse_addr;
    var $db_dir_list=(($55+36)|0);
    var $56=$top_dir;
    var $call70=_xstrdup($56);
    _str_list_add($db_dir_list, $call70);
  }
  var $57=$kpse_addr;
  var $debug=(($57+44)|0);
  var $58=HEAP32[(($debug)>>2)];
  var $and=$58 & 2;
  var $tobool72=(($and)|0)!=0;
  if ($tobool72) {
    $hash_summary_only=1;
    var $59=HEAP32[((_stderr)>>2)];
    var $call75=_fputs(((5259920)|0), $59);
    var $60=HEAP32[((_stderr)>>2)];
    var $61=$db_filename_addr;
    var $62=$file_count;
    var $63=$dir_count;
    var $64=$ignore_dir_count;
    var $call76=_fprintf($60, ((5266720)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$61,HEAP32[(((tempInt)+(4))>>2)]=$62,HEAP32[(((tempInt)+(8))>>2)]=$63,HEAP32[(((tempInt)+(12))>>2)]=$64,tempInt));
    var $65=HEAP32[((_stderr)>>2)];
    var $call77=_fflush($65);
    var $66=HEAP32[((_stderr)>>2)];
    var $call80=_fputs(((5259920)|0), $66);
    var $67=HEAP32[((_stderr)>>2)];
    var $call81=_fputs(((5266300)|0), $67);
    var $68=HEAP32[((_stderr)>>2)];
    var $call82=_fflush($68);
    var $69=$table_addr;
    var $70=$hash_summary_only;
    var $buckets=(($69)|0);
    var $71=HEAP32[(($buckets)>>2)];
    var $size=(($69+4)|0);
    var $72=HEAP32[(($size)>>2)];
    _hash_print($71, $72, $70);
    var $73=HEAP32[((_stderr)>>2)];
    var $call84=_fflush($73);
  }
  var $74=$top_dir;
  _free($74);
  var $75=$db_file;
  var $cmp87=(($75)|0)!=0;
  var $conv88=(($cmp87)&1);
  STACKTOP = __stackBase__;
  return $conv88;
}
_db_build["X"]=1;

function _alias_build($kpse, $table, $alias_filename) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $table_addr;
  var $alias_filename_addr;
  var $line;
  var $real;
  var $alias;
  var $count;
  var $alias_file;
  var $hash_summary_only;
  $kpse_addr=$kpse;
  $table_addr=$table;
  $alias_filename_addr=$alias_filename;
  $count=0;
  var $0=$alias_filename_addr;
  var $call=_kpse_fopen_trace($0, ((5256952)|0));
  $alias_file=$call;
  var $1=$alias_file;
  var $tobool=(($1)|0)!=0;
  if (!($tobool)) {
    var $63=$alias_file;
    var $cmp81=(($63)|0)!=0;
    var $conv82=(($cmp81)&1);
    STACKTOP = __stackBase__;
    return $conv82;
  }
  while(1) {
    var $2=$alias_file;
    var $call1=_read_line($2);
    $line=$call1;
    var $cmp=(($call1)|0)!=0;
    if (!($cmp)) {
      break;
    }
    var $3=$line;
    var $4=HEAP8[($3)];
    var $conv=(($4 << 24) >> 24);
    var $cmp2=(($conv)|0)==0;
    do {
      if ($cmp2) {
        label = 1409;
      } else {
        var $5=$line;
        var $6=HEAP8[($5)];
        var $conv4=(($6 << 24) >> 24);
        var $cmp5=(($conv4)|0)==37;
        if ($cmp5) {
          label = 1409;
          break;
        }
        var $7=$line;
        var $8=HEAP8[($7)];
        var $conv8=(($8 << 24) >> 24);
        var $cmp9=(($conv8)|0)==35;
        if ($cmp9) {
          label = 1409;
          break;
        }
        var $9=$line;
        $real=$9;
        while(1) {
          var $10=$real;
          var $11=HEAP8[($10)];
          var $conv13=(($11 << 24) >> 24);
          var $tobool14=(($conv13)|0)!=0;
          if ($tobool14) {
            var $12=$real;
            var $13=HEAP8[($12)];
            var $conv15=(($13 << 24) >> 24);
            var $cmp16=(($conv15)>>>0) <= 127;
            if ($cmp16) {
              var $14=$real;
              var $15=HEAP8[($14)];
              var $conv19=(($15 << 24) >> 24);
              var $call20=_isspace($conv19);
              var $tobool21=(($call20)|0)!=0;
              var $16 = $tobool21;
            } else {
              var $16 = 0;
            }
            var $16;
            var $17 = $16;
          } else {
            var $17 = 0;
          }
          var $17;
          if (!($17)) {
            break;
          }
          var $18=$real;
          var $incdec_ptr=(($18+1)|0);
          $real=$incdec_ptr;
        }
        var $19=$real;
        $alias=$19;
        while(1) {
          var $20=$alias;
          var $21=HEAP8[($20)];
          var $conv25=(($21 << 24) >> 24);
          var $tobool26=(($conv25)|0)!=0;
          if ($tobool26) {
            var $22=$alias;
            var $23=HEAP8[($22)];
            var $conv28=(($23 << 24) >> 24);
            var $cmp29=(($conv28)>>>0) <= 127;
            if ($cmp29) {
              var $24=$alias;
              var $25=HEAP8[($24)];
              var $conv32=(($25 << 24) >> 24);
              var $call33=_isspace($conv32);
              var $tobool34=(($call33)|0)!=0;
              var $26 = $tobool34;
            } else {
              var $26 = 0;
            }
            var $26;
            var $lnot=$26 ^ 1;
            var $27 = $lnot;
          } else {
            var $27 = 0;
          }
          var $27;
          if (!($27)) {
            break;
          }
          var $28=$alias;
          var $incdec_ptr38=(($28+1)|0);
          $alias=$incdec_ptr38;
        }
        var $29=$alias;
        var $incdec_ptr40=(($29+1)|0);
        $alias=$incdec_ptr40;
        HEAP8[($29)]=0;
        while(1) {
          var $30=$alias;
          var $31=HEAP8[($30)];
          var $conv42=(($31 << 24) >> 24);
          var $tobool43=(($conv42)|0)!=0;
          if ($tobool43) {
            var $32=$alias;
            var $33=HEAP8[($32)];
            var $conv45=(($33 << 24) >> 24);
            var $cmp46=(($conv45)>>>0) <= 127;
            if ($cmp46) {
              var $34=$alias;
              var $35=HEAP8[($34)];
              var $conv49=(($35 << 24) >> 24);
              var $call50=_isspace($conv49);
              var $tobool51=(($call50)|0)!=0;
              var $36 = $tobool51;
            } else {
              var $36 = 0;
            }
            var $36;
            var $37 = $36;
          } else {
            var $37 = 0;
          }
          var $37;
          if (!($37)) {
            break;
          }
          var $38=$alias;
          var $incdec_ptr55=(($38+1)|0);
          $alias=$incdec_ptr55;
        }
        var $39=$real;
        var $call57=_strlen($39);
        var $cmp58=(($call57)|0)!=0;
        do {
          if ($cmp58) {
            var $40=$alias;
            var $call60=_strlen($40);
            var $cmp61=(($call60)|0)!=0;
            if (!($cmp61)) {
              break;
            }
            var $41=$table_addr;
            var $42=$alias;
            var $call64=_xstrdup($42);
            var $43=$real;
            var $call65=_xstrdup($43);
            _hash_insert_normalized($41, $call64, $call65);
            var $44=$count;
            var $inc=((($44)+(1))|0);
            $count=$inc;
          }
        } while(0);
        break;
      }
    } while(0);
    if (label == 1409) {
      label = 0;
    }
    var $45=$line;
    _free($45);
  }
  var $46=$kpse_addr;
  var $debug=(($46+44)|0);
  var $47=HEAP32[(($debug)>>2)];
  var $and=$47 & 2;
  var $tobool68=(($and)|0)!=0;
  if ($tobool68) {
    $hash_summary_only=1;
    var $48=HEAP32[((_stderr)>>2)];
    var $call70=_fputs(((5259920)|0), $48);
    var $49=HEAP32[((_stderr)>>2)];
    var $50=$alias_filename_addr;
    var $51=$count;
    var $call71=_fprintf($49, ((5255928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$50,HEAP32[(((tempInt)+(4))>>2)]=$51,tempInt));
    var $52=HEAP32[((_stderr)>>2)];
    var $call72=_fflush($52);
    var $53=HEAP32[((_stderr)>>2)];
    var $call74=_fputs(((5259920)|0), $53);
    var $54=HEAP32[((_stderr)>>2)];
    var $call75=_fputs(((5255240)|0), $54);
    var $55=HEAP32[((_stderr)>>2)];
    var $call76=_fflush($55);
    var $56=$table_addr;
    var $57=$hash_summary_only;
    var $buckets=(($56)|0);
    var $58=HEAP32[(($buckets)>>2)];
    var $size=(($56+4)|0);
    var $59=HEAP32[(($size)>>2)];
    _hash_print($58, $59, $57);
    var $60=HEAP32[((_stderr)>>2)];
    var $call78=_fflush($60);
  }
  var $61=$alias_file;
  var $62=$alias_filename_addr;
  _xfclose($61, $62);
  var $63=$alias_file;
  var $cmp81=(($63)|0)!=0;
  var $conv82=(($cmp81)&1);
  STACKTOP = __stackBase__;
  return $conv82;
}
_alias_build["X"]=1;

function _elt_in_db($db_dir, $path_elt) {
  var label = 0;

  var $db_dir_addr;
  var $path_elt_addr;
  var $found;
  $db_dir_addr=$db_dir;
  $path_elt_addr=$path_elt;
  $found=0;
  while(1) {
    var $0=$found;
    var $tobool=(($0)|0)!=0;
    if ($tobool) {
      var $5 = 0;
    } else {
      var $1=$db_dir_addr;
      var $incdec_ptr=(($1+1)|0);
      $db_dir_addr=$incdec_ptr;
      var $2=HEAP8[($1)];
      var $conv=(($2 << 24) >> 24);
      var $3=$path_elt_addr;
      var $incdec_ptr1=(($3+1)|0);
      $path_elt_addr=$incdec_ptr1;
      var $4=HEAP8[($3)];
      var $conv2=(($4 << 24) >> 24);
      var $cmp=(($conv)|0)==(($conv2)|0);
      var $5 = $cmp;
    }
    var $5;
    if (!($5)) {
      label = 1457;
      break;
    }
    var $6=$db_dir_addr;
    var $7=HEAP8[($6)];
    var $conv4=(($7 << 24) >> 24);
    var $cmp5=(($conv4)|0)==0;
    if ($cmp5) {
      $found=1;
    } else {
      var $8=$path_elt_addr;
      var $9=HEAP8[($8)];
      var $conv7=(($9 << 24) >> 24);
      var $cmp8=(($conv7)|0)==0;
      if ($cmp8) {
        break;
      }
    }
  }
  if (label == 1457) {
    var $10=$found;

    return $10;
  }
  var $10=$found;

  return $10;
}


function _kpathsea_db_search($kpse, $name, $orig_path_elt, $all) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $retval;
  var $kpse_addr;
  var $name_addr;
  var $orig_path_elt_addr;
  var $all_addr;
  var $db_dirs;
  var $orig_dirs;
  var $last_slash;
  var $path_elt;
  var $temp_str;
  var $done;
  var $e;
  var $ret;
  var $aliases;
  var $r;
  var $relevant;
  var $len;
  var $dir_part;
  var $i;
  var $len29;
  var $ctry;
  var $tmp=__stackBase__;
  var $db_file;
  var $matched;
  var $found;
  var $a;
  var $atry;
  $kpse_addr=$kpse;
  $name_addr=$name;
  $orig_path_elt_addr=$orig_path_elt;
  $all_addr=$all;
  $temp_str=0;
  $ret=0;
  $relevant=0;
  var $0=$kpse_addr;
  var $db=(($0+20)|0);
  var $buckets=(($db)|0);
  var $1=HEAP32[(($buckets)>>2)];
  var $cmp=(($1)|0)==0;
  if ($cmp) {
    $retval=0;
    var $129=$retval;
    STACKTOP = __stackBase__;
    return $129;
  }
  var $2=$name_addr;
  var $call=_strrchr($2, 47);
  $last_slash=$call;
  var $3=$last_slash;
  var $tobool=(($3)|0)!=0;
  do {
    if ($tobool) {
      var $4=$last_slash;
      var $5=$name_addr;
      var $cmp1=(($4)|0)!=(($5)|0);
      if (!($cmp1)) {
        label = 1464;
        break;
      }
      var $6=$last_slash;
      var $7=$name_addr;
      var $sub_ptr_lhs_cast=$6;
      var $sub_ptr_rhs_cast=$7;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $add=((($sub_ptr_sub)+(1))|0);
      $len=$add;
      var $8=$len;
      var $call3=_xmalloc($8);
      $dir_part=$call3;
      var $9=$dir_part;
      var $10=$name_addr;
      var $11=$len;
      var $sub=((($11)-(1))|0);
      var $call4=_strncpy($9, $10, $sub);
      var $12=$len;
      var $sub5=((($12)-(1))|0);
      var $13=$dir_part;
      var $arrayidx=(($13+$sub5)|0);
      HEAP8[($arrayidx)]=0;
      var $14=$orig_path_elt_addr;
      var $15=$dir_part;
      var $call6=_concat3($14, ((5264292)|0), $15);
      $temp_str=$call6;
      $path_elt=$call6;
      var $16=$last_slash;
      var $add_ptr=(($16+1)|0);
      $name_addr=$add_ptr;
      var $17=$dir_part;
      _free($17);
      break;
    } else {
      label = 1464;
    }
  } while(0);
  if (label == 1464) {
    var $18=$orig_path_elt_addr;
    $path_elt=$18;
  }
  $e=0;
  while(1) {
    var $19=$relevant;
    var $tobool8=(($19)|0)!=0;
    if ($tobool8) {
      var $23 = 0;
    } else {
      var $20=$e;
      var $21=$kpse_addr;
      var $db_dir_list=(($21+36)|0);
      var $length=(($db_dir_list)|0);
      var $22=HEAP32[(($length)>>2)];
      var $cmp9=(($20)>>>0) < (($22)>>>0);
      var $23 = $cmp9;
    }
    var $23;
    if (!($23)) {
      break;
    }
    var $24=$e;
    var $25=$kpse_addr;
    var $db_dir_list10=(($25+36)|0);
    var $list=(($db_dir_list10+4)|0);
    var $26=HEAP32[(($list)>>2)];
    var $arrayidx11=(($26+($24<<2))|0);
    var $27=HEAP32[(($arrayidx11)>>2)];
    var $28=$path_elt;
    var $call12=_elt_in_db($27, $28);
    $relevant=$call12;
    var $29=$e;
    var $inc=((($29)+(1))|0);
    $e=$inc;
  }
  var $30=$relevant;
  var $tobool13=(($30)|0)!=0;
  if (!($tobool13)) {
    $retval=0;
    var $129=$retval;
    STACKTOP = __stackBase__;
    return $129;
  }
  var $31=$kpse_addr;
  var $alias_db=(($31+28)|0);
  var $buckets16=(($alias_db)|0);
  var $32=HEAP32[(($buckets16)>>2)];
  var $tobool17=(($32)|0)!=0;
  if ($tobool17) {
    var $33=$kpse_addr;
    var $alias_db19=(($33+28)|0);
    var $34=$name_addr;
    var $buckets20=(($alias_db19)|0);
    var $35=HEAP32[(($buckets20)>>2)];
    var $size=(($alias_db19+4)|0);
    var $36=HEAP32[(($size)>>2)];
    var $call21=_hash_lookup($35, $36, $34);
    $aliases=$call21;
  } else {
    $aliases=0;
  }
  var $37=$aliases;
  var $tobool24=(($37)|0)!=0;
  if (!($tobool24)) {
    var $call26=_xmalloc(4);
    var $38=$call26;
    $aliases=$38;
    var $39=$aliases;
    var $arrayidx27=(($39)|0);
    HEAP32[(($arrayidx27)>>2)]=0;
  }
  $len29=1;
  var $40=$aliases;
  $r=$40;
  while(1) {
    var $41=$r;
    var $42=HEAP32[(($41)>>2)];
    var $tobool31=(($42)|0)!=0;
    if (!($tobool31)) {
      break;
    }
    var $43=$len29;
    var $inc33=((($43)+(1))|0);
    $len29=$inc33;
    var $44=$r;
    var $incdec_ptr=(($44+4)|0);
    $r=$incdec_ptr;
  }
  var $45=$aliases;
  var $46=$45;
  var $47=$len29;
  var $add36=((($47)+(1))|0);
  var $mul=((($add36<<2))&-1);
  var $call37=_xrealloc($46, $mul);
  var $48=$call37;
  $aliases=$48;
  var $49=$len29;
  $i=$49;
  while(1) {
    var $50=$i;
    var $cmp39=(($50)>>>0) > 0;
    if (!($cmp39)) {
      break;
    }
    var $51=$i;
    var $sub41=((($51)-(1))|0);
    var $52=$aliases;
    var $arrayidx42=(($52+($sub41<<2))|0);
    var $53=HEAP32[(($arrayidx42)>>2)];
    var $54=$i;
    var $55=$aliases;
    var $arrayidx43=(($55+($54<<2))|0);
    HEAP32[(($arrayidx43)>>2)]=$53;
    var $56=$i;
    var $dec=((($56)-(1))|0);
    $i=$dec;
  }
  var $57=$name_addr;
  var $58=$aliases;
  var $arrayidx46=(($58)|0);
  HEAP32[(($arrayidx46)>>2)]=$57;
  $done=0;
  var $59=$aliases;
  $r=$59;
  while(1) {
    var $60=$done;
    var $tobool48=(($60)|0)!=0;
    if ($tobool48) {
      var $63 = 0;
    } else {
      var $61=$r;
      var $62=HEAP32[(($61)>>2)];
      var $tobool50=(($62)|0)!=0;
      var $63 = $tobool50;
    }
    var $63;
    if (!($63)) {
      break;
    }
    var $64=$r;
    var $65=HEAP32[(($64)>>2)];
    $ctry=$65;
    var $66=$kpse_addr;
    var $db53=(($66+20)|0);
    var $67=$ctry;
    var $buckets54=(($db53)|0);
    var $68=HEAP32[(($buckets54)>>2)];
    var $size55=(($db53+4)|0);
    var $69=HEAP32[(($size55)>>2)];
    var $call56=_hash_lookup($68, $69, $67);
    $db_dirs=$call56;
    $orig_dirs=$call56;
    var $call57=_xmalloc(8);
    var $70=$call57;
    $ret=$70;
    var $71=$ret;
    _str_list_init($tmp);
    var $72=$71;
    var $73=$tmp;
    assert(8 % 1 === 0);HEAP32[(($72)>>2)]=HEAP32[(($73)>>2)];HEAP32[((($72)+(4))>>2)]=HEAP32[((($73)+(4))>>2)];
    while(1) {
      var $74=$done;
      var $tobool58=(($74)|0)!=0;
      do {
        if ($tobool58) {
          var $78 = 0;
        } else {
          var $75=$db_dirs;
          var $tobool60=(($75)|0)!=0;
          if (!($tobool60)) {
            var $78 = 0;
            break;
          }
          var $76=$db_dirs;
          var $77=HEAP32[(($76)>>2)];
          var $tobool62=(($77)|0)!=0;
          var $78 = $tobool62;
        }
      } while(0);
      var $78;
      if (!($78)) {
        break;
      }
      var $79=$db_dirs;
      var $80=HEAP32[(($79)>>2)];
      var $81=$ctry;
      var $call65=_concat($80, $81);
      $db_file=$call65;
      var $82=$db_file;
      var $83=$path_elt;
      var $call67=_match($82, $83);
      $matched=$call67;
      var $84=$kpse_addr;
      var $debug=(($84+44)|0);
      var $85=HEAP32[(($debug)>>2)];
      var $and=$85 & 32;
      var $tobool68=(($and)|0)!=0;
      if ($tobool68) {
        var $86=HEAP32[((_stderr)>>2)];
        var $call70=_fputs(((5259920)|0), $86);
        var $87=HEAP32[((_stderr)>>2)];
        var $88=$db_file;
        var $89=$path_elt;
        var $90=$matched;
        var $call71=_fprintf($87, ((5257608)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$88,HEAP32[(((tempInt)+(4))>>2)]=$89,HEAP32[(((tempInt)+(8))>>2)]=$90,tempInt));
        var $91=HEAP32[((_stderr)>>2)];
        var $call72=_fflush($91);
      }
      var $92=$matched;
      var $tobool74=(($92)|0)!=0;
      if ($tobool74) {
        $found=0;
        var $93=$kpse_addr;
        var $94=$db_file;
        var $call77=_kpathsea_readable_file($93, $94);
        var $tobool78=(($call77)|0)!=0;
        if ($tobool78) {
          var $95=$db_file;
          $found=$95;
        } else {
          var $96=$db_file;
          _free($96);
          var $97=$aliases;
          var $add_ptr82=(($97+4)|0);
          $a=$add_ptr82;
          while(1) {
            var $98=$a;
            var $99=HEAP32[(($98)>>2)];
            var $tobool84=(($99)|0)!=0;
            if ($tobool84) {
              var $100=$found;
              var $tobool86=(($100)|0)!=0;
              var $lnot=$tobool86 ^ 1;
              var $101 = $lnot;
            } else {
              var $101 = 0;
            }
            var $101;
            if (!($101)) {
              break;
            }
            var $102=$db_dirs;
            var $103=HEAP32[(($102)>>2)];
            var $104=$a;
            var $105=HEAP32[(($104)>>2)];
            var $call90=_concat($103, $105);
            $atry=$call90;
            var $106=$kpse_addr;
            var $107=$atry;
            var $call91=_kpathsea_readable_file($106, $107);
            var $tobool92=(($call91)|0)!=0;
            if ($tobool92) {
              var $108=$atry;
              $found=$108;
            } else {
              var $109=$atry;
              _free($109);
            }
            var $110=$a;
            var $incdec_ptr97=(($110+4)|0);
            $a=$incdec_ptr97;
          }
        }
        var $111=$found;
        var $tobool100=(($111)|0)!=0;
        if ($tobool100) {
          var $112=$ret;
          var $113=$found;
          _str_list_add($112, $113);
          var $114=$all_addr;
          var $tobool102=(($114)|0)!=0;
          do {
            if (!($tobool102)) {
              var $115=$found;
              var $tobool104=(($115)|0)!=0;
              if (!($tobool104)) {
                break;
              }
              $done=1;
            }
          } while(0);
        }
      } else {
        var $116=$db_file;
        _free($116);
      }
      var $117=$db_dirs;
      var $incdec_ptr110=(($117+4)|0);
      $db_dirs=$incdec_ptr110;
    }
    var $118=$orig_dirs;
    var $tobool111=(($118)|0)!=0;
    do {
      if ($tobool111) {
        var $119=$orig_dirs;
        var $120=HEAP32[(($119)>>2)];
        var $tobool113=(($120)|0)!=0;
        if (!($tobool113)) {
          break;
        }
        var $121=$orig_dirs;
        var $122=$121;
        _free($122);
      }
    } while(0);
    var $123=$r;
    var $incdec_ptr117=(($123+4)|0);
    $r=$incdec_ptr117;
  }
  var $124=$aliases;
  var $125=$124;
  _free($125);
  var $126=$temp_str;
  var $tobool119=(($126)|0)!=0;
  if ($tobool119) {
    var $127=$temp_str;
    _free($127);
  }
  var $128=$ret;
  $retval=$128;
  var $129=$retval;
  STACKTOP = __stackBase__;
  return $129;
}
_kpathsea_db_search["X"]=1;

function _match($filename, $path_elt) {
  var label = 0;

  var $filename_addr;
  var $path_elt_addr;
  var $original_filename;
  var $matched;
  $filename_addr=$filename;
  $path_elt_addr=$path_elt;
  var $0=$filename_addr;
  $original_filename=$0;
  $matched=0;
  while(1) {
    var $1=$filename_addr;
    var $2=HEAP8[($1)];
    var $conv=(($2 << 24) >> 24);
    var $tobool=(($conv)|0)!=0;
    if ($tobool) {
      var $3=$path_elt_addr;
      var $4=HEAP8[($3)];
      var $conv1=(($4 << 24) >> 24);
      var $tobool2=(($conv1)|0)!=0;
      var $5 = $tobool2;
    } else {
      var $5 = 0;
    }
    var $5;
    if (!($5)) {
      break;
    }
    var $6=$filename_addr;
    var $7=HEAP8[($6)];
    var $conv3=(($7 << 24) >> 24);
    var $8=$path_elt_addr;
    var $9=HEAP8[($8)];
    var $conv4=(($9 << 24) >> 24);
    var $cmp=(($conv3)|0)==(($conv4)|0);
    if (!($cmp)) {
      label = 1538;
      break;
    }
    var $34=$filename_addr;
    var $incdec_ptr45=(($34+1)|0);
    $filename_addr=$incdec_ptr45;
    var $35=$path_elt_addr;
    var $incdec_ptr46=(($35+1)|0);
    $path_elt_addr=$incdec_ptr46;
  }
  L1972: do {
    if (label == 1538) {
      var $10=$path_elt_addr;
      var $11=HEAP8[($10)];
      var $conv6=(($11 << 24) >> 24);
      var $cmp7=(($conv6)|0)==47;
      do {
        if ($cmp7) {
          var $12=$original_filename;
          var $13=$filename_addr;
          var $cmp9=(($12)>>>0) < (($13)>>>0);
          if (!($cmp9)) {
            break;
          }
          var $14=$path_elt_addr;
          var $arrayidx=((($14)-(1))|0);
          var $15=HEAP8[($arrayidx)];
          var $conv12=(($15 << 24) >> 24);
          var $cmp13=(($conv12)|0)==47;
          if (!($cmp13)) {
            break;
          }
          while(1) {
            var $16=$path_elt_addr;
            var $17=HEAP8[($16)];
            var $conv16=(($17 << 24) >> 24);
            var $cmp17=(($conv16)|0)==47;
            if (!($cmp17)) {
              break;
            }
            var $18=$path_elt_addr;
            var $incdec_ptr=(($18+1)|0);
            $path_elt_addr=$incdec_ptr;
          }
          var $19=$path_elt_addr;
          var $20=HEAP8[($19)];
          var $conv19=(($20 << 24) >> 24);
          var $cmp20=(($conv19)|0)==0;
          if ($cmp20) {
            $matched=1;
            break L1972;
          }
          while(1) {
            var $21=$matched;
            var $tobool25=(($21)|0)!=0;
            if ($tobool25) {
              var $24 = 0;
            } else {
              var $22=$filename_addr;
              var $23=HEAP8[($22)];
              var $conv27=(($23 << 24) >> 24);
              var $tobool28=(($conv27)|0)!=0;
              var $24 = $tobool28;
            }
            var $24;
            if (!($24)) {
              break;
            }
            var $25=$filename_addr;
            var $arrayidx31=((($25)-(1))|0);
            var $26=HEAP8[($arrayidx31)];
            var $conv32=(($26 << 24) >> 24);
            var $cmp33=(($conv32)|0)==47;
            do {
              if ($cmp33) {
                var $27=$filename_addr;
                var $28=HEAP8[($27)];
                var $conv36=(($28 << 24) >> 24);
                var $29=$path_elt_addr;
                var $30=HEAP8[($29)];
                var $conv37=(($30 << 24) >> 24);
                var $cmp38=(($conv36)|0)==(($conv37)|0);
                if (!($cmp38)) {
                  break;
                }
                var $31=$filename_addr;
                var $32=$path_elt_addr;
                var $call=_match($31, $32);
                $matched=$call;
              }
            } while(0);
            var $33=$filename_addr;
            var $incdec_ptr41=(($33+1)|0);
            $filename_addr=$incdec_ptr41;
          }
          break L1972;
        }
      } while(0);
    }
  } while(0);
  var $36=$matched;
  var $tobool48=(($36)|0)!=0;
  if ($tobool48) {
    var $54=$matched;

    return $54;
  }
  var $37=$path_elt_addr;
  var $38=HEAP8[($37)];
  var $conv50=(($38 << 24) >> 24);
  var $cmp51=(($conv50)|0)==0;
  if (!($cmp51)) {
    var $54=$matched;

    return $54;
  }
  var $39=$filename_addr;
  var $40=HEAP8[($39)];
  var $conv54=(($40 << 24) >> 24);
  var $cmp55=(($conv54)|0)==47;
  if ($cmp55) {
    var $41=$filename_addr;
    var $incdec_ptr58=(($41+1)|0);
    $filename_addr=$incdec_ptr58;
  }
  var $42=$original_filename;
  var $43=$filename_addr;
  var $cmp60=(($42)|0)==(($43)|0);
  do {
    if ($cmp60) {
      label = 1565;
    } else {
      var $44=$filename_addr;
      var $arrayidx62=((($44)-(1))|0);
      var $45=HEAP8[($arrayidx62)];
      var $conv63=(($45 << 24) >> 24);
      var $cmp64=(($conv63)|0)==47;
      if ($cmp64) {
        label = 1565;
        break;
      } else {
        break;
      }
    }
  } while(0);
  if (label == 1565) {
    while(1) {
      var $46=$filename_addr;
      var $47=HEAP8[($46)];
      var $conv68=(($47 << 24) >> 24);
      var $tobool69=(($conv68)|0)!=0;
      if ($tobool69) {
        var $48=$filename_addr;
        var $49=HEAP8[($48)];
        var $conv71=(($49 << 24) >> 24);
        var $cmp72=(($conv71)|0)==47;
        var $lnot=$cmp72 ^ 1;
        var $50 = $lnot;
      } else {
        var $50 = 0;
      }
      var $50;
      if (!($50)) {
        break;
      }
      var $51=$filename_addr;
      var $incdec_ptr76=(($51+1)|0);
      $filename_addr=$incdec_ptr76;
    }
    var $52=$filename_addr;
    var $53=HEAP8[($52)];
    var $conv78=(($53 << 24) >> 24);
    var $cmp79=(($conv78)|0)==0;
    var $conv80=(($cmp79)&1);
    $matched=$conv80;
  }
  var $54=$matched;

  return $54;
}
_match["X"]=1;

function _kpathsea_db_search_list($kpse, $names, $path_elt, $all) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $retval;
  var $kpse_addr;
  var $names_addr;
  var $path_elt_addr;
  var $all_addr;
  var $db_dirs;
  var $orig_dirs;
  var $last_slash;
  var $name;
  var $path;
  var $temp_str;
  var $done;
  var $e;
  var $aliases;
  var $r;
  var $n;
  var $ret;
  var $relevant;
  var $tmp=__stackBase__;
  var $len;
  var $dir_part;
  var $i;
  var $len46;
  var $ctry;
  var $db_file;
  var $matched;
  var $found;
  var $a;
  var $atry;
  $kpse_addr=$kpse;
  $names_addr=$names;
  $path_elt_addr=$path_elt;
  $all_addr=$all;
  $temp_str=0;
  $ret=0;
  $relevant=0;
  var $0=$kpse_addr;
  var $db=(($0+20)|0);
  var $buckets=(($db)|0);
  var $1=HEAP32[(($buckets)>>2)];
  var $cmp=(($1)|0)==0;
  if ($cmp) {
    $retval=0;
    var $140=$retval;
    STACKTOP = __stackBase__;
    return $140;
  }
  $e=0;
  while(1) {
    var $2=$relevant;
    var $tobool=(($2)|0)!=0;
    if ($tobool) {
      var $6 = 0;
    } else {
      var $3=$e;
      var $4=$kpse_addr;
      var $db_dir_list=(($4+36)|0);
      var $length=(($db_dir_list)|0);
      var $5=HEAP32[(($length)>>2)];
      var $cmp1=(($3)>>>0) < (($5)>>>0);
      var $6 = $cmp1;
    }
    var $6;
    if (!($6)) {
      break;
    }
    var $7=$e;
    var $8=$kpse_addr;
    var $db_dir_list2=(($8+36)|0);
    var $list=(($db_dir_list2+4)|0);
    var $9=HEAP32[(($list)>>2)];
    var $arrayidx=(($9+($7<<2))|0);
    var $10=HEAP32[(($arrayidx)>>2)];
    var $11=$path_elt_addr;
    var $call=_elt_in_db($10, $11);
    $relevant=$call;
    var $12=$e;
    var $inc=((($12)+(1))|0);
    $e=$inc;
  }
  var $13=$relevant;
  var $tobool3=(($13)|0)!=0;
  if (!($tobool3)) {
    $retval=0;
    var $140=$retval;
    STACKTOP = __stackBase__;
    return $140;
  }
  $done=0;
  var $call6=_xmalloc(8);
  var $14=$call6;
  $ret=$14;
  var $15=$ret;
  _str_list_init($tmp);
  var $16=$15;
  var $17=$tmp;
  assert(8 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];
  $n=0;
  while(1) {
    var $18=$done;
    var $tobool8=(($18)|0)!=0;
    if ($tobool8) {
      var $22 = 0;
    } else {
      var $19=$n;
      var $20=$names_addr;
      var $arrayidx10=(($20+($19<<2))|0);
      var $21=HEAP32[(($arrayidx10)>>2)];
      var $tobool11=(($21)|0)!=0;
      var $22 = $tobool11;
    }
    var $22;
    if (!($22)) {
      break;
    }
    var $23=$n;
    var $24=$names_addr;
    var $arrayidx14=(($24+($23<<2))|0);
    var $25=HEAP32[(($arrayidx14)>>2)];
    $name=$25;
    var $26=$kpse_addr;
    var $27=$name;
    var $call15=_kpathsea_absolute_p($26, $27, 1);
    var $tobool16=(($call15)|0)!=0;
    if ($tobool16) {
    } else {
      var $28=$name;
      var $call19=_strrchr($28, 47);
      $last_slash=$call19;
      var $29=$last_slash;
      var $tobool20=(($29)|0)!=0;
      do {
        if ($tobool20) {
          var $30=$last_slash;
          var $31=$name;
          var $cmp21=(($30)|0)!=(($31)|0);
          if (!($cmp21)) {
            label = 1595;
            break;
          }
          var $32=$last_slash;
          var $33=$name;
          var $sub_ptr_lhs_cast=$32;
          var $sub_ptr_rhs_cast=$33;
          var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
          var $add=((($sub_ptr_sub)+(1))|0);
          $len=$add;
          var $34=$len;
          var $call25=_xmalloc($34);
          $dir_part=$call25;
          var $35=$dir_part;
          var $36=$name;
          var $37=$len;
          var $sub=((($37)-(1))|0);
          var $call26=_strncpy($35, $36, $sub);
          var $38=$len;
          var $sub27=((($38)-(1))|0);
          var $39=$dir_part;
          var $arrayidx28=(($39+$sub27)|0);
          HEAP8[($arrayidx28)]=0;
          var $40=$path_elt_addr;
          var $41=$dir_part;
          var $call29=_concat3($40, ((5264292)|0), $41);
          $temp_str=$call29;
          $path=$call29;
          var $42=$last_slash;
          var $add_ptr=(($42+1)|0);
          $name=$add_ptr;
          var $43=$dir_part;
          _free($43);
          break;
        } else {
          label = 1595;
        }
      } while(0);
      if (label == 1595) {
        label = 0;
        var $44=$path_elt_addr;
        $path=$44;
      }
      var $45=$kpse_addr;
      var $alias_db=(($45+28)|0);
      var $buckets31=(($alias_db)|0);
      var $46=HEAP32[(($buckets31)>>2)];
      var $tobool32=(($46)|0)!=0;
      if ($tobool32) {
        var $47=$kpse_addr;
        var $alias_db34=(($47+28)|0);
        var $48=$name;
        var $buckets35=(($alias_db34)|0);
        var $49=HEAP32[(($buckets35)>>2)];
        var $size=(($alias_db34+4)|0);
        var $50=HEAP32[(($size)>>2)];
        var $call36=_hash_lookup($49, $50, $48);
        $aliases=$call36;
      } else {
        $aliases=0;
      }
      var $51=$aliases;
      var $tobool39=(($51)|0)!=0;
      if (!($tobool39)) {
        var $call41=_xmalloc(4);
        var $52=$call41;
        $aliases=$52;
        var $53=$aliases;
        var $arrayidx42=(($53)|0);
        HEAP32[(($arrayidx42)>>2)]=0;
      }
      $len46=1;
      var $54=$aliases;
      $r=$54;
      while(1) {
        var $55=$r;
        var $56=HEAP32[(($55)>>2)];
        var $tobool48=(($56)|0)!=0;
        if (!($tobool48)) {
          break;
        }
        var $57=$len46;
        var $inc50=((($57)+(1))|0);
        $len46=$inc50;
        var $58=$r;
        var $incdec_ptr=(($58+4)|0);
        $r=$incdec_ptr;
      }
      var $59=$aliases;
      var $60=$59;
      var $61=$len46;
      var $add53=((($61)+(1))|0);
      var $mul=((($add53<<2))&-1);
      var $call54=_xrealloc($60, $mul);
      var $62=$call54;
      $aliases=$62;
      var $63=$len46;
      $i=$63;
      while(1) {
        var $64=$i;
        var $cmp56=(($64)>>>0) > 0;
        if (!($cmp56)) {
          break;
        }
        var $65=$i;
        var $sub58=((($65)-(1))|0);
        var $66=$aliases;
        var $arrayidx59=(($66+($sub58<<2))|0);
        var $67=HEAP32[(($arrayidx59)>>2)];
        var $68=$i;
        var $69=$aliases;
        var $arrayidx60=(($69+($68<<2))|0);
        HEAP32[(($arrayidx60)>>2)]=$67;
        var $70=$i;
        var $dec=((($70)-(1))|0);
        $i=$dec;
      }
      var $71=$name;
      var $72=$aliases;
      var $arrayidx63=(($72)|0);
      HEAP32[(($arrayidx63)>>2)]=$71;
      var $73=$aliases;
      $r=$73;
      while(1) {
        var $74=$done;
        var $tobool65=(($74)|0)!=0;
        if ($tobool65) {
          var $77 = 0;
        } else {
          var $75=$r;
          var $76=HEAP32[(($75)>>2)];
          var $tobool67=(($76)|0)!=0;
          var $77 = $tobool67;
        }
        var $77;
        if (!($77)) {
          break;
        }
        var $78=$r;
        var $79=HEAP32[(($78)>>2)];
        $ctry=$79;
        var $80=$kpse_addr;
        var $db71=(($80+20)|0);
        var $81=$ctry;
        var $buckets72=(($db71)|0);
        var $82=HEAP32[(($buckets72)>>2)];
        var $size73=(($db71+4)|0);
        var $83=HEAP32[(($size73)>>2)];
        var $call74=_hash_lookup($82, $83, $81);
        $db_dirs=$call74;
        $orig_dirs=$call74;
        while(1) {
          var $84=$done;
          var $tobool75=(($84)|0)!=0;
          do {
            if ($tobool75) {
              var $88 = 0;
            } else {
              var $85=$db_dirs;
              var $tobool77=(($85)|0)!=0;
              if (!($tobool77)) {
                var $88 = 0;
                break;
              }
              var $86=$db_dirs;
              var $87=HEAP32[(($86)>>2)];
              var $tobool79=(($87)|0)!=0;
              var $88 = $tobool79;
            }
          } while(0);
          var $88;
          if (!($88)) {
            break;
          }
          var $89=$db_dirs;
          var $90=HEAP32[(($89)>>2)];
          var $91=$ctry;
          var $call82=_concat($90, $91);
          $db_file=$call82;
          var $92=$db_file;
          var $93=$path;
          var $call84=_match($92, $93);
          $matched=$call84;
          var $94=$kpse_addr;
          var $debug=(($94+44)|0);
          var $95=HEAP32[(($debug)>>2)];
          var $and=$95 & 32;
          var $tobool85=(($and)|0)!=0;
          if ($tobool85) {
            var $96=HEAP32[((_stderr)>>2)];
            var $call87=_fputs(((5259920)|0), $96);
            var $97=HEAP32[((_stderr)>>2)];
            var $98=$db_file;
            var $99=$path;
            var $100=$matched;
            var $call88=_fprintf($97, ((5257608)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$98,HEAP32[(((tempInt)+(4))>>2)]=$99,HEAP32[(((tempInt)+(8))>>2)]=$100,tempInt));
            var $101=HEAP32[((_stderr)>>2)];
            var $call89=_fflush($101);
          }
          var $102=$matched;
          var $tobool91=(($102)|0)!=0;
          if ($tobool91) {
            $found=0;
            var $103=$kpse_addr;
            var $104=$db_file;
            var $call94=_kpathsea_readable_file($103, $104);
            var $tobool95=(($call94)|0)!=0;
            if ($tobool95) {
              var $105=$db_file;
              $found=$105;
            } else {
              var $106=$db_file;
              _free($106);
              var $107=$aliases;
              var $add_ptr99=(($107+4)|0);
              $a=$add_ptr99;
              while(1) {
                var $108=$a;
                var $109=HEAP32[(($108)>>2)];
                var $tobool101=(($109)|0)!=0;
                if ($tobool101) {
                  var $110=$found;
                  var $tobool103=(($110)|0)!=0;
                  var $lnot=$tobool103 ^ 1;
                  var $111 = $lnot;
                } else {
                  var $111 = 0;
                }
                var $111;
                if (!($111)) {
                  break;
                }
                var $112=$db_dirs;
                var $113=HEAP32[(($112)>>2)];
                var $114=$a;
                var $115=HEAP32[(($114)>>2)];
                var $call107=_concat($113, $115);
                $atry=$call107;
                var $116=$kpse_addr;
                var $117=$atry;
                var $call108=_kpathsea_readable_file($116, $117);
                var $tobool109=(($call108)|0)!=0;
                if ($tobool109) {
                  var $118=$atry;
                  $found=$118;
                } else {
                  var $119=$atry;
                  _free($119);
                }
                var $120=$a;
                var $incdec_ptr114=(($120+4)|0);
                $a=$incdec_ptr114;
              }
            }
            var $121=$found;
            var $tobool117=(($121)|0)!=0;
            if ($tobool117) {
              var $122=$ret;
              var $123=$found;
              _str_list_add($122, $123);
              var $124=$all_addr;
              var $tobool119=(($124)|0)!=0;
              do {
                if (!($tobool119)) {
                  var $125=$found;
                  var $tobool121=(($125)|0)!=0;
                  if (!($tobool121)) {
                    break;
                  }
                  $done=1;
                }
              } while(0);
            }
          } else {
            var $126=$db_file;
            _free($126);
          }
          var $127=$db_dirs;
          var $incdec_ptr127=(($127+4)|0);
          $db_dirs=$incdec_ptr127;
        }
        var $128=$orig_dirs;
        var $tobool128=(($128)|0)!=0;
        do {
          if ($tobool128) {
            var $129=$orig_dirs;
            var $130=HEAP32[(($129)>>2)];
            var $tobool130=(($130)|0)!=0;
            if (!($tobool130)) {
              break;
            }
            var $131=$orig_dirs;
            var $132=$131;
            _free($132);
          }
        } while(0);
        var $133=$r;
        var $incdec_ptr134=(($133+4)|0);
        $r=$incdec_ptr134;
      }
      var $134=$aliases;
      var $135=$134;
      _free($135);
      var $136=$temp_str;
      var $tobool136=(($136)|0)!=0;
      if ($tobool136) {
        var $137=$temp_str;
        _free($137);
      }
    }
    var $138=$n;
    var $inc140=((($138)+(1))|0);
    $n=$inc140;
  }
  var $139=$ret;
  $retval=$139;
  var $140=$retval;
  STACKTOP = __stackBase__;
  return $140;
}
_kpathsea_db_search_list["X"]=1;

function _ignore_dir_p($dirname) {
  var label = 0;

  var $retval;
  var $dirname_addr;
  var $dot_pos;
  $dirname_addr=$dirname;
  var $0=$dirname_addr;
  $dot_pos=$0;
  L2129: while(1) {
    var $1=$dot_pos;
    var $add_ptr=(($1+1)|0);
    var $call=_strchr($add_ptr, 46);
    $dot_pos=$call;
    var $tobool=(($call)|0)!=0;
    if (!($tobool)) {
      label = 1664;
      break;
    }
    var $2=$dot_pos;
    var $arrayidx=((($2)-(1))|0);
    var $3=HEAP8[($arrayidx)];
    var $conv=(($3 << 24) >> 24);
    var $cmp=(($conv)|0)==47;
    do {
      if ($cmp) {
        var $4=$dot_pos;
        var $arrayidx2=(($4+1)|0);
        var $5=HEAP8[($arrayidx2)];
        var $conv3=(($5 << 24) >> 24);
        var $tobool4=(($conv3)|0)!=0;
        if (!($tobool4)) {
          break;
        }
        var $6=$dot_pos;
        var $arrayidx6=(($6+1)|0);
        var $7=HEAP8[($arrayidx6)];
        var $conv7=(($7 << 24) >> 24);
        var $cmp8=(($conv7)|0)==47;
        if (!($cmp8)) {
          label = 1662;
          break L2129;
        }
      }
    } while(0);
  }
  if (label == 1662) {
    $retval=1;
    var $8=$retval;

    return $8;
  }
  else if (label == 1664) {
    $retval=0;
    var $8=$retval;

    return $8;
  }
}


function _kpse_fopen_trace($filename, $mode) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $filename_addr;
  var $mode_addr;
  var $kpse;
  var $ret;
  $filename_addr=$filename;
  $mode_addr=$mode;
  var $0=HEAP32[((5248384)>>2)];
  $kpse=$0;
  var $1=$filename_addr;
  var $2=$mode_addr;
  var $call=_fopen($1, $2);
  $ret=$call;
  var $3=$kpse;
  var $debug=(($3+44)|0);
  var $4=HEAP32[(($debug)>>2)];
  var $and=$4 & 4;
  var $tobool=(($and)|0)!=0;
  if (!($tobool)) {
    var $12=$ret;
    STACKTOP = __stackBase__;
    return $12;
  }
  var $5=HEAP32[((_stderr)>>2)];
  var $call1=_fputs(((5253924)|0), $5);
  var $6=HEAP32[((_stderr)>>2)];
  var $7=$filename_addr;
  var $8=$mode_addr;
  var $9=$ret;
  var $10=$9;
  var $call2=_fprintf($6, ((5264216)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$7,HEAP32[(((tempInt)+(4))>>2)]=$8,HEAP32[(((tempInt)+(8))>>2)]=$10,tempInt));
  var $11=HEAP32[((_stderr)>>2)];
  var $call3=_fflush($11);
  var $12=$ret;
  STACKTOP = __stackBase__;
  return $12;
}


function _kpse_fclose_trace($f) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $f_addr;
  var $kpse;
  var $ret;
  $f_addr=$f;
  var $0=HEAP32[((5248384)>>2)];
  $kpse=$0;
  var $1=$f_addr;
  var $call=_fclose($1);
  $ret=$call;
  var $2=$kpse;
  var $debug=(($2+44)|0);
  var $3=HEAP32[(($debug)>>2)];
  var $and=$3 & 4;
  var $tobool=(($and)|0)!=0;
  if (!($tobool)) {
    var $10=$ret;
    STACKTOP = __stackBase__;
    return $10;
  }
  var $4=HEAP32[((_stderr)>>2)];
  var $call1=_fputs(((5253924)|0), $4);
  var $5=HEAP32[((_stderr)>>2)];
  var $6=$f_addr;
  var $7=$6;
  var $8=$ret;
  var $call2=_fprintf($5, ((5259852)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$7,HEAP32[(((tempInt)+(4))>>2)]=$8,tempInt));
  var $9=HEAP32[((_stderr)>>2)];
  var $call3=_fflush($9);
  var $10=$ret;
  STACKTOP = __stackBase__;
  return $10;
}


function _kpathsea_expand($kpse, $s) {
  var label = 0;

  var $kpse_addr;
  var $s_addr;
  var $var_expansion;
  var $tilde_expansion;
  $kpse_addr=$kpse;
  $s_addr=$s;
  var $0=$kpse_addr;
  var $1=$s_addr;
  var $call=_kpathsea_var_expand($0, $1);
  $var_expansion=$call;
  var $2=$kpse_addr;
  var $3=$var_expansion;
  var $call1=_kpathsea_tilde_expand($2, $3);
  $tilde_expansion=$call1;
  var $4=$tilde_expansion;
  var $5=$var_expansion;
  var $cmp=(($4)|0)!=(($5)|0);
  if (!($cmp)) {
    var $7=$tilde_expansion;

    return $7;
  }
  var $6=$var_expansion;
  _free($6);
  var $7=$tilde_expansion;

  return $7;
}


function _kpathsea_brace_expand($kpse, $path) {
  var label = 0;

  var $kpse_addr;
  var $path_addr;
  var $kpse_dot_expansion;
  var $elt;
  var $len;
  var $xpath;
  var $ret;
  var $save_ret;
  var $expansion;
  $kpse_addr=$kpse;
  $path_addr=$path;
  var $0=$kpse_addr;
  var $1=$path_addr;
  var $call=_kpathsea_var_expand($0, $1);
  $xpath=$call;
  var $call1=_xmalloc(1);
  $ret=$call1;
  var $2=$ret;
  HEAP8[($2)]=0;
  var $3=$kpse_addr;
  var $4=$xpath;
  var $call2=_kpathsea_path_element($3, $4);
  $elt=$call2;
  while(1) {
    var $5=$elt;
    var $tobool=(($5)|0)!=0;
    if (!($tobool)) {
      break;
    }
    var $6=$ret;
    $save_ret=$6;
    var $7=$kpse_addr;
    var $8=$elt;
    var $call3=_kpathsea_brace_expand_element($7, $8);
    $expansion=$call3;
    var $9=$ret;
    var $10=$expansion;
    var $call4=_concat3($9, $10, ((5253872)|0));
    $ret=$call4;
    var $11=$expansion;
    _free($11);
    var $12=$save_ret;
    _free($12);
    var $13=$kpse_addr;
    var $call5=_kpathsea_path_element($13, 0);
    $elt=$call5;
  }
  var $14=$ret;
  var $call6=_strlen($14);
  $len=$call6;
  var $15=$len;
  var $cmp=(($15)|0)!=0;
  if ($cmp) {
    var $16=$len;
    var $sub=((($16)-(1))|0);
    var $17=$ret;
    var $arrayidx=(($17+$sub)|0);
    HEAP8[($arrayidx)]=0;
  }
  var $18=$xpath;
  _free($18);
  var $19=$kpse_addr;
  var $20=$ret;
  var $call7=_kpathsea_expand_kpse_dot($19, $20);
  $kpse_dot_expansion=$call7;
  var $21=$kpse_dot_expansion;
  var $22=$ret;
  var $cmp8=(($21)|0)!=(($22)|0);
  if (!($cmp8)) {
    var $24=$kpse_dot_expansion;

    return $24;
  }
  var $23=$ret;
  _free($23);
  var $24=$kpse_dot_expansion;

  return $24;
}
_kpathsea_brace_expand["X"]=1;

function _kpathsea_brace_expand_element($kpse, $elt) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $elt_addr=__stackBase__;
  var $i;
  var $expansions=(__stackBase__)+(4);
  var $ret;
  var $x;
  var $save_ret;
  var $save_x;
  $kpse_addr=$kpse;
  HEAP32[(($elt_addr)>>2)]=$elt;
  var $0=$kpse_addr;
  _brace_expand($expansions, $0, $elt_addr);
  var $call=_xmalloc(1);
  $ret=$call;
  var $1=$ret;
  HEAP8[($1)]=0;
  $i=0;
  while(1) {
    var $2=$i;
    var $length=(($expansions)|0);
    var $3=HEAP32[(($length)>>2)];
    var $cmp=(($2)|0)!=(($3)|0);
    if (!($cmp)) {
      break;
    }
    var $4=$kpse_addr;
    var $5=$i;
    var $list=(($expansions+4)|0);
    var $6=HEAP32[(($list)>>2)];
    var $arrayidx=(($6+($5<<2))|0);
    var $7=HEAP32[(($arrayidx)>>2)];
    var $call1=_kpathsea_expand($4, $7);
    $x=$call1;
    var $8=$ret;
    $save_ret=$8;
    var $9=$x;
    var $cmp2=(($9)|0)!=0;
    do {
      if ($cmp2) {
        var $10=$i;
        var $list3=(($expansions+4)|0);
        var $11=HEAP32[(($list3)>>2)];
        var $arrayidx4=(($11+($10<<2))|0);
        var $12=HEAP32[(($arrayidx4)>>2)];
        var $cmp5=(($12)|0)!=0;
        if (!($cmp5)) {
          label = 1703;
          break;
        }
        var $13=$x;
        var $14=$i;
        var $list7=(($expansions+4)|0);
        var $15=HEAP32[(($list7)>>2)];
        var $arrayidx8=(($15+($14<<2))|0);
        var $16=HEAP32[(($arrayidx8)>>2)];
        var $call9=_strcmp($13, $16);
        var $cmp10=(($call9)|0)==0;
        if ($cmp10) {
          break;
        } else {
          label = 1703;
          break;
        }
      } else {
        label = 1703;
      }
    } while(0);
    if (label == 1703) {
      label = 0;
      var $17=$x;
      $save_x=$17;
      var $18=$kpse_addr;
      var $19=$x;
      var $call11=_kpathsea_brace_expand_element($18, $19);
      $x=$call11;
      var $20=$save_x;
      _free($20);
    }
    var $21=$ret;
    var $22=$x;
    var $call12=_concat3($21, $22, ((5253872)|0));
    $ret=$call12;
    var $23=$save_ret;
    _free($23);
    var $24=$x;
    _free($24);
    var $25=$i;
    var $inc=((($25)+(1))|0);
    $i=$inc;
  }
  $i=0;
  while(1) {
    var $26=$i;
    var $length14=(($expansions)|0);
    var $27=HEAP32[(($length14)>>2)];
    var $cmp15=(($26)|0)!=(($27)|0);
    if (!($cmp15)) {
      break;
    }
    var $28=$i;
    var $list17=(($expansions+4)|0);
    var $29=HEAP32[(($list17)>>2)];
    var $arrayidx18=(($29+($28<<2))|0);
    var $30=HEAP32[(($arrayidx18)>>2)];
    _free($30);
    var $31=$i;
    var $inc20=((($31)+(1))|0);
    $i=$inc20;
  }
  _str_list_free($expansions);
  var $32=$ret;
  var $call22=_strlen($32);
  var $sub=((($call22)-(1))|0);
  var $33=$ret;
  var $arrayidx23=(($33+$sub)|0);
  HEAP8[($arrayidx23)]=0;
  var $34=$ret;
  STACKTOP = __stackBase__;
  return $34;
}
_kpathsea_brace_expand_element["X"]=1;

function _kpathsea_expand_kpse_dot($kpse, $path) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $retval;
  var $kpse_addr;
  var $path_addr;
  var $ret;
  var $elt;
  var $kpse_dot;
  var $save_ret;
  var $ret_copied;
  $kpse_addr=$kpse;
  $path_addr=$path;
  var $call=_getenv(((5264188)|0));
  $kpse_dot=$call;
  var $0=$kpse_dot;
  var $cmp=(($0)|0)==0;
  if ($cmp) {
    var $1=$path_addr;
    $retval=$1;
    var $39=$retval;
    STACKTOP = __stackBase__;
    return $39;
  }
  var $call1=_xmalloc(1);
  $ret=$call1;
  var $2=$ret;
  HEAP8[($2)]=0;
  var $3=$kpse_addr;
  var $4=$path_addr;
  var $call2=_kpathsea_path_element($3, $4);
  $elt=$call2;
  while(1) {
    var $5=$elt;
    var $tobool=(($5)|0)!=0;
    if (!($tobool)) {
      break;
    }
    var $6=$ret;
    $save_ret=$6;
    $ret_copied=1;
    var $7=$kpse_addr;
    var $8=$elt;
    var $call3=_kpathsea_absolute_p($7, $8, 0);
    var $tobool4=(($call3)|0)!=0;
    do {
      if ($tobool4) {
        label = 1718;
      } else {
        var $9=$elt;
        var $arrayidx=(($9)|0);
        var $10=HEAP8[($arrayidx)];
        var $conv=(($10 << 24) >> 24);
        var $cmp5=(($conv)|0)==33;
        if ($cmp5) {
          var $11=$elt;
          var $arrayidx7=(($11+1)|0);
          var $12=HEAP8[($arrayidx7)];
          var $conv8=(($12 << 24) >> 24);
          var $cmp9=(($conv8)|0)==33;
          if ($cmp9) {
            label = 1718;
            break;
          }
        }
        var $15=$elt;
        var $arrayidx13=(($15)|0);
        var $16=HEAP8[($arrayidx13)];
        var $conv14=(($16 << 24) >> 24);
        var $cmp15=(($conv14)|0)==46;
        do {
          if ($cmp15) {
            var $17=$elt;
            var $arrayidx18=(($17+1)|0);
            var $18=HEAP8[($arrayidx18)];
            var $conv19=(($18 << 24) >> 24);
            var $cmp20=(($conv19)|0)==0;
            if (!($cmp20)) {
              label = 1722;
              break;
            }
            var $19=$ret;
            var $20=$kpse_dot;
            var $call23=_concat3($19, $20, ((5253872)|0));
            $ret=$call23;
            break;
          } else {
            label = 1722;
          }
        } while(0);
        if (label == 1722) {
          label = 0;
          var $21=$elt;
          var $arrayidx25=(($21)|0);
          var $22=HEAP8[($arrayidx25)];
          var $conv26=(($22 << 24) >> 24);
          var $cmp27=(($conv26)|0)==46;
          do {
            if ($cmp27) {
              var $23=$elt;
              var $arrayidx30=(($23+1)|0);
              var $24=HEAP8[($arrayidx30)];
              var $conv31=(($24 << 24) >> 24);
              var $cmp32=(($conv31)|0)==47;
              if (!($cmp32)) {
                label = 1725;
                break;
              }
              var $25=$ret;
              var $26=$kpse_dot;
              var $27=$elt;
              var $add_ptr=(($27+1)|0);
              var $call35=_concatn($25, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$26,HEAP32[(((tempInt)+(4))>>2)]=$add_ptr,HEAP32[(((tempInt)+(8))>>2)]=((5253872)|0),HEAP32[(((tempInt)+(12))>>2)]=0,tempInt));
              $ret=$call35;
              break;
            } else {
              label = 1725;
            }
          } while(0);
          if (label == 1725) {
            label = 0;
            var $28=$elt;
            var $29=HEAP8[($28)];
            var $tobool37=(($29 << 24) >> 24)!=0;
            if ($tobool37) {
              var $30=$ret;
              var $31=$kpse_dot;
              var $32=$elt;
              var $call39=_concatn($30, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$31,HEAP32[(((tempInt)+(4))>>2)]=((5259848)|0),HEAP32[(((tempInt)+(8))>>2)]=$32,HEAP32[(((tempInt)+(12))>>2)]=((5253872)|0),HEAP32[(((tempInt)+(16))>>2)]=0,tempInt));
              $ret=$call39;
            } else {
              $ret_copied=0;
            }
          }
        }
        break;
      }
    } while(0);
    if (label == 1718) {
      label = 0;
      var $13=$ret;
      var $14=$elt;
      var $call12=_concat3($13, $14, ((5253872)|0));
      $ret=$call12;
    }
    var $33=$ret_copied;
    var $tobool45=(($33)|0)!=0;
    if ($tobool45) {
      var $34=$save_ret;
      _free($34);
    }
    var $35=$kpse_addr;
    var $call48=_kpathsea_path_element($35, 0);
    $elt=$call48;
  }
  var $36=$ret;
  var $call49=_strlen($36);
  var $sub=((($call49)-(1))|0);
  var $37=$ret;
  var $arrayidx50=(($37+$sub)|0);
  HEAP8[($arrayidx50)]=0;
  var $38=$ret;
  $retval=$38;
  var $39=$retval;
  STACKTOP = __stackBase__;
  return $39;
}
_kpathsea_expand_kpse_dot["X"]=1;

function _brace_expand($agg_result, $kpse, $text) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $text_addr;
  var $result=__stackBase__;
  var $partial=(__stackBase__)+(8);
  var $recurse=(__stackBase__)+(16);
  var $p=(__stackBase__)+(24);
  var $tmp=(__stackBase__)+(28);
  var $tmp1=(__stackBase__)+(36);
  var $tmp10=(__stackBase__)+(44);
  var $tmp15=(__stackBase__)+(52);
  $kpse_addr=$kpse;
  $text_addr=$text;
  _str_list_init($tmp);
  var $0=$result;
  var $1=$tmp;
  assert(8 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];
  _str_list_init($tmp1);
  var $2=$partial;
  var $3=$tmp1;
  assert(8 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];
  var $4=$text_addr;
  var $5=HEAP32[(($4)>>2)];
  HEAP32[(($p)>>2)]=$5;
  while(1) {
    var $6=HEAP32[(($p)>>2)];
    var $7=HEAP8[($6)];
    var $conv=(($7 << 24) >> 24);
    var $tobool=(($conv)|0)!=0;
    if ($tobool) {
      var $8=HEAP32[(($p)>>2)];
      var $9=HEAP8[($8)];
      var $conv2=(($9 << 24) >> 24);
      var $cmp=(($conv2)|0)!=125;
      var $10 = $cmp;
    } else {
      var $10 = 0;
    }
    var $10;
    if (!($10)) {
      break;
    }
    var $11=HEAP32[(($p)>>2)];
    var $12=HEAP8[($11)];
    var $conv4=(($12 << 24) >> 24);
    var $cmp5=(($conv4)|0)==58;
    do {
      if ($cmp5) {
        label = 1745;
      } else {
        var $13=HEAP32[(($p)>>2)];
        var $14=HEAP8[($13)];
        var $conv7=(($14 << 24) >> 24);
        var $cmp8=(($conv7)|0)==44;
        if ($cmp8) {
          label = 1745;
          break;
        }
        var $24=HEAP32[(($p)>>2)];
        var $25=HEAP8[($24)];
        var $conv11=(($25 << 24) >> 24);
        var $cmp12=(($conv11)|0)==123;
        if ($cmp12) {
          var $26=$text_addr;
          var $27=HEAP32[(($26)>>2)];
          var $28=HEAP32[(($p)>>2)];
          _expand_append($partial, $27, $28);
          var $29=HEAP32[(($p)>>2)];
          var $incdec_ptr=(($29+1)|0);
          HEAP32[(($p)>>2)]=$incdec_ptr;
          var $30=$kpse_addr;
          _brace_expand($tmp15, $30, $p);
          var $31=$recurse;
          var $32=$tmp15;
          assert(8 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];
          var $length16=(($recurse)|0);
          var $33=HEAP32[(($length16)>>2)];
          var $list17=(($recurse+4)|0);
          var $34=HEAP32[(($list17)>>2)];
          _str_list_concat_elements($partial, $33, $34);
          _str_list_free($recurse);
          var $35=HEAP32[(($p)>>2)];
          var $36=HEAP8[($35)];
          var $conv18=(($36 << 24) >> 24);
          var $cmp19=(($conv18)|0)!=125;
          if ($cmp19) {
            var $37=HEAP32[((_stderr)>>2)];
            var $call=_fputs(((5257588)|0), $37);
            var $38=HEAP32[((_stderr)>>2)];
            var $39=$text_addr;
            var $40=HEAP32[(($39)>>2)];
            var $call22=_fprintf($38, ((5256920)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$40,tempInt));
            var $41=HEAP32[((_stderr)>>2)];
            var $call23=_fputs(((5255912)|0), $41);
            var $42=HEAP32[((_stderr)>>2)];
            var $call24=_fflush($42);
          }
          var $43=HEAP32[(($p)>>2)];
          var $add_ptr25=(($43+1)|0);
          var $44=$text_addr;
          HEAP32[(($44)>>2)]=$add_ptr25;
        } else {
          var $45=HEAP32[(($p)>>2)];
          var $46=HEAP8[($45)];
          var $conv27=(($46 << 24) >> 24);
          var $cmp28=(($conv27)|0)==36;
          if ($cmp28) {
            var $47=HEAP32[(($p)>>2)];
            var $add_ptr31=(($47+1)|0);
            var $48=HEAP8[($add_ptr31)];
            var $conv32=(($48 << 24) >> 24);
            var $cmp33=(($conv32)|0)==123;
            if ($cmp33) {
              var $49=HEAP32[(($p)>>2)];
              var $add_ptr36=(($49+2)|0);
              HEAP32[(($p)>>2)]=$add_ptr36;
              while(1) {
                var $50=HEAP32[(($p)>>2)];
                var $51=HEAP8[($50)];
                var $conv38=(($51 << 24) >> 24);
                var $cmp39=(($conv38)|0)!=125;
                if (!($cmp39)) {
                  break;
                }
                var $52=HEAP32[(($p)>>2)];
                var $incdec_ptr42=(($52+1)|0);
                HEAP32[(($p)>>2)]=$incdec_ptr42;
              }
            }
          }
        }
        break;
      }
    } while(0);
    if (label == 1745) {
      label = 0;
      var $15=$text_addr;
      var $16=HEAP32[(($15)>>2)];
      var $17=HEAP32[(($p)>>2)];
      _expand_append($partial, $16, $17);
      var $length=(($partial)|0);
      var $18=HEAP32[(($length)>>2)];
      var $list=(($partial+4)|0);
      var $19=HEAP32[(($list)>>2)];
      _str_list_concat($result, $18, $19);
      _str_list_free($partial);
      var $20=HEAP32[(($p)>>2)];
      var $add_ptr=(($20+1)|0);
      var $21=$text_addr;
      HEAP32[(($21)>>2)]=$add_ptr;
      _str_list_init($tmp10);
      var $22=$partial;
      var $23=$tmp10;
      assert(8 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];
    }
    var $53=HEAP32[(($p)>>2)];
    var $incdec_ptr48=(($53+1)|0);
    HEAP32[(($p)>>2)]=$incdec_ptr48;
  }
  var $54=$text_addr;
  var $55=HEAP32[(($54)>>2)];
  var $56=HEAP32[(($p)>>2)];
  _expand_append($partial, $55, $56);
  var $length50=(($partial)|0);
  var $57=HEAP32[(($length50)>>2)];
  var $list51=(($partial+4)|0);
  var $58=HEAP32[(($list51)>>2)];
  _str_list_concat($result, $57, $58);
  _str_list_free($partial);
  var $59=HEAP32[(($p)>>2)];
  var $60=$text_addr;
  HEAP32[(($60)>>2)]=$59;
  var $61=$agg_result;
  var $62=$result;
  assert(8 % 1 === 0);HEAP32[(($61)>>2)]=HEAP32[(($62)>>2)];HEAP32[((($61)+(4))>>2)]=HEAP32[((($62)+(4))>>2)];
  STACKTOP = __stackBase__;
  return;
}
_brace_expand["X"]=1;

function _expand_append($partial, $text, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $partial_addr;
  var $text_addr;
  var $p_addr;
  var $new_string;
  var $len;
  var $tmp=__stackBase__;
  var $tmp1=(__stackBase__)+(8);
  $partial_addr=$partial;
  $text_addr=$text;
  $p_addr=$p;
  _str_list_init($tmp1);
  var $0=$tmp;
  var $1=$tmp1;
  assert(8 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];
  var $2=$p_addr;
  var $3=$text_addr;
  var $sub_ptr_lhs_cast=$2;
  var $sub_ptr_rhs_cast=$3;
  var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
  $len=$sub_ptr_sub;
  var $4=$len;
  var $add=((($4)+(1))|0);
  var $call=_xmalloc($add);
  $new_string=$call;
  var $5=$new_string;
  var $6=$text_addr;
  var $7=$len;
  var $call2=_strncpy($5, $6, $7);
  var $8=$len;
  var $9=$new_string;
  var $arrayidx=(($9+$8)|0);
  HEAP8[($arrayidx)]=0;
  var $10=$new_string;
  _str_list_add($tmp, $10);
  var $11=$partial_addr;
  var $length=(($tmp)|0);
  var $12=HEAP32[(($length)>>2)];
  var $list=(($tmp+4)|0);
  var $13=HEAP32[(($list)>>2)];
  _str_list_concat_elements($11, $12, $13);
  STACKTOP = __stackBase__;
  return;
}


function _find_suffix($name) {
  var label = 0;

  var $retval;
  var $name_addr;
  var $dot_pos;
  var $p;
  $name_addr=$name;
  var $0=$name_addr;
  var $call=_strrchr($0, 46);
  $dot_pos=$call;
  var $1=$dot_pos;
  var $cmp=(($1)|0)==0;
  if ($cmp) {
    $retval=0;
    var $9=$retval;

    return $9;
  }
  var $2=$dot_pos;
  var $add_ptr=(($2+1)|0);
  $p=$add_ptr;
  while(1) {
    var $3=$p;
    var $4=HEAP8[($3)];
    var $tobool=(($4 << 24) >> 24)!=0;
    if (!($tobool)) {
      label = 1774;
      break;
    }
    var $5=$p;
    var $6=HEAP8[($5)];
    var $conv=(($6 << 24) >> 24);
    var $cmp1=(($conv)|0)==47;
    if ($cmp1) {
      label = 1771;
      break;
    }
    var $7=$p;
    var $incdec_ptr=(($7+1)|0);
    $p=$incdec_ptr;
  }
  if (label == 1774) {
    var $8=$dot_pos;
    var $add_ptr5=(($8+1)|0);
    $retval=$add_ptr5;
    var $9=$retval;

    return $9;
  }
  else if (label == 1771) {
    $retval=0;
    var $9=$retval;

    return $9;
  }
}


function _fn_init($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $ret=__stackBase__;
  var $length=(($ret+8)|0);
  HEAP32[(($length)>>2)]=0;
  var $allocated=(($ret+4)|0);
  HEAP32[(($allocated)>>2)]=0;
  var $str=(($ret)|0);
  HEAP32[(($str)>>2)]=0;
  var $0=$agg_result;
  var $1=$ret;
  assert(12 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}


function _fn_copy0($agg_result, $s, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $s_addr;
  var $len_addr;
  var $ret=__stackBase__;
  $s_addr=$s;
  $len_addr=$len;
  var $0=$len_addr;
  var $cmp=75 > (($0)>>>0);
  if ($cmp) {
    var $cond = 75;
  } else {
    var $1=$len_addr;
    var $add=((($1)+(1))|0);
    var $cond = $add;
  }
  var $cond;
  var $allocated=(($ret+4)|0);
  HEAP32[(($allocated)>>2)]=$cond;
  var $allocated1=(($ret+4)|0);
  var $2=HEAP32[(($allocated1)>>2)];
  var $call=_xmalloc($2);
  var $str=(($ret)|0);
  HEAP32[(($str)>>2)]=$call;
  var $str2=(($ret)|0);
  var $3=HEAP32[(($str2)>>2)];
  var $4=$s_addr;
  var $5=$len_addr;
  var $call3=_strncpy($3, $4, $5);
  var $6=$len_addr;
  var $str4=(($ret)|0);
  var $7=HEAP32[(($str4)>>2)];
  var $arrayidx=(($7+$6)|0);
  HEAP8[($arrayidx)]=0;
  var $8=$len_addr;
  var $add5=((($8)+(1))|0);
  var $length=(($ret+8)|0);
  HEAP32[(($length)>>2)]=$add5;
  var $9=$agg_result;
  var $10=$ret;
  assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}


function _fn_free($f) {
  var label = 0;

  var $f_addr;
  $f_addr=$f;
  var $0=$f_addr;
  var $str=(($0)|0);
  var $1=HEAP32[(($str)>>2)];
  var $cmp=(($1)|0)!=0;
  if ($cmp) {
  } else {
    ___assert_func(((5253788)|0), 62, ((5268628)|0), ((5264124)|0));
  }
  var $2=$f_addr;
  var $str1=(($2)|0);
  var $3=HEAP32[(($str1)>>2)];
  _free($3);
  var $4=$f_addr;
  var $str2=(($4)|0);
  HEAP32[(($str2)>>2)]=0;
  var $5=$f_addr;
  var $allocated=(($5+4)|0);
  HEAP32[(($allocated)>>2)]=0;
  var $6=$f_addr;
  var $length=(($6+8)|0);
  HEAP32[(($length)>>2)]=0;

  return;
}


function _fn_1grow($f, $c) {
  var label = 0;

  var $f_addr;
  var $c_addr;
  $f_addr=$f;
  $c_addr=$c;
  var $0=$f_addr;
  _grow($0, 1);
  var $1=$c_addr;
  var $2=$f_addr;
  var $length=(($2+8)|0);
  var $3=HEAP32[(($length)>>2)];
  var $4=$f_addr;
  var $str=(($4)|0);
  var $5=HEAP32[(($str)>>2)];
  var $arrayidx=(($5+$3)|0);
  HEAP8[($arrayidx)]=$1;
  var $6=$f_addr;
  var $length1=(($6+8)|0);
  var $7=HEAP32[(($length1)>>2)];
  var $inc=((($7)+(1))|0);
  HEAP32[(($length1)>>2)]=$inc;

  return;
}


function _grow($f, $len) {
  var label = 0;

  var $f_addr;
  var $len_addr;
  $f_addr=$f;
  $len_addr=$len;
  while(1) {
    var $0=$f_addr;
    var $length=(($0+8)|0);
    var $1=HEAP32[(($length)>>2)];
    var $2=$len_addr;
    var $add=((($1)+($2))|0);
    var $3=$f_addr;
    var $allocated=(($3+4)|0);
    var $4=HEAP32[(($allocated)>>2)];
    var $cmp=(($add)>>>0) > (($4)>>>0);
    if (!($cmp)) {
      break;
    }
    var $5=$f_addr;
    var $allocated1=(($5+4)|0);
    var $6=HEAP32[(($allocated1)>>2)];
    var $add2=((($6)+(75))|0);
    HEAP32[(($allocated1)>>2)]=$add2;
    var $7=$f_addr;
    var $str=(($7)|0);
    var $8=HEAP32[(($str)>>2)];
    var $9=$f_addr;
    var $allocated3=(($9+4)|0);
    var $10=HEAP32[(($allocated3)>>2)];
    var $mul=(($10)&-1);
    var $call=_xrealloc($8, $mul);
    var $11=$f_addr;
    var $str4=(($11)|0);
    HEAP32[(($str4)>>2)]=$call;
  }

  return;
}


function _fn_grow($f, $source, $len) {
  var label = 0;

  var $f_addr;
  var $source_addr;
  var $len_addr;
  $f_addr=$f;
  $source_addr=$source;
  $len_addr=$len;
  var $0=$f_addr;
  var $1=$len_addr;
  _grow($0, $1);
  var $2=$f_addr;
  var $str=(($2)|0);
  var $3=HEAP32[(($str)>>2)];
  var $4=$f_addr;
  var $length=(($4+8)|0);
  var $5=HEAP32[(($length)>>2)];
  var $add_ptr=(($3+$5)|0);
  var $6=$source_addr;
  var $7=$len_addr;
  var $call=_strncpy($add_ptr, $6, $7);
  var $8=$len_addr;
  var $9=$f_addr;
  var $length1=(($9+8)|0);
  var $10=HEAP32[(($length1)>>2)];
  var $add=((($10)+($8))|0);
  HEAP32[(($length1)>>2)]=$add;

  return;
}


function _fn_str_grow($f, $s) {
  var label = 0;

  var $f_addr;
  var $s_addr;
  var $more_len;
  $f_addr=$f;
  $s_addr=$s;
  var $0=$s_addr;
  var $call=_strlen($0);
  $more_len=$call;
  var $1=$f_addr;
  var $2=$more_len;
  _grow($1, $2);
  var $3=$f_addr;
  var $str=(($3)|0);
  var $4=HEAP32[(($str)>>2)];
  var $5=$s_addr;
  var $call1=_strcat($4, $5);
  var $6=$more_len;
  var $7=$f_addr;
  var $length=(($7+8)|0);
  var $8=HEAP32[(($length)>>2)];
  var $add=((($8)+($6))|0);
  HEAP32[(($length)>>2)]=$add;

  return;
}


function _fn_shrink_to($f, $loc) {
  var label = 0;

  var $f_addr;
  var $loc_addr;
  $f_addr=$f;
  $loc_addr=$loc;
  var $0=$f_addr;
  var $length=(($0+8)|0);
  var $1=HEAP32[(($length)>>2)];
  var $2=$loc_addr;
  var $cmp=(($1)>>>0) > (($2)>>>0);
  if ($cmp) {
  } else {
    ___assert_func(((5253788)|0), 116, ((5268612)|0), ((5259808)|0));
  }
  var $3=$loc_addr;
  var $4=$f_addr;
  var $str=(($4)|0);
  var $5=HEAP32[(($str)>>2)];
  var $arrayidx=(($5+$3)|0);
  HEAP8[($arrayidx)]=0;
  var $6=$loc_addr;
  var $add=((($6)+(1))|0);
  var $7=$f_addr;
  var $length1=(($7+8)|0);
  HEAP32[(($length1)>>2)]=$add;

  return;
}


function _kpathsea_fontmap_lookup($kpse, $key) {
  var label = 0;

  var $kpse_addr;
  var $key_addr;
  var $ret;
  var $suffix;
  var $base_key;
  var $elt;
  $kpse_addr=$kpse;
  $key_addr=$key;
  var $0=$key_addr;
  var $call=_find_suffix($0);
  $suffix=$call;
  var $1=$kpse_addr;
  var $map=(($1+64)|0);
  var $size=(($map+4)|0);
  var $2=HEAP32[(($size)>>2)];
  var $cmp=(($2)|0)==0;
  if ($cmp) {
    var $3=$kpse_addr;
    _read_all_maps($3);
  }
  var $4=$kpse_addr;
  var $map1=(($4+64)|0);
  var $5=$key_addr;
  var $buckets=(($map1)|0);
  var $6=HEAP32[(($buckets)>>2)];
  var $size2=(($map1+4)|0);
  var $7=HEAP32[(($size2)>>2)];
  var $call3=_hash_lookup($6, $7, $5);
  $ret=$call3;
  var $8=$ret;
  var $tobool=(($8)|0)!=0;
  if (!($tobool)) {
    var $9=$suffix;
    var $tobool5=(($9)|0)!=0;
    if ($tobool5) {
      var $10=$key_addr;
      var $call7=_remove_suffix($10);
      $base_key=$call7;
      var $11=$kpse_addr;
      var $map8=(($11+64)|0);
      var $12=$base_key;
      var $buckets9=(($map8)|0);
      var $13=HEAP32[(($buckets9)>>2)];
      var $size10=(($map8+4)|0);
      var $14=HEAP32[(($size10)>>2)];
      var $call11=_hash_lookup($13, $14, $12);
      $ret=$call11;
      var $15=$base_key;
      _free($15);
    }
  }
  var $16=$ret;
  var $tobool14=(($16)|0)!=0;
  if (!($tobool14)) {
    var $26=$ret;

    return $26;
  }
  var $17=$suffix;
  var $tobool15=(($17)|0)!=0;
  if (!($tobool15)) {
    var $26=$ret;

    return $26;
  }
  var $18=$ret;
  $elt=$18;
  while(1) {
    var $19=$elt;
    var $20=HEAP32[(($19)>>2)];
    var $tobool17=(($20)|0)!=0;
    if (!($tobool17)) {
      break;
    }
    var $21=$elt;
    var $22=HEAP32[(($21)>>2)];
    var $23=$suffix;
    var $call18=_extend_filename($22, $23);
    var $24=$elt;
    HEAP32[(($24)>>2)]=$call18;
    var $25=$elt;
    var $incdec_ptr=(($25+4)|0);
    $elt=$incdec_ptr;
  }
  var $26=$ret;

  return $26;
}
_kpathsea_fontmap_lookup["X"]=1;

function _read_all_maps($kpse) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $filenames;
  var $tmp=__stackBase__;
  $kpse_addr=$kpse;
  var $0=$kpse_addr;
  var $call=_kpathsea_init_format($0, 11);
  var $1=$kpse_addr;
  var $map_path=(($1+72)|0);
  HEAP32[(($map_path)>>2)]=$call;
  var $2=$kpse_addr;
  var $3=$kpse_addr;
  var $map_path1=(($3+72)|0);
  var $4=HEAP32[(($map_path1)>>2)];
  var $call2=_kpathsea_all_path_search($2, $4, ((5253652)|0));
  $filenames=$call2;
  var $5=$kpse_addr;
  var $map=(($5+64)|0);
  _hash_create($tmp, 4001);
  var $6=$map;
  var $7=$tmp;
  assert(8 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];
  while(1) {
    var $8=$filenames;
    var $9=HEAP32[(($8)>>2)];
    var $tobool=(($9)|0)!=0;
    if (!($tobool)) {
      break;
    }
    var $10=$kpse_addr;
    var $11=$filenames;
    var $12=HEAP32[(($11)>>2)];
    _map_file_parse($10, $12);
    var $13=$filenames;
    var $incdec_ptr=(($13+4)|0);
    $filenames=$incdec_ptr;
  }
  STACKTOP = __stackBase__;
  return;
}


function _hash($table_0, $table_1, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $table=__stackBase__;
  var $key_addr;
  var $n;
  var $buckets=(($table)|0);
  HEAP32[(($buckets)>>2)]=$table_0;
  var $size=(($table+4)|0);
  HEAP32[(($size)>>2)]=$table_1;
  $key_addr=$key;
  $n=0;
  while(1) {
    var $0=$key_addr;
    var $1=HEAP8[($0)];
    var $conv=(($1 << 24) >> 24);
    var $cmp=(($conv)|0)!=0;
    if (!($cmp)) {
      break;
    }
    var $2=$n;
    var $3=$n;
    var $add=((($2)+($3))|0);
    var $4=$key_addr;
    var $incdec_ptr=(($4+1)|0);
    $key_addr=$incdec_ptr;
    var $5=HEAP8[($4)];
    var $conv2=(($5 << 24) >> 24);
    var $add3=((($add)+($conv2))|0);
    var $size4=(($table+4)|0);
    var $6=HEAP32[(($size4)>>2)];
    var $rem=((($add3)>>>0))%((($6)>>>0));
    $n=$rem;
  }
  var $7=$n;
  STACKTOP = __stackBase__;
  return $7;
}


function _hash_normalized($table_0, $table_1, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $table=__stackBase__;
  var $key_addr;
  var $n;
  var $buckets=(($table)|0);
  HEAP32[(($buckets)>>2)]=$table_0;
  var $size=(($table+4)|0);
  HEAP32[(($size)>>2)]=$table_1;
  $key_addr=$key;
  $n=0;
  while(1) {
    var $0=$key_addr;
    var $1=HEAP8[($0)];
    var $conv=(($1 << 24) >> 24);
    var $cmp=(($conv)|0)!=0;
    if (!($cmp)) {
      break;
    }
    var $2=$n;
    var $3=$n;
    var $add=((($2)+($3))|0);
    var $4=$key_addr;
    var $incdec_ptr=(($4+1)|0);
    $key_addr=$incdec_ptr;
    var $5=HEAP8[($4)];
    var $conv2=(($5 << 24) >> 24);
    var $add3=((($add)+($conv2))|0);
    var $size4=(($table+4)|0);
    var $6=HEAP32[(($size4)>>2)];
    var $rem=((($add3)>>>0))%((($6)>>>0));
    $n=$rem;
  }
  var $7=$n;
  STACKTOP = __stackBase__;
  return $7;
}


function _map_file_parse($kpse, $map_filename) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $map_filename_addr;
  var $orig_l;
  var $map_lineno;
  var $f;
  var $filename;
  var $l;
  var $comment_loc;
  var $alias;
  var $include_fname;
  $kpse_addr=$kpse;
  $map_filename_addr=$map_filename;
  $map_lineno=0;
  var $0=$map_filename_addr;
  var $call=_xfopen($0, ((5264088)|0));
  $f=$call;
  var $1=$kpse_addr;
  var $record_input=(($1)|0);
  var $2=HEAP32[(($record_input)>>2)];
  var $tobool=(($2)|0)!=0;
  if ($tobool) {
    var $3=$kpse_addr;
    var $record_input1=(($3)|0);
    var $4=HEAP32[(($record_input1)>>2)];
    var $5=$map_filename_addr;
    FUNCTION_TABLE[$4]($5);
  }
  while(1) {
    var $6=$f;
    var $call2=_read_line($6);
    $orig_l=$call2;
    var $cmp=(($call2)|0)!=0;
    if (!($cmp)) {
      break;
    }
    var $7=$orig_l;
    $l=$7;
    var $8=$l;
    var $call3=_strrchr($8, 37);
    $comment_loc=$call3;
    var $9=$comment_loc;
    var $tobool4=(($9)|0)!=0;
    if (!($tobool4)) {
      var $10=$l;
      var $call6=_strstr($10, ((5259772)|0));
      $comment_loc=$call6;
    }
    var $11=$comment_loc;
    var $tobool8=(($11)|0)!=0;
    if ($tobool8) {
      var $12=$comment_loc;
      HEAP8[($12)]=0;
    }
    var $13=$map_lineno;
    var $inc=((($13)+(1))|0);
    $map_lineno=$inc;
    while(1) {
      var $14=$l;
      var $15=HEAP8[($14)];
      var $conv=(($15 << 24) >> 24);
      var $tobool12=(($conv)|0)!=0;
      if ($tobool12) {
        var $16=$l;
        var $17=HEAP8[($16)];
        var $conv13=(($17 << 24) >> 24);
        var $cmp14=(($conv13)>>>0) <= 127;
        if ($cmp14) {
          var $18=$l;
          var $19=HEAP8[($18)];
          var $conv17=(($19 << 24) >> 24);
          var $call18=_isspace($conv17);
          var $tobool19=(($call18)|0)!=0;
          var $20 = $tobool19;
        } else {
          var $20 = 0;
        }
        var $20;
        var $21 = $20;
      } else {
        var $21 = 0;
      }
      var $21;
      if (!($21)) {
        break;
      }
      var $22=$l;
      var $incdec_ptr=(($22+1)|0);
      $l=$incdec_ptr;
    }
    var $23=$l;
    var $call22=_token($23);
    $filename=$call22;
    var $24=$filename;
    var $tobool23=(($24)|0)!=0;
    if ($tobool23) {
      var $25=$l;
      var $26=$filename;
      var $call25=_strlen($26);
      var $add_ptr=(($25+$call25)|0);
      var $call26=_token($add_ptr);
      $alias=$call26;
      var $27=$filename;
      var $cmp27=(($27)|0)!=0;
      do {
        if ($cmp27) {
          var $28=$filename;
          var $call29=_strcmp($28, ((5257580)|0));
          var $cmp30=(($call29)|0)==0;
          if (!($cmp30)) {
            label = 1859;
            break;
          }
          var $29=$alias;
          var $cmp33=(($29)|0)==0;
          if ($cmp33) {
            var $30=HEAP32[((_stderr)>>2)];
            var $call36=_fputs(((5256908)|0), $30);
            var $31=HEAP32[((_stderr)>>2)];
            var $32=$map_filename_addr;
            var $33=$map_lineno;
            var $call37=_fprintf($31, ((5255844)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$32,HEAP32[(((tempInt)+(4))>>2)]=$33,tempInt));
            var $34=HEAP32[((_stderr)>>2)];
            var $call38=_fputs(((5255228)|0), $34);
            var $35=HEAP32[((_stderr)>>2)];
            var $call39=_fflush($35);
          } else {
            var $36=$kpse_addr;
            var $37=$kpse_addr;
            var $map_path=(($37+72)|0);
            var $38=HEAP32[(($map_path)>>2)];
            var $39=$alias;
            var $call40=_kpathsea_path_search($36, $38, $39, 0);
            $include_fname=$call40;
            var $40=$include_fname;
            var $tobool41=(($40)|0)!=0;
            if ($tobool41) {
              var $41=$kpse_addr;
              var $42=$include_fname;
              _map_file_parse($41, $42);
              var $43=$include_fname;
              var $44=$alias;
              var $cmp43=(($43)|0)!=(($44)|0);
              if ($cmp43) {
                var $45=$include_fname;
                _free($45);
              }
            } else {
              var $46=HEAP32[((_stderr)>>2)];
              var $call49=_fputs(((5256908)|0), $46);
              var $47=HEAP32[((_stderr)>>2)];
              var $48=$map_filename_addr;
              var $49=$map_lineno;
              var $50=$alias;
              var $call50=_fprintf($47, ((5254536)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$48,HEAP32[(((tempInt)+(4))>>2)]=$49,HEAP32[(((tempInt)+(8))>>2)]=$50,tempInt));
              var $51=HEAP32[((_stderr)>>2)];
              var $call51=_fputs(((5255228)|0), $51);
              var $52=HEAP32[((_stderr)>>2)];
              var $call52=_fflush($52);
            }
            var $53=$alias;
            _free($53);
            var $54=$filename;
            _free($54);
          }
          break;
        } else {
          label = 1859;
        }
      } while(0);
      if (label == 1859) {
        label = 0;
        var $55=$alias;
        var $cmp57=(($55)|0)==0;
        if ($cmp57) {
          var $56=HEAP32[((_stderr)>>2)];
          var $call61=_fputs(((5256908)|0), $56);
          var $57=HEAP32[((_stderr)>>2)];
          var $58=$map_filename_addr;
          var $59=$map_lineno;
          var $60=$filename;
          var $call62=_fprintf($57, ((5253592)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$58,HEAP32[(((tempInt)+(4))>>2)]=$59,HEAP32[(((tempInt)+(8))>>2)]=$60,tempInt));
          var $61=HEAP32[((_stderr)>>2)];
          var $call63=_fputs(((5255228)|0), $61);
          var $62=HEAP32[((_stderr)>>2)];
          var $call64=_fflush($62);
          var $63=$filename;
          _free($63);
        } else {
          var $64=$kpse_addr;
          var $map=(($64+64)|0);
          var $65=$alias;
          var $66=$filename;
          _hash_insert_normalized($map, $65, $66);
        }
      }
    }
    var $67=$orig_l;
    _free($67);
  }
  var $68=$f;
  var $69=$map_filename_addr;
  _xfclose($68, $69);
  STACKTOP = __stackBase__;
  return;
}
_map_file_parse["X"]=1;

function _token($str) {
  var label = 0;

  var $str_addr;
  var $len;
  var $start;
  var $ret;
  $str_addr=$str;
  while(1) {
    var $0=$str_addr;
    var $1=HEAP8[($0)];
    var $conv=(($1 << 24) >> 24);
    var $tobool=(($conv)|0)!=0;
    if ($tobool) {
      var $2=$str_addr;
      var $3=HEAP8[($2)];
      var $conv1=(($3 << 24) >> 24);
      var $cmp=(($conv1)>>>0) <= 127;
      if ($cmp) {
        var $4=$str_addr;
        var $5=HEAP8[($4)];
        var $conv4=(($5 << 24) >> 24);
        var $call=_isspace($conv4);
        var $tobool5=(($call)|0)!=0;
        var $6 = $tobool5;
      } else {
        var $6 = 0;
      }
      var $6;
      var $7 = $6;
    } else {
      var $7 = 0;
    }
    var $7;
    if (!($7)) {
      break;
    }
    var $8=$str_addr;
    var $incdec_ptr=(($8+1)|0);
    $str_addr=$incdec_ptr;
  }
  var $9=$str_addr;
  $start=$9;
  while(1) {
    var $10=$str_addr;
    var $11=HEAP8[($10)];
    var $conv8=(($11 << 24) >> 24);
    var $tobool9=(($conv8)|0)!=0;
    if ($tobool9) {
      var $12=$str_addr;
      var $13=HEAP8[($12)];
      var $conv11=(($13 << 24) >> 24);
      var $cmp12=(($conv11)>>>0) <= 127;
      if ($cmp12) {
        var $14=$str_addr;
        var $15=HEAP8[($14)];
        var $conv15=(($15 << 24) >> 24);
        var $call16=_isspace($conv15);
        var $tobool17=(($call16)|0)!=0;
        var $16 = $tobool17;
      } else {
        var $16 = 0;
      }
      var $16;
      var $lnot=$16 ^ 1;
      var $17 = $lnot;
    } else {
      var $17 = 0;
    }
    var $17;
    if (!($17)) {
      break;
    }
    var $18=$str_addr;
    var $incdec_ptr21=(($18+1)|0);
    $str_addr=$incdec_ptr21;
  }
  var $19=$str_addr;
  var $20=$start;
  var $sub_ptr_lhs_cast=$19;
  var $sub_ptr_rhs_cast=$20;
  var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
  $len=$sub_ptr_sub;
  var $21=$len;
  var $add=((($21)+(1))|0);
  var $call23=_xmalloc($add);
  $ret=$call23;
  var $22=$ret;
  var $23=$start;
  var $24=$len;
  var $call24=_strncpy($22, $23, $24);
  var $25=$len;
  var $26=$ret;
  var $arrayidx=(($26+$25)|0);
  HEAP8[($arrayidx)]=0;
  var $27=$ret;

  return $27;
}
_token["X"]=1;

function _hash_create($agg_result, $size) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $size_addr;
  var $ret=__stackBase__;
  var $b;
  $size_addr=$size;
  var $0=$size_addr;
  var $mul=((($0<<2))&-1);
  var $call=_xmalloc($mul);
  var $1=$call;
  var $buckets=(($ret)|0);
  HEAP32[(($buckets)>>2)]=$1;
  var $2=$size_addr;
  var $size1=(($ret+4)|0);
  HEAP32[(($size1)>>2)]=$2;
  $b=0;
  while(1) {
    var $3=$b;
    var $size2=(($ret+4)|0);
    var $4=HEAP32[(($size2)>>2)];
    var $cmp=(($3)>>>0) < (($4)>>>0);
    if (!($cmp)) {
      break;
    }
    var $5=$b;
    var $buckets3=(($ret)|0);
    var $6=HEAP32[(($buckets3)>>2)];
    var $arrayidx=(($6+($5<<2))|0);
    HEAP32[(($arrayidx)>>2)]=0;
    var $7=$b;
    var $inc=((($7)+(1))|0);
    $b=$inc;
  }
  var $8=$agg_result;
  var $9=$ret;
  assert(8 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];
  STACKTOP = __stackBase__;
  return;
}


function _hash_insert($table, $key, $value) {
  var label = 0;

  var $table_addr;
  var $key_addr;
  var $value_addr;
  var $n;
  var $new_elt;
  var $loc;
  $table_addr=$table;
  $key_addr=$key;
  $value_addr=$value;
  var $0=$table_addr;
  var $1=$key_addr;
  var $buckets=(($0)|0);
  var $2=HEAP32[(($buckets)>>2)];
  var $size=(($0+4)|0);
  var $3=HEAP32[(($size)>>2)];
  var $call=_hash($2, $3, $1);
  $n=$call;
  var $call1=_xmalloc(12);
  var $4=$call1;
  $new_elt=$4;
  var $5=$key_addr;
  var $6=$new_elt;
  var $key2=(($6)|0);
  HEAP32[(($key2)>>2)]=$5;
  var $7=$value_addr;
  var $8=$new_elt;
  var $value3=(($8+4)|0);
  HEAP32[(($value3)>>2)]=$7;
  var $9=$new_elt;
  var $next=(($9+8)|0);
  HEAP32[(($next)>>2)]=0;
  var $10=$n;
  var $11=$table_addr;
  var $buckets4=(($11)|0);
  var $12=HEAP32[(($buckets4)>>2)];
  var $arrayidx=(($12+($10<<2))|0);
  var $13=HEAP32[(($arrayidx)>>2)];
  var $tobool=(($13)|0)!=0;
  if (!($tobool)) {
    var $14=$new_elt;
    var $15=$n;
    var $16=$table_addr;
    var $buckets5=(($16)|0);
    var $17=HEAP32[(($buckets5)>>2)];
    var $arrayidx6=(($17+($15<<2))|0);
    HEAP32[(($arrayidx6)>>2)]=$14;

    return;
  }
  var $18=$n;
  var $19=$table_addr;
  var $buckets7=(($19)|0);
  var $20=HEAP32[(($buckets7)>>2)];
  var $arrayidx8=(($20+($18<<2))|0);
  var $21=HEAP32[(($arrayidx8)>>2)];
  $loc=$21;
  while(1) {
    var $22=$loc;
    var $next9=(($22+8)|0);
    var $23=HEAP32[(($next9)>>2)];
    var $tobool10=(($23)|0)!=0;
    if (!($tobool10)) {
      break;
    }
    var $24=$loc;
    var $next11=(($24+8)|0);
    var $25=HEAP32[(($next11)>>2)];
    $loc=$25;
  }
  var $26=$new_elt;
  var $27=$loc;
  var $next12=(($27+8)|0);
  HEAP32[(($next12)>>2)]=$26;

  return;
}
_hash_insert["X"]=1;

function _hash_insert_normalized($table, $key, $value) {
  var label = 0;

  var $table_addr;
  var $key_addr;
  var $value_addr;
  var $n;
  var $new_elt;
  var $loc;
  $table_addr=$table;
  $key_addr=$key;
  $value_addr=$value;
  var $0=$table_addr;
  var $1=$key_addr;
  var $buckets=(($0)|0);
  var $2=HEAP32[(($buckets)>>2)];
  var $size=(($0+4)|0);
  var $3=HEAP32[(($size)>>2)];
  var $call=_hash_normalized($2, $3, $1);
  $n=$call;
  var $call1=_xmalloc(12);
  var $4=$call1;
  $new_elt=$4;
  var $5=$key_addr;
  var $6=$new_elt;
  var $key2=(($6)|0);
  HEAP32[(($key2)>>2)]=$5;
  var $7=$value_addr;
  var $8=$new_elt;
  var $value3=(($8+4)|0);
  HEAP32[(($value3)>>2)]=$7;
  var $9=$new_elt;
  var $next=(($9+8)|0);
  HEAP32[(($next)>>2)]=0;
  var $10=$n;
  var $11=$table_addr;
  var $buckets4=(($11)|0);
  var $12=HEAP32[(($buckets4)>>2)];
  var $arrayidx=(($12+($10<<2))|0);
  var $13=HEAP32[(($arrayidx)>>2)];
  var $tobool=(($13)|0)!=0;
  if (!($tobool)) {
    var $14=$new_elt;
    var $15=$n;
    var $16=$table_addr;
    var $buckets5=(($16)|0);
    var $17=HEAP32[(($buckets5)>>2)];
    var $arrayidx6=(($17+($15<<2))|0);
    HEAP32[(($arrayidx6)>>2)]=$14;

    return;
  }
  var $18=$n;
  var $19=$table_addr;
  var $buckets7=(($19)|0);
  var $20=HEAP32[(($buckets7)>>2)];
  var $arrayidx8=(($20+($18<<2))|0);
  var $21=HEAP32[(($arrayidx8)>>2)];
  $loc=$21;
  while(1) {
    var $22=$loc;
    var $next9=(($22+8)|0);
    var $23=HEAP32[(($next9)>>2)];
    var $tobool10=(($23)|0)!=0;
    if (!($tobool10)) {
      break;
    }
    var $24=$loc;
    var $next11=(($24+8)|0);
    var $25=HEAP32[(($next11)>>2)];
    $loc=$25;
  }
  var $26=$new_elt;
  var $27=$loc;
  var $next12=(($27+8)|0);
  HEAP32[(($next12)>>2)]=$26;

  return;
}
_hash_insert_normalized["X"]=1;

function _hash_lookup($table_0, $table_1, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $table=__stackBase__;
  var $key_addr;
  var $p;
  var $ret=(__stackBase__)+(8);
  var $n;
  var $tmp=(__stackBase__)+(16);
  var $kpse;
  var $r;
  var $buckets=(($table)|0);
  HEAP32[(($buckets)>>2)]=$table_0;
  var $size=(($table+4)|0);
  HEAP32[(($size)>>2)]=$table_1;
  $key_addr=$key;
  var $0=$key_addr;
  var $buckets1=(($table)|0);
  var $1=HEAP32[(($buckets1)>>2)];
  var $size2=(($table+4)|0);
  var $2=HEAP32[(($size2)>>2)];
  var $call=_hash($1, $2, $0);
  $n=$call;
  _str_list_init($tmp);
  var $3=$ret;
  var $4=$tmp;
  assert(8 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];
  var $5=$n;
  var $buckets3=(($table)|0);
  var $6=HEAP32[(($buckets3)>>2)];
  var $arrayidx=(($6+($5<<2))|0);
  var $7=HEAP32[(($arrayidx)>>2)];
  $p=$7;
  while(1) {
    var $8=$p;
    var $cmp=(($8)|0)!=0;
    if (!($cmp)) {
      break;
    }
    var $9=$key_addr;
    var $cmp4=(($9)|0)!=0;
    do {
      if ($cmp4) {
        var $10=$p;
        var $key5=(($10)|0);
        var $11=HEAP32[(($key5)>>2)];
        var $cmp6=(($11)|0)!=0;
        if (!($cmp6)) {
          break;
        }
        var $12=$key_addr;
        var $13=$p;
        var $key8=(($13)|0);
        var $14=HEAP32[(($key8)>>2)];
        var $call9=_strcmp($12, $14);
        var $cmp10=(($call9)|0)==0;
        if (!($cmp10)) {
          break;
        }
        var $15=$p;
        var $value=(($15+4)|0);
        var $16=HEAP32[(($value)>>2)];
        _str_list_add($ret, $16);
      }
    } while(0);
    var $17=$p;
    var $next=(($17+8)|0);
    var $18=HEAP32[(($next)>>2)];
    $p=$18;
  }
  var $list=(($ret+4)|0);
  var $19=HEAP32[(($list)>>2)];
  var $tobool=(($19)|0)!=0;
  if ($tobool) {
    _str_list_add($ret, 0);
  }
  var $20=HEAP32[((5248384)>>2)];
  $kpse=$20;
  var $21=$kpse;
  var $debug=(($21+44)|0);
  var $22=HEAP32[(($debug)>>2)];
  var $and=$22 & 2;
  var $tobool14=(($and)|0)!=0;
  if (!($tobool14)) {
    var $list41=(($ret+4)|0);
    var $45=HEAP32[(($list41)>>2)];
    STACKTOP = __stackBase__;
    return $45;
  }
  var $23=HEAP32[((_stderr)>>2)];
  var $call16=_fputs(((5253500)|0), $23);
  var $24=HEAP32[((_stderr)>>2)];
  var $25=$key_addr;
  var $call17=_fprintf($24, ((5264036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$25,tempInt));
  var $26=HEAP32[((_stderr)>>2)];
  var $call18=_fflush($26);
  var $list19=(($ret+4)|0);
  var $27=HEAP32[(($list19)>>2)];
  var $tobool20=(($27)|0)!=0;
  if ($tobool20) {
    var $list24=(($ret+4)|0);
    var $29=HEAP32[(($list24)>>2)];
    $r=$29;
    while(1) {
      var $30=$r;
      var $31=HEAP32[(($30)>>2)];
      var $tobool26=(($31)|0)!=0;
      if (!($tobool26)) {
        break;
      }
      var $32=HEAP32[((_stderr)>>2)];
      var $call28=_fputc(32, $32);
      var $33=$kpse;
      var $debug_hash_lookup_int=(($33+76)|0);
      var $34=HEAP32[(($debug_hash_lookup_int)>>2)];
      var $tobool29=(($34)|0)!=0;
      if ($tobool29) {
        var $35=HEAP32[((_stderr)>>2)];
        var $36=$r;
        var $37=HEAP32[(($36)>>2)];
        var $38=$37;
        var $call31=_fprintf($35, ((5257480)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$38,tempInt));
      } else {
        var $39=$r;
        var $40=HEAP32[(($39)>>2)];
        var $41=HEAP32[((_stderr)>>2)];
        var $call33=_fputs($40, $41);
      }
      var $42=$r;
      var $incdec_ptr=(($42+4)|0);
      $r=$incdec_ptr;
    }
    var $43=HEAP32[((_stderr)>>2)];
    var $call37=_fputc(10, $43);
  } else {
    var $28=HEAP32[((_stderr)>>2)];
    var $call22=_fputs(((5259728)|0), $28);
  }
  var $44=HEAP32[((_stderr)>>2)];
  var $call39=_fflush($44);
  var $list41=(($ret+4)|0);
  var $45=HEAP32[(($list41)>>2)];
  STACKTOP = __stackBase__;
  return $45;
}
_hash_lookup["X"]=1;

function _magstep($n, $bdpi) {
  var label = 0;

  var $n_addr;
  var $bdpi_addr;
  var $t;
  var $step;
  var $neg;
  $n_addr=$n;
  $bdpi_addr=$bdpi;
  $neg=0;
  var $0=$n_addr;
  var $cmp=(($0)|0) < 0;
  if ($cmp) {
    $neg=1;
    var $1=$n_addr;
    var $sub=(((-$1))|0);
    $n_addr=$sub;
  }
  var $2=$n_addr;
  var $and=$2 & 1;
  var $tobool=(($and)|0)!=0;
  if ($tobool) {
    var $3=$n_addr;
    var $and2=$3 & -2;
    $n_addr=$and2;
    $t=1.095445115;
  } else {
    $t=1;
  }
  while(1) {
    var $4=$n_addr;
    var $cmp4=(($4)|0) > 8;
    if (!($cmp4)) {
      break;
    }
    var $5=$n_addr;
    var $sub5=((($5)-(8))|0);
    $n_addr=$sub5;
    var $6=$t;
    var $mul=($6)*(2.0736);
    $t=$mul;
  }
  while(1) {
    var $7=$n_addr;
    var $cmp7=(($7)|0) > 0;
    if (!($cmp7)) {
      break;
    }
    var $8=$n_addr;
    var $sub9=((($8)-(2))|0);
    $n_addr=$sub9;
    var $9=$t;
    var $mul10=($9)*(1.2);
    $t=$mul10;
  }
  var $10=$neg;
  var $tobool12=(($10)|0)!=0;
  if ($tobool12) {
    var $11=$bdpi_addr;
    var $conv=(($11)|0);
    var $12=$t;
    var $div=($conv)/($12);
    var $cond = $div;
    var $cond;
    var $add=($cond)+(0.5);
    var $conv15=(($add)&-1);
    $step=$conv15;
    var $15=$step;

    return $15;
  } else {
    var $13=$bdpi_addr;
    var $conv13=(($13)|0);
    var $14=$t;
    var $mul14=($conv13)*($14);
    var $cond = $mul14;
    var $cond;
    var $add=($cond)+(0.5);
    var $conv15=(($add)&-1);
    $step=$conv15;
    var $15=$step;

    return $15;
  }
}
_magstep["X"]=1;

function _hash_print($table_0, $table_1, $summary_only) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $table=__stackBase__;
  var $summary_only_addr;
  var $b;
  var $total_elements;
  var $total_buckets;
  var $bucket;
  var $len;
  var $tb;
  var $buckets=(($table)|0);
  HEAP32[(($buckets)>>2)]=$table_0;
  var $size=(($table+4)|0);
  HEAP32[(($size)>>2)]=$table_1;
  $summary_only_addr=$summary_only;
  $total_elements=0;
  $total_buckets=0;
  $b=0;
  while(1) {
    var $0=$b;
    var $size1=(($table+4)|0);
    var $1=HEAP32[(($size1)>>2)];
    var $cmp=(($0)>>>0) < (($1)>>>0);
    if (!($cmp)) {
      break;
    }
    var $2=$b;
    var $buckets2=(($table)|0);
    var $3=HEAP32[(($buckets2)>>2)];
    var $arrayidx=(($3+($2<<2))|0);
    var $4=HEAP32[(($arrayidx)>>2)];
    $bucket=$4;
    var $5=$bucket;
    var $tobool=(($5)|0)!=0;
    if ($tobool) {
      $len=1;
      var $6=$total_buckets;
      var $inc=((($6)+(1))|0);
      $total_buckets=$inc;
      var $7=$summary_only_addr;
      var $tobool3=(($7)|0)!=0;
      if (!($tobool3)) {
        var $8=HEAP32[((_stderr)>>2)];
        var $9=$b;
        var $call=_fprintf($8, ((5256876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$9,tempInt));
      }
      var $10=$bucket;
      var $next=(($10+8)|0);
      var $11=HEAP32[(($next)>>2)];
      $tb=$11;
      while(1) {
        var $12=$tb;
        var $cmp6=(($12)|0)!=0;
        if (!($cmp6)) {
          break;
        }
        var $13=$len;
        var $inc8=((($13)+(1))|0);
        $len=$inc8;
        var $14=$tb;
        var $next9=(($14+8)|0);
        var $15=HEAP32[(($next9)>>2)];
        $tb=$15;
      }
      var $16=$summary_only_addr;
      var $tobool10=(($16)|0)!=0;
      if (!($tobool10)) {
        var $17=HEAP32[((_stderr)>>2)];
        var $18=$len;
        var $call12=_fprintf($17, ((5255808)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$18,tempInt));
      }
      var $19=$len;
      var $20=$total_elements;
      var $add=((($20)+($19))|0);
      $total_elements=$add;
      var $21=$summary_only_addr;
      var $tobool14=(($21)|0)!=0;
      if (!($tobool14)) {
        var $22=$bucket;
        $tb=$22;
        while(1) {
          var $23=$tb;
          var $cmp17=(($23)|0)!=0;
          if (!($cmp17)) {
            break;
          }
          var $24=HEAP32[((_stderr)>>2)];
          var $25=$tb;
          var $key=(($25)|0);
          var $26=HEAP32[(($key)>>2)];
          var $27=$tb;
          var $value=(($27+4)|0);
          var $28=HEAP32[(($value)>>2)];
          var $call19=_fprintf($24, ((5255208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$26,HEAP32[(((tempInt)+(4))>>2)]=$28,tempInt));
          var $29=$tb;
          var $next21=(($29+8)|0);
          var $30=HEAP32[(($next21)>>2)];
          $tb=$30;
        }
        var $31=HEAP32[((_stderr)>>2)];
        var $call23=_fputc(10, $31);
      }
    }
    var $32=$b;
    var $inc27=((($32)+(1))|0);
    $b=$inc27;
  }
  var $33=HEAP32[((_stderr)>>2)];
  var $size29=(($table+4)|0);
  var $34=HEAP32[(($size29)>>2)];
  var $35=$total_buckets;
  var $36=$total_buckets;
  var $mul=((($36)*(100))&-1);
  var $size30=(($table+4)|0);
  var $37=HEAP32[(($size30)>>2)];
  var $div=Math.floor(((($mul)>>>0))/((($37)>>>0)));
  var $38=$total_elements;
  var $39=$total_buckets;
  var $tobool31=(($39)|0)!=0;
  if ($tobool31) {
    var $40=$total_elements;
    var $conv=(($40)>>>0);
    var $41=$total_buckets;
    var $conv32=(($41)>>>0);
    var $div33=($conv)/($conv32);
    var $cond = $div33;
    var $cond;
    var $call34=_fprintf($33, ((5254444)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$34,HEAP32[(((tempInt)+(4))>>2)]=$35,HEAP32[(((tempInt)+(8))>>2)]=$div,HEAP32[(((tempInt)+(12))>>2)]=$38,(HEAPF64[(tempDoublePtr)>>3]=$cond,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
    STACKTOP = __stackBase__;
    return;
  } else {
    var $cond = 0;
    var $cond;
    var $call34=_fprintf($33, ((5254444)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$34,HEAP32[(((tempInt)+(4))>>2)]=$35,HEAP32[(((tempInt)+(8))>>2)]=$div,HEAP32[(((tempInt)+(12))>>2)]=$38,(HEAPF64[(tempDoublePtr)>>3]=$cond,HEAP32[(((tempInt)+(16))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(16))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
    STACKTOP = __stackBase__;
    return;
  }
}
_hash_print["X"]=1;

function _kpathsea_expand_default($kpse, $path, $fallback) {
  var label = 0;

  var $kpse_addr;
  var $path_addr;
  var $fallback_addr;
  var $path_length;
  var $expansion;
  var $loc;
  $kpse_addr=$kpse;
  $path_addr=$path;
  $fallback_addr=$fallback;
  var $0=$kpse_addr;
  var $1=$fallback_addr;
  var $tobool=(($1)|0)!=0;
  if ($tobool) {
  } else {
    ___assert_func(((5253364)|0), 40, ((5268568)|0), ((5263964)|0));
  }
  var $2=$path_addr;
  var $cmp=(($2)|0)==0;
  if ($cmp) {
    var $3=$fallback_addr;
    var $call=_xstrdup($3);
    $expansion=$call;
    var $40=$expansion;

    return $40;
  }
  var $4=$path_addr;
  var $5=HEAP8[($4)];
  var $conv=(($5 << 24) >> 24);
  var $cmp1=(($conv)|0)==58;
  if ($cmp1) {
    var $6=$path_addr;
    var $arrayidx=(($6+1)|0);
    var $7=HEAP8[($arrayidx)];
    var $conv4=(($7 << 24) >> 24);
    var $cmp5=(($conv4)|0)==0;
    if ($cmp5) {
      var $8=$fallback_addr;
      var $call8=_xstrdup($8);
      var $cond = $call8;
    } else {
      var $9=$fallback_addr;
      var $10=$path_addr;
      var $call10=_concat($9, $10);
      var $cond = $call10;
    }
    var $cond;
    $expansion=$cond;
  } else {
    var $11=$path_addr;
    var $call13=_strlen($11);
    $path_length=$call13;
    var $sub=((($call13)-(1))|0);
    var $12=$path_addr;
    var $arrayidx14=(($12+$sub)|0);
    var $13=HEAP8[($arrayidx14)];
    var $conv15=(($13 << 24) >> 24);
    var $cmp16=(($conv15)|0)==58;
    if ($cmp16) {
      var $14=$path_addr;
      var $15=$fallback_addr;
      var $call19=_concat($14, $15);
      $expansion=$call19;
    } else {
      var $16=$path_addr;
      $loc=$16;
      while(1) {
        var $17=$loc;
        var $18=HEAP8[($17)];
        var $tobool21=(($18 << 24) >> 24)!=0;
        if (!($tobool21)) {
          break;
        }
        var $19=$loc;
        var $arrayidx22=(($19)|0);
        var $20=HEAP8[($arrayidx22)];
        var $conv23=(($20 << 24) >> 24);
        var $cmp24=(($conv23)|0)==58;
        if ($cmp24) {
          var $21=$loc;
          var $arrayidx26=(($21+1)|0);
          var $22=HEAP8[($arrayidx26)];
          var $conv27=(($22 << 24) >> 24);
          var $cmp28=(($conv27)|0)==58;
          if ($cmp28) {
            label = 1992;
            break;
          }
        }
        var $23=$loc;
        var $incdec_ptr=(($23+1)|0);
        $loc=$incdec_ptr;
      }
      if (label == 1992) {
      }
      var $24=$loc;
      var $25=HEAP8[($24)];
      var $tobool31=(($25 << 24) >> 24)!=0;
      if ($tobool31) {
        var $26=$path_length;
        var $27=$fallback_addr;
        var $call33=_strlen($27);
        var $add=((($26)+($call33))|0);
        var $add34=((($add)+(1))|0);
        var $call35=_xmalloc($add34);
        $expansion=$call35;
        var $28=$expansion;
        var $29=$path_addr;
        var $30=$loc;
        var $31=$path_addr;
        var $sub_ptr_lhs_cast=$30;
        var $sub_ptr_rhs_cast=$31;
        var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
        var $add36=((($sub_ptr_sub)+(1))|0);
        var $call37=_strncpy($28, $29, $add36);
        var $32=$loc;
        var $33=$path_addr;
        var $sub_ptr_lhs_cast38=$32;
        var $sub_ptr_rhs_cast39=$33;
        var $sub_ptr_sub40=((($sub_ptr_lhs_cast38)-($sub_ptr_rhs_cast39))|0);
        var $add41=((($sub_ptr_sub40)+(1))|0);
        var $34=$expansion;
        var $arrayidx42=(($34+$add41)|0);
        HEAP8[($arrayidx42)]=0;
        var $35=$expansion;
        var $36=$fallback_addr;
        var $call43=_strcat($35, $36);
        var $37=$expansion;
        var $38=$loc;
        var $add_ptr=(($38+1)|0);
        var $call44=_strcat($37, $add_ptr);
      } else {
        var $39=$path_addr;
        var $call46=_xstrdup($39);
        $expansion=$call46;
      }
    }
  }
  var $40=$expansion;

  return $40;
}
_kpathsea_expand_default["X"]=1;

function _read_line($f) {
  var label = 0;

  var $f_addr;
  var $c;
  var $limit;
  var $loc;
  var $line;
  $f_addr=$f;
  $limit=75;
  $loc=0;
  var $0=$limit;
  var $call=_xmalloc($0);
  $line=$call;
  while(1) {
    var $1=$f_addr;
    var $call1=_fgetc($1);
    $c=$call1;
    var $cmp=(($call1)|0)!=-1;
    do {
      if ($cmp) {
        var $2=$c;
        var $cmp2=(($2)|0)!=10;
        if (!($cmp2)) {
          var $4 = 0;
          break;
        }
        var $3=$c;
        var $cmp3=(($3)|0)!=13;
        var $4 = $cmp3;
      } else {
        var $4 = 0;
      }
    } while(0);
    var $4;
    if (!($4)) {
      break;
    }
    var $5=$c;
    var $conv=(($5) & 255);
    var $6=$loc;
    var $7=$line;
    var $arrayidx=(($7+$6)|0);
    HEAP8[($arrayidx)]=$conv;
    var $8=$loc;
    var $inc=((($8)+(1))|0);
    $loc=$inc;
    var $9=$loc;
    var $10=$limit;
    var $cmp4=(($9)|0)==(($10)|0);
    if ($cmp4) {
      var $11=$limit;
      var $add=((($11)+(75))|0);
      $limit=$add;
      var $12=$line;
      var $13=$limit;
      var $call6=_xrealloc($12, $13);
      $line=$call6;
    }
  }
  var $14=$c;
  var $cmp7=(($14)|0)!=-1;
  if (!($cmp7)) {
    var $22=$line;
    _free($22);
    $line=0;
    var $23=$line;

    return $23;
  }
  var $15=$loc;
  var $16=$line;
  var $arrayidx10=(($16+$15)|0);
  HEAP8[($arrayidx10)]=0;
  var $17=$c;
  var $cmp11=(($17)|0)==13;
  if ($cmp11) {
    var $18=$f_addr;
    var $call14=_fgetc($18);
    $c=$call14;
    var $19=$c;
    var $cmp15=(($19)|0)!=10;
    if ($cmp15) {
      var $20=$c;
      var $21=$f_addr;
      var $call18=_ungetc($20, $21);
    }
  }
  var $23=$line;

  return $23;
}
_read_line["X"]=1;

function _kpathsea_magstep_fix($kpse, $dpi, $bdpi, $m_ret) {
  var label = 0;

  var $kpse_addr;
  var $dpi_addr;
  var $bdpi_addr;
  var $m_ret_addr;
  var $m;
  var $mdpi;
  var $real_dpi;
  var $sign;
  $kpse_addr=$kpse;
  $dpi_addr=$dpi;
  $bdpi_addr=$bdpi;
  $m_ret_addr=$m_ret;
  $mdpi=-1;
  $real_dpi=0;
  var $0=$dpi_addr;
  var $1=$bdpi_addr;
  var $cmp=(($0)>>>0) < (($1)>>>0);
  var $cond=$cmp ? -1 : 1;
  $sign=$cond;
  var $2=$kpse_addr;
  $m=0;
  while(1) {
    var $3=$real_dpi;
    var $tobool=(($3)|0)!=0;
    if ($tobool) {
      var $5 = 0;
    } else {
      var $4=$m;
      var $cmp1=(($4)|0) < 40;
      var $5 = $cmp1;
    }
    var $5;
    if (!($5)) {
      break;
    }
    var $6=$m;
    var $7=$sign;
    var $mul=((($6)*($7))&-1);
    var $8=$bdpi_addr;
    var $call=_magstep($mul, $8);
    $mdpi=$call;
    var $9=$mdpi;
    var $10=$dpi_addr;
    var $sub=((($9)-($10))|0);
    var $cmp2=(($sub)|0) < 0;
    if ($cmp2) {
      var $11=$mdpi;
      var $12=$dpi_addr;
      var $sub3=((($11)-($12))|0);
      var $sub4=(((-$sub3))|0);
      var $cond6 = $sub4;
    } else {
      var $13=$mdpi;
      var $14=$dpi_addr;
      var $sub5=((($13)-($14))|0);
      var $cond6 = $sub5;
    }
    var $cond6;
    var $cmp7=(($cond6)|0) <= 1;
    if ($cmp7) {
      var $15=$mdpi;
      $real_dpi=$15;
    } else {
      var $16=$mdpi;
      var $17=$dpi_addr;
      var $sub8=((($16)-($17))|0);
      var $18=$sign;
      var $mul9=((($sub8)*($18))&-1);
      var $cmp10=(($mul9)|0) > 0;
      if ($cmp10) {
        var $19=$dpi_addr;
        $real_dpi=$19;
      }
    }
    var $20=$m;
    var $inc=((($20)+(1))|0);
    $m=$inc;
  }
  var $21=$m_ret_addr;
  var $tobool13=(($21)|0)!=0;
  if ($tobool13) {
    var $22=$real_dpi;
    var $23=$mdpi;
    var $tobool15=(($23)|0)!=0;
    if ($tobool15) {
      var $24=$m;
      var $sub17=((($24)-(1))|0);
      var $25=$sign;
      var $mul18=((($sub17)*($25))&-1);
      var $cond21 = $mul18;
    } else {
      var $cond21 = 0;
    }
    var $cond21;
    var $cmp22=(($22)|0)==(($cond21)|0);
    var $conv=(($cmp22)&1);
    var $26=$m_ret_addr;
    HEAP32[(($26)>>2)]=$conv;
  }
  var $27=$real_dpi;
  var $tobool24=(($27)|0)!=0;
  if ($tobool24) {
    var $28=$real_dpi;
    var $cond28 = $28;
    var $cond28;

    return $cond28;
  } else {
    var $29=$dpi_addr;
    var $cond28 = $29;
    var $cond28;

    return $cond28;
  }
}
_kpathsea_magstep_fix["X"]=1;

function _kpathsea_path_element($kpse, $p) {
  var label = 0;

  var $kpse_addr;
  var $p_addr;
  $kpse_addr=$kpse;
  $p_addr=$p;
  var $0=$kpse_addr;
  var $1=$p_addr;
  var $call=_element($0, $1, 1);

  return $call;
}


function _element($kpse, $passed_path, $env_p) {
  var label = 0;

  var $retval;
  var $kpse_addr;
  var $passed_path_addr;
  var $env_p_addr;
  var $p;
  var $ret;
  var $brace_level;
  var $len;
  $kpse_addr=$kpse;
  $passed_path_addr=$passed_path;
  $env_p_addr=$env_p;
  var $0=$passed_path_addr;
  var $tobool=(($0)|0)!=0;
  do {
    if ($tobool) {
      var $1=$passed_path_addr;
      var $2=$kpse_addr;
      var $path=(($2+88)|0);
      HEAP32[(($path)>>2)]=$1;
    } else {
      var $3=$kpse_addr;
      var $path1=(($3+88)|0);
      var $4=HEAP32[(($path1)>>2)];
      var $tobool2=(($4)|0)!=0;
      if ($tobool2) {
        break;
      }
      $retval=0;
      var $58=$retval;

      return $58;
    }
  } while(0);
  var $5=$kpse_addr;
  var $path5=(($5+88)|0);
  var $6=HEAP32[(($path5)>>2)];
  var $tobool6=(($6)|0)!=0;
  if ($tobool6) {
  } else {
    ___assert_func(((5253292)|0), 49, ((5268636)|0), ((5263924)|0));
  }
  var $7=$kpse_addr;
  var $path7=(($7+88)|0);
  var $8=HEAP32[(($path7)>>2)];
  $p=$8;
  $brace_level=0;
  while(1) {
    var $9=$p;
    var $10=HEAP8[($9)];
    var $conv=(($10 << 24) >> 24);
    var $cmp=(($conv)|0)!=0;
    if ($cmp) {
      var $11=$brace_level;
      var $cmp9=(($11)|0)==0;
      if ($cmp9) {
        var $12=$env_p_addr;
        var $tobool12=(($12)|0)!=0;
        if ($tobool12) {
          var $13=$p;
          var $14=HEAP8[($13)];
          var $conv14=(($14 << 24) >> 24);
          var $cmp15=(($conv14)|0)==58;
          var $conv16=(($cmp15)&1);
          var $cond = $conv16;
        } else {
          var $15=$p;
          var $16=HEAP8[($15)];
          var $conv18=(($16 << 24) >> 24);
          var $cmp19=(($conv18)|0)==47;
          var $conv20=(($cmp19)&1);
          var $cond = $conv20;
        }
        var $cond;
        var $tobool22=(($cond)|0)!=0;
        var $17 = $tobool22;
      } else {
        var $17 = 0;
      }
      var $17;
      var $lnot=$17 ^ 1;
      var $18 = $lnot;
    } else {
      var $18 = 0;
    }
    var $18;
    if (!($18)) {
      break;
    }
    var $19=$p;
    var $20=HEAP8[($19)];
    var $conv24=(($20 << 24) >> 24);
    var $cmp25=(($conv24)|0)==123;
    if ($cmp25) {
      var $21=$brace_level;
      var $inc=((($21)+(1))|0);
      $brace_level=$inc;
    } else {
      var $22=$p;
      var $23=HEAP8[($22)];
      var $conv29=(($23 << 24) >> 24);
      var $cmp30=(($conv29)|0)==125;
      if ($cmp30) {
        var $24=$brace_level;
        var $dec=((($24)-(1))|0);
        $brace_level=$dec;
      }
    }
    var $25=$p;
    var $incdec_ptr=(($25+1)|0);
    $p=$incdec_ptr;
  }
  var $26=$p;
  var $27=$kpse_addr;
  var $path35=(($27+88)|0);
  var $28=HEAP32[(($path35)>>2)];
  var $sub_ptr_lhs_cast=$26;
  var $sub_ptr_rhs_cast=$28;
  var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
  $len=$sub_ptr_sub;
  var $29=$len;
  var $add=((($29)+(1))|0);
  var $30=$kpse_addr;
  var $elt_alloc=(($30+84)|0);
  var $31=HEAP32[(($elt_alloc)>>2)];
  var $cmp36=(($add)>>>0) > (($31)>>>0);
  if ($cmp36) {
    var $32=$len;
    var $add39=((($32)+(1))|0);
    var $33=$kpse_addr;
    var $elt_alloc40=(($33+84)|0);
    HEAP32[(($elt_alloc40)>>2)]=$add39;
    var $34=$kpse_addr;
    var $elt=(($34+80)|0);
    var $35=HEAP32[(($elt)>>2)];
    var $36=$kpse_addr;
    var $elt_alloc41=(($36+84)|0);
    var $37=HEAP32[(($elt_alloc41)>>2)];
    var $call=_xrealloc($35, $37);
    var $38=$kpse_addr;
    var $elt42=(($38+80)|0);
    HEAP32[(($elt42)>>2)]=$call;
  }
  var $39=$kpse_addr;
  var $elt44=(($39+80)|0);
  var $40=HEAP32[(($elt44)>>2)];
  var $41=$kpse_addr;
  var $path45=(($41+88)|0);
  var $42=HEAP32[(($path45)>>2)];
  var $43=$len;
  var $call46=_strncpy($40, $42, $43);
  var $44=$len;
  var $45=$kpse_addr;
  var $elt47=(($45+80)|0);
  var $46=HEAP32[(($elt47)>>2)];
  var $arrayidx=(($46+$44)|0);
  HEAP8[($arrayidx)]=0;
  var $47=$kpse_addr;
  var $elt48=(($47+80)|0);
  var $48=HEAP32[(($elt48)>>2)];
  $ret=$48;
  var $49=$len;
  var $50=$kpse_addr;
  var $path49=(($50+88)|0);
  var $51=HEAP32[(($path49)>>2)];
  var $arrayidx50=(($51+$49)|0);
  var $52=HEAP8[($arrayidx50)];
  var $conv51=(($52 << 24) >> 24);
  var $cmp52=(($conv51)|0)==0;
  if ($cmp52) {
    var $53=$kpse_addr;
    var $path55=(($53+88)|0);
    HEAP32[(($path55)>>2)]=0;
  } else {
    var $54=$len;
    var $add57=((($54)+(1))|0);
    var $55=$kpse_addr;
    var $path58=(($55+88)|0);
    var $56=HEAP32[(($path58)>>2)];
    var $add_ptr=(($56+$add57)|0);
    HEAP32[(($path58)>>2)]=$add_ptr;
  }
  var $57=$ret;
  $retval=$57;
  var $58=$retval;

  return $58;
}
_element["X"]=1;

function _kpathsea_filename_component($kpse, $p) {
  var label = 0;

  var $kpse_addr;
  var $p_addr;
  $kpse_addr=$kpse;
  $p_addr=$p;
  var $0=$kpse_addr;
  var $1=$p_addr;
  var $call=_element($0, $1, 0);

  return $call;
}


function _kpathsea_path_search($kpse, $path, $name, $must_exist) {
  var label = 0;

  var $kpse_addr;
  var $path_addr;
  var $name_addr;
  var $must_exist_addr;
  var $ret_list;
  var $ret;
  $kpse_addr=$kpse;
  $path_addr=$path;
  $name_addr=$name;
  $must_exist_addr=$must_exist;
  var $0=$kpse_addr;
  var $1=$path_addr;
  var $2=$name_addr;
  var $3=$must_exist_addr;
  var $call=_search($0, $1, $2, $3, 0);
  $ret_list=$call;
  var $4=$ret_list;
  var $5=HEAP32[(($4)>>2)];
  $ret=$5;
  var $6=$ret_list;
  var $7=$6;
  _free($7);
  var $8=$ret;

  return $8;
}


function _search($kpse, $path, $original_name, $must_exist, $all) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $path_addr;
  var $original_name_addr;
  var $must_exist_addr;
  var $all_addr;
  var $ret_list=__stackBase__;
  var $name;
  var $absolute_p;
  var $tmp=(__stackBase__)+(8);
  var $tmp6=(__stackBase__)+(16);
  $kpse_addr=$kpse;
  $path_addr=$path;
  $original_name_addr=$original_name;
  $must_exist_addr=$must_exist;
  $all_addr=$all;
  var $0=$kpse_addr;
  var $1=$original_name_addr;
  var $call=_kpathsea_expand($0, $1);
  $name=$call;
  var $2=$kpse_addr;
  var $3=$name;
  var $call1=_kpathsea_absolute_p($2, $3, 1);
  $absolute_p=$call1;
  var $4=$kpse_addr;
  var $debug=(($4+44)|0);
  var $5=HEAP32[(($debug)>>2)];
  var $and=$5 & 32;
  var $tobool=(($and)|0)!=0;
  if ($tobool) {
    var $6=HEAP32[((_stderr)>>2)];
    var $call2=_fputs(((5253280)|0), $6);
    var $7=HEAP32[((_stderr)>>2)];
    var $8=$name;
    var $9=$must_exist_addr;
    var $10=$all_addr;
    var $11=$path_addr;
    var $call3=_fprintf($7, ((5253512)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$8,HEAP32[(((tempInt)+(4))>>2)]=$9,HEAP32[(((tempInt)+(8))>>2)]=$10,HEAP32[(((tempInt)+(12))>>2)]=$11,tempInt));
    var $12=HEAP32[((_stderr)>>2)];
    var $call4=_fflush($12);
  }
  var $13=$absolute_p;
  var $tobool5=(($13)|0)!=0;
  if ($tobool5) {
    var $14=$kpse_addr;
    var $15=$name;
    _absolute_search($tmp, $14, $15);
    var $16=$ret_list;
    var $17=$tmp;
    assert(8 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];
  } else {
    var $18=$kpse_addr;
    var $19=$path_addr;
    var $20=$name;
    var $21=$must_exist_addr;
    var $22=$all_addr;
    _path_search($tmp6, $18, $19, $20, $21, $22);
    var $23=$ret_list;
    var $24=$tmp6;
    assert(8 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];
  }
  var $length=(($ret_list)|0);
  var $25=HEAP32[(($length)>>2)];
  var $cmp=(($25)|0)==0;
  do {
    if ($cmp) {
      label = 2092;
    } else {
      var $26=$all_addr;
      var $tobool7=(($26)|0)!=0;
      if (!($tobool7)) {
        break;
      }
      var $length8=(($ret_list)|0);
      var $27=HEAP32[(($length8)>>2)];
      var $sub=((($27)-(1))|0);
      var $list=(($ret_list+4)|0);
      var $28=HEAP32[(($list)>>2)];
      var $arrayidx=(($28+($sub<<2))|0);
      var $29=HEAP32[(($arrayidx)>>2)];
      var $cmp9=(($29)|0)!=0;
      if ($cmp9) {
        label = 2092;
        break;
      } else {
        break;
      }
    }
  } while(0);
  if (label == 2092) {
    _str_list_add($ret_list, 0);
  }
  var $30=$kpse_addr;
  var $followup_search=(($30+92)|0);
  var $31=HEAP32[(($followup_search)>>2)];
  var $cmp12=(($31)|0)==0;
  if ($cmp12) {
    var $32=$kpse_addr;
    var $followup_search14=(($32+92)|0);
    HEAP32[(($followup_search14)>>2)]=1;
    var $list34=(($ret_list+4)|0);
    var $45=HEAP32[(($list34)>>2)];
    STACKTOP = __stackBase__;
    return $45;
  }
  var $33=$kpse_addr;
  var $debug15=(($33+44)|0);
  var $34=HEAP32[(($debug15)>>2)];
  var $and16=$34 & 32;
  var $tobool17=(($and16)|0)!=0;
  if ($tobool17) {
    var $35=HEAP32[((_stderr)>>2)];
    var $call20=_fputs(((5253280)|0), $35);
    var $36=HEAP32[((_stderr)>>2)];
    var $37=$original_name_addr;
    var $call21=_fprintf($36, ((5252908)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$37,tempInt));
    var $38=HEAP32[((_stderr)>>2)];
    var $call22=_fflush($38);
  }
  var $39=$kpse_addr;
  var $length25=(($ret_list)|0);
  var $40=HEAP32[(($length25)>>2)];
  var $list26=(($ret_list+4)|0);
  var $41=HEAP32[(($list26)>>2)];
  _log_search($39, $40, $41);
  var $42=$kpse_addr;
  var $debug27=(($42+44)|0);
  var $43=HEAP32[(($debug27)>>2)];
  var $and28=$43 & 32;
  var $tobool29=(($and28)|0)!=0;
  if ($tobool29) {
    var $44=HEAP32[((_stderr)>>2)];
    var $call31=_fputc(10, $44);
  }
  var $list34=(($ret_list+4)|0);
  var $45=HEAP32[(($list34)>>2)];
  STACKTOP = __stackBase__;
  return $45;
}
_search["X"]=1;

function _kpathsea_path_search_list_generic($kpse, $path, $names, $must_exist, $all) {
  var label = 0;

  var $kpse_addr;
  var $path_addr;
  var $names_addr;
  var $must_exist_addr;
  var $all_addr;
  var $ret;
  $kpse_addr=$kpse;
  $path_addr=$path;
  $names_addr=$names;
  $must_exist_addr=$must_exist;
  $all_addr=$all;
  var $0=$kpse_addr;
  var $1=$path_addr;
  var $2=$names_addr;
  var $3=$must_exist_addr;
  var $4=$all_addr;
  var $call=_search_list($0, $1, $2, $3, $4);
  $ret=$call;
  var $5=$ret;

  return $5;
}


function _kpathsea_all_path_search($kpse, $path, $name) {
  var label = 0;

  var $kpse_addr;
  var $path_addr;
  var $name_addr;
  var $ret;
  $kpse_addr=$kpse;
  $path_addr=$path;
  $name_addr=$name;
  var $0=$kpse_addr;
  var $1=$path_addr;
  var $2=$name_addr;
  var $call=_search($0, $1, $2, 1, 1);
  $ret=$call;
  var $3=$ret;

  return $3;
}


function _search_list($kpse, $path, $names, $must_exist, $all) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $path_addr;
  var $names_addr;
  var $must_exist_addr;
  var $all_addr;
  var $ret_list=__stackBase__;
  var $namep;
  var $elt;
  var $done;
  var $all_absolute;
  var $tmp=(__stackBase__)+(8);
  var $found;
  var $allow_disk_search;
  var $dirs;
  var $tmp63=(__stackBase__)+(16);
  $kpse_addr=$kpse;
  $path_addr=$path;
  $names_addr=$names;
  $must_exist_addr=$must_exist;
  $all_addr=$all;
  $done=0;
  $all_absolute=1;
  _str_list_init($tmp);
  var $0=$ret_list;
  var $1=$tmp;
  assert(8 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];
  var $2=$kpse_addr;
  var $debug=(($2+44)|0);
  var $3=HEAP32[(($debug)>>2)];
  var $and=$3 & 32;
  var $tobool=(($and)|0)!=0;
  if ($tobool) {
    var $4=HEAP32[((_stderr)>>2)];
    var $call=_fputs(((5253280)|0), $4);
    var $5=HEAP32[((_stderr)>>2)];
    var $6=$names_addr;
    var $7=HEAP32[(($6)>>2)];
    var $call1=_fprintf($5, ((5263876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$7,tempInt));
    var $8=HEAP32[((_stderr)>>2)];
    var $call2=_fflush($8);
    var $9=$names_addr;
    var $add_ptr=(($9+4)|0);
    $namep=$add_ptr;
    while(1) {
      var $10=$namep;
      var $11=HEAP32[(($10)>>2)];
      var $cmp=(($11)|0)!=0;
      if (!($cmp)) {
        break;
      }
      var $12=HEAP32[((_stderr)>>2)];
      var $call3=_fputc(32, $12);
      var $13=$namep;
      var $14=HEAP32[(($13)>>2)];
      var $15=HEAP32[((_stderr)>>2)];
      var $call4=_fputs($14, $15);
      var $16=$namep;
      var $incdec_ptr=(($16+4)|0);
      $namep=$incdec_ptr;
    }
    var $17=HEAP32[((_stderr)>>2)];
    var $18=$must_exist_addr;
    var $19=$all_addr;
    var $20=$path_addr;
    var $call5=_fprintf($17, ((5259580)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$18,HEAP32[(((tempInt)+(4))>>2)]=$19,HEAP32[(((tempInt)+(8))>>2)]=$20,tempInt));
  }
  var $21=$names_addr;
  $namep=$21;
  while(1) {
    var $22=$namep;
    var $23=HEAP32[(($22)>>2)];
    var $tobool7=(($23)|0)!=0;
    if (!($tobool7)) {
      label = 2126;
      break;
    }
    var $24=$kpse_addr;
    var $25=$namep;
    var $26=HEAP32[(($25)>>2)];
    var $call9=_kpathsea_absolute_p($24, $26, 1);
    var $tobool10=(($call9)|0)!=0;
    if ($tobool10) {
      var $27=$kpse_addr;
      var $28=$namep;
      var $29=HEAP32[(($28)>>2)];
      var $call12=_kpathsea_readable_file($27, $29);
      var $tobool13=(($call12)|0)!=0;
      if ($tobool13) {
        var $30=$namep;
        var $31=HEAP32[(($30)>>2)];
        var $call15=_xstrdup($31);
        _str_list_add($ret_list, $call15);
        var $32=$all_addr;
        var $tobool16=(($32)|0)!=0;
        if (!($tobool16)) {
          label = 2120;
          break;
        }
      }
    } else {
      $all_absolute=0;
    }
    var $33=$namep;
    var $incdec_ptr22=(($33+4)|0);
    $namep=$incdec_ptr22;
  }
  do {
    if (label == 2120) {
    }
    else if (label == 2126) {
      var $34=$all_absolute;
      var $tobool24=(($34)|0)!=0;
      if ($tobool24) {
        break;
      }
      var $35=$kpse_addr;
      var $36=$path_addr;
      var $call27=_kpathsea_path_element($35, $36);
      $elt=$call27;
      while(1) {
        var $37=$done;
        var $tobool29=(($37)|0)!=0;
        if ($tobool29) {
          var $39 = 0;
        } else {
          var $38=$elt;
          var $tobool30=(($38)|0)!=0;
          var $39 = $tobool30;
        }
        var $39;
        if (!($39)) {
          break;
        }
        $allow_disk_search=1;
        var $40=$elt;
        var $arrayidx=(($40)|0);
        var $41=HEAP8[($arrayidx)];
        var $conv=(($41 << 24) >> 24);
        var $cmp34=(($conv)|0)==33;
        do {
          if ($cmp34) {
            var $42=$elt;
            var $arrayidx36=(($42+1)|0);
            var $43=HEAP8[($arrayidx36)];
            var $conv37=(($43 << 24) >> 24);
            var $cmp38=(($conv37)|0)==33;
            if (!($cmp38)) {
              break;
            }
            $allow_disk_search=0;
            var $44=$elt;
            var $add_ptr41=(($44+2)|0);
            $elt=$add_ptr41;
          }
        } while(0);
        var $45=$kpse_addr;
        var $46=$elt;
        var $call43=_kpathsea_normalize_path($45, $46);
        var $47=$kpse_addr;
        var $followup_search=(($47+92)|0);
        var $48=HEAP32[(($followup_search)>>2)];
        var $tobool44=(($48)|0)!=0;
        if ($tobool44) {
          var $49=$kpse_addr;
          var $50=$names_addr;
          var $51=$elt;
          var $52=$all_addr;
          var $call45=_kpathsea_db_search_list($49, $50, $51, $52);
          var $cond = $call45;
        } else {
          var $cond = 0;
        }
        var $cond;
        $found=$cond;
        var $53=$allow_disk_search;
        var $tobool46=(($53)|0)!=0;
        do {
          if ($tobool46) {
            var $54=$found;
            var $tobool48=(($54)|0)!=0;
            if ($tobool48) {
              var $55=$must_exist_addr;
              var $tobool49=(($55)|0)!=0;
              if (!($tobool49)) {
                break;
              }
              var $56=$found;
              var $list=(($56+4)|0);
              var $57=HEAP32[(($list)>>2)];
              var $tobool51=(($57)|0)!=0;
              if ($tobool51) {
                break;
              }
            }
            var $58=$kpse_addr;
            var $59=$elt;
            var $call54=_kpathsea_element_dirs($58, $59);
            $dirs=$call54;
            var $60=$dirs;
            var $tobool55=(($60)|0)!=0;
            do {
              if ($tobool55) {
                var $61=$dirs;
                var $62=HEAP32[(($61)>>2)];
                var $tobool57=(($62)|0)!=0;
                if (!($tobool57)) {
                  break;
                }
                var $63=$found;
                var $tobool59=(($63)|0)!=0;
                if (!($tobool59)) {
                  var $call61=_xmalloc(8);
                  var $64=$call61;
                  $found=$64;
                }
                var $65=$found;
                var $66=$kpse_addr;
                var $67=$dirs;
                var $68=$names_addr;
                var $69=$all_addr;
                _dir_list_search_list($tmp63, $66, $67, $68, $69);
                var $70=$65;
                var $71=$tmp63;
                assert(8 % 1 === 0);HEAP32[(($70)>>2)]=HEAP32[(($71)>>2)];HEAP32[((($70)+(4))>>2)]=HEAP32[((($71)+(4))>>2)];
              }
            } while(0);
          }
        } while(0);
        var $72=$found;
        var $tobool66=(($72)|0)!=0;
        do {
          if ($tobool66) {
            var $73=$found;
            var $list68=(($73+4)|0);
            var $74=HEAP32[(($list68)>>2)];
            var $tobool69=(($74)|0)!=0;
            if (!($tobool69)) {
              break;
            }
            var $75=$all_addr;
            var $tobool71=(($75)|0)!=0;
            if ($tobool71) {
              var $76=$found;
              var $length=(($76)|0);
              var $77=HEAP32[(($length)>>2)];
              var $list73=(($76+4)|0);
              var $78=HEAP32[(($list73)>>2)];
              _str_list_concat($ret_list, $77, $78);
            } else {
              var $79=$found;
              var $list75=(($79+4)|0);
              var $80=HEAP32[(($list75)>>2)];
              var $arrayidx76=(($80)|0);
              var $81=HEAP32[(($arrayidx76)>>2)];
              _str_list_add($ret_list, $81);
              $done=1;
            }
          }
        } while(0);
        var $82=$kpse_addr;
        var $call80=_kpathsea_path_element($82, 0);
        $elt=$call80;
      }
    }
  } while(0);
  _str_list_uniqify($ret_list);
  var $length82=(($ret_list)|0);
  var $83=HEAP32[(($length82)>>2)];
  var $cmp83=(($83)|0)==0;
  do {
    if ($cmp83) {
      label = 2160;
    } else {
      var $84=$all_addr;
      var $tobool86=(($84)|0)!=0;
      if (!($tobool86)) {
        break;
      }
      var $length88=(($ret_list)|0);
      var $85=HEAP32[(($length88)>>2)];
      var $sub=((($85)-(1))|0);
      var $list89=(($ret_list+4)|0);
      var $86=HEAP32[(($list89)>>2)];
      var $arrayidx90=(($86+($sub<<2))|0);
      var $87=HEAP32[(($arrayidx90)>>2)];
      var $cmp91=(($87)|0)!=0;
      if ($cmp91) {
        label = 2160;
        break;
      } else {
        break;
      }
    }
  } while(0);
  if (label == 2160) {
    _str_list_add($ret_list, 0);
  }
  var $88=$kpse_addr;
  var $followup_search95=(($88+92)|0);
  var $89=HEAP32[(($followup_search95)>>2)];
  var $cmp96=(($89)|0)==0;
  if ($cmp96) {
    var $90=$kpse_addr;
    var $followup_search99=(($90+92)|0);
    HEAP32[(($followup_search99)>>2)]=1;
    var $list131=(($ret_list+4)|0);
    var $113=HEAP32[(($list131)>>2)];
    STACKTOP = __stackBase__;
    return $113;
  }
  var $91=$kpse_addr;
  var $debug101=(($91+44)|0);
  var $92=HEAP32[(($debug101)>>2)];
  var $and102=$92 & 32;
  var $tobool103=(($and102)|0)!=0;
  if ($tobool103) {
    var $93=HEAP32[((_stderr)>>2)];
    var $call106=_fputs(((5253280)|0), $93);
    var $94=HEAP32[((_stderr)>>2)];
    var $95=$names_addr;
    var $96=HEAP32[(($95)>>2)];
    var $call107=_fprintf($94, ((5257468)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$96,tempInt));
    var $97=HEAP32[((_stderr)>>2)];
    var $call108=_fflush($97);
    var $98=$names_addr;
    var $add_ptr110=(($98+4)|0);
    $namep=$add_ptr110;
    while(1) {
      var $99=$namep;
      var $100=HEAP32[(($99)>>2)];
      var $cmp112=(($100)|0)!=0;
      if (!($cmp112)) {
        break;
      }
      var $101=HEAP32[((_stderr)>>2)];
      var $call115=_fputc(32, $101);
      var $102=$namep;
      var $103=HEAP32[(($102)>>2)];
      var $104=HEAP32[((_stderr)>>2)];
      var $call116=_fputs($103, $104);
      var $105=$namep;
      var $incdec_ptr118=(($105+4)|0);
      $namep=$incdec_ptr118;
    }
    var $106=HEAP32[((_stderr)>>2)];
    var $call120=_fputs(((5256868)|0), $106);
  }
  var $107=$kpse_addr;
  var $length122=(($ret_list)|0);
  var $108=HEAP32[(($length122)>>2)];
  var $list123=(($ret_list+4)|0);
  var $109=HEAP32[(($list123)>>2)];
  _log_search($107, $108, $109);
  var $110=$kpse_addr;
  var $debug124=(($110+44)|0);
  var $111=HEAP32[(($debug124)>>2)];
  var $and125=$111 & 32;
  var $tobool126=(($and125)|0)!=0;
  if ($tobool126) {
    var $112=HEAP32[((_stderr)>>2)];
    var $call128=_fputc(10, $112);
  }
  var $list131=(($ret_list+4)|0);
  var $113=HEAP32[(($list131)>>2)];
  STACKTOP = __stackBase__;
  return $113;
}
_search_list["X"]=1;

function _kpathsea_all_path_search_list($kpse, $path, $names) {
  var label = 0;

  var $kpse_addr;
  var $path_addr;
  var $names_addr;
  $kpse_addr=$kpse;
  $path_addr=$path;
  $names_addr=$names;
  var $0=$kpse_addr;
  var $1=$path_addr;
  var $2=$names_addr;
  var $call=_kpathsea_path_search_list_generic($0, $1, $2, 1, 1);

  return $call;
}


function _dir_list_search_list($agg_result, $kpse, $dirs, $names, $search_all) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $dirs_addr;
  var $names_addr;
  var $search_all_addr;
  var $elt;
  var $ret=__stackBase__;
  var $allocated;
  var $potential;
  var $tmp=(__stackBase__)+(8);
  var $dir;
  var $dir_len;
  var $i;
  var $name;
  var $name_len;
  $kpse_addr=$kpse;
  $dirs_addr=$dirs;
  $names_addr=$names;
  $search_all_addr=$search_all;
  $allocated=75;
  var $0=$allocated;
  var $mul=(($0)&-1);
  var $call=_xmalloc($mul);
  $potential=$call;
  _str_list_init($tmp);
  var $1=$ret;
  var $2=$tmp;
  assert(8 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];
  var $3=$dirs_addr;
  var $4=HEAP32[(($3)>>2)];
  $elt=$4;
  L2789: while(1) {
    var $5=$elt;
    var $tobool=(($5)|0)!=0;
    if (!($tobool)) {
      label = 2195;
      break;
    }
    var $6=$elt;
    var $str=(($6)|0);
    var $7=HEAP32[(($str)>>2)];
    $dir=$7;
    var $8=$dir;
    var $call3=_strlen($8);
    $dir_len=$call3;
    $i=0;
    while(1) {
      var $9=$i;
      var $10=$names_addr;
      var $arrayidx=(($10+($9<<2))|0);
      var $11=HEAP32[(($arrayidx)>>2)];
      var $tobool6=(($11)|0)!=0;
      if (!($tobool6)) {
        break;
      }
      var $12=$i;
      var $13=$names_addr;
      var $arrayidx9=(($13+($12<<2))|0);
      var $14=HEAP32[(($arrayidx9)>>2)];
      $name=$14;
      var $15=$kpse_addr;
      var $16=$name;
      var $call11=_kpathsea_absolute_p($15, $16, 1);
      var $tobool12=(($call11)|0)!=0;
      if ($tobool12) {
      } else {
        var $17=$name;
        var $call13=_strlen($17);
        $name_len=$call13;
        while(1) {
          var $18=$dir_len;
          var $19=$name_len;
          var $add=((($18)+($19))|0);
          var $add14=((($add)+(1))|0);
          var $20=$allocated;
          var $cmp=(($add14)>>>0) > (($20)>>>0);
          if (!($cmp)) {
            break;
          }
          var $21=$allocated;
          var $22=$allocated;
          var $add15=((($22)+($21))|0);
          $allocated=$add15;
          var $23=$potential;
          var $24=$allocated;
          var $mul16=(($24)&-1);
          var $call17=_xrealloc($23, $mul16);
          $potential=$call17;
        }
        var $25=$potential;
        var $26=$dir;
        var $call18=_strcpy($25, $26);
        var $27=$potential;
        var $28=$dir_len;
        var $add_ptr=(($27+$28)|0);
        var $29=$name;
        var $call19=_strcat($add_ptr, $29);
        var $30=$kpse_addr;
        var $31=$potential;
        var $call20=_kpathsea_readable_file($30, $31);
        var $tobool21=(($call20)|0)!=0;
        if ($tobool21) {
          var $32=$potential;
          _str_list_add($ret, $32);
          var $33=$dirs_addr;
          var $34=$elt;
          _str_llist_float($33, $34);
          var $35=$search_all_addr;
          var $tobool23=(($35)|0)!=0;
          if (!($tobool23)) {
            label = 2189;
            break L2789;
          }
          $allocated=75;
          var $38=$allocated;
          var $mul26=(($38)&-1);
          var $call27=_xmalloc($mul26);
          $potential=$call27;
        }
      }
      var $39=$i;
      var $inc=((($39)+(1))|0);
      $i=$inc;
    }
    var $40=$elt;
    var $next=(($40+8)|0);
    var $41=HEAP32[(($next)>>2)];
    $elt=$41;
  }
  if (label == 2189) {
    var $36=$agg_result;
    var $37=$ret;
    assert(8 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 2195) {
    var $42=$potential;
    _free($42);
    var $43=$agg_result;
    var $44=$ret;
    assert(8 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];
    STACKTOP = __stackBase__;
    return;
  }
}
_dir_list_search_list["X"]=1;

function _log_search($kpse, $filenames_0, $filenames_1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $filenames=__stackBase__;
  var $log_name;
  var $e;
  var $filename;
  $kpse_addr=$kpse;
  var $length=(($filenames)|0);
  HEAP32[(($length)>>2)]=$filenames_0;
  var $list=(($filenames+4)|0);
  HEAP32[(($list)>>2)]=$filenames_1;
  var $0=$kpse_addr;
  var $log_opened=(($0+100)|0);
  var $1=HEAP32[(($log_opened)>>2)];
  var $cmp=(($1)|0)==0;
  if ($cmp) {
    var $2=$kpse_addr;
    var $call=_kpathsea_var_value($2, ((5255796)|0));
    $log_name=$call;
    var $3=$kpse_addr;
    var $log_opened1=(($3+100)|0);
    HEAP32[(($log_opened1)>>2)]=1;
    var $4=$log_name;
    var $tobool=(($4)|0)!=0;
    if ($tobool) {
      var $5=$log_name;
      var $call3=_kpse_fopen_trace($5, ((5255204)|0));
      var $6=$kpse_addr;
      var $log_file=(($6+96)|0);
      HEAP32[(($log_file)>>2)]=$call3;
      var $7=$kpse_addr;
      var $log_file4=(($7+96)|0);
      var $8=HEAP32[(($log_file4)>>2)];
      var $tobool5=(($8)|0)!=0;
      if (!($tobool5)) {
        var $9=$log_name;
        _perror($9);
      }
      var $10=$log_name;
      _free($10);
    }
  }
  var $11=$kpse_addr;
  var $debug=(($11+44)|0);
  var $12=HEAP32[(($debug)>>2)];
  var $and=$12 & 32;
  var $tobool9=(($and)|0)!=0;
  do {
    if (!($tobool9)) {
      var $13=$kpse_addr;
      var $log_file10=(($13+96)|0);
      var $14=HEAP32[(($log_file10)>>2)];
      var $tobool11=(($14)|0)!=0;
      if ($tobool11) {
        break;
      }
      STACKTOP = __stackBase__;
      return;
    }
  } while(0);
  $e=0;
  while(1) {
    var $15=$e;
    var $length13=(($filenames)|0);
    var $16=HEAP32[(($length13)>>2)];
    var $cmp14=(($15)>>>0) < (($16)>>>0);
    if ($cmp14) {
      var $17=$e;
      var $list15=(($filenames+4)|0);
      var $18=HEAP32[(($list15)>>2)];
      var $arrayidx=(($18+($17<<2))|0);
      var $19=HEAP32[(($arrayidx)>>2)];
      var $tobool16=(($19)|0)!=0;
      var $20 = $tobool16;
    } else {
      var $20 = 0;
    }
    var $20;
    if (!($20)) {
      break;
    }
    var $21=$e;
    var $list17=(($filenames+4)|0);
    var $22=HEAP32[(($list17)>>2)];
    var $arrayidx18=(($22+($21<<2))|0);
    var $23=HEAP32[(($arrayidx18)>>2)];
    $filename=$23;
    var $24=$kpse_addr;
    var $log_file19=(($24+96)|0);
    var $25=HEAP32[(($log_file19)>>2)];
    var $tobool20=(($25)|0)!=0;
    do {
      if ($tobool20) {
        var $26=$kpse_addr;
        var $27=$filename;
        var $call21=_kpathsea_absolute_p($26, $27, 0);
        var $tobool22=(($call21)|0)!=0;
        if (!($tobool22)) {
          break;
        }
        var $28=$kpse_addr;
        var $log_file24=(($28+96)|0);
        var $29=HEAP32[(($log_file24)>>2)];
        var $call25=_time(0);
        var $30=$filename;
        var $call26=_fprintf($29, ((5254436)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$call25,HEAP32[(((tempInt)+(4))>>2)]=$30,tempInt));
      }
    } while(0);
    var $31=$kpse_addr;
    var $debug28=(($31+44)|0);
    var $32=HEAP32[(($debug28)>>2)];
    var $and29=$32 & 32;
    var $tobool30=(($and29)|0)!=0;
    if ($tobool30) {
      var $33=HEAP32[((_stderr)>>2)];
      var $call32=_fputc(32, $33);
      var $34=$filename;
      var $35=HEAP32[((_stderr)>>2)];
      var $call33=_fputs($34, $35);
    }
    var $36=$e;
    var $inc=((($36)+(1))|0);
    $e=$inc;
  }
  STACKTOP = __stackBase__;
  return;
}
_log_search["X"]=1;

function _absolute_search($agg_result, $kpse, $name) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $name_addr;
  var $ret_list=__stackBase__;
  var $found;
  var $tmp=(__stackBase__)+(8);
  $kpse_addr=$kpse;
  $name_addr=$name;
  var $0=$kpse_addr;
  var $1=$name_addr;
  var $call=_kpathsea_readable_file($0, $1);
  $found=$call;
  _str_list_init($tmp);
  var $2=$ret_list;
  var $3=$tmp;
  assert(8 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];
  var $4=$name_addr;
  var $5=$found;
  var $cmp=(($4)|0)!=(($5)|0);
  if ($cmp) {
    var $6=$name_addr;
    _free($6);
  }
  var $7=$found;
  _str_list_add($ret_list, $7);
  var $8=$agg_result;
  var $9=$ret_list;
  assert(8 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];
  STACKTOP = __stackBase__;
  return;
}


function _path_search($agg_result, $kpse, $path, $name, $must_exist, $all) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $path_addr;
  var $name_addr;
  var $must_exist_addr;
  var $all_addr;
  var $elt;
  var $ret_list=__stackBase__;
  var $done;
  var $tmp=(__stackBase__)+(8);
  var $found;
  var $allow_disk_search;
  var $dirs;
  var $tmp29=(__stackBase__)+(16);
  $kpse_addr=$kpse;
  $path_addr=$path;
  $name_addr=$name;
  $must_exist_addr=$must_exist;
  $all_addr=$all;
  $done=0;
  _str_list_init($tmp);
  var $0=$ret_list;
  var $1=$tmp;
  assert(8 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];
  var $2=$kpse_addr;
  var $3=$path_addr;
  var $call=_kpathsea_path_element($2, $3);
  $elt=$call;
  while(1) {
    var $4=$done;
    var $tobool=(($4)|0)!=0;
    if ($tobool) {
      var $6 = 0;
    } else {
      var $5=$elt;
      var $tobool1=(($5)|0)!=0;
      var $6 = $tobool1;
    }
    var $6;
    if (!($6)) {
      break;
    }
    $allow_disk_search=1;
    var $7=$elt;
    var $8=HEAP8[($7)];
    var $conv=(($8 << 24) >> 24);
    var $cmp=(($conv)|0)==33;
    do {
      if ($cmp) {
        var $9=$elt;
        var $add_ptr=(($9+1)|0);
        var $10=HEAP8[($add_ptr)];
        var $conv5=(($10 << 24) >> 24);
        var $cmp6=(($conv5)|0)==33;
        if (!($cmp6)) {
          break;
        }
        $allow_disk_search=0;
        var $11=$elt;
        var $add_ptr8=(($11+2)|0);
        $elt=$add_ptr8;
      }
    } while(0);
    var $12=$kpse_addr;
    var $13=$elt;
    var $call9=_kpathsea_normalize_path($12, $13);
    var $14=$kpse_addr;
    var $followup_search=(($14+92)|0);
    var $15=HEAP32[(($followup_search)>>2)];
    var $tobool10=(($15)|0)!=0;
    if ($tobool10) {
      var $16=$kpse_addr;
      var $17=$name_addr;
      var $18=$elt;
      var $19=$all_addr;
      var $call11=_kpathsea_db_search($16, $17, $18, $19);
      var $cond = $call11;
    } else {
      var $cond = 0;
    }
    var $cond;
    $found=$cond;
    var $20=$allow_disk_search;
    var $tobool12=(($20)|0)!=0;
    do {
      if ($tobool12) {
        var $21=$found;
        var $tobool14=(($21)|0)!=0;
        if ($tobool14) {
          var $22=$must_exist_addr;
          var $tobool15=(($22)|0)!=0;
          if (!($tobool15)) {
            break;
          }
          var $23=$found;
          var $list=(($23+4)|0);
          var $24=HEAP32[(($list)>>2)];
          var $tobool17=(($24)|0)!=0;
          if ($tobool17) {
            break;
          }
        }
        var $25=$kpse_addr;
        var $26=$elt;
        var $call20=_kpathsea_element_dirs($25, $26);
        $dirs=$call20;
        var $27=$dirs;
        var $tobool21=(($27)|0)!=0;
        do {
          if ($tobool21) {
            var $28=$dirs;
            var $29=HEAP32[(($28)>>2)];
            var $tobool23=(($29)|0)!=0;
            if (!($tobool23)) {
              break;
            }
            var $30=$found;
            var $tobool25=(($30)|0)!=0;
            if (!($tobool25)) {
              var $call27=_xmalloc(8);
              var $31=$call27;
              $found=$31;
            }
            var $32=$found;
            var $33=$kpse_addr;
            var $34=$dirs;
            var $35=$name_addr;
            var $36=$all_addr;
            _dir_list_search($tmp29, $33, $34, $35, $36);
            var $37=$32;
            var $38=$tmp29;
            assert(8 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];
          }
        } while(0);
      }
    } while(0);
    var $39=$found;
    var $tobool32=(($39)|0)!=0;
    do {
      if ($tobool32) {
        var $40=$found;
        var $list34=(($40+4)|0);
        var $41=HEAP32[(($list34)>>2)];
        var $tobool35=(($41)|0)!=0;
        if (!($tobool35)) {
          break;
        }
        var $42=$all_addr;
        var $tobool37=(($42)|0)!=0;
        if ($tobool37) {
          var $43=$found;
          var $length=(($43)|0);
          var $44=HEAP32[(($length)>>2)];
          var $list39=(($43+4)|0);
          var $45=HEAP32[(($list39)>>2)];
          _str_list_concat($ret_list, $44, $45);
        } else {
          var $46=$found;
          var $list40=(($46+4)|0);
          var $47=HEAP32[(($list40)>>2)];
          var $arrayidx=(($47)|0);
          var $48=HEAP32[(($arrayidx)>>2)];
          _str_list_add($ret_list, $48);
          $done=1;
        }
      }
    } while(0);
    var $49=$found;
    var $tobool43=(($49)|0)!=0;
    if ($tobool43) {
      var $50=$found;
      _str_list_free($50);
      var $51=$found;
      var $52=$51;
      _free($52);
    }
    var $53=$kpse_addr;
    var $call46=_kpathsea_path_element($53, 0);
    $elt=$call46;
  }
  var $54=$name_addr;
  _free($54);
  var $55=$agg_result;
  var $56=$ret_list;
  assert(8 % 1 === 0);HEAP32[(($55)>>2)]=HEAP32[(($56)>>2)];HEAP32[((($55)+(4))>>2)]=HEAP32[((($56)+(4))>>2)];
  STACKTOP = __stackBase__;
  return;
}
_path_search["X"]=1;

function _dir_list_search($agg_result, $kpse, $dirs, $name, $search_all) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $dirs_addr;
  var $name_addr;
  var $search_all_addr;
  var $elt;
  var $ret=__stackBase__;
  var $name_len;
  var $allocated;
  var $potential;
  var $tmp=(__stackBase__)+(8);
  var $dir;
  var $dir_len;
  $kpse_addr=$kpse;
  $dirs_addr=$dirs;
  $name_addr=$name;
  $search_all_addr=$search_all;
  var $0=$name_addr;
  var $call=_strlen($0);
  $name_len=$call;
  $allocated=75;
  var $1=$allocated;
  var $call1=_xmalloc($1);
  $potential=$call1;
  _str_list_init($tmp);
  var $2=$ret;
  var $3=$tmp;
  assert(8 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];
  var $4=$dirs_addr;
  var $5=HEAP32[(($4)>>2)];
  $elt=$5;
  while(1) {
    var $6=$elt;
    var $tobool=(($6)|0)!=0;
    if (!($tobool)) {
      label = 2267;
      break;
    }
    var $7=$elt;
    var $str=(($7)|0);
    var $8=HEAP32[(($str)>>2)];
    $dir=$8;
    var $9=$dir;
    var $call4=_strlen($9);
    $dir_len=$call4;
    while(1) {
      var $10=$dir_len;
      var $11=$name_len;
      var $add=((($10)+($11))|0);
      var $add5=((($add)+(1))|0);
      var $12=$allocated;
      var $cmp=(($add5)>>>0) > (($12)>>>0);
      if (!($cmp)) {
        break;
      }
      var $13=$allocated;
      var $14=$allocated;
      var $add6=((($14)+($13))|0);
      $allocated=$add6;
      var $15=$potential;
      var $16=$allocated;
      var $mul=(($16)&-1);
      var $call7=_xrealloc($15, $mul);
      $potential=$call7;
    }
    var $17=$potential;
    var $18=$dir;
    var $call8=_strcpy($17, $18);
    var $19=$potential;
    var $20=$name_addr;
    var $call9=_strcat($19, $20);
    var $21=$kpse_addr;
    var $22=$potential;
    var $call10=_kpathsea_readable_file($21, $22);
    var $tobool11=(($call10)|0)!=0;
    if ($tobool11) {
      var $23=$potential;
      _str_list_add($ret, $23);
      var $24=$dirs_addr;
      var $25=$elt;
      _str_llist_float($24, $25);
      var $26=$search_all_addr;
      var $tobool12=(($26)|0)!=0;
      if (!($tobool12)) {
        label = 2263;
        break;
      }
      $allocated=75;
      var $29=$allocated;
      var $call14=_xmalloc($29);
      $potential=$call14;
    }
    var $30=$elt;
    var $next=(($30+8)|0);
    var $31=HEAP32[(($next)>>2)];
    $elt=$31;
  }
  if (label == 2267) {
    var $32=$potential;
    _free($32);
    var $33=$agg_result;
    var $34=$ret;
    assert(8 % 1 === 0);HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];
    STACKTOP = __stackBase__;
    return;
  }
  else if (label == 2263) {
    var $27=$agg_result;
    var $28=$ret;
    assert(8 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];
    STACKTOP = __stackBase__;
    return;
  }
}
_dir_list_search["X"]=1;

function _kpathsea_readable_file($kpse, $name) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $name_addr;
  var $ret;
  var $st=__stackBase__;
  $kpse_addr=$kpse;
  $name_addr=$name;
  var $0=$kpse_addr;
  var $1=$name_addr;
  var $call=_kpathsea_normalize_path($0, $1);
  var $2=$name_addr;
  var $call1=_access($2, 4);
  var $cmp=(($call1)|0)==0;
  do {
    if ($cmp) {
      var $3=$name_addr;
      var $call2=_stat($3, $st);
      var $cmp3=(($call2)|0)==0;
      if (!($cmp3)) {
        break;
      }
      var $st_mode=(($st+8)|0);
      var $4=HEAP32[(($st_mode)>>2)];
      var $and=$4 & 61440;
      var $cmp5=(($and)|0)==16384;
      if ($cmp5) {
        break;
      }
      var $5=$name_addr;
      $ret=$5;
      var $18=$ret;
      STACKTOP = __stackBase__;
      return $18;
    }
  } while(0);
  var $call6=___errno_location();
  var $6=HEAP32[(($call6)>>2)];
  var $cmp7=(($6)|0)==91;
  if ($cmp7) {
    var $7=$kpse_addr;
    var $8=$name_addr;
    var $call9=_kpathsea_truncate_filename($7, $8);
    $ret=$call9;
    var $9=$ret;
    var $call10=_access($9, 4);
    var $cmp11=(($call10)|0)==0;
    do {
      if ($cmp11) {
        var $10=$ret;
        var $call13=_stat($10, $st);
        var $cmp14=(($call13)|0)==0;
        if (!($cmp14)) {
          label = 2279;
          break;
        }
        var $st_mode16=(($st+8)|0);
        var $11=HEAP32[(($st_mode16)>>2)];
        var $and17=$11 & 61440;
        var $cmp18=(($and17)|0)==16384;
        if ($cmp18) {
          label = 2279;
          break;
        } else {
          break;
        }
      } else {
        label = 2279;
      }
    } while(0);
    if (label == 2279) {
      var $12=$ret;
      var $13=$name_addr;
      var $cmp20=(($12)|0)!=(($13)|0);
      if ($cmp20) {
        var $14=$ret;
        _free($14);
      }
      $ret=0;
    }
  } else {
    var $call24=___errno_location();
    var $15=HEAP32[(($call24)>>2)];
    var $cmp25=(($15)|0)==13;
    if ($cmp25) {
      var $16=$kpse_addr;
      var $call27=_kpathsea_tex_hush($16, ((5253136)|0));
      var $tobool=(($call27)|0)!=0;
      if (!($tobool)) {
        var $17=$name_addr;
        _perror($17);
      }
    }
    $ret=0;
  }
  var $18=$ret;
  STACKTOP = __stackBase__;
  return $18;
}
_kpathsea_readable_file["X"]=1;

function _str_list_init($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $ret=__stackBase__;
  var $length=(($ret)|0);
  HEAP32[(($length)>>2)]=0;
  var $list=(($ret+4)|0);
  HEAP32[(($list)>>2)]=0;
  var $0=$agg_result;
  var $1=$ret;
  assert(8 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];
  STACKTOP = __stackBase__;
  return;
}


function _str_list_add($l, $s) {
  var label = 0;

  var $l_addr;
  var $s_addr;
  $l_addr=$l;
  $s_addr=$s;
  var $0=$l_addr;
  var $length=(($0)|0);
  var $1=HEAP32[(($length)>>2)];
  var $inc=((($1)+(1))|0);
  HEAP32[(($length)>>2)]=$inc;
  var $2=$l_addr;
  var $list=(($2+4)|0);
  var $3=HEAP32[(($list)>>2)];
  var $4=$3;
  var $5=$l_addr;
  var $length1=(($5)|0);
  var $6=HEAP32[(($length1)>>2)];
  var $mul=((($6<<2))&-1);
  var $call=_xrealloc($4, $mul);
  var $7=$call;
  var $8=$l_addr;
  var $list2=(($8+4)|0);
  HEAP32[(($list2)>>2)]=$7;
  var $9=$s_addr;
  var $10=$l_addr;
  var $length3=(($10)|0);
  var $11=HEAP32[(($length3)>>2)];
  var $sub=((($11)-(1))|0);
  var $12=$l_addr;
  var $list4=(($12+4)|0);
  var $13=HEAP32[(($list4)>>2)];
  var $arrayidx=(($13+($sub<<2))|0);
  HEAP32[(($arrayidx)>>2)]=$9;

  return;
}


function _str_list_concat($target, $more_0, $more_1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $target_addr;
  var $more=__stackBase__;
  var $e;
  var $prev_len;
  $target_addr=$target;
  var $length=(($more)|0);
  HEAP32[(($length)>>2)]=$more_0;
  var $list=(($more+4)|0);
  HEAP32[(($list)>>2)]=$more_1;
  var $0=$target_addr;
  var $length1=(($0)|0);
  var $1=HEAP32[(($length1)>>2)];
  $prev_len=$1;
  var $length2=(($more)|0);
  var $2=HEAP32[(($length2)>>2)];
  var $3=$target_addr;
  var $length3=(($3)|0);
  var $4=HEAP32[(($length3)>>2)];
  var $add=((($4)+($2))|0);
  HEAP32[(($length3)>>2)]=$add;
  var $5=$target_addr;
  var $list4=(($5+4)|0);
  var $6=HEAP32[(($list4)>>2)];
  var $7=$6;
  var $8=$target_addr;
  var $length5=(($8)|0);
  var $9=HEAP32[(($length5)>>2)];
  var $mul=((($9<<2))&-1);
  var $call=_xrealloc($7, $mul);
  var $10=$call;
  var $11=$target_addr;
  var $list6=(($11+4)|0);
  HEAP32[(($list6)>>2)]=$10;
  $e=0;
  while(1) {
    var $12=$e;
    var $length7=(($more)|0);
    var $13=HEAP32[(($length7)>>2)];
    var $cmp=(($12)>>>0) < (($13)>>>0);
    if (!($cmp)) {
      break;
    }
    var $14=$e;
    var $list8=(($more+4)|0);
    var $15=HEAP32[(($list8)>>2)];
    var $arrayidx=(($15+($14<<2))|0);
    var $16=HEAP32[(($arrayidx)>>2)];
    var $17=$prev_len;
    var $18=$e;
    var $add9=((($17)+($18))|0);
    var $19=$target_addr;
    var $list10=(($19+4)|0);
    var $20=HEAP32[(($list10)>>2)];
    var $arrayidx11=(($20+($add9<<2))|0);
    HEAP32[(($arrayidx11)>>2)]=$16;
    var $21=$e;
    var $inc=((($21)+(1))|0);
    $e=$inc;
  }
  STACKTOP = __stackBase__;
  return;
}
_str_list_concat["X"]=1;

function _str_list_concat_elements($target, $more_0, $more_1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $target_addr;
  var $more=__stackBase__;
  var $i;
  var $new_len;
  var $new_list;
  var $i16;
  var $j;
  $target_addr=$target;
  var $length=(($more)|0);
  HEAP32[(($length)>>2)]=$more_0;
  var $list=(($more+4)|0);
  HEAP32[(($list)>>2)]=$more_1;
  var $length1=(($more)|0);
  var $0=HEAP32[(($length1)>>2)];
  var $cmp=(($0)|0)==0;
  if ($cmp) {
    STACKTOP = __stackBase__;
    return;
  }
  var $1=$target_addr;
  var $length2=(($1)|0);
  var $2=HEAP32[(($length2)>>2)];
  var $cmp3=(($2)|0)==0;
  if ($cmp3) {
    var $length5=(($more)|0);
    var $3=HEAP32[(($length5)>>2)];
    var $4=$target_addr;
    var $length6=(($4)|0);
    HEAP32[(($length6)>>2)]=$3;
    var $length7=(($more)|0);
    var $5=HEAP32[(($length7)>>2)];
    var $mul=((($5<<2))&-1);
    var $call=_xmalloc($mul);
    var $6=$call;
    var $7=$target_addr;
    var $list8=(($7+4)|0);
    HEAP32[(($list8)>>2)]=$6;
    $i=0;
    while(1) {
      var $8=$i;
      var $length9=(($more)|0);
      var $9=HEAP32[(($length9)>>2)];
      var $cmp10=(($8)|0)!=(($9)|0);
      if (!($cmp10)) {
        break;
      }
      var $10=$i;
      var $list11=(($more+4)|0);
      var $11=HEAP32[(($list11)>>2)];
      var $arrayidx=(($11+($10<<2))|0);
      var $12=HEAP32[(($arrayidx)>>2)];
      var $call12=_xstrdup($12);
      var $13=$i;
      var $14=$target_addr;
      var $list13=(($14+4)|0);
      var $15=HEAP32[(($list13)>>2)];
      var $arrayidx14=(($15+($13<<2))|0);
      HEAP32[(($arrayidx14)>>2)]=$call12;
      var $16=$i;
      var $inc=((($16)+(1))|0);
      $i=$inc;
    }
    STACKTOP = __stackBase__;
    return;
  }
  var $17=$target_addr;
  var $length17=(($17)|0);
  var $18=HEAP32[(($length17)>>2)];
  var $length18=(($more)|0);
  var $19=HEAP32[(($length18)>>2)];
  var $mul19=((($18)*($19))&-1);
  var $mul20=((($mul19<<2))&-1);
  var $call21=_xmalloc($mul20);
  var $20=$call21;
  $new_list=$20;
  $new_len=0;
  $j=0;
  while(1) {
    var $21=$j;
    var $length23=(($more)|0);
    var $22=HEAP32[(($length23)>>2)];
    var $cmp24=(($21)|0)!=(($22)|0);
    if (!($cmp24)) {
      break;
    }
    $i16=0;
    while(1) {
      var $23=$i16;
      var $24=$target_addr;
      var $length27=(($24)|0);
      var $25=HEAP32[(($length27)>>2)];
      var $cmp28=(($23)|0)!=(($25)|0);
      if (!($cmp28)) {
        break;
      }
      var $26=$i16;
      var $27=$target_addr;
      var $list30=(($27+4)|0);
      var $28=HEAP32[(($list30)>>2)];
      var $arrayidx31=(($28+($26<<2))|0);
      var $29=HEAP32[(($arrayidx31)>>2)];
      var $30=$j;
      var $list32=(($more+4)|0);
      var $31=HEAP32[(($list32)>>2)];
      var $arrayidx33=(($31+($30<<2))|0);
      var $32=HEAP32[(($arrayidx33)>>2)];
      var $call34=_concat($29, $32);
      var $33=$new_len;
      var $34=$new_list;
      var $arrayidx35=(($34+($33<<2))|0);
      HEAP32[(($arrayidx35)>>2)]=$call34;
      var $35=$new_len;
      var $inc36=((($35)+(1))|0);
      $new_len=$inc36;
      var $36=$i16;
      var $inc38=((($36)+(1))|0);
      $i16=$inc38;
    }
    var $37=$j;
    var $inc41=((($37)+(1))|0);
    $j=$inc41;
  }
  $i16=0;
  while(1) {
    var $38=$i16;
    var $39=$target_addr;
    var $length44=(($39)|0);
    var $40=HEAP32[(($length44)>>2)];
    var $cmp45=(($38)|0)!=(($40)|0);
    if (!($cmp45)) {
      break;
    }
    var $41=$i16;
    var $42=$target_addr;
    var $list47=(($42+4)|0);
    var $43=HEAP32[(($list47)>>2)];
    var $arrayidx48=(($43+($41<<2))|0);
    var $44=HEAP32[(($arrayidx48)>>2)];
    _free($44);
    var $45=$i16;
    var $inc50=((($45)+(1))|0);
    $i16=$inc50;
  }
  var $46=$target_addr;
  var $list52=(($46+4)|0);
  var $47=HEAP32[(($list52)>>2)];
  var $48=$47;
  _free($48);
  var $49=$new_len;
  var $50=$target_addr;
  var $length53=(($50)|0);
  HEAP32[(($length53)>>2)]=$49;
  var $51=$new_list;
  var $52=$target_addr;
  var $list54=(($52+4)|0);
  HEAP32[(($list54)>>2)]=$51;
  STACKTOP = __stackBase__;
  return;
}
_str_list_concat_elements["X"]=1;

function _str_list_free($l) {
  var label = 0;

  var $l_addr;
  $l_addr=$l;
  var $0=$l_addr;
  var $list=(($0+4)|0);
  var $1=HEAP32[(($list)>>2)];
  var $tobool=(($1)|0)!=0;
  if (!($tobool)) {

    return;
  }
  var $2=$l_addr;
  var $list1=(($2+4)|0);
  var $3=HEAP32[(($list1)>>2)];
  var $4=$3;
  _free($4);
  var $5=$l_addr;
  var $list2=(($5+4)|0);
  HEAP32[(($list2)>>2)]=0;

  return;
}


function _str_list_uniqify($l) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $l_addr;
  var $e;
  var $ret=__stackBase__;
  var $elt1;
  var $f;
  var $elt2;
  $l_addr=$l;
  _str_list_init($ret);
  $e=0;
  while(1) {
    var $0=$e;
    var $1=$l_addr;
    var $length=(($1)|0);
    var $2=HEAP32[(($length)>>2)];
    var $cmp=(($0)>>>0) < (($2)>>>0);
    if (!($cmp)) {
      break;
    }
    var $3=$e;
    var $4=$l_addr;
    var $list=(($4+4)|0);
    var $5=HEAP32[(($list)>>2)];
    var $arrayidx=(($5+($3<<2))|0);
    var $6=HEAP32[(($arrayidx)>>2)];
    $elt1=$6;
    var $7=$e;
    var $add=((($7)+(1))|0);
    $f=$add;
    L2983: while(1) {
      var $8=$f;
      var $9=$l_addr;
      var $length2=(($9)|0);
      var $10=HEAP32[(($length2)>>2)];
      var $cmp3=(($8)>>>0) < (($10)>>>0);
      if (!($cmp3)) {
        break;
      }
      var $11=$f;
      var $12=$l_addr;
      var $list5=(($12+4)|0);
      var $13=HEAP32[(($list5)>>2)];
      var $arrayidx6=(($13+($11<<2))|0);
      var $14=HEAP32[(($arrayidx6)>>2)];
      $elt2=$14;
      var $15=$elt1;
      var $cmp7=(($15)|0)!=0;
      do {
        if ($cmp7) {
          var $16=$elt2;
          var $cmp8=(($16)|0)!=0;
          if (!($cmp8)) {
            break;
          }
          var $17=$elt1;
          var $18=$elt2;
          var $call=_strcmp($17, $18);
          var $cmp10=(($call)|0)==0;
          if ($cmp10) {
            label = 2337;
            break L2983;
          }
        }
      } while(0);
      var $19=$f;
      var $inc=((($19)+(1))|0);
      $f=$inc;
    }
    if (label == 2337) {
      label = 0;
    }
    var $20=$f;
    var $21=$l_addr;
    var $length11=(($21)|0);
    var $22=HEAP32[(($length11)>>2)];
    var $cmp12=(($20)|0)==(($22)|0);
    if ($cmp12) {
      var $23=$elt1;
      _str_list_add($ret, $23);
    } else {
      var $24=$elt1;
      _free($24);
    }
    var $25=$e;
    var $inc16=((($25)+(1))|0);
    $e=$inc16;
  }
  var $26=$l_addr;
  var $27=$26;
  var $28=$ret;
  assert(8 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];
  STACKTOP = __stackBase__;
  return;
}
_str_list_uniqify["X"]=1;

function _str_llist_float($l, $mover) {
  var label = 0;

  var $l_addr;
  var $mover_addr;
  var $last_moved;
  var $unmoved;
  var $before_mover;
  var $after_mover;
  $l_addr=$l;
  $mover_addr=$mover;
  var $0=$mover_addr;
  var $moved=(($0+4)|0);
  var $1=HEAP32[(($moved)>>2)];
  var $tobool=(($1)|0)!=0;
  if ($tobool) {

    return;
  }
  $last_moved=0;
  var $2=$l_addr;
  var $3=HEAP32[(($2)>>2)];
  $unmoved=$3;
  while(1) {
    var $4=$unmoved;
    var $moved1=(($4+4)|0);
    var $5=HEAP32[(($moved1)>>2)];
    var $tobool2=(($5)|0)!=0;
    if (!($tobool2)) {
      break;
    }
    var $6=$unmoved;
    $last_moved=$6;
    var $7=$unmoved;
    var $next=(($7+8)|0);
    var $8=HEAP32[(($next)>>2)];
    $unmoved=$8;
  }
  var $9=$unmoved;
  var $10=$mover_addr;
  var $cmp=(($9)|0)!=(($10)|0);
  if ($cmp) {
    var $11=$mover_addr;
    var $next4=(($11+8)|0);
    var $12=HEAP32[(($next4)>>2)];
    $after_mover=$12;
    var $13=$unmoved;
    $before_mover=$13;
    while(1) {
      var $14=$before_mover;
      var $next6=(($14+8)|0);
      var $15=HEAP32[(($next6)>>2)];
      var $16=$mover_addr;
      var $cmp7=(($15)|0)!=(($16)|0);
      if (!($cmp7)) {
        break;
      }
      var $17=$before_mover;
      var $next10=(($17+8)|0);
      var $18=HEAP32[(($next10)>>2)];
      $before_mover=$18;
    }
    var $19=$after_mover;
    var $20=$before_mover;
    var $next12=(($20+8)|0);
    HEAP32[(($next12)>>2)]=$19;
    var $21=$unmoved;
    var $22=$mover_addr;
    var $next13=(($22+8)|0);
    HEAP32[(($next13)>>2)]=$21;
    var $23=$last_moved;
    var $tobool14=(($23)|0)!=0;
    if ($tobool14) {
      var $26=$mover_addr;
      var $27=$last_moved;
      var $next16=(($27+8)|0);
      HEAP32[(($next16)>>2)]=$26;
    } else {
      var $24=$mover_addr;
      var $25=$l_addr;
      HEAP32[(($25)>>2)]=$24;
    }
  }
  var $28=$mover_addr;
  var $moved19=(($28+4)|0);
  HEAP32[(($moved19)>>2)]=1;

  return;
}
_str_llist_float["X"]=1;

function _str_llist_add($l, $str) {
  var label = 0;

  var $l_addr;
  var $str_addr;
  var $e;
  var $new_elt;
  $l_addr=$l;
  $str_addr=$str;
  var $call=_xmalloc(12);
  var $0=$call;
  $new_elt=$0;
  var $1=$str_addr;
  var $2=$new_elt;
  var $str1=(($2)|0);
  HEAP32[(($str1)>>2)]=$1;
  var $3=$new_elt;
  var $moved=(($3+4)|0);
  HEAP32[(($moved)>>2)]=0;
  var $4=$new_elt;
  var $next=(($4+8)|0);
  HEAP32[(($next)>>2)]=0;
  var $5=$l_addr;
  var $6=HEAP32[(($5)>>2)];
  $e=$6;
  while(1) {
    var $7=$e;
    var $tobool=(($7)|0)!=0;
    if ($tobool) {
      var $8=$e;
      var $next2=(($8+8)|0);
      var $9=HEAP32[(($next2)>>2)];
      var $tobool3=(($9)|0)!=0;
      var $10 = $tobool3;
    } else {
      var $10 = 0;
    }
    var $10;
    if (!($10)) {
      break;
    }
    var $11=$e;
    var $next4=(($11+8)|0);
    var $12=HEAP32[(($next4)>>2)];
    $e=$12;
  }
  var $13=$e;
  var $tobool5=(($13)|0)!=0;
  if ($tobool5) {
    var $16=$new_elt;
    var $17=$e;
    var $next6=(($17+8)|0);
    HEAP32[(($next6)>>2)]=$16;

    return;
  } else {
    var $14=$new_elt;
    var $15=$l_addr;
    HEAP32[(($15)>>2)]=$14;

    return;
  }
}
_str_llist_add["X"]=1;

function _kpathsea_tex_hush($kpse, $what) {
  var label = 0;

  var $retval;
  var $kpse_addr;
  var $what_addr;
  var $h;
  var $hush;
  $kpse_addr=$kpse;
  $what_addr=$what;
  var $0=$kpse_addr;
  var $call=_kpathsea_var_value($0, ((5253072)|0));
  $hush=$call;
  var $1=$hush;
  var $tobool=(($1)|0)!=0;
  do {
    if ($tobool) {
      var $2=$hush;
      var $cmp=(($2)|0)!=0;
      do {
        if ($cmp) {
          var $3=$hush;
          var $call1=_strcmp($3, ((5263788)|0));
          var $cmp2=(($call1)|0)==0;
          if (!($cmp2)) {
            break;
          }
          $retval=1;
          var $14=$retval;

          return $14;
        }
      } while(0);
      var $4=$hush;
      var $cmp4=(($4)|0)!=0;
      do {
        if ($cmp4) {
          var $5=$hush;
          var $call6=_strcmp($5, ((5259460)|0));
          var $cmp7=(($call6)|0)==0;
          if (!($cmp7)) {
            break;
          }
          $retval=0;
          var $14=$retval;

          return $14;
        }
      } while(0);
      var $6=$kpse_addr;
      var $7=$hush;
      var $call10=_kpathsea_path_element($6, $7);
      $h=$call10;
      L3050: while(1) {
        var $8=$h;
        var $tobool11=(($8)|0)!=0;
        if (!($tobool11)) {
          label = 2392;
          break;
        }
        var $9=$h;
        var $cmp12=(($9)|0)!=0;
        do {
          if ($cmp12) {
            var $10=$what_addr;
            var $cmp14=(($10)|0)!=0;
            if (!($cmp14)) {
              break;
            }
            var $11=$h;
            var $12=$what_addr;
            var $call16=_strcmp($11, $12);
            var $cmp17=(($call16)|0)==0;
            if ($cmp17) {
              break L3050;
            }
          }
        } while(0);
        var $13=$kpse_addr;
        var $call20=_kpathsea_path_element($13, 0);
        $h=$call20;
      }
      if (label == 2392) {
        break;
      }
      $retval=1;
      var $14=$retval;

      return $14;
    }
  } while(0);
  $retval=0;
  var $14=$retval;

  return $14;
}
_kpathsea_tex_hush["X"]=1;

function _kpathsea_tilde_expand($kpse, $name) {
  var label = 0;

  var $kpse_addr;
  var $name_addr;
  var $expansion;
  var $home;
  var $prefix;
  var $c;
  var $p;
  var $user;
  $kpse_addr=$kpse;
  $name_addr=$name;
  var $0=$kpse_addr;
  var $1=$name_addr;
  var $tobool=(($1)|0)!=0;
  if ($tobool) {
  } else {
    ___assert_func(((5253032)|0), 53, ((5268516)|0), ((5263756)|0));
  }
  var $2=$name_addr;
  var $arrayidx=(($2)|0);
  var $3=HEAP8[($arrayidx)];
  var $conv=(($3 << 24) >> 24);
  var $cmp=(($conv)|0)==33;
  do {
    if ($cmp) {
      var $4=$name_addr;
      var $arrayidx2=(($4+1)|0);
      var $5=HEAP8[($arrayidx2)];
      var $conv3=(($5 << 24) >> 24);
      var $cmp4=(($conv3)|0)==33;
      if (!($cmp4)) {
        label = 2405;
        break;
      }
      var $6=$name_addr;
      var $add_ptr=(($6+2)|0);
      $name_addr=$add_ptr;
      $prefix=((5259448)|0);
      break;
    } else {
      label = 2405;
    }
  } while(0);
  if (label == 2405) {
    $prefix=((5257412)|0);
  }
  var $7=$name_addr;
  var $8=HEAP8[($7)];
  var $conv6=(($8 << 24) >> 24);
  var $cmp7=(($conv6)|0)!=126;
  if ($cmp7) {
    var $9=$prefix;
    var $10=HEAP8[($9)];
    var $tobool10=(($10 << 24) >> 24)!=0;
    if ($tobool10) {
      var $11=$name_addr;
      var $add_ptr12=((($11)-(2))|0);
      $name_addr=$add_ptr12;
    }
    var $12=$name_addr;
    $expansion=$12;
    var $53=$expansion;

    return $53;
  }
  var $13=$name_addr;
  var $arrayidx15=(($13+1)|0);
  var $14=HEAP8[($arrayidx15)];
  var $conv16=(($14 << 24) >> 24);
  var $tobool17=(($conv16)|0)!=0;
  do {
    if ($tobool17) {
      var $15=$name_addr;
      var $arrayidx19=(($15+1)|0);
      var $16=HEAP8[($arrayidx19)];
      var $conv20=(($16 << 24) >> 24);
      var $cmp21=(($conv20)|0)==47;
      if ($cmp21) {
        label = 2421;
        break;
      }
      $c=2;
      while(1) {
        var $17=$c;
        var $18=$name_addr;
        var $arrayidx24=(($18+$17)|0);
        var $19=HEAP8[($arrayidx24)];
        var $conv25=(($19 << 24) >> 24);
        var $cmp26=(($conv25)|0)==47;
        if ($cmp26) {
          var $23 = 0;
        } else {
          var $20=$c;
          var $21=$name_addr;
          var $arrayidx28=(($21+$20)|0);
          var $22=HEAP8[($arrayidx28)];
          var $conv29=(($22 << 24) >> 24);
          var $cmp30=(($conv29)|0)!=0;
          var $23 = $cmp30;
        }
        var $23;
        if (!($23)) {
          break;
        }
        var $24=$c;
        var $inc=((($24)+(1))|0);
        $c=$inc;
      }
      var $25=$c;
      var $call=_xmalloc($25);
      $user=$call;
      var $26=$user;
      var $27=$name_addr;
      var $add_ptr32=(($27+1)|0);
      var $28=$c;
      var $sub=((($28)-(1))|0);
      var $call33=_strncpy($26, $add_ptr32, $sub);
      var $29=$c;
      var $sub34=((($29)-(1))|0);
      var $30=$user;
      var $arrayidx35=(($30+$sub34)|0);
      HEAP8[($arrayidx35)]=0;
      var $31=$user;
      var $call36=_getpwnam($31);
      $p=$call36;
      var $32=$user;
      _free($32);
      var $33=$p;
      var $tobool37=(($33)|0)!=0;
      if ($tobool37) {
        var $34=$p;
        var $pw_dir=(($34+24)|0);
        var $35=HEAP32[(($pw_dir)>>2)];
        var $cond = $35;
      } else {
        var $cond = ((5256396)|0);
      }
      var $cond;
      $home=$cond;
      break;
    } else {
      label = 2421;
    }
  } while(0);
  if (label == 2421) {
    $c=1;
    var $call42=_getenv(((5255780)|0));
    $home=$call42;
    var $36=$home;
    var $tobool43=(($36)|0)!=0;
    if (!($tobool43)) {
      $home=((5256396)|0);
    }
  }
  var $37=$home;
  var $38=HEAP8[($37)];
  var $conv47=(($38 << 24) >> 24);
  var $cmp48=(($conv47)|0)==47;
  do {
    if ($cmp48) {
      var $39=$home;
      var $arrayidx51=(($39+1)|0);
      var $40=HEAP8[($arrayidx51)];
      var $conv52=(($40 << 24) >> 24);
      var $cmp53=(($conv52)|0)==47;
      if (!($cmp53)) {
        break;
      }
      var $41=$home;
      var $incdec_ptr=(($41+1)|0);
      $home=$incdec_ptr;
    }
  } while(0);
  var $42=$c;
  var $43=$name_addr;
  var $arrayidx57=(($43+$42)|0);
  var $44=HEAP8[($arrayidx57)];
  var $tobool58=(($44 << 24) >> 24)!=0;
  if ($tobool58) {
    var $45=$home;
    var $call60=_strlen($45);
    var $sub61=((($call60)-(1))|0);
    var $46=$home;
    var $arrayidx62=(($46+$sub61)|0);
    var $47=HEAP8[($arrayidx62)];
    var $conv63=(($47 << 24) >> 24);
    var $cmp64=(($conv63)|0)==47;
    if ($cmp64) {
      var $48=$c;
      var $inc67=((($48)+(1))|0);
      $c=$inc67;
    }
  }
  var $49=$prefix;
  var $50=$home;
  var $51=$name_addr;
  var $52=$c;
  var $add_ptr70=(($51+$52)|0);
  var $call71=_concat3($49, $50, $add_ptr70);
  $expansion=$call71;
  var $53=$expansion;

  return $53;
}
_kpathsea_tilde_expand["X"]=1;

function _kpathsea_truncate_filename($kpse, $name) {
  var label = 0;

  var $kpse_addr;
  var $name_addr;
  var $c_len;
  var $ret_len;
  var $ret;
  $kpse_addr=$kpse;
  $name_addr=$name;
  $c_len=0;
  $ret_len=0;
  var $0=$name_addr;
  var $call=_strlen($0);
  var $add=((($call)+(1))|0);
  var $call1=_xmalloc($add);
  $ret=$call1;
  var $1=$kpse_addr;
  while(1) {
    var $2=$name_addr;
    var $3=HEAP8[($2)];
    var $tobool=(($3 << 24) >> 24)!=0;
    if (!($tobool)) {
      break;
    }
    var $4=$name_addr;
    var $5=HEAP8[($4)];
    var $conv=(($5 << 24) >> 24);
    var $cmp=(($conv)|0)==47;
    do {
      if ($cmp) {
        $c_len=0;
        label = 2442;
        break;
      } else {
        var $6=$c_len;
        var $cmp3=(($6)>>>0) > 255;
        if ($cmp3) {
          break;
        } else {
          label = 2442;
          break;
        }
      }
    } while(0);
    if (label == 2442) {
      label = 0;
      var $7=$name_addr;
      var $8=HEAP8[($7)];
      var $9=$ret_len;
      var $inc=((($9)+(1))|0);
      $ret_len=$inc;
      var $10=$ret;
      var $arrayidx=(($10+$9)|0);
      HEAP8[($arrayidx)]=$8;
      var $11=$c_len;
      var $inc7=((($11)+(1))|0);
      $c_len=$inc7;
    }
    var $12=$name_addr;
    var $incdec_ptr=(($12+1)|0);
    $name_addr=$incdec_ptr;
  }
  var $13=$ret_len;
  var $14=$ret;
  var $arrayidx8=(($14+$13)|0);
  HEAP8[($arrayidx8)]=0;
  var $15=$ret;

  return $15;
}
_kpathsea_truncate_filename["X"]=1;

function _kpathsea_normalize_path($kpse, $elt) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $elt_addr;
  var $ret;
  var $i;
  $kpse_addr=$kpse;
  $elt_addr=$elt;
  $ret=0;
  var $0=$ret;
  $i=$0;
  while(1) {
    var $1=$i;
    var $2=$elt_addr;
    var $arrayidx=(($2+$1)|0);
    var $3=HEAP8[($arrayidx)];
    var $conv=(($3 << 24) >> 24);
    var $cmp=(($conv)|0)==47;
    if (!($cmp)) {
      break;
    }
    var $4=$i;
    var $inc=((($4)+(1))|0);
    $i=$inc;
  }
  var $5=$i;
  var $6=$ret;
  var $add=((($6)+(1))|0);
  var $cmp2=(($5)>>>0) > (($add)>>>0);
  if (!($cmp2)) {
    var $20=$ret;
    STACKTOP = __stackBase__;
    return $20;
  }
  var $7=$kpse_addr;
  var $debug=(($7+44)|0);
  var $8=HEAP32[(($debug)>>2)];
  var $and=$8 & 1;
  var $tobool=(($and)|0)!=0;
  if ($tobool) {
    var $9=HEAP32[((_stderr)>>2)];
    var $call=_fputs(((5252980)|0), $9);
    var $10=HEAP32[((_stderr)>>2)];
    var $11=$elt_addr;
    var $12=$ret;
    var $call5=_fprintf($10, ((5263648)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$11,HEAP32[(((tempInt)+(4))>>2)]=$12,tempInt));
    var $13=HEAP32[((_stderr)>>2)];
    var $call6=_fflush($13);
  }
  var $14=$elt_addr;
  var $15=$ret;
  var $add_ptr=(($14+$15)|0);
  var $add_ptr7=(($add_ptr+1)|0);
  var $16=$elt_addr;
  var $17=$i;
  var $add_ptr8=(($16+$17)|0);
  var $18=$elt_addr;
  var $19=$i;
  var $add_ptr9=(($18+$19)|0);
  var $call10=_strlen($add_ptr9);
  var $add11=((($call10)+(1))|0);
  _memmove($add_ptr7, $add_ptr8, $add11, 1, 0);
  var $20=$ret;
  STACKTOP = __stackBase__;
  return $20;
}
_kpathsea_normalize_path["X"]=1;

function _kpathsea_element_dirs($kpse, $elt) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $retval;
  var $kpse_addr;
  var $elt_addr;
  var $ret;
  var $i;
  var $e;
  $kpse_addr=$kpse;
  $elt_addr=$elt;
  var $0=$elt_addr;
  var $tobool=(($0)|0)!=0;
  do {
    if ($tobool) {
      var $1=$elt_addr;
      var $2=HEAP8[($1)];
      var $tobool1=(($2 << 24) >> 24)!=0;
      if (!($tobool1)) {
        break;
      }
      var $3=$kpse_addr;
      var $4=$elt_addr;
      var $call=_kpathsea_normalize_path($3, $4);
      $i=$call;
      var $5=$kpse_addr;
      var $6=$elt_addr;
      var $call2=_cached($5, $6);
      $ret=$call2;
      var $7=$ret;
      var $tobool3=(($7)|0)!=0;
      if ($tobool3) {
        var $8=$ret;
        $retval=$8;
        var $36=$retval;
        STACKTOP = __stackBase__;
        return $36;
      }
      var $call6=_xmalloc(4);
      var $9=$call6;
      $ret=$9;
      var $10=$ret;
      HEAP32[(($10)>>2)]=0;
      var $11=$kpse_addr;
      var $12=$ret;
      var $13=$elt_addr;
      var $14=$i;
      _expand_elt($11, $12, $13, $14);
      var $15=$kpse_addr;
      var $16=$elt_addr;
      var $17=$ret;
      _cache($15, $16, $17);
      var $18=$kpse_addr;
      var $debug=(($18+44)|0);
      var $19=HEAP32[(($debug)>>2)];
      var $and=$19 & 16;
      var $tobool7=(($and)|0)!=0;
      if ($tobool7) {
        var $20=HEAP32[((_stderr)>>2)];
        var $call9=_fputs(((5252980)|0), $20);
        var $21=HEAP32[((_stderr)>>2)];
        var $22=$elt_addr;
        var $call10=_fprintf($21, ((5259376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$22,tempInt));
        var $23=HEAP32[((_stderr)>>2)];
        var $call11=_fflush($23);
        var $24=$ret;
        var $tobool12=(($24)|0)!=0;
        if ($tobool12) {
          var $25=$ret;
          var $26=HEAP32[(($25)>>2)];
          $e=$26;
          while(1) {
            var $27=$e;
            var $tobool14=(($27)|0)!=0;
            if (!($tobool14)) {
              break;
            }
            var $28=HEAP32[((_stderr)>>2)];
            var $29=$e;
            var $str=(($29)|0);
            var $30=HEAP32[(($str)>>2)];
            var $call15=_fprintf($28, ((5257408)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$30,tempInt));
            var $31=$e;
            var $next=(($31+8)|0);
            var $32=HEAP32[(($next)>>2)];
            $e=$32;
          }
        }
        var $33=HEAP32[((_stderr)>>2)];
        var $call17=_fputc(10, $33);
        var $34=HEAP32[((_stderr)>>2)];
        var $call18=_fflush($34);
      }
      var $35=$ret;
      $retval=$35;
      var $36=$retval;
      STACKTOP = __stackBase__;
      return $36;
    }
  } while(0);
  $retval=0;
  var $36=$retval;
  STACKTOP = __stackBase__;
  return $36;
}
_kpathsea_element_dirs["X"]=1;

function _cached($kpse, $key) {
  var label = 0;

  var $retval;
  var $kpse_addr;
  var $key_addr;
  var $p;
  $kpse_addr=$kpse;
  $key_addr=$key;
  $p=0;
  L3167: while(1) {
    var $0=$p;
    var $1=$kpse_addr;
    var $cache_length=(($1+60)|0);
    var $2=HEAP32[(($cache_length)>>2)];
    var $cmp=(($0)>>>0) < (($2)>>>0);
    if (!($cmp)) {
      label = 2486;
      break;
    }
    var $3=$p;
    var $4=$kpse_addr;
    var $the_cache=(($4+56)|0);
    var $5=HEAP32[(($the_cache)>>2)];
    var $arrayidx=(($5+($3<<3))|0);
    var $key1=(($arrayidx)|0);
    var $6=HEAP32[(($key1)>>2)];
    var $cmp2=(($6)|0)!=0;
    do {
      if ($cmp2) {
        var $7=$key_addr;
        var $cmp3=(($7)|0)!=0;
        if (!($cmp3)) {
          break;
        }
        var $8=$p;
        var $9=$kpse_addr;
        var $the_cache5=(($9+56)|0);
        var $10=HEAP32[(($the_cache5)>>2)];
        var $arrayidx6=(($10+($8<<3))|0);
        var $key7=(($arrayidx6)|0);
        var $11=HEAP32[(($key7)>>2)];
        var $12=$key_addr;
        var $call=_strcmp($11, $12);
        var $cmp8=(($call)|0)==0;
        if ($cmp8) {
          label = 2483;
          break L3167;
        }
      }
    } while(0);
    var $17=$p;
    var $inc=((($17)+(1))|0);
    $p=$inc;
  }
  if (label == 2486) {
    $retval=0;
    var $18=$retval;

    return $18;
  }
  else if (label == 2483) {
    var $13=$p;
    var $14=$kpse_addr;
    var $the_cache9=(($14+56)|0);
    var $15=HEAP32[(($the_cache9)>>2)];
    var $arrayidx10=(($15+($13<<3))|0);
    var $value=(($arrayidx10+4)|0);
    var $16=HEAP32[(($value)>>2)];
    $retval=$16;
    var $18=$retval;

    return $18;
  }
}
_cached["X"]=1;

function _expand_elt($kpse, $str_list_ptr, $elt, $start) {
  var label = 0;

  var $kpse_addr;
  var $str_list_ptr_addr;
  var $elt_addr;
  var $start_addr;
  var $dir;
  var $post;
  $kpse_addr=$kpse;
  $str_list_ptr_addr=$str_list_ptr;
  $elt_addr=$elt;
  $start_addr=$start;
  var $0=$elt_addr;
  var $1=$start_addr;
  var $add_ptr=(($0+$1)|0);
  $dir=$add_ptr;
  while(1) {
    var $2=$dir;
    var $3=HEAP8[($2)];
    var $conv=(($3 << 24) >> 24);
    var $cmp=(($conv)|0)!=0;
    if (!($cmp)) {
      label = 2501;
      break;
    }
    var $4=$dir;
    var $5=HEAP8[($4)];
    var $conv2=(($5 << 24) >> 24);
    var $cmp3=(($conv2)|0)==47;
    if ($cmp3) {
      var $6=$dir;
      var $arrayidx=(($6+1)|0);
      var $7=HEAP8[($arrayidx)];
      var $conv5=(($7 << 24) >> 24);
      var $cmp6=(($conv5)|0)==47;
      if ($cmp6) {
        break;
      }
    }
    var $18=$dir;
    var $incdec_ptr14=(($18+1)|0);
    $dir=$incdec_ptr14;
  }
  if (label == 2501) {
    var $19=$kpse_addr;
    var $20=$str_list_ptr_addr;
    var $21=$elt_addr;
    _checked_dir_list_add($19, $20, $21);

    return;
  }
  var $8=$dir;
  var $add_ptr9=(($8+1)|0);
  $post=$add_ptr9;
  while(1) {
    var $9=$post;
    var $10=HEAP8[($9)];
    var $conv10=(($10 << 24) >> 24);
    var $cmp11=(($conv10)|0)==47;
    if (!($cmp11)) {
      break;
    }
    var $11=$post;
    var $incdec_ptr=(($11+1)|0);
    $post=$incdec_ptr;
  }
  var $12=$kpse_addr;
  var $13=$str_list_ptr_addr;
  var $14=$elt_addr;
  var $15=$dir;
  var $16=$elt_addr;
  var $sub_ptr_lhs_cast=$15;
  var $sub_ptr_rhs_cast=$16;
  var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
  var $add=((($sub_ptr_sub)+(1))|0);
  var $17=$post;
  _do_subdir($12, $13, $14, $add, $17);

  return;
}
_expand_elt["X"]=1;

function _cache($kpse, $key, $value) {
  var label = 0;

  var $kpse_addr;
  var $key_addr;
  var $value_addr;
  $kpse_addr=$kpse;
  $key_addr=$key;
  $value_addr=$value;
  var $0=$kpse_addr;
  var $cache_length=(($0+60)|0);
  var $1=HEAP32[(($cache_length)>>2)];
  var $inc=((($1)+(1))|0);
  HEAP32[(($cache_length)>>2)]=$inc;
  var $2=$kpse_addr;
  var $the_cache=(($2+56)|0);
  var $3=HEAP32[(($the_cache)>>2)];
  var $4=$3;
  var $5=$kpse_addr;
  var $cache_length1=(($5+60)|0);
  var $6=HEAP32[(($cache_length1)>>2)];
  var $mul=((($6<<3))&-1);
  var $call=_xrealloc($4, $mul);
  var $7=$call;
  var $8=$kpse_addr;
  var $the_cache2=(($8+56)|0);
  HEAP32[(($the_cache2)>>2)]=$7;
  var $9=$key_addr;
  var $call3=_xstrdup($9);
  var $10=$kpse_addr;
  var $cache_length4=(($10+60)|0);
  var $11=HEAP32[(($cache_length4)>>2)];
  var $sub=((($11)-(1))|0);
  var $12=$kpse_addr;
  var $the_cache5=(($12+56)|0);
  var $13=HEAP32[(($the_cache5)>>2)];
  var $arrayidx=(($13+($sub<<3))|0);
  var $key6=(($arrayidx)|0);
  HEAP32[(($key6)>>2)]=$call3;
  var $14=$value_addr;
  var $15=$kpse_addr;
  var $cache_length7=(($15+60)|0);
  var $16=HEAP32[(($cache_length7)>>2)];
  var $sub8=((($16)-(1))|0);
  var $17=$kpse_addr;
  var $the_cache9=(($17+56)|0);
  var $18=HEAP32[(($the_cache9)>>2)];
  var $arrayidx10=(($18+($sub8<<3))|0);
  var $value11=(($arrayidx10+4)|0);
  HEAP32[(($value11)>>2)]=$14;

  return;
}


function _do_subdir($kpse, $str_list_ptr, $elt, $elt_length, $post) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $str_list_ptr_addr;
  var $elt_addr;
  var $elt_length_addr;
  var $post_addr;
  var $dir;
  var $e;
  var $name=__stackBase__;
  var $tmp=(__stackBase__)+(12);
  var $links;
  var $potential_len;
  $kpse_addr=$kpse;
  $str_list_ptr_addr=$str_list_ptr;
  $elt_addr=$elt;
  $elt_length_addr=$elt_length;
  $post_addr=$post;
  var $0=$elt_addr;
  var $1=$elt_length_addr;
  _fn_copy0($tmp, $0, $1);
  var $2=$name;
  var $3=$tmp;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  var $4=$elt_length_addr;
  var $sub=((($4)-(1))|0);
  var $5=$elt_addr;
  var $arrayidx=(($5+$sub)|0);
  var $6=HEAP8[($arrayidx)];
  var $conv=(($6 << 24) >> 24);
  var $cmp=(($conv)|0)==47;
  if ($cmp) {
  } else {
    ___assert_func(((5255740)|0), 129, ((5268644)|0), ((5255120)|0));
  }
  var $str=(($name)|0);
  var $7=HEAP32[(($str)>>2)];
  var $call=_opendir($7);
  $dir=$call;
  var $8=$dir;
  var $cmp2=(($8)|0)==0;
  if ($cmp2) {
    _fn_free($name);
    STACKTOP = __stackBase__;
    return;
  }
  var $9=$post_addr;
  var $10=HEAP8[($9)];
  var $conv4=(($10 << 24) >> 24);
  var $cmp5=(($conv4)|0)==0;
  if ($cmp5) {
    var $11=$str_list_ptr_addr;
    var $str8=(($name)|0);
    var $12=HEAP32[(($str8)>>2)];
    _dir_list_add($11, $12);
  } else {
    var $13=$post_addr;
    _fn_str_grow($name, $13);
    var $14=$kpse_addr;
    var $15=$str_list_ptr_addr;
    var $str9=(($name)|0);
    var $16=HEAP32[(($str9)>>2)];
    var $17=$elt_length_addr;
    _expand_elt($14, $15, $16, $17);
    var $18=$elt_length_addr;
    _fn_shrink_to($name, $18);
  }
  while(1) {
    var $19=$dir;
    var $call11=_readdir($19);
    $e=$call11;
    var $cmp12=(($call11)|0)!=0;
    if (!($cmp12)) {
      break;
    }
    var $20=$e;
    var $d_name=(($20+4)|0);
    var $arrayidx14=(($d_name)|0);
    var $21=HEAP8[($arrayidx14)];
    var $conv15=(($21 << 24) >> 24);
    var $cmp16=(($conv15)|0)!=46;
    if ($cmp16) {
      var $22=$e;
      var $d_name20=(($22+4)|0);
      var $arraydecay=(($d_name20)|0);
      _fn_str_grow($name, $arraydecay);
      var $23=$kpse_addr;
      var $str21=(($name)|0);
      var $24=HEAP32[(($str21)>>2)];
      var $call22=_kpathsea_dir_links($23, $24, 0);
      $links=$call22;
      var $25=$links;
      var $cmp23=(($25)|0) >= 0;
      if ($cmp23) {
        var $length=(($name+8)|0);
        var $26=HEAP32[(($length)>>2)];
        $potential_len=$26;
        _fn_str_grow($name, ((5256392)|0));
        var $27=$post_addr;
        var $28=HEAP8[($27)];
        var $conv27=(($28 << 24) >> 24);
        var $cmp28=(($conv27)|0)!=0;
        if ($cmp28) {
          var $29=$post_addr;
          _fn_str_grow($name, $29);
          var $30=$kpse_addr;
          var $31=$str_list_ptr_addr;
          var $str31=(($name)|0);
          var $32=HEAP32[(($str31)>>2)];
          var $33=$potential_len;
          _expand_elt($30, $31, $32, $33);
          var $34=$potential_len;
          _fn_shrink_to($name, $34);
        }
        var $35=$links;
        var $cmp33=(($35)|0)!=2;
        if ($cmp33) {
          var $36=$kpse_addr;
          var $37=$str_list_ptr_addr;
          var $str36=(($name)|0);
          var $38=HEAP32[(($str36)>>2)];
          var $39=$potential_len;
          var $40=$post_addr;
          _do_subdir($36, $37, $38, $39, $40);
        } else {
          var $41=$post_addr;
          var $42=HEAP8[($41)];
          var $conv38=(($42 << 24) >> 24);
          var $cmp39=(($conv38)|0)==0;
          if ($cmp39) {
            var $43=$str_list_ptr_addr;
            var $str42=(($name)|0);
            var $44=HEAP32[(($str42)>>2)];
            _dir_list_add($43, $44);
          }
        }
      }
      var $45=$elt_length_addr;
      _fn_shrink_to($name, $45);
    }
  }
  _fn_free($name);
  var $46=$dir;
  _xclosedir($46);
  STACKTOP = __stackBase__;
  return;
}
_do_subdir["X"]=1;

function _checked_dir_list_add($kpse, $l, $dir) {
  var label = 0;

  var $kpse_addr;
  var $l_addr;
  var $dir_addr;
  $kpse_addr=$kpse;
  $l_addr=$l;
  $dir_addr=$dir;
  var $0=$kpse_addr;
  var $1=$dir_addr;
  var $call=_kpathsea_dir_p($0, $1);
  var $tobool=(($call)|0)!=0;
  if (!($tobool)) {

    return;
  }
  var $2=$l_addr;
  var $3=$dir_addr;
  _dir_list_add($2, $3);

  return;
}


function _dir_list_add($l, $dir) {
  var label = 0;

  var $l_addr;
  var $dir_addr;
  var $last_char;
  var $saved_dir;
  $l_addr=$l;
  $dir_addr=$dir;
  var $0=$dir_addr;
  var $call=_strlen($0);
  var $sub=((($call)-(1))|0);
  var $1=$dir_addr;
  var $arrayidx=(($1+$sub)|0);
  var $2=HEAP8[($arrayidx)];
  $last_char=$2;
  var $3=$last_char;
  var $conv=(($3 << 24) >> 24);
  var $cmp=(($conv)|0)==47;
  if ($cmp) {
    var $4=$dir_addr;
    var $call2=_xstrdup($4);
    var $cond = $call2;
    var $cond;
    $saved_dir=$cond;
    var $6=$l_addr;
    var $7=$saved_dir;
    _str_llist_add($6, $7);

    return;
  } else {
    var $5=$dir_addr;
    var $call3=_concat($5, ((5256392)|0));
    var $cond = $call3;
    var $cond;
    $saved_dir=$cond;
    var $6=$l_addr;
    var $7=$saved_dir;
    _str_llist_add($6, $7);

    return;
  }
}


function _extend_filename($name, $default_suffix) {
  var label = 0;

  var $name_addr;
  var $default_suffix_addr;
  var $new_s;
  var $suffix;
  $name_addr=$name;
  $default_suffix_addr=$default_suffix;
  var $0=$name_addr;
  var $call=_find_suffix($0);
  $suffix=$call;
  var $1=$suffix;
  var $cmp=(($1)|0)==0;
  if ($cmp) {
    var $2=$name_addr;
    var $3=$default_suffix_addr;
    var $call1=_concat3($2, ((5252924)|0), $3);
    var $cond = $call1;
    var $cond;
    $new_s=$cond;
    var $5=$new_s;

    return $5;
  } else {
    var $4=$name_addr;
    var $cond = $4;
    var $cond;
    $new_s=$cond;
    var $5=$new_s;

    return $5;
  }
}


function _kpathsea_dir_p($kpse, $fn) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $fn_addr;
  var $stats=__stackBase__;
  $kpse_addr=$kpse;
  $fn_addr=$fn;
  var $0=$fn_addr;
  var $call=_stat($0, $stats);
  var $cmp=(($call)|0)==0;
  if ($cmp) {
    var $st_mode=(($stats+8)|0);
    var $1=HEAP32[(($st_mode)>>2)];
    var $and=$1 & 61440;
    var $cmp1=(($and)|0)==16384;
    var $2 = $cmp1;
  } else {
    var $2 = 0;
  }
  var $2;
  var $land_ext=(($2)&1);
  STACKTOP = __stackBase__;
  return $land_ext;
}


function _kpathsea_dir_links($kpse, $fn, $nlinks) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $kpse_addr;
  var $fn_addr;
  var $nlinks_addr;
  var $hash_ret;
  var $tmp=__stackBase__;
  var $stats=(__stackBase__)+(8);
  $kpse_addr=$kpse;
  $fn_addr=$fn;
  $nlinks_addr=$nlinks;
  var $0=$kpse_addr;
  var $link_table=(($0+48)|0);
  var $size=(($link_table+4)|0);
  var $1=HEAP32[(($size)>>2)];
  var $cmp=(($1)|0)==0;
  if ($cmp) {
    var $2=$kpse_addr;
    var $link_table1=(($2+48)|0);
    _hash_create($tmp, 457);
    var $3=$link_table1;
    var $4=$tmp;
    assert(8 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];
  }
  var $5=$kpse_addr;
  var $debug=(($5+44)|0);
  var $6=HEAP32[(($debug)>>2)];
  var $and=$6 & 2;
  var $tobool=(($and)|0)!=0;
  if ($tobool) {
    var $7=$kpse_addr;
    var $debug_hash_lookup_int=(($7+76)|0);
    HEAP32[(($debug_hash_lookup_int)>>2)]=1;
  }
  var $8=$kpse_addr;
  var $link_table4=(($8+48)|0);
  var $9=$fn_addr;
  var $buckets=(($link_table4)|0);
  var $10=HEAP32[(($buckets)>>2)];
  var $size5=(($link_table4+4)|0);
  var $11=HEAP32[(($size5)>>2)];
  var $call=_hash_lookup($10, $11, $9);
  $hash_ret=$call;
  var $12=$kpse_addr;
  var $debug6=(($12+44)|0);
  var $13=HEAP32[(($debug6)>>2)];
  var $and7=$13 & 2;
  var $tobool8=(($and7)|0)!=0;
  if ($tobool8) {
    var $14=$kpse_addr;
    var $debug_hash_lookup_int10=(($14+76)|0);
    HEAP32[(($debug_hash_lookup_int10)>>2)]=0;
  }
  var $15=$hash_ret;
  var $tobool12=(($15)|0)!=0;
  if ($tobool12) {
    var $16=$hash_ret;
    var $17=HEAP32[(($16)>>2)];
    var $18=$17;
    $nlinks_addr=$18;
    var $33=$nlinks_addr;
    STACKTOP = __stackBase__;
    return $33;
  }
  var $19=$fn_addr;
  var $call15=_stat($19, $stats);
  var $cmp16=(($call15)|0)==0;
  do {
    if ($cmp16) {
      var $st_mode=(($stats+8)|0);
      var $20=HEAP32[(($st_mode)>>2)];
      var $and17=$20 & 61440;
      var $cmp18=(($and17)|0)==16384;
      if (!($cmp18)) {
        label = 2563;
        break;
      }
      var $st_nlink=(($stats+12)|0);
      var $21=HEAP32[(($st_nlink)>>2)];
      $nlinks_addr=$21;
      break;
    } else {
      label = 2563;
    }
  } while(0);
  if (label == 2563) {
    $nlinks_addr=-1;
  }
  var $22=$kpse_addr;
  var $link_table22=(($22+48)|0);
  var $23=$fn_addr;
  var $call23=_xstrdup($23);
  var $24=$nlinks_addr;
  var $25=$24;
  _hash_insert($link_table22, $call23, $25);
  var $26=$kpse_addr;
  var $debug24=(($26+44)|0);
  var $27=HEAP32[(($debug24)>>2)];
  var $and25=$27 & 1;
  var $tobool26=(($and25)|0)!=0;
  if ($tobool26) {
    var $28=HEAP32[((_stderr)>>2)];
    var $call28=_fputs(((5252892)|0), $28);
    var $29=HEAP32[((_stderr)>>2)];
    var $30=$fn_addr;
    var $31=$nlinks_addr;
    var $call29=_fprintf($29, ((5267128)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$30,HEAP32[(((tempInt)+(4))>>2)]=$31,tempInt));
    var $32=HEAP32[((_stderr)>>2)];
    var $call30=_fflush($32);
  }
  var $33=$nlinks_addr;
  STACKTOP = __stackBase__;
  return $33;
}
_kpathsea_dir_links["X"]=1;

function _xclosedir($d) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  var $d_addr;
  var $ret;
  $d_addr=$d;
  var $0=$d_addr;
  var $call=_closedir($0);
  $ret=$call;
  var $1=$ret;
  var $cmp=(($1)|0)!=0;
  if (!($cmp)) {
    STACKTOP = __stackBase__;
    return;
  }
  var $2=HEAP32[((_stderr)>>2)];
  var $3=HEAP32[((5248384)>>2)];
  var $invocation_name=(($3+104)|0);
  var $4=HEAP32[(($invocation_name)>>2)];
  var $call1=_fprintf($2, ((5263612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$4,tempInt));
  var $5=HEAP32[((_stderr)>>2)];
  var $call2=_fputs(((5259332)|0), $5);
  var $6=HEAP32[((_stderr)>>2)];
  var $call3=_fputs(((5257404)|0), $6);
  _exit(1);
  throw "Reached an unreachable!"
}


function _malloc($bytes) {
  var label = 0;

  var $bytes_addr;
  var $mem;
  var $nb;
  var $idx;
  var $smallbits;
  var $b;
  var $p;
  var $F;
  var $b33;
  var $p34;
  var $r;
  var $rsize;
  var $i;
  var $leftbits;
  var $leastbit;
  var $Y;
  var $K;
  var $N;
  var $F68;
  var $DVS;
  var $DV;
  var $I;
  var $B;
  var $F102;
  var $rsize157;
  var $p159;
  var $r163;
  var $dvs;
  var $rsize185;
  var $p187;
  var $r188;
  $bytes_addr=$bytes;
  var $0=$bytes_addr;
  var $cmp=(($0)>>>0) <= 244;
  if ($cmp) {
    var $1=$bytes_addr;
    var $cmp1=(($1)>>>0) < 11;
    if ($cmp1) {
      var $cond = 16;
    } else {
      var $2=$bytes_addr;
      var $add=((($2)+(4))|0);
      var $add2=((($add)+(7))|0);
      var $and=$add2 & -8;
      var $cond = $and;
    }
    var $cond;
    $nb=$cond;
    var $3=$nb;
    var $shr=$3 >>> 3;
    $idx=$shr;
    var $4=HEAP32[((((5267972)|0))>>2)];
    var $5=$idx;
    var $shr3=$4 >>> (($5)>>>0);
    $smallbits=$shr3;
    var $6=$smallbits;
    var $and4=$6 & 3;
    var $cmp5=(($and4)|0)!=0;
    if ($cmp5) {
      var $7=$smallbits;
      var $neg=$7 ^ -1;
      var $and7=$neg & 1;
      var $8=$idx;
      var $add8=((($8)+($and7))|0);
      $idx=$add8;
      var $9=$idx;
      var $shl=$9 << 1;
      var $arrayidx=((((5268012)|0)+($shl<<2))|0);
      var $10=$arrayidx;
      var $11=$10;
      $b=$11;
      var $12=$b;
      var $fd=(($12+8)|0);
      var $13=HEAP32[(($fd)>>2)];
      $p=$13;
      var $14=$p;
      var $fd9=(($14+8)|0);
      var $15=HEAP32[(($fd9)>>2)];
      $F=$15;
      var $16=$b;
      var $17=$F;
      var $cmp10=(($16)|0)==(($17)|0);
      if ($cmp10) {
        var $18=$idx;
        var $shl12=1 << $18;
        var $neg13=$shl12 ^ -1;
        var $19=HEAP32[((((5267972)|0))>>2)];
        var $and14=$19 & $neg13;
        HEAP32[((((5267972)|0))>>2)]=$and14;
      } else {
        var $20=$F;
        var $21=$20;
        var $22=HEAP32[((((5267988)|0))>>2)];
        var $cmp15=(($21)>>>0) >= (($22)>>>0);
        var $conv=(($cmp15)&1);
        var $expval=($conv);
        var $tobool=(($expval)|0)!=0;
        if (!($tobool)) {
          _abort();
          throw "Reached an unreachable!"
        }
        var $23=$F;
        var $24=$b;
        var $fd17=(($24+8)|0);
        HEAP32[(($fd17)>>2)]=$23;
        var $25=$b;
        var $26=$F;
        var $bk=(($26+12)|0);
        HEAP32[(($bk)>>2)]=$25;
      }
      var $27=$idx;
      var $shl20=$27 << 3;
      var $or=$shl20 | 1;
      var $or21=$or | 2;
      var $28=$p;
      var $head=(($28+4)|0);
      HEAP32[(($head)>>2)]=$or21;
      var $29=$p;
      var $30=$29;
      var $31=$idx;
      var $shl22=$31 << 3;
      var $add_ptr=(($30+$shl22)|0);
      var $32=$add_ptr;
      var $head23=(($32+4)|0);
      var $33=HEAP32[(($head23)>>2)];
      var $or24=$33 | 1;
      HEAP32[(($head23)>>2)]=$or24;
      var $34=$p;
      var $35=$34;
      var $add_ptr25=(($35+8)|0);
      $mem=$add_ptr25;
      var $183=$mem;

      return $183;
    }
    var $36=$nb;
    var $37=HEAP32[((((5267980)|0))>>2)];
    var $cmp27=(($36)>>>0) > (($37)>>>0);
    do {
      if ($cmp27) {
        var $38=$smallbits;
        var $cmp30=(($38)|0)!=0;
        if (!($cmp30)) {
          var $131=HEAP32[((((5267976)|0))>>2)];
          var $cmp127=(($131)|0)!=0;
          do {
            if ($cmp127) {
              var $132=$nb;
              var $call=_tmalloc_small(5267972, $132);
              $mem=$call;
              var $cmp129=(($call)|0)!=0;
              if (!($cmp129)) {
                break;
              }
              var $183=$mem;

              return $183;
            }
          } while(0);
          break;
        }
        var $39=$smallbits;
        var $40=$idx;
        var $shl35=$39 << $40;
        var $41=$idx;
        var $shl36=1 << $41;
        var $shl37=$shl36 << 1;
        var $42=$idx;
        var $shl38=1 << $42;
        var $shl39=$shl38 << 1;
        var $sub=(((-$shl39))|0);
        var $or40=$shl37 | $sub;
        var $and41=$shl35 & $or40;
        $leftbits=$and41;
        var $43=$leftbits;
        var $44=$leftbits;
        var $sub42=(((-$44))|0);
        var $and43=$43 & $sub42;
        $leastbit=$and43;
        var $45=$leastbit;
        var $sub44=((($45)-(1))|0);
        $Y=$sub44;
        var $46=$Y;
        var $shr45=$46 >>> 12;
        var $and46=$shr45 & 16;
        $K=$and46;
        var $47=$K;
        $N=$47;
        var $48=$K;
        var $49=$Y;
        var $shr47=$49 >>> (($48)>>>0);
        $Y=$shr47;
        var $50=$Y;
        var $shr48=$50 >>> 5;
        var $and49=$shr48 & 8;
        $K=$and49;
        var $51=$N;
        var $add50=((($51)+($and49))|0);
        $N=$add50;
        var $52=$K;
        var $53=$Y;
        var $shr51=$53 >>> (($52)>>>0);
        $Y=$shr51;
        var $54=$Y;
        var $shr52=$54 >>> 2;
        var $and53=$shr52 & 4;
        $K=$and53;
        var $55=$N;
        var $add54=((($55)+($and53))|0);
        $N=$add54;
        var $56=$K;
        var $57=$Y;
        var $shr55=$57 >>> (($56)>>>0);
        $Y=$shr55;
        var $58=$Y;
        var $shr56=$58 >>> 1;
        var $and57=$shr56 & 2;
        $K=$and57;
        var $59=$N;
        var $add58=((($59)+($and57))|0);
        $N=$add58;
        var $60=$K;
        var $61=$Y;
        var $shr59=$61 >>> (($60)>>>0);
        $Y=$shr59;
        var $62=$Y;
        var $shr60=$62 >>> 1;
        var $and61=$shr60 & 1;
        $K=$and61;
        var $63=$N;
        var $add62=((($63)+($and61))|0);
        $N=$add62;
        var $64=$K;
        var $65=$Y;
        var $shr63=$65 >>> (($64)>>>0);
        $Y=$shr63;
        var $66=$N;
        var $67=$Y;
        var $add64=((($66)+($67))|0);
        $i=$add64;
        var $68=$i;
        var $shl65=$68 << 1;
        var $arrayidx66=((((5268012)|0)+($shl65<<2))|0);
        var $69=$arrayidx66;
        var $70=$69;
        $b33=$70;
        var $71=$b33;
        var $fd67=(($71+8)|0);
        var $72=HEAP32[(($fd67)>>2)];
        $p34=$72;
        var $73=$p34;
        var $fd69=(($73+8)|0);
        var $74=HEAP32[(($fd69)>>2)];
        $F68=$74;
        var $75=$b33;
        var $76=$F68;
        var $cmp70=(($75)|0)==(($76)|0);
        if ($cmp70) {
          var $77=$i;
          var $shl73=1 << $77;
          var $neg74=$shl73 ^ -1;
          var $78=HEAP32[((((5267972)|0))>>2)];
          var $and75=$78 & $neg74;
          HEAP32[((((5267972)|0))>>2)]=$and75;
        } else {
          var $79=$F68;
          var $80=$79;
          var $81=HEAP32[((((5267988)|0))>>2)];
          var $cmp77=(($80)>>>0) >= (($81)>>>0);
          var $conv78=(($cmp77)&1);
          var $expval79=($conv78);
          var $tobool80=(($expval79)|0)!=0;
          if (!($tobool80)) {
            _abort();
            throw "Reached an unreachable!"
          }
          var $82=$F68;
          var $83=$b33;
          var $fd82=(($83+8)|0);
          HEAP32[(($fd82)>>2)]=$82;
          var $84=$b33;
          var $85=$F68;
          var $bk83=(($85+12)|0);
          HEAP32[(($bk83)>>2)]=$84;
        }
        var $86=$i;
        var $shl87=$86 << 3;
        var $87=$nb;
        var $sub88=((($shl87)-($87))|0);
        $rsize=$sub88;
        var $88=$nb;
        var $or89=$88 | 1;
        var $or90=$or89 | 2;
        var $89=$p34;
        var $head91=(($89+4)|0);
        HEAP32[(($head91)>>2)]=$or90;
        var $90=$p34;
        var $91=$90;
        var $92=$nb;
        var $add_ptr92=(($91+$92)|0);
        var $93=$add_ptr92;
        $r=$93;
        var $94=$rsize;
        var $or93=$94 | 1;
        var $95=$r;
        var $head94=(($95+4)|0);
        HEAP32[(($head94)>>2)]=$or93;
        var $96=$rsize;
        var $97=$r;
        var $98=$97;
        var $99=$rsize;
        var $add_ptr95=(($98+$99)|0);
        var $100=$add_ptr95;
        var $prev_foot=(($100)|0);
        HEAP32[(($prev_foot)>>2)]=$96;
        var $101=HEAP32[((((5267980)|0))>>2)];
        $DVS=$101;
        var $102=$DVS;
        var $cmp96=(($102)|0)!=0;
        if ($cmp96) {
          var $103=HEAP32[((((5267992)|0))>>2)];
          $DV=$103;
          var $104=$DVS;
          var $shr99=$104 >>> 3;
          $I=$shr99;
          var $105=$I;
          var $shl100=$105 << 1;
          var $arrayidx101=((((5268012)|0)+($shl100<<2))|0);
          var $106=$arrayidx101;
          var $107=$106;
          $B=$107;
          var $108=$B;
          $F102=$108;
          var $109=HEAP32[((((5267972)|0))>>2)];
          var $110=$I;
          var $shl103=1 << $110;
          var $and104=$109 & $shl103;
          var $tobool105=(($and104)|0)!=0;
          if ($tobool105) {
            var $113=$B;
            var $fd110=(($113+8)|0);
            var $114=HEAP32[(($fd110)>>2)];
            var $115=$114;
            var $116=HEAP32[((((5267988)|0))>>2)];
            var $cmp111=(($115)>>>0) >= (($116)>>>0);
            var $conv112=(($cmp111)&1);
            var $expval113=($conv112);
            var $tobool114=(($expval113)|0)!=0;
            if (!($tobool114)) {
              _abort();
              throw "Reached an unreachable!"
            }
            var $117=$B;
            var $fd116=(($117+8)|0);
            var $118=HEAP32[(($fd116)>>2)];
            $F102=$118;
          } else {
            var $111=$I;
            var $shl107=1 << $111;
            var $112=HEAP32[((((5267972)|0))>>2)];
            var $or108=$112 | $shl107;
            HEAP32[((((5267972)|0))>>2)]=$or108;
          }
          var $119=$DV;
          var $120=$B;
          var $fd120=(($120+8)|0);
          HEAP32[(($fd120)>>2)]=$119;
          var $121=$DV;
          var $122=$F102;
          var $bk121=(($122+12)|0);
          HEAP32[(($bk121)>>2)]=$121;
          var $123=$F102;
          var $124=$DV;
          var $fd122=(($124+8)|0);
          HEAP32[(($fd122)>>2)]=$123;
          var $125=$B;
          var $126=$DV;
          var $bk123=(($126+12)|0);
          HEAP32[(($bk123)>>2)]=$125;
        }
        var $127=$rsize;
        HEAP32[((((5267980)|0))>>2)]=$127;
        var $128=$r;
        HEAP32[((((5267992)|0))>>2)]=$128;
        var $129=$p34;
        var $130=$129;
        var $add_ptr125=(($130+8)|0);
        $mem=$add_ptr125;
        var $183=$mem;

        return $183;
      }
    } while(0);
  } else {
    var $133=$bytes_addr;
    var $cmp137=(($133)>>>0) >= 4294967232;
    if ($cmp137) {
      $nb=-1;
    } else {
      var $134=$bytes_addr;
      var $add141=((($134)+(4))|0);
      var $add142=((($add141)+(7))|0);
      var $and143=$add142 & -8;
      $nb=$and143;
      var $135=HEAP32[((((5267976)|0))>>2)];
      var $cmp144=(($135)|0)!=0;
      do {
        if ($cmp144) {
          var $136=$nb;
          var $call147=_tmalloc_large(5267972, $136);
          $mem=$call147;
          var $cmp148=(($call147)|0)!=0;
          if (!($cmp148)) {
            break;
          }
          var $183=$mem;

          return $183;
        }
      } while(0);
    }
  }
  var $137=$nb;
  var $138=HEAP32[((((5267980)|0))>>2)];
  var $cmp154=(($137)>>>0) <= (($138)>>>0);
  if ($cmp154) {
    var $139=HEAP32[((((5267980)|0))>>2)];
    var $140=$nb;
    var $sub158=((($139)-($140))|0);
    $rsize157=$sub158;
    var $141=HEAP32[((((5267992)|0))>>2)];
    $p159=$141;
    var $142=$rsize157;
    var $cmp160=(($142)>>>0) >= 16;
    if ($cmp160) {
      var $143=$p159;
      var $144=$143;
      var $145=$nb;
      var $add_ptr164=(($144+$145)|0);
      var $146=$add_ptr164;
      HEAP32[((((5267992)|0))>>2)]=$146;
      $r163=$146;
      var $147=$rsize157;
      HEAP32[((((5267980)|0))>>2)]=$147;
      var $148=$rsize157;
      var $or165=$148 | 1;
      var $149=$r163;
      var $head166=(($149+4)|0);
      HEAP32[(($head166)>>2)]=$or165;
      var $150=$rsize157;
      var $151=$r163;
      var $152=$151;
      var $153=$rsize157;
      var $add_ptr167=(($152+$153)|0);
      var $154=$add_ptr167;
      var $prev_foot168=(($154)|0);
      HEAP32[(($prev_foot168)>>2)]=$150;
      var $155=$nb;
      var $or169=$155 | 1;
      var $or170=$or169 | 2;
      var $156=$p159;
      var $head171=(($156+4)|0);
      HEAP32[(($head171)>>2)]=$or170;
    } else {
      var $157=HEAP32[((((5267980)|0))>>2)];
      $dvs=$157;
      HEAP32[((((5267980)|0))>>2)]=0;
      HEAP32[((((5267992)|0))>>2)]=0;
      var $158=$dvs;
      var $or173=$158 | 1;
      var $or174=$or173 | 2;
      var $159=$p159;
      var $head175=(($159+4)|0);
      HEAP32[(($head175)>>2)]=$or174;
      var $160=$p159;
      var $161=$160;
      var $162=$dvs;
      var $add_ptr176=(($161+$162)|0);
      var $163=$add_ptr176;
      var $head177=(($163+4)|0);
      var $164=HEAP32[(($head177)>>2)];
      var $or178=$164 | 1;
      HEAP32[(($head177)>>2)]=$or178;
    }
    var $165=$p159;
    var $166=$165;
    var $add_ptr180=(($166+8)|0);
    $mem=$add_ptr180;
    var $183=$mem;

    return $183;
  }
  var $167=$nb;
  var $168=HEAP32[((((5267984)|0))>>2)];
  var $cmp182=(($167)>>>0) < (($168)>>>0);
  if ($cmp182) {
    var $169=$nb;
    var $170=HEAP32[((((5267984)|0))>>2)];
    var $sub186=((($170)-($169))|0);
    HEAP32[((((5267984)|0))>>2)]=$sub186;
    $rsize185=$sub186;
    var $171=HEAP32[((((5267996)|0))>>2)];
    $p187=$171;
    var $172=$p187;
    var $173=$172;
    var $174=$nb;
    var $add_ptr189=(($173+$174)|0);
    var $175=$add_ptr189;
    HEAP32[((((5267996)|0))>>2)]=$175;
    $r188=$175;
    var $176=$rsize185;
    var $or190=$176 | 1;
    var $177=$r188;
    var $head191=(($177+4)|0);
    HEAP32[(($head191)>>2)]=$or190;
    var $178=$nb;
    var $or192=$178 | 1;
    var $or193=$or192 | 2;
    var $179=$p187;
    var $head194=(($179+4)|0);
    HEAP32[(($head194)>>2)]=$or193;
    var $180=$p187;
    var $181=$180;
    var $add_ptr195=(($181+8)|0);
    $mem=$add_ptr195;
    var $183=$mem;

    return $183;
  }
  var $182=$nb;
  var $call198=_sys_alloc(5267972, $182);
  $mem=$call198;
  var $183=$mem;

  return $183;
}
_malloc["X"]=1;

function _tmalloc_small($m, $nb) {
  var label = 0;

  var $m_addr;
  var $nb_addr;
  var $t;
  var $v;
  var $rsize;
  var $i;
  var $leastbit;
  var $Y;
  var $K;
  var $N;
  var $trem;
  var $r;
  var $XP;
  var $R;
  var $F;
  var $RP;
  var $CP;
  var $H;
  var $C0;
  var $C1;
  var $DVS;
  var $DV;
  var $I;
  var $B;
  var $F191;
  $m_addr=$m;
  $nb_addr=$nb;
  var $0=$m_addr;
  var $treemap=(($0+4)|0);
  var $1=HEAP32[(($treemap)>>2)];
  var $2=$m_addr;
  var $treemap1=(($2+4)|0);
  var $3=HEAP32[(($treemap1)>>2)];
  var $sub=(((-$3))|0);
  var $and=$1 & $sub;
  $leastbit=$and;
  var $4=$leastbit;
  var $sub2=((($4)-(1))|0);
  $Y=$sub2;
  var $5=$Y;
  var $shr=$5 >>> 12;
  var $and3=$shr & 16;
  $K=$and3;
  var $6=$K;
  $N=$6;
  var $7=$K;
  var $8=$Y;
  var $shr4=$8 >>> (($7)>>>0);
  $Y=$shr4;
  var $9=$Y;
  var $shr5=$9 >>> 5;
  var $and6=$shr5 & 8;
  $K=$and6;
  var $10=$N;
  var $add=((($10)+($and6))|0);
  $N=$add;
  var $11=$K;
  var $12=$Y;
  var $shr7=$12 >>> (($11)>>>0);
  $Y=$shr7;
  var $13=$Y;
  var $shr8=$13 >>> 2;
  var $and9=$shr8 & 4;
  $K=$and9;
  var $14=$N;
  var $add10=((($14)+($and9))|0);
  $N=$add10;
  var $15=$K;
  var $16=$Y;
  var $shr11=$16 >>> (($15)>>>0);
  $Y=$shr11;
  var $17=$Y;
  var $shr12=$17 >>> 1;
  var $and13=$shr12 & 2;
  $K=$and13;
  var $18=$N;
  var $add14=((($18)+($and13))|0);
  $N=$add14;
  var $19=$K;
  var $20=$Y;
  var $shr15=$20 >>> (($19)>>>0);
  $Y=$shr15;
  var $21=$Y;
  var $shr16=$21 >>> 1;
  var $and17=$shr16 & 1;
  $K=$and17;
  var $22=$N;
  var $add18=((($22)+($and17))|0);
  $N=$add18;
  var $23=$K;
  var $24=$Y;
  var $shr19=$24 >>> (($23)>>>0);
  $Y=$shr19;
  var $25=$N;
  var $26=$Y;
  var $add20=((($25)+($26))|0);
  $i=$add20;
  var $27=$i;
  var $28=$m_addr;
  var $treebins=(($28+304)|0);
  var $arrayidx=(($treebins+($27<<2))|0);
  var $29=HEAP32[(($arrayidx)>>2)];
  $t=$29;
  $v=$29;
  var $30=$t;
  var $head=(($30+4)|0);
  var $31=HEAP32[(($head)>>2)];
  var $and21=$31 & -8;
  var $32=$nb_addr;
  var $sub22=((($and21)-($32))|0);
  $rsize=$sub22;
  while(1) {
    var $33=$t;
    var $child=(($33+16)|0);
    var $arrayidx23=(($child)|0);
    var $34=HEAP32[(($arrayidx23)>>2)];
    var $cmp=(($34)|0)!=0;
    if ($cmp) {
      var $35=$t;
      var $child24=(($35+16)|0);
      var $arrayidx25=(($child24)|0);
      var $36=HEAP32[(($arrayidx25)>>2)];
      var $cond = $36;
    } else {
      var $37=$t;
      var $child26=(($37+16)|0);
      var $arrayidx27=(($child26+4)|0);
      var $38=HEAP32[(($arrayidx27)>>2)];
      var $cond = $38;
    }
    var $cond;
    $t=$cond;
    var $cmp28=(($cond)|0)!=0;
    if (!($cmp28)) {
      break;
    }
    var $39=$t;
    var $head29=(($39+4)|0);
    var $40=HEAP32[(($head29)>>2)];
    var $and30=$40 & -8;
    var $41=$nb_addr;
    var $sub31=((($and30)-($41))|0);
    $trem=$sub31;
    var $42=$trem;
    var $43=$rsize;
    var $cmp32=(($42)>>>0) < (($43)>>>0);
    if ($cmp32) {
      var $44=$trem;
      $rsize=$44;
      var $45=$t;
      $v=$45;
    }
  }
  var $46=$v;
  var $47=$46;
  var $48=$m_addr;
  var $least_addr=(($48+16)|0);
  var $49=HEAP32[(($least_addr)>>2)];
  var $cmp33=(($47)>>>0) >= (($49)>>>0);
  var $conv=(($cmp33)&1);
  var $expval=($conv);
  var $tobool=(($expval)|0)!=0;
  if (!($tobool)) {
    _abort();
    throw "Reached an unreachable!"
  }
  var $50=$v;
  var $51=$50;
  var $52=$nb_addr;
  var $add_ptr=(($51+$52)|0);
  var $53=$add_ptr;
  $r=$53;
  var $54=$v;
  var $55=$54;
  var $56=$r;
  var $57=$56;
  var $cmp35=(($55)>>>0) < (($57)>>>0);
  var $conv36=(($cmp35)&1);
  var $expval37=($conv36);
  var $tobool38=(($expval37)|0)!=0;
  if (!($tobool38)) {
    _abort();
    throw "Reached an unreachable!"
  }
  var $58=$v;
  var $parent=(($58+24)|0);
  var $59=HEAP32[(($parent)>>2)];
  $XP=$59;
  var $60=$v;
  var $bk=(($60+12)|0);
  var $61=HEAP32[(($bk)>>2)];
  var $62=$v;
  var $cmp40=(($61)|0)!=(($62)|0);
  if ($cmp40) {
    var $63=$v;
    var $fd=(($63+8)|0);
    var $64=HEAP32[(($fd)>>2)];
    $F=$64;
    var $65=$v;
    var $bk43=(($65+12)|0);
    var $66=HEAP32[(($bk43)>>2)];
    $R=$66;
    var $67=$F;
    var $68=$67;
    var $69=$m_addr;
    var $least_addr44=(($69+16)|0);
    var $70=HEAP32[(($least_addr44)>>2)];
    var $cmp45=(($68)>>>0) >= (($70)>>>0);
    var $conv46=(($cmp45)&1);
    var $expval47=($conv46);
    var $tobool48=(($expval47)|0)!=0;
    if (!($tobool48)) {
      _abort();
      throw "Reached an unreachable!"
    }
    var $71=$R;
    var $72=$F;
    var $bk50=(($72+12)|0);
    HEAP32[(($bk50)>>2)]=$71;
    var $73=$F;
    var $74=$R;
    var $fd51=(($74+8)|0);
    HEAP32[(($fd51)>>2)]=$73;
  } else {
    var $75=$v;
    var $child54=(($75+16)|0);
    var $arrayidx55=(($child54+4)|0);
    $RP=$arrayidx55;
    var $76=HEAP32[(($arrayidx55)>>2)];
    $R=$76;
    var $cmp56=(($76)|0)!=0;
    do {
      if ($cmp56) {
        label = 2654;
      } else {
        var $77=$v;
        var $child58=(($77+16)|0);
        var $arrayidx59=(($child58)|0);
        $RP=$arrayidx59;
        var $78=HEAP32[(($arrayidx59)>>2)];
        $R=$78;
        var $cmp60=(($78)|0)!=0;
        if ($cmp60) {
          label = 2654;
          break;
        } else {
          break;
        }
      }
    } while(0);
    if (label == 2654) {
      while(1) {
        var $79=$R;
        var $child64=(($79+16)|0);
        var $arrayidx65=(($child64+4)|0);
        $CP=$arrayidx65;
        var $80=HEAP32[(($arrayidx65)>>2)];
        var $cmp66=(($80)|0)!=0;
        if ($cmp66) {
          var $83 = 1;
        } else {
          var $81=$R;
          var $child68=(($81+16)|0);
          var $arrayidx69=(($child68)|0);
          $CP=$arrayidx69;
          var $82=HEAP32[(($arrayidx69)>>2)];
          var $cmp70=(($82)|0)!=0;
          var $83 = $cmp70;
        }
        var $83;
        if (!($83)) {
          break;
        }
        var $84=$CP;
        $RP=$84;
        var $85=HEAP32[(($84)>>2)];
        $R=$85;
      }
      var $86=$RP;
      var $87=$86;
      var $88=$m_addr;
      var $least_addr74=(($88+16)|0);
      var $89=HEAP32[(($least_addr74)>>2)];
      var $cmp75=(($87)>>>0) >= (($89)>>>0);
      var $conv76=(($cmp75)&1);
      var $expval77=($conv76);
      var $tobool78=(($expval77)|0)!=0;
      if (!($tobool78)) {
        _abort();
        throw "Reached an unreachable!"
      }
      var $90=$RP;
      HEAP32[(($90)>>2)]=0;
    }
  }
  var $91=$XP;
  var $cmp84=(($91)|0)!=0;
  if ($cmp84) {
    var $92=$v;
    var $index=(($92+28)|0);
    var $93=HEAP32[(($index)>>2)];
    var $94=$m_addr;
    var $treebins87=(($94+304)|0);
    var $arrayidx88=(($treebins87+($93<<2))|0);
    $H=$arrayidx88;
    var $95=$v;
    var $96=$H;
    var $97=HEAP32[(($96)>>2)];
    var $cmp89=(($95)|0)==(($97)|0);
    if ($cmp89) {
      var $98=$R;
      var $99=$H;
      HEAP32[(($99)>>2)]=$98;
      var $cmp92=(($98)|0)==0;
      if ($cmp92) {
        var $100=$v;
        var $index95=(($100+28)|0);
        var $101=HEAP32[(($index95)>>2)];
        var $shl=1 << $101;
        var $neg=$shl ^ -1;
        var $102=$m_addr;
        var $treemap96=(($102+4)|0);
        var $103=HEAP32[(($treemap96)>>2)];
        var $and97=$103 & $neg;
        HEAP32[(($treemap96)>>2)]=$and97;
      }
    } else {
      var $104=$XP;
      var $105=$104;
      var $106=$m_addr;
      var $least_addr100=(($106+16)|0);
      var $107=HEAP32[(($least_addr100)>>2)];
      var $cmp101=(($105)>>>0) >= (($107)>>>0);
      var $conv102=(($cmp101)&1);
      var $expval103=($conv102);
      var $tobool104=(($expval103)|0)!=0;
      if (!($tobool104)) {
        _abort();
        throw "Reached an unreachable!"
      }
      var $108=$XP;
      var $child106=(($108+16)|0);
      var $arrayidx107=(($child106)|0);
      var $109=HEAP32[(($arrayidx107)>>2)];
      var $110=$v;
      var $cmp108=(($109)|0)==(($110)|0);
      if ($cmp108) {
        var $111=$R;
        var $112=$XP;
        var $child111=(($112+16)|0);
        var $arrayidx112=(($child111)|0);
        HEAP32[(($arrayidx112)>>2)]=$111;
      } else {
        var $113=$R;
        var $114=$XP;
        var $child114=(($114+16)|0);
        var $arrayidx115=(($child114+4)|0);
        HEAP32[(($arrayidx115)>>2)]=$113;
      }
    }
    var $115=$R;
    var $cmp120=(($115)|0)!=0;
    if ($cmp120) {
      var $116=$R;
      var $117=$116;
      var $118=$m_addr;
      var $least_addr123=(($118+16)|0);
      var $119=HEAP32[(($least_addr123)>>2)];
      var $cmp124=(($117)>>>0) >= (($119)>>>0);
      var $conv125=(($cmp124)&1);
      var $expval126=($conv125);
      var $tobool127=(($expval126)|0)!=0;
      if (!($tobool127)) {
        _abort();
        throw "Reached an unreachable!"
      }
      var $120=$XP;
      var $121=$R;
      var $parent129=(($121+24)|0);
      HEAP32[(($parent129)>>2)]=$120;
      var $122=$v;
      var $child130=(($122+16)|0);
      var $arrayidx131=(($child130)|0);
      var $123=HEAP32[(($arrayidx131)>>2)];
      $C0=$123;
      var $cmp132=(($123)|0)!=0;
      if ($cmp132) {
        var $124=$C0;
        var $125=$124;
        var $126=$m_addr;
        var $least_addr135=(($126+16)|0);
        var $127=HEAP32[(($least_addr135)>>2)];
        var $cmp136=(($125)>>>0) >= (($127)>>>0);
        var $conv137=(($cmp136)&1);
        var $expval138=($conv137);
        var $tobool139=(($expval138)|0)!=0;
        if (!($tobool139)) {
          _abort();
          throw "Reached an unreachable!"
        }
        var $128=$C0;
        var $129=$R;
        var $child141=(($129+16)|0);
        var $arrayidx142=(($child141)|0);
        HEAP32[(($arrayidx142)>>2)]=$128;
        var $130=$R;
        var $131=$C0;
        var $parent143=(($131+24)|0);
        HEAP32[(($parent143)>>2)]=$130;
      }
      var $132=$v;
      var $child147=(($132+16)|0);
      var $arrayidx148=(($child147+4)|0);
      var $133=HEAP32[(($arrayidx148)>>2)];
      $C1=$133;
      var $cmp149=(($133)|0)!=0;
      if ($cmp149) {
        var $134=$C1;
        var $135=$134;
        var $136=$m_addr;
        var $least_addr152=(($136+16)|0);
        var $137=HEAP32[(($least_addr152)>>2)];
        var $cmp153=(($135)>>>0) >= (($137)>>>0);
        var $conv154=(($cmp153)&1);
        var $expval155=($conv154);
        var $tobool156=(($expval155)|0)!=0;
        if (!($tobool156)) {
          _abort();
          throw "Reached an unreachable!"
        }
        var $138=$C1;
        var $139=$R;
        var $child158=(($139+16)|0);
        var $arrayidx159=(($child158+4)|0);
        HEAP32[(($arrayidx159)>>2)]=$138;
        var $140=$R;
        var $141=$C1;
        var $parent160=(($141+24)|0);
        HEAP32[(($parent160)>>2)]=$140;
      }
    }
  }
  var $142=$rsize;
  var $cmp168=(($142)>>>0) < 16;
  if ($cmp168) {
    var $143=$rsize;
    var $144=$nb_addr;
    var $add171=((($143)+($144))|0);
    var $or=$add171 | 1;
    var $or172=$or | 2;
    var $145=$v;
    var $head173=(($145+4)|0);
    HEAP32[(($head173)>>2)]=$or172;
    var $146=$v;
    var $147=$146;
    var $148=$rsize;
    var $149=$nb_addr;
    var $add174=((($148)+($149))|0);
    var $add_ptr175=(($147+$add174)|0);
    var $150=$add_ptr175;
    var $head176=(($150+4)|0);
    var $151=HEAP32[(($head176)>>2)];
    var $or177=$151 | 1;
    HEAP32[(($head176)>>2)]=$or177;
    var $197=$v;
    var $198=$197;
    var $add_ptr219=(($198+8)|0);

    return $add_ptr219;
  }
  var $152=$nb_addr;
  var $or179=$152 | 1;
  var $or180=$or179 | 2;
  var $153=$v;
  var $head181=(($153+4)|0);
  HEAP32[(($head181)>>2)]=$or180;
  var $154=$rsize;
  var $or182=$154 | 1;
  var $155=$r;
  var $head183=(($155+4)|0);
  HEAP32[(($head183)>>2)]=$or182;
  var $156=$rsize;
  var $157=$r;
  var $158=$157;
  var $159=$rsize;
  var $add_ptr184=(($158+$159)|0);
  var $160=$add_ptr184;
  var $prev_foot=(($160)|0);
  HEAP32[(($prev_foot)>>2)]=$156;
  var $161=$m_addr;
  var $dvsize=(($161+8)|0);
  var $162=HEAP32[(($dvsize)>>2)];
  $DVS=$162;
  var $163=$DVS;
  var $cmp185=(($163)|0)!=0;
  if ($cmp185) {
    var $164=$m_addr;
    var $dv=(($164+20)|0);
    var $165=HEAP32[(($dv)>>2)];
    $DV=$165;
    var $166=$DVS;
    var $shr188=$166 >>> 3;
    $I=$shr188;
    var $167=$I;
    var $shl189=$167 << 1;
    var $168=$m_addr;
    var $smallbins=(($168+40)|0);
    var $arrayidx190=(($smallbins+($shl189<<2))|0);
    var $169=$arrayidx190;
    var $170=$169;
    $B=$170;
    var $171=$B;
    $F191=$171;
    var $172=$m_addr;
    var $smallmap=(($172)|0);
    var $173=HEAP32[(($smallmap)>>2)];
    var $174=$I;
    var $shl192=1 << $174;
    var $and193=$173 & $shl192;
    var $tobool194=(($and193)|0)!=0;
    if ($tobool194) {
      var $178=$B;
      var $fd200=(($178+8)|0);
      var $179=HEAP32[(($fd200)>>2)];
      var $180=$179;
      var $181=$m_addr;
      var $least_addr201=(($181+16)|0);
      var $182=HEAP32[(($least_addr201)>>2)];
      var $cmp202=(($180)>>>0) >= (($182)>>>0);
      var $conv203=(($cmp202)&1);
      var $expval204=($conv203);
      var $tobool205=(($expval204)|0)!=0;
      if (!($tobool205)) {
        _abort();
        throw "Reached an unreachable!"
      }
      var $183=$B;
      var $fd207=(($183+8)|0);
      var $184=HEAP32[(($fd207)>>2)];
      $F191=$184;
    } else {
      var $175=$I;
      var $shl196=1 << $175;
      var $176=$m_addr;
      var $smallmap197=(($176)|0);
      var $177=HEAP32[(($smallmap197)>>2)];
      var $or198=$177 | $shl196;
      HEAP32[(($smallmap197)>>2)]=$or198;
    }
    var $185=$DV;
    var $186=$B;
    var $fd211=(($186+8)|0);
    HEAP32[(($fd211)>>2)]=$185;
    var $187=$DV;
    var $188=$F191;
    var $bk212=(($188+12)|0);
    HEAP32[(($bk212)>>2)]=$187;
    var $189=$F191;
    var $190=$DV;
    var $fd213=(($190+8)|0);
    HEAP32[(($fd213)>>2)]=$189;
    var $191=$B;
    var $192=$DV;
    var $bk214=(($192+12)|0);
    HEAP32[(($bk214)>>2)]=$191;
  }
  var $193=$rsize;
  var $194=$m_addr;
  var $dvsize216=(($194+8)|0);
  HEAP32[(($dvsize216)>>2)]=$193;
  var $195=$r;
  var $196=$m_addr;
  var $dv217=(($196+20)|0);
  HEAP32[(($dv217)>>2)]=$195;
  var $197=$v;
  var $198=$197;
  var $add_ptr219=(($198+8)|0);

  return $add_ptr219;
}
_tmalloc_small["X"]=1;

function _tmalloc_large($m, $nb) {
  var label = 0;

  var $retval;
  var $m_addr;
  var $nb_addr;
  var $v;
  var $rsize;
  var $t;
  var $idx;
  var $X;
  var $Y;
  var $N;
  var $K;
  var $sizebits;
  var $rst;
  var $rt;
  var $trem;
  var $leftbits;
  var $i;
  var $leastbit;
  var $Y68;
  var $K70;
  var $N73;
  var $trem97;
  var $r;
  var $XP;
  var $R;
  var $F;
  var $RP;
  var $CP;
  var $H;
  var $C0;
  var $C1;
  var $I;
  var $B;
  var $F282;
  var $TP;
  var $H307;
  var $I308;
  var $X309;
  var $Y319;
  var $N320;
  var $K324;
  var $T;
  var $K365;
  var $C;
  var $F404;
  $m_addr=$m;
  $nb_addr=$nb;
  $v=0;
  var $0=$nb_addr;
  var $sub=(((-$0))|0);
  $rsize=$sub;
  var $1=$nb_addr;
  var $shr=$1 >>> 8;
  $X=$shr;
  var $2=$X;
  var $cmp=(($2)|0)==0;
  if ($cmp) {
    $idx=0;
  } else {
    var $3=$X;
    var $cmp1=(($3)>>>0) > 65535;
    if ($cmp1) {
      $idx=31;
    } else {
      var $4=$X;
      $Y=$4;
      var $5=$Y;
      var $sub4=((($5)-(256))|0);
      var $shr5=$sub4 >>> 16;
      var $and=$shr5 & 8;
      $N=$and;
      var $6=$N;
      var $7=$Y;
      var $shl=$7 << $6;
      $Y=$shl;
      var $sub6=((($shl)-(4096))|0);
      var $shr7=$sub6 >>> 16;
      var $and8=$shr7 & 4;
      $K=$and8;
      var $8=$K;
      var $9=$N;
      var $add=((($9)+($8))|0);
      $N=$add;
      var $10=$K;
      var $11=$Y;
      var $shl9=$11 << $10;
      $Y=$shl9;
      var $sub10=((($shl9)-(16384))|0);
      var $shr11=$sub10 >>> 16;
      var $and12=$shr11 & 2;
      $K=$and12;
      var $12=$N;
      var $add13=((($12)+($and12))|0);
      $N=$add13;
      var $13=$N;
      var $sub14=(((14)-($13))|0);
      var $14=$K;
      var $15=$Y;
      var $shl15=$15 << $14;
      $Y=$shl15;
      var $shr16=$shl15 >>> 15;
      var $add17=((($sub14)+($shr16))|0);
      $K=$add17;
      var $16=$K;
      var $shl18=$16 << 1;
      var $17=$nb_addr;
      var $18=$K;
      var $add19=((($18)+(7))|0);
      var $shr20=$17 >>> (($add19)>>>0);
      var $and21=$shr20 & 1;
      var $add22=((($shl18)+($and21))|0);
      $idx=$add22;
    }
  }
  var $19=$idx;
  var $20=$m_addr;
  var $treebins=(($20+304)|0);
  var $arrayidx=(($treebins+($19<<2))|0);
  var $21=HEAP32[(($arrayidx)>>2)];
  $t=$21;
  var $cmp24=(($21)|0)!=0;
  if ($cmp24) {
    var $22=$nb_addr;
    var $23=$idx;
    var $cmp26=(($23)|0)==31;
    if ($cmp26) {
      var $cond = 0;
    } else {
      var $24=$idx;
      var $shr27=$24 >>> 1;
      var $add28=((($shr27)+(8))|0);
      var $sub29=((($add28)-(2))|0);
      var $sub30=(((31)-($sub29))|0);
      var $cond = $sub30;
    }
    var $cond;
    var $shl31=$22 << $cond;
    $sizebits=$shl31;
    $rst=0;
    while(1) {
      var $25=$t;
      var $head=(($25+4)|0);
      var $26=HEAP32[(($head)>>2)];
      var $and32=$26 & -8;
      var $27=$nb_addr;
      var $sub33=((($and32)-($27))|0);
      $trem=$sub33;
      var $28=$trem;
      var $29=$rsize;
      var $cmp34=(($28)>>>0) < (($29)>>>0);
      if ($cmp34) {
        var $30=$t;
        $v=$30;
        var $31=$trem;
        $rsize=$31;
        var $cmp36=(($31)|0)==0;
        if ($cmp36) {
          label = 2723;
          break;
        }
      }
      var $32=$t;
      var $child=(($32+16)|0);
      var $arrayidx40=(($child+4)|0);
      var $33=HEAP32[(($arrayidx40)>>2)];
      $rt=$33;
      var $34=$sizebits;
      var $shr41=$34 >>> 31;
      var $and42=$shr41 & 1;
      var $35=$t;
      var $child43=(($35+16)|0);
      var $arrayidx44=(($child43+($and42<<2))|0);
      var $36=HEAP32[(($arrayidx44)>>2)];
      $t=$36;
      var $37=$rt;
      var $cmp45=(($37)|0)!=0;
      do {
        if ($cmp45) {
          var $38=$rt;
          var $39=$t;
          var $cmp46=(($38)|0)!=(($39)|0);
          if (!($cmp46)) {
            break;
          }
          var $40=$rt;
          $rst=$40;
        }
      } while(0);
      var $41=$t;
      var $cmp49=(($41)|0)==0;
      if ($cmp49) {
        label = 2729;
        break;
      }
      var $43=$sizebits;
      var $shl52=$43 << 1;
      $sizebits=$shl52;
    }
    if (label == 2723) {
    }
    else if (label == 2729) {
      var $42=$rst;
      $t=$42;
    }
  }
  var $44=$t;
  var $cmp54=(($44)|0)==0;
  do {
    if ($cmp54) {
      var $45=$v;
      var $cmp56=(($45)|0)==0;
      if (!($cmp56)) {
        break;
      }
      var $46=$idx;
      var $shl58=1 << $46;
      var $shl59=$shl58 << 1;
      var $47=$idx;
      var $shl60=1 << $47;
      var $shl61=$shl60 << 1;
      var $sub62=(((-$shl61))|0);
      var $or=$shl59 | $sub62;
      var $48=$m_addr;
      var $treemap=(($48+4)|0);
      var $49=HEAP32[(($treemap)>>2)];
      var $and63=$or & $49;
      $leftbits=$and63;
      var $50=$leftbits;
      var $cmp64=(($50)|0)!=0;
      if ($cmp64) {
        var $51=$leftbits;
        var $52=$leftbits;
        var $sub66=(((-$52))|0);
        var $and67=$51 & $sub66;
        $leastbit=$and67;
        var $53=$leastbit;
        var $sub69=((($53)-(1))|0);
        $Y68=$sub69;
        var $54=$Y68;
        var $shr71=$54 >>> 12;
        var $and72=$shr71 & 16;
        $K70=$and72;
        var $55=$K70;
        $N73=$55;
        var $56=$K70;
        var $57=$Y68;
        var $shr74=$57 >>> (($56)>>>0);
        $Y68=$shr74;
        var $58=$Y68;
        var $shr75=$58 >>> 5;
        var $and76=$shr75 & 8;
        $K70=$and76;
        var $59=$N73;
        var $add77=((($59)+($and76))|0);
        $N73=$add77;
        var $60=$K70;
        var $61=$Y68;
        var $shr78=$61 >>> (($60)>>>0);
        $Y68=$shr78;
        var $62=$Y68;
        var $shr79=$62 >>> 2;
        var $and80=$shr79 & 4;
        $K70=$and80;
        var $63=$N73;
        var $add81=((($63)+($and80))|0);
        $N73=$add81;
        var $64=$K70;
        var $65=$Y68;
        var $shr82=$65 >>> (($64)>>>0);
        $Y68=$shr82;
        var $66=$Y68;
        var $shr83=$66 >>> 1;
        var $and84=$shr83 & 2;
        $K70=$and84;
        var $67=$N73;
        var $add85=((($67)+($and84))|0);
        $N73=$add85;
        var $68=$K70;
        var $69=$Y68;
        var $shr86=$69 >>> (($68)>>>0);
        $Y68=$shr86;
        var $70=$Y68;
        var $shr87=$70 >>> 1;
        var $and88=$shr87 & 1;
        $K70=$and88;
        var $71=$N73;
        var $add89=((($71)+($and88))|0);
        $N73=$add89;
        var $72=$K70;
        var $73=$Y68;
        var $shr90=$73 >>> (($72)>>>0);
        $Y68=$shr90;
        var $74=$N73;
        var $75=$Y68;
        var $add91=((($74)+($75))|0);
        $i=$add91;
        var $76=$i;
        var $77=$m_addr;
        var $treebins92=(($77+304)|0);
        var $arrayidx93=(($treebins92+($76<<2))|0);
        var $78=HEAP32[(($arrayidx93)>>2)];
        $t=$78;
      }
    }
  } while(0);
  while(1) {
    var $79=$t;
    var $cmp96=(($79)|0)!=0;
    if (!($cmp96)) {
      break;
    }
    var $80=$t;
    var $head98=(($80+4)|0);
    var $81=HEAP32[(($head98)>>2)];
    var $and99=$81 & -8;
    var $82=$nb_addr;
    var $sub100=((($and99)-($82))|0);
    $trem97=$sub100;
    var $83=$trem97;
    var $84=$rsize;
    var $cmp101=(($83)>>>0) < (($84)>>>0);
    if ($cmp101) {
      var $85=$trem97;
      $rsize=$85;
      var $86=$t;
      $v=$86;
    }
    var $87=$t;
    var $child104=(($87+16)|0);
    var $arrayidx105=(($child104)|0);
    var $88=HEAP32[(($arrayidx105)>>2)];
    var $cmp106=(($88)|0)!=0;
    if ($cmp106) {
      var $89=$t;
      var $child108=(($89+16)|0);
      var $arrayidx109=(($child108)|0);
      var $90=HEAP32[(($arrayidx109)>>2)];
      var $cond114 = $90;
    } else {
      var $91=$t;
      var $child111=(($91+16)|0);
      var $arrayidx112=(($child111+4)|0);
      var $92=HEAP32[(($arrayidx112)>>2)];
      var $cond114 = $92;
    }
    var $cond114;
    $t=$cond114;
  }
  var $93=$v;
  var $cmp115=(($93)|0)!=0;
  do {
    if ($cmp115) {
      var $94=$rsize;
      var $95=$m_addr;
      var $dvsize=(($95+8)|0);
      var $96=HEAP32[(($dvsize)>>2)];
      var $97=$nb_addr;
      var $sub117=((($96)-($97))|0);
      var $cmp118=(($94)>>>0) < (($sub117)>>>0);
      if (!($cmp118)) {
        break;
      }
      var $98=$v;
      var $99=$98;
      var $100=$m_addr;
      var $least_addr=(($100+16)|0);
      var $101=HEAP32[(($least_addr)>>2)];
      var $cmp120=(($99)>>>0) >= (($101)>>>0);
      var $conv=(($cmp120)&1);
      var $expval=($conv);
      var $tobool=(($expval)|0)!=0;
      if (!($tobool)) {
        _abort();
        throw "Reached an unreachable!"
      }
      var $102=$v;
      var $103=$102;
      var $104=$nb_addr;
      var $add_ptr=(($103+$104)|0);
      var $105=$add_ptr;
      $r=$105;
      var $106=$v;
      var $107=$106;
      var $108=$r;
      var $109=$108;
      var $cmp122=(($107)>>>0) < (($109)>>>0);
      var $conv123=(($cmp122)&1);
      var $expval124=($conv123);
      var $tobool125=(($expval124)|0)!=0;
      if (!($tobool125)) {
        _abort();
        throw "Reached an unreachable!"
      }
      var $110=$v;
      var $parent=(($110+24)|0);
      var $111=HEAP32[(($parent)>>2)];
      $XP=$111;
      var $112=$v;
      var $bk=(($112+12)|0);
      var $113=HEAP32[(($bk)>>2)];
      var $114=$v;
      var $cmp127=(($113)|0)!=(($114)|0);
      if ($cmp127) {
        var $115=$v;
        var $fd=(($115+8)|0);
        var $116=HEAP32[(($fd)>>2)];
        $F=$116;
        var $117=$v;
        var $bk130=(($117+12)|0);
        var $118=HEAP32[(($bk130)>>2)];
        $R=$118;
        var $119=$F;
        var $120=$119;
        var $121=$m_addr;
        var $least_addr131=(($121+16)|0);
        var $122=HEAP32[(($least_addr131)>>2)];
        var $cmp132=(($120)>>>0) >= (($122)>>>0);
        var $conv133=(($cmp132)&1);
        var $expval134=($conv133);
        var $tobool135=(($expval134)|0)!=0;
        if (!($tobool135)) {
          _abort();
          throw "Reached an unreachable!"
        }
        var $123=$R;
        var $124=$F;
        var $bk137=(($124+12)|0);
        HEAP32[(($bk137)>>2)]=$123;
        var $125=$F;
        var $126=$R;
        var $fd138=(($126+8)|0);
        HEAP32[(($fd138)>>2)]=$125;
      } else {
        var $127=$v;
        var $child142=(($127+16)|0);
        var $arrayidx143=(($child142+4)|0);
        $RP=$arrayidx143;
        var $128=HEAP32[(($arrayidx143)>>2)];
        $R=$128;
        var $cmp144=(($128)|0)!=0;
        do {
          if ($cmp144) {
            label = 2756;
          } else {
            var $129=$v;
            var $child146=(($129+16)|0);
            var $arrayidx147=(($child146)|0);
            $RP=$arrayidx147;
            var $130=HEAP32[(($arrayidx147)>>2)];
            $R=$130;
            var $cmp148=(($130)|0)!=0;
            if ($cmp148) {
              label = 2756;
              break;
            } else {
              break;
            }
          }
        } while(0);
        if (label == 2756) {
          while(1) {
            var $131=$R;
            var $child152=(($131+16)|0);
            var $arrayidx153=(($child152+4)|0);
            $CP=$arrayidx153;
            var $132=HEAP32[(($arrayidx153)>>2)];
            var $cmp154=(($132)|0)!=0;
            if ($cmp154) {
              var $135 = 1;
            } else {
              var $133=$R;
              var $child156=(($133+16)|0);
              var $arrayidx157=(($child156)|0);
              $CP=$arrayidx157;
              var $134=HEAP32[(($arrayidx157)>>2)];
              var $cmp158=(($134)|0)!=0;
              var $135 = $cmp158;
            }
            var $135;
            if (!($135)) {
              break;
            }
            var $136=$CP;
            $RP=$136;
            var $137=HEAP32[(($136)>>2)];
            $R=$137;
          }
          var $138=$RP;
          var $139=$138;
          var $140=$m_addr;
          var $least_addr162=(($140+16)|0);
          var $141=HEAP32[(($least_addr162)>>2)];
          var $cmp163=(($139)>>>0) >= (($141)>>>0);
          var $conv164=(($cmp163)&1);
          var $expval165=($conv164);
          var $tobool166=(($expval165)|0)!=0;
          if (!($tobool166)) {
            _abort();
            throw "Reached an unreachable!"
          }
          var $142=$RP;
          HEAP32[(($142)>>2)]=0;
        }
      }
      var $143=$XP;
      var $cmp172=(($143)|0)!=0;
      if ($cmp172) {
        var $144=$v;
        var $index=(($144+28)|0);
        var $145=HEAP32[(($index)>>2)];
        var $146=$m_addr;
        var $treebins175=(($146+304)|0);
        var $arrayidx176=(($treebins175+($145<<2))|0);
        $H=$arrayidx176;
        var $147=$v;
        var $148=$H;
        var $149=HEAP32[(($148)>>2)];
        var $cmp177=(($147)|0)==(($149)|0);
        if ($cmp177) {
          var $150=$R;
          var $151=$H;
          HEAP32[(($151)>>2)]=$150;
          var $cmp180=(($150)|0)==0;
          if ($cmp180) {
            var $152=$v;
            var $index183=(($152+28)|0);
            var $153=HEAP32[(($index183)>>2)];
            var $shl184=1 << $153;
            var $neg=$shl184 ^ -1;
            var $154=$m_addr;
            var $treemap185=(($154+4)|0);
            var $155=HEAP32[(($treemap185)>>2)];
            var $and186=$155 & $neg;
            HEAP32[(($treemap185)>>2)]=$and186;
          }
        } else {
          var $156=$XP;
          var $157=$156;
          var $158=$m_addr;
          var $least_addr189=(($158+16)|0);
          var $159=HEAP32[(($least_addr189)>>2)];
          var $cmp190=(($157)>>>0) >= (($159)>>>0);
          var $conv191=(($cmp190)&1);
          var $expval192=($conv191);
          var $tobool193=(($expval192)|0)!=0;
          if (!($tobool193)) {
            _abort();
            throw "Reached an unreachable!"
          }
          var $160=$XP;
          var $child195=(($160+16)|0);
          var $arrayidx196=(($child195)|0);
          var $161=HEAP32[(($arrayidx196)>>2)];
          var $162=$v;
          var $cmp197=(($161)|0)==(($162)|0);
          if ($cmp197) {
            var $163=$R;
            var $164=$XP;
            var $child200=(($164+16)|0);
            var $arrayidx201=(($child200)|0);
            HEAP32[(($arrayidx201)>>2)]=$163;
          } else {
            var $165=$R;
            var $166=$XP;
            var $child203=(($166+16)|0);
            var $arrayidx204=(($child203+4)|0);
            HEAP32[(($arrayidx204)>>2)]=$165;
          }
        }
        var $167=$R;
        var $cmp209=(($167)|0)!=0;
        if ($cmp209) {
          var $168=$R;
          var $169=$168;
          var $170=$m_addr;
          var $least_addr212=(($170+16)|0);
          var $171=HEAP32[(($least_addr212)>>2)];
          var $cmp213=(($169)>>>0) >= (($171)>>>0);
          var $conv214=(($cmp213)&1);
          var $expval215=($conv214);
          var $tobool216=(($expval215)|0)!=0;
          if (!($tobool216)) {
            _abort();
            throw "Reached an unreachable!"
          }
          var $172=$XP;
          var $173=$R;
          var $parent218=(($173+24)|0);
          HEAP32[(($parent218)>>2)]=$172;
          var $174=$v;
          var $child219=(($174+16)|0);
          var $arrayidx220=(($child219)|0);
          var $175=HEAP32[(($arrayidx220)>>2)];
          $C0=$175;
          var $cmp221=(($175)|0)!=0;
          if ($cmp221) {
            var $176=$C0;
            var $177=$176;
            var $178=$m_addr;
            var $least_addr224=(($178+16)|0);
            var $179=HEAP32[(($least_addr224)>>2)];
            var $cmp225=(($177)>>>0) >= (($179)>>>0);
            var $conv226=(($cmp225)&1);
            var $expval227=($conv226);
            var $tobool228=(($expval227)|0)!=0;
            if (!($tobool228)) {
              _abort();
              throw "Reached an unreachable!"
            }
            var $180=$C0;
            var $181=$R;
            var $child230=(($181+16)|0);
            var $arrayidx231=(($child230)|0);
            HEAP32[(($arrayidx231)>>2)]=$180;
            var $182=$R;
            var $183=$C0;
            var $parent232=(($183+24)|0);
            HEAP32[(($parent232)>>2)]=$182;
          }
          var $184=$v;
          var $child236=(($184+16)|0);
          var $arrayidx237=(($child236+4)|0);
          var $185=HEAP32[(($arrayidx237)>>2)];
          $C1=$185;
          var $cmp238=(($185)|0)!=0;
          if ($cmp238) {
            var $186=$C1;
            var $187=$186;
            var $188=$m_addr;
            var $least_addr241=(($188+16)|0);
            var $189=HEAP32[(($least_addr241)>>2)];
            var $cmp242=(($187)>>>0) >= (($189)>>>0);
            var $conv243=(($cmp242)&1);
            var $expval244=($conv243);
            var $tobool245=(($expval244)|0)!=0;
            if (!($tobool245)) {
              _abort();
              throw "Reached an unreachable!"
            }
            var $190=$C1;
            var $191=$R;
            var $child247=(($191+16)|0);
            var $arrayidx248=(($child247+4)|0);
            HEAP32[(($arrayidx248)>>2)]=$190;
            var $192=$R;
            var $193=$C1;
            var $parent249=(($193+24)|0);
            HEAP32[(($parent249)>>2)]=$192;
          }
        }
      }
      var $194=$rsize;
      var $cmp257=(($194)>>>0) < 16;
      if ($cmp257) {
        var $195=$rsize;
        var $196=$nb_addr;
        var $add260=((($195)+($196))|0);
        var $or261=$add260 | 1;
        var $or262=$or261 | 2;
        var $197=$v;
        var $head263=(($197+4)|0);
        HEAP32[(($head263)>>2)]=$or262;
        var $198=$v;
        var $199=$198;
        var $200=$rsize;
        var $201=$nb_addr;
        var $add264=((($200)+($201))|0);
        var $add_ptr265=(($199+$add264)|0);
        var $202=$add_ptr265;
        var $head266=(($202+4)|0);
        var $203=HEAP32[(($head266)>>2)];
        var $or267=$203 | 1;
        HEAP32[(($head266)>>2)]=$or267;
      } else {
        var $204=$nb_addr;
        var $or269=$204 | 1;
        var $or270=$or269 | 2;
        var $205=$v;
        var $head271=(($205+4)|0);
        HEAP32[(($head271)>>2)]=$or270;
        var $206=$rsize;
        var $or272=$206 | 1;
        var $207=$r;
        var $head273=(($207+4)|0);
        HEAP32[(($head273)>>2)]=$or272;
        var $208=$rsize;
        var $209=$r;
        var $210=$209;
        var $211=$rsize;
        var $add_ptr274=(($210+$211)|0);
        var $212=$add_ptr274;
        var $prev_foot=(($212)|0);
        HEAP32[(($prev_foot)>>2)]=$208;
        var $213=$rsize;
        var $shr275=$213 >>> 3;
        var $cmp276=(($shr275)>>>0) < 32;
        if ($cmp276) {
          var $214=$rsize;
          var $shr279=$214 >>> 3;
          $I=$shr279;
          var $215=$I;
          var $shl280=$215 << 1;
          var $216=$m_addr;
          var $smallbins=(($216+40)|0);
          var $arrayidx281=(($smallbins+($shl280<<2))|0);
          var $217=$arrayidx281;
          var $218=$217;
          $B=$218;
          var $219=$B;
          $F282=$219;
          var $220=$m_addr;
          var $smallmap=(($220)|0);
          var $221=HEAP32[(($smallmap)>>2)];
          var $222=$I;
          var $shl283=1 << $222;
          var $and284=$221 & $shl283;
          var $tobool285=(($and284)|0)!=0;
          if ($tobool285) {
            var $226=$B;
            var $fd291=(($226+8)|0);
            var $227=HEAP32[(($fd291)>>2)];
            var $228=$227;
            var $229=$m_addr;
            var $least_addr292=(($229+16)|0);
            var $230=HEAP32[(($least_addr292)>>2)];
            var $cmp293=(($228)>>>0) >= (($230)>>>0);
            var $conv294=(($cmp293)&1);
            var $expval295=($conv294);
            var $tobool296=(($expval295)|0)!=0;
            if (!($tobool296)) {
              _abort();
              throw "Reached an unreachable!"
            }
            var $231=$B;
            var $fd298=(($231+8)|0);
            var $232=HEAP32[(($fd298)>>2)];
            $F282=$232;
          } else {
            var $223=$I;
            var $shl287=1 << $223;
            var $224=$m_addr;
            var $smallmap288=(($224)|0);
            var $225=HEAP32[(($smallmap288)>>2)];
            var $or289=$225 | $shl287;
            HEAP32[(($smallmap288)>>2)]=$or289;
          }
          var $233=$r;
          var $234=$B;
          var $fd302=(($234+8)|0);
          HEAP32[(($fd302)>>2)]=$233;
          var $235=$r;
          var $236=$F282;
          var $bk303=(($236+12)|0);
          HEAP32[(($bk303)>>2)]=$235;
          var $237=$F282;
          var $238=$r;
          var $fd304=(($238+8)|0);
          HEAP32[(($fd304)>>2)]=$237;
          var $239=$B;
          var $240=$r;
          var $bk305=(($240+12)|0);
          HEAP32[(($bk305)>>2)]=$239;
        } else {
          var $241=$r;
          var $242=$241;
          $TP=$242;
          var $243=$rsize;
          var $shr310=$243 >>> 8;
          $X309=$shr310;
          var $244=$X309;
          var $cmp311=(($244)|0)==0;
          if ($cmp311) {
            $I308=0;
          } else {
            var $245=$X309;
            var $cmp315=(($245)>>>0) > 65535;
            if ($cmp315) {
              $I308=31;
            } else {
              var $246=$X309;
              $Y319=$246;
              var $247=$Y319;
              var $sub321=((($247)-(256))|0);
              var $shr322=$sub321 >>> 16;
              var $and323=$shr322 & 8;
              $N320=$and323;
              var $248=$N320;
              var $249=$Y319;
              var $shl325=$249 << $248;
              $Y319=$shl325;
              var $sub326=((($shl325)-(4096))|0);
              var $shr327=$sub326 >>> 16;
              var $and328=$shr327 & 4;
              $K324=$and328;
              var $250=$K324;
              var $251=$N320;
              var $add329=((($251)+($250))|0);
              $N320=$add329;
              var $252=$K324;
              var $253=$Y319;
              var $shl330=$253 << $252;
              $Y319=$shl330;
              var $sub331=((($shl330)-(16384))|0);
              var $shr332=$sub331 >>> 16;
              var $and333=$shr332 & 2;
              $K324=$and333;
              var $254=$N320;
              var $add334=((($254)+($and333))|0);
              $N320=$add334;
              var $255=$N320;
              var $sub335=(((14)-($255))|0);
              var $256=$K324;
              var $257=$Y319;
              var $shl336=$257 << $256;
              $Y319=$shl336;
              var $shr337=$shl336 >>> 15;
              var $add338=((($sub335)+($shr337))|0);
              $K324=$add338;
              var $258=$K324;
              var $shl339=$258 << 1;
              var $259=$rsize;
              var $260=$K324;
              var $add340=((($260)+(7))|0);
              var $shr341=$259 >>> (($add340)>>>0);
              var $and342=$shr341 & 1;
              var $add343=((($shl339)+($and342))|0);
              $I308=$add343;
            }
          }
          var $261=$I308;
          var $262=$m_addr;
          var $treebins346=(($262+304)|0);
          var $arrayidx347=(($treebins346+($261<<2))|0);
          $H307=$arrayidx347;
          var $263=$I308;
          var $264=$TP;
          var $index348=(($264+28)|0);
          HEAP32[(($index348)>>2)]=$263;
          var $265=$TP;
          var $child349=(($265+16)|0);
          var $arrayidx350=(($child349+4)|0);
          HEAP32[(($arrayidx350)>>2)]=0;
          var $266=$TP;
          var $child351=(($266+16)|0);
          var $arrayidx352=(($child351)|0);
          HEAP32[(($arrayidx352)>>2)]=0;
          var $267=$m_addr;
          var $treemap353=(($267+4)|0);
          var $268=HEAP32[(($treemap353)>>2)];
          var $269=$I308;
          var $shl354=1 << $269;
          var $and355=$268 & $shl354;
          var $tobool356=(($and355)|0)!=0;
          if ($tobool356) {
            var $281=$H307;
            var $282=HEAP32[(($281)>>2)];
            $T=$282;
            var $283=$rsize;
            var $284=$I308;
            var $cmp366=(($284)|0)==31;
            if ($cmp366) {
              var $cond375 = 0;
            } else {
              var $285=$I308;
              var $shr370=$285 >>> 1;
              var $add371=((($shr370)+(8))|0);
              var $sub372=((($add371)-(2))|0);
              var $sub373=(((31)-($sub372))|0);
              var $cond375 = $sub373;
            }
            var $cond375;
            var $shl376=$283 << $cond375;
            $K365=$shl376;
            while(1) {
              var $286=$T;
              var $head378=(($286+4)|0);
              var $287=HEAP32[(($head378)>>2)];
              var $and379=$287 & -8;
              var $288=$rsize;
              var $cmp380=(($and379)|0)!=(($288)|0);
              if (!($cmp380)) {
                label = 2823;
                break;
              }
              var $289=$K365;
              var $shr383=$289 >>> 31;
              var $and384=$shr383 & 1;
              var $290=$T;
              var $child385=(($290+16)|0);
              var $arrayidx386=(($child385+($and384<<2))|0);
              $C=$arrayidx386;
              var $291=$K365;
              var $shl387=$291 << 1;
              $K365=$shl387;
              var $292=$C;
              var $293=HEAP32[(($292)>>2)];
              var $cmp388=(($293)|0)!=0;
              if (!($cmp388)) {
                label = 2819;
                break;
              }
              var $294=$C;
              var $295=HEAP32[(($294)>>2)];
              $T=$295;
            }
            do {
              if (label == 2819) {
                var $296=$C;
                var $297=$296;
                var $298=$m_addr;
                var $least_addr392=(($298+16)|0);
                var $299=HEAP32[(($least_addr392)>>2)];
                var $cmp393=(($297)>>>0) >= (($299)>>>0);
                var $conv394=(($cmp393)&1);
                var $expval395=($conv394);
                var $tobool396=(($expval395)|0)!=0;
                if ($tobool396) {
                  var $300=$TP;
                  var $301=$C;
                  HEAP32[(($301)>>2)]=$300;
                  var $302=$T;
                  var $303=$TP;
                  var $parent398=(($303+24)|0);
                  HEAP32[(($parent398)>>2)]=$302;
                  var $304=$TP;
                  var $305=$TP;
                  var $bk399=(($305+12)|0);
                  HEAP32[(($bk399)>>2)]=$304;
                  var $306=$TP;
                  var $fd400=(($306+8)|0);
                  HEAP32[(($fd400)>>2)]=$304;
                  break;
                } else {
                  _abort();
                  throw "Reached an unreachable!"
                }
              }
              else if (label == 2823) {
                var $307=$T;
                var $fd405=(($307+8)|0);
                var $308=HEAP32[(($fd405)>>2)];
                $F404=$308;
                var $309=$T;
                var $310=$309;
                var $311=$m_addr;
                var $least_addr406=(($311+16)|0);
                var $312=HEAP32[(($least_addr406)>>2)];
                var $cmp407=(($310)>>>0) >= (($312)>>>0);
                if ($cmp407) {
                  var $313=$F404;
                  var $314=$313;
                  var $315=$m_addr;
                  var $least_addr409=(($315+16)|0);
                  var $316=HEAP32[(($least_addr409)>>2)];
                  var $cmp410=(($314)>>>0) >= (($316)>>>0);
                  var $317 = $cmp410;
                } else {
                  var $317 = 0;
                }
                var $317;
                var $land_ext=(($317)&1);
                var $expval412=($land_ext);
                var $tobool413=(($expval412)|0)!=0;
                if ($tobool413) {
                  var $318=$TP;
                  var $319=$F404;
                  var $bk415=(($319+12)|0);
                  HEAP32[(($bk415)>>2)]=$318;
                  var $320=$T;
                  var $fd416=(($320+8)|0);
                  HEAP32[(($fd416)>>2)]=$318;
                  var $321=$F404;
                  var $322=$TP;
                  var $fd417=(($322+8)|0);
                  HEAP32[(($fd417)>>2)]=$321;
                  var $323=$T;
                  var $324=$TP;
                  var $bk418=(($324+12)|0);
                  HEAP32[(($bk418)>>2)]=$323;
                  var $325=$TP;
                  var $parent419=(($325+24)|0);
                  HEAP32[(($parent419)>>2)]=0;
                  break;
                } else {
                  _abort();
                  throw "Reached an unreachable!"
                }
              }
            } while(0);
          } else {
            var $270=$I308;
            var $shl358=1 << $270;
            var $271=$m_addr;
            var $treemap359=(($271+4)|0);
            var $272=HEAP32[(($treemap359)>>2)];
            var $or360=$272 | $shl358;
            HEAP32[(($treemap359)>>2)]=$or360;
            var $273=$TP;
            var $274=$H307;
            HEAP32[(($274)>>2)]=$273;
            var $275=$H307;
            var $276=$275;
            var $277=$TP;
            var $parent361=(($277+24)|0);
            HEAP32[(($parent361)>>2)]=$276;
            var $278=$TP;
            var $279=$TP;
            var $bk362=(($279+12)|0);
            HEAP32[(($bk362)>>2)]=$278;
            var $280=$TP;
            var $fd363=(($280+8)|0);
            HEAP32[(($fd363)>>2)]=$278;
          }
        }
      }
      var $326=$v;
      var $327=$326;
      var $add_ptr426=(($327+8)|0);
      $retval=$add_ptr426;
      var $328=$retval;

      return $328;
    }
  } while(0);
  $retval=0;
  var $328=$retval;

  return $328;
}
_tmalloc_large["X"]=1;


function _sys_alloc($m, $nb) {
  var label = 0;

  var $retval;
  var $m_addr;
  var $nb_addr;
  var $tbase;
  var $tsize;
  var $mmap_flag;
  var $mem;
  var $br;
  var $ss;
  var $asize;
  var $base;
  var $esize;
  var $end;
  var $asize97;
  var $br106;
  var $end107;
  var $ssize;
  var $mn;
  var $sp;
  var $oldbase;
  var $rsize;
  var $p;
  var $r;
  $m_addr=$m;
  $nb_addr=$nb;
  $tbase=-1;
  $tsize=0;
  $mmap_flag=0;
  var $0=HEAP32[((((5243848)|0))>>2)];
  var $cmp=(($0)|0)!=0;
  if ($cmp) {
    var $1 = 1;
  } else {
    var $call=_init_mparams();
    var $tobool=(($call)|0)!=0;
    var $1 = $tobool;
  }
  var $1;
  var $lor_ext=(($1)&1);
  var $2=$m_addr;
  var $mflags=(($2+440)|0);
  var $3=HEAP32[(($mflags)>>2)];
  var $and=$3 & 0;
  var $tobool1=(($and)|0)!=0;
  do {
    if ($tobool1) {
      var $4=$nb_addr;
      var $5=HEAP32[((((5243860)|0))>>2)];
      var $cmp2=(($4)>>>0) >= (($5)>>>0);
      if (!($cmp2)) {
        break;
      }
      var $6=$m_addr;
      var $topsize=(($6+12)|0);
      var $7=HEAP32[(($topsize)>>2)];
      var $cmp4=(($7)|0)!=0;
      if (!($cmp4)) {
        break;
      }
      var $8=$m_addr;
      var $9=$nb_addr;
      var $call5=_mmap_alloc($8, $9);
      $mem=$call5;
      var $10=$mem;
      var $cmp6=(($10)|0)!=0;
      if (!($cmp6)) {
        break;
      }
      var $11=$mem;
      $retval=$11;
      var $228=$retval;

      return $228;
    }
  } while(0);
  var $12=$m_addr;
  var $mflags9=(($12+440)|0);
  var $13=HEAP32[(($mflags9)>>2)];
  var $and10=$13 & 4;
  var $tobool11=(($and10)|0)!=0;
  if (!($tobool11)) {
    $br=-1;
    var $14=$m_addr;
    var $top=(($14+24)|0);
    var $15=HEAP32[(($top)>>2)];
    var $cmp13=(($15)|0)==0;
    if ($cmp13) {
      var $cond = 0;
    } else {
      var $16=$m_addr;
      var $17=$m_addr;
      var $top14=(($17+24)|0);
      var $18=HEAP32[(($top14)>>2)];
      var $19=$18;
      var $call15=_segment_holding($16, $19);
      var $cond = $call15;
    }
    var $cond;
    $ss=$cond;
    $asize=0;
    var $20=$ss;
    var $cmp16=(($20)|0)==0;
    if ($cmp16) {
      var $call18=_sbrk(0);
      $base=$call18;
      var $21=$base;
      var $cmp19=(($21)|0)!=-1;
      if ($cmp19) {
        var $22=$nb_addr;
        var $add=((($22)+(48))|0);
        var $23=HEAP32[((((5243856)|0))>>2)];
        var $sub=((($23)-(1))|0);
        var $add21=((($add)+($sub))|0);
        var $24=HEAP32[((((5243856)|0))>>2)];
        var $sub22=((($24)-(1))|0);
        var $neg=$sub22 ^ -1;
        var $and23=$add21 & $neg;
        $asize=$and23;
        var $25=$base;
        var $26=$25;
        var $27=HEAP32[((((5243852)|0))>>2)];
        var $sub24=((($27)-(1))|0);
        var $and25=$26 & $sub24;
        var $cmp26=(($and25)|0)==0;
        if (!($cmp26)) {
          var $28=$base;
          var $29=$28;
          var $30=HEAP32[((((5243852)|0))>>2)];
          var $sub28=((($30)-(1))|0);
          var $add29=((($29)+($sub28))|0);
          var $31=HEAP32[((((5243852)|0))>>2)];
          var $sub30=((($31)-(1))|0);
          var $neg31=$sub30 ^ -1;
          var $and32=$add29 & $neg31;
          var $32=$base;
          var $33=$32;
          var $sub33=((($and32)-($33))|0);
          var $34=$asize;
          var $add34=((($34)+($sub33))|0);
          $asize=$add34;
        }
        var $35=$asize;
        var $cmp36=(($35)>>>0) < 2147483647;
        do {
          if ($cmp36) {
            var $36=$asize;
            var $call38=_sbrk($36);
            $br=$call38;
            var $37=$base;
            var $cmp39=(($call38)|0)==(($37)|0);
            if (!($cmp39)) {
              break;
            }
            var $38=$base;
            $tbase=$38;
            var $39=$asize;
            $tsize=$39;
          }
        } while(0);
      }
    } else {
      var $40=$nb_addr;
      var $41=$m_addr;
      var $topsize43=(($41+12)|0);
      var $42=HEAP32[(($topsize43)>>2)];
      var $sub44=((($40)-($42))|0);
      var $add45=((($sub44)+(48))|0);
      var $43=HEAP32[((((5243856)|0))>>2)];
      var $sub46=((($43)-(1))|0);
      var $add47=((($add45)+($sub46))|0);
      var $44=HEAP32[((((5243856)|0))>>2)];
      var $sub48=((($44)-(1))|0);
      var $neg49=$sub48 ^ -1;
      var $and50=$add47 & $neg49;
      $asize=$and50;
      var $45=$asize;
      var $cmp51=(($45)>>>0) < 2147483647;
      do {
        if ($cmp51) {
          var $46=$asize;
          var $call53=_sbrk($46);
          $br=$call53;
          var $47=$ss;
          var $base54=(($47)|0);
          var $48=HEAP32[(($base54)>>2)];
          var $49=$ss;
          var $size=(($49+4)|0);
          var $50=HEAP32[(($size)>>2)];
          var $add_ptr=(($48+$50)|0);
          var $cmp55=(($call53)|0)==(($add_ptr)|0);
          if (!($cmp55)) {
            break;
          }
          var $51=$br;
          $tbase=$51;
          var $52=$asize;
          $tsize=$52;
        }
      } while(0);
    }
    var $53=$tbase;
    var $cmp59=(($53)|0)==-1;
    if ($cmp59) {
      var $54=$br;
      var $cmp61=(($54)|0)!=-1;
      if ($cmp61) {
        var $55=$asize;
        var $cmp63=(($55)>>>0) < 2147483647;
        do {
          if ($cmp63) {
            var $56=$asize;
            var $57=$nb_addr;
            var $add65=((($57)+(48))|0);
            var $cmp66=(($56)>>>0) < (($add65)>>>0);
            if (!($cmp66)) {
              break;
            }
            var $58=$nb_addr;
            var $add68=((($58)+(48))|0);
            var $59=$asize;
            var $sub69=((($add68)-($59))|0);
            var $60=HEAP32[((((5243856)|0))>>2)];
            var $sub70=((($60)-(1))|0);
            var $add71=((($sub69)+($sub70))|0);
            var $61=HEAP32[((((5243856)|0))>>2)];
            var $sub72=((($61)-(1))|0);
            var $neg73=$sub72 ^ -1;
            var $and74=$add71 & $neg73;
            $esize=$and74;
            var $62=$esize;
            var $cmp75=(($62)>>>0) < 2147483647;
            if ($cmp75) {
              var $63=$esize;
              var $call77=_sbrk($63);
              $end=$call77;
              var $64=$end;
              var $cmp78=(($64)|0)!=-1;
              if ($cmp78) {
                var $65=$esize;
                var $66=$asize;
                var $add80=((($66)+($65))|0);
                $asize=$add80;
              } else {
                var $67=$asize;
                var $sub82=(((-$67))|0);
                var $call83=_sbrk($sub82);
                $br=-1;
              }
            }
          }
        } while(0);
      }
      var $68=$br;
      var $cmp88=(($68)|0)!=-1;
      if ($cmp88) {
        var $69=$br;
        $tbase=$69;
        var $70=$asize;
        $tsize=$70;
      } else {
        var $71=$m_addr;
        var $mflags91=(($71+440)|0);
        var $72=HEAP32[(($mflags91)>>2)];
        var $or=$72 | 4;
        HEAP32[(($mflags91)>>2)]=$or;
      }
    }
  }
  var $73=$tbase;
  var $cmp95=(($73)|0)==-1;
  if ($cmp95) {
    var $74=$nb_addr;
    var $add98=((($74)+(48))|0);
    var $75=HEAP32[((((5243856)|0))>>2)];
    var $sub99=((($75)-(1))|0);
    var $add100=((($add98)+($sub99))|0);
    var $76=HEAP32[((((5243856)|0))>>2)];
    var $sub101=((($76)-(1))|0);
    var $neg102=$sub101 ^ -1;
    var $and103=$add100 & $neg102;
    $asize97=$and103;
    var $77=$asize97;
    var $cmp104=(($77)>>>0) < 2147483647;
    if ($cmp104) {
      $br106=-1;
      $end107=-1;
      var $78=$asize97;
      var $call108=_sbrk($78);
      $br106=$call108;
      var $call109=_sbrk(0);
      $end107=$call109;
      var $79=$br106;
      var $cmp110=(($79)|0)!=-1;
      do {
        if ($cmp110) {
          var $80=$end107;
          var $cmp112=(($80)|0)!=-1;
          if (!($cmp112)) {
            break;
          }
          var $81=$br106;
          var $82=$end107;
          var $cmp114=(($81)>>>0) < (($82)>>>0);
          if (!($cmp114)) {
            break;
          }
          var $83=$end107;
          var $84=$br106;
          var $sub_ptr_lhs_cast=$83;
          var $sub_ptr_rhs_cast=$84;
          var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
          $ssize=$sub_ptr_sub;
          var $85=$ssize;
          var $86=$nb_addr;
          var $add116=((($86)+(40))|0);
          var $cmp117=(($85)>>>0) > (($add116)>>>0);
          if ($cmp117) {
            var $87=$br106;
            $tbase=$87;
            var $88=$ssize;
            $tsize=$88;
          }
        }
      } while(0);
    }
  }
  var $89=$tbase;
  var $cmp123=(($89)|0)!=-1;
  do {
    if ($cmp123) {
      var $90=$tsize;
      var $91=$m_addr;
      var $footprint=(($91+432)|0);
      var $92=HEAP32[(($footprint)>>2)];
      var $add125=((($92)+($90))|0);
      HEAP32[(($footprint)>>2)]=$add125;
      var $93=$m_addr;
      var $max_footprint=(($93+436)|0);
      var $94=HEAP32[(($max_footprint)>>2)];
      var $cmp126=(($add125)>>>0) > (($94)>>>0);
      if ($cmp126) {
        var $95=$m_addr;
        var $footprint128=(($95+432)|0);
        var $96=HEAP32[(($footprint128)>>2)];
        var $97=$m_addr;
        var $max_footprint129=(($97+436)|0);
        HEAP32[(($max_footprint129)>>2)]=$96;
      }
      var $98=$m_addr;
      var $top131=(($98+24)|0);
      var $99=HEAP32[(($top131)>>2)];
      var $cmp132=(($99)|0)!=0;
      if ($cmp132) {
        var $137=$m_addr;
        var $seg159=(($137+444)|0);
        $sp=$seg159;
        while(1) {
          var $138=$sp;
          var $cmp160=(($138)|0)!=0;
          if ($cmp160) {
            var $139=$tbase;
            var $140=$sp;
            var $base161=(($140)|0);
            var $141=HEAP32[(($base161)>>2)];
            var $142=$sp;
            var $size162=(($142+4)|0);
            var $143=HEAP32[(($size162)>>2)];
            var $add_ptr163=(($141+$143)|0);
            var $cmp164=(($139)|0)!=(($add_ptr163)|0);
            var $144 = $cmp164;
          } else {
            var $144 = 0;
          }
          var $144;
          if (!($144)) {
            break;
          }
          var $145=$sp;
          var $next=(($145+8)|0);
          var $146=HEAP32[(($next)>>2)];
          $sp=$146;
        }
        var $147=$sp;
        var $cmp165=(($147)|0)!=0;
        do {
          if ($cmp165) {
            var $148=$sp;
            var $sflags167=(($148+12)|0);
            var $149=HEAP32[(($sflags167)>>2)];
            var $and168=$149 & 8;
            var $tobool169=(($and168)|0)!=0;
            if ($tobool169) {
              label = 74;
              break;
            }
            var $150=$sp;
            var $sflags171=(($150+12)|0);
            var $151=HEAP32[(($sflags171)>>2)];
            var $and172=$151 & 0;
            var $152=$mmap_flag;
            var $cmp173=(($and172)|0)==(($152)|0);
            if (!($cmp173)) {
              label = 74;
              break;
            }
            var $153=$m_addr;
            var $top175=(($153+24)|0);
            var $154=HEAP32[(($top175)>>2)];
            var $155=$154;
            var $156=$sp;
            var $base176=(($156)|0);
            var $157=HEAP32[(($base176)>>2)];
            var $cmp177=(($155)>>>0) >= (($157)>>>0);
            if (!($cmp177)) {
              label = 74;
              break;
            }
            var $158=$m_addr;
            var $top179=(($158+24)|0);
            var $159=HEAP32[(($top179)>>2)];
            var $160=$159;
            var $161=$sp;
            var $base180=(($161)|0);
            var $162=HEAP32[(($base180)>>2)];
            var $163=$sp;
            var $size181=(($163+4)|0);
            var $164=HEAP32[(($size181)>>2)];
            var $add_ptr182=(($162+$164)|0);
            var $cmp183=(($160)>>>0) < (($add_ptr182)>>>0);
            if (!($cmp183)) {
              label = 74;
              break;
            }
            var $165=$tsize;
            var $166=$sp;
            var $size185=(($166+4)|0);
            var $167=HEAP32[(($size185)>>2)];
            var $add186=((($167)+($165))|0);
            HEAP32[(($size185)>>2)]=$add186;
            var $168=$m_addr;
            var $169=$m_addr;
            var $top187=(($169+24)|0);
            var $170=HEAP32[(($top187)>>2)];
            var $171=$m_addr;
            var $topsize188=(($171+12)|0);
            var $172=HEAP32[(($topsize188)>>2)];
            var $173=$tsize;
            var $add189=((($172)+($173))|0);
            _init_top($168, $170, $add189);
            break;
          } else {
            label = 74;
          }
        } while(0);
        if (label == 74) {
          var $174=$tbase;
          var $175=$m_addr;
          var $least_addr191=(($175+16)|0);
          var $176=HEAP32[(($least_addr191)>>2)];
          var $cmp192=(($174)>>>0) < (($176)>>>0);
          if ($cmp192) {
            var $177=$tbase;
            var $178=$m_addr;
            var $least_addr194=(($178+16)|0);
            HEAP32[(($least_addr194)>>2)]=$177;
          }
          var $179=$m_addr;
          var $seg196=(($179+444)|0);
          $sp=$seg196;
          while(1) {
            var $180=$sp;
            var $cmp198=(($180)|0)!=0;
            if ($cmp198) {
              var $181=$sp;
              var $base200=(($181)|0);
              var $182=HEAP32[(($base200)>>2)];
              var $183=$tbase;
              var $184=$tsize;
              var $add_ptr201=(($183+$184)|0);
              var $cmp202=(($182)|0)!=(($add_ptr201)|0);
              var $185 = $cmp202;
            } else {
              var $185 = 0;
            }
            var $185;
            if (!($185)) {
              break;
            }
            var $186=$sp;
            var $next205=(($186+8)|0);
            var $187=HEAP32[(($next205)>>2)];
            $sp=$187;
          }
          var $188=$sp;
          var $cmp207=(($188)|0)!=0;
          do {
            if ($cmp207) {
              var $189=$sp;
              var $sflags209=(($189+12)|0);
              var $190=HEAP32[(($sflags209)>>2)];
              var $and210=$190 & 8;
              var $tobool211=(($and210)|0)!=0;
              if ($tobool211) {
                break;
              }
              var $191=$sp;
              var $sflags213=(($191+12)|0);
              var $192=HEAP32[(($sflags213)>>2)];
              var $and214=$192 & 0;
              var $193=$mmap_flag;
              var $cmp215=(($and214)|0)==(($193)|0);
              if (!($cmp215)) {
                break;
              }
              var $194=$sp;
              var $base217=(($194)|0);
              var $195=HEAP32[(($base217)>>2)];
              $oldbase=$195;
              var $196=$tbase;
              var $197=$sp;
              var $base218=(($197)|0);
              HEAP32[(($base218)>>2)]=$196;
              var $198=$tsize;
              var $199=$sp;
              var $size219=(($199+4)|0);
              var $200=HEAP32[(($size219)>>2)];
              var $add220=((($200)+($198))|0);
              HEAP32[(($size219)>>2)]=$add220;
              var $201=$m_addr;
              var $202=$tbase;
              var $203=$oldbase;
              var $204=$nb_addr;
              var $call221=_prepend_alloc($201, $202, $203, $204);
              $retval=$call221;
              var $228=$retval;

              return $228;
            }
          } while(0);
          var $205=$m_addr;
          var $206=$tbase;
          var $207=$tsize;
          var $208=$mmap_flag;
          _add_segment($205, $206, $207, $208);
        }
      } else {
        var $100=$m_addr;
        var $least_addr=(($100+16)|0);
        var $101=HEAP32[(($least_addr)>>2)];
        var $cmp134=(($101)|0)==0;
        do {
          if ($cmp134) {
            label = 58;
          } else {
            var $102=$tbase;
            var $103=$m_addr;
            var $least_addr135=(($103+16)|0);
            var $104=HEAP32[(($least_addr135)>>2)];
            var $cmp136=(($102)>>>0) < (($104)>>>0);
            if ($cmp136) {
              label = 58;
              break;
            } else {
              break;
            }
          }
        } while(0);
        if (label == 58) {
          var $105=$tbase;
          var $106=$m_addr;
          var $least_addr138=(($106+16)|0);
          HEAP32[(($least_addr138)>>2)]=$105;
        }
        var $107=$tbase;
        var $108=$m_addr;
        var $seg=(($108+444)|0);
        var $base140=(($seg)|0);
        HEAP32[(($base140)>>2)]=$107;
        var $109=$tsize;
        var $110=$m_addr;
        var $seg141=(($110+444)|0);
        var $size142=(($seg141+4)|0);
        HEAP32[(($size142)>>2)]=$109;
        var $111=$mmap_flag;
        var $112=$m_addr;
        var $seg143=(($112+444)|0);
        var $sflags=(($seg143+12)|0);
        HEAP32[(($sflags)>>2)]=$111;
        var $113=HEAP32[((((5243848)|0))>>2)];
        var $114=$m_addr;
        var $magic=(($114+36)|0);
        HEAP32[(($magic)>>2)]=$113;
        var $115=$m_addr;
        var $release_checks=(($115+32)|0);
        HEAP32[(($release_checks)>>2)]=-1;
        var $116=$m_addr;
        _init_bins($116);
        var $117=$m_addr;
        var $cmp144=(($117)|0)==5267972;
        if ($cmp144) {
          var $118=$m_addr;
          var $119=$tbase;
          var $120=$119;
          var $121=$tsize;
          var $sub146=((($121)-(40))|0);
          _init_top($118, $120, $sub146);
        } else {
          var $122=$m_addr;
          var $123=$122;
          var $add_ptr148=((($123)-(8))|0);
          var $124=$add_ptr148;
          var $125=$124;
          var $126=$m_addr;
          var $127=$126;
          var $add_ptr149=((($127)-(8))|0);
          var $128=$add_ptr149;
          var $head=(($128+4)|0);
          var $129=HEAP32[(($head)>>2)];
          var $and150=$129 & -8;
          var $add_ptr151=(($125+$and150)|0);
          var $130=$add_ptr151;
          $mn=$130;
          var $131=$m_addr;
          var $132=$mn;
          var $133=$tbase;
          var $134=$tsize;
          var $add_ptr152=(($133+$134)|0);
          var $135=$mn;
          var $136=$135;
          var $sub_ptr_lhs_cast153=$add_ptr152;
          var $sub_ptr_rhs_cast154=$136;
          var $sub_ptr_sub155=((($sub_ptr_lhs_cast153)-($sub_ptr_rhs_cast154))|0);
          var $sub156=((($sub_ptr_sub155)-(40))|0);
          _init_top($131, $132, $sub156);
        }
      }
      var $209=$nb_addr;
      var $210=$m_addr;
      var $topsize226=(($210+12)|0);
      var $211=HEAP32[(($topsize226)>>2)];
      var $cmp227=(($209)>>>0) < (($211)>>>0);
      if (!($cmp227)) {
        break;
      }
      var $212=$nb_addr;
      var $213=$m_addr;
      var $topsize229=(($213+12)|0);
      var $214=HEAP32[(($topsize229)>>2)];
      var $sub230=((($214)-($212))|0);
      HEAP32[(($topsize229)>>2)]=$sub230;
      $rsize=$sub230;
      var $215=$m_addr;
      var $top231=(($215+24)|0);
      var $216=HEAP32[(($top231)>>2)];
      $p=$216;
      var $217=$p;
      var $218=$217;
      var $219=$nb_addr;
      var $add_ptr232=(($218+$219)|0);
      var $220=$add_ptr232;
      var $221=$m_addr;
      var $top233=(($221+24)|0);
      HEAP32[(($top233)>>2)]=$220;
      $r=$220;
      var $222=$rsize;
      var $or234=$222 | 1;
      var $223=$r;
      var $head235=(($223+4)|0);
      HEAP32[(($head235)>>2)]=$or234;
      var $224=$nb_addr;
      var $or236=$224 | 1;
      var $or237=$or236 | 2;
      var $225=$p;
      var $head238=(($225+4)|0);
      HEAP32[(($head238)>>2)]=$or237;
      var $226=$p;
      var $227=$226;
      var $add_ptr239=(($227+8)|0);
      $retval=$add_ptr239;
      var $228=$retval;

      return $228;
    }
  } while(0);
  var $call242=___errno_location();
  HEAP32[(($call242)>>2)]=12;
  $retval=0;
  var $228=$retval;

  return $228;
}
_sys_alloc["X"]=1;

function _free($mem) {
  var label = 0;

  var $mem_addr;
  var $p;
  var $psize;
  var $next;
  var $prevsize;
  var $prev;
  var $F;
  var $B;
  var $I;
  var $TP;
  var $XP;
  var $R;
  var $F60;
  var $RP;
  var $CP;
  var $H;
  var $C0;
  var $C1;
  var $tsize;
  var $dsize;
  var $nsize;
  var $F245;
  var $B247;
  var $I249;
  var $TP285;
  var $XP286;
  var $R288;
  var $F293;
  var $RP306;
  var $CP317;
  var $H343;
  var $C0385;
  var $C1386;
  var $I447;
  var $B449;
  var $F452;
  var $tp;
  var $H475;
  var $I476;
  var $X;
  var $Y;
  var $N;
  var $K;
  var $T;
  var $K525;
  var $C;
  var $F558;
  $mem_addr=$mem;
  var $0=$mem_addr;
  var $cmp=(($0)|0)!=0;
  if (!($cmp)) {

    return;
  }
  var $1=$mem_addr;
  var $add_ptr=((($1)-(8))|0);
  var $2=$add_ptr;
  $p=$2;
  var $3=$p;
  var $4=$3;
  var $5=HEAP32[((((5267988)|0))>>2)];
  var $cmp1=(($4)>>>0) >= (($5)>>>0);
  if ($cmp1) {
    var $6=$p;
    var $head=(($6+4)|0);
    var $7=HEAP32[(($head)>>2)];
    var $and=$7 & 3;
    var $cmp2=(($and)|0)!=1;
    var $8 = $cmp2;
  } else {
    var $8 = 0;
  }
  var $8;
  var $land_ext=(($8)&1);
  var $expval=($land_ext);
  var $tobool=(($expval)|0)!=0;
  L137: do {
    if ($tobool) {
      var $9=$p;
      var $head4=(($9+4)|0);
      var $10=HEAP32[(($head4)>>2)];
      var $and5=$10 & -8;
      $psize=$and5;
      var $11=$p;
      var $12=$11;
      var $13=$psize;
      var $add_ptr6=(($12+$13)|0);
      var $14=$add_ptr6;
      $next=$14;
      var $15=$p;
      var $head7=(($15+4)|0);
      var $16=HEAP32[(($head7)>>2)];
      var $and8=$16 & 1;
      var $tobool9=(($and8)|0)!=0;
      L139: do {
        if ($tobool9) {
          label = 173;
        } else {
          var $17=$p;
          var $prev_foot=(($17)|0);
          var $18=HEAP32[(($prev_foot)>>2)];
          $prevsize=$18;
          var $19=$p;
          var $head11=(($19+4)|0);
          var $20=HEAP32[(($head11)>>2)];
          var $and12=$20 & 3;
          var $cmp13=(($and12)|0)==0;
          if ($cmp13) {
            var $21=$prevsize;
            var $add=((($21)+(16))|0);
            var $22=$psize;
            var $add15=((($22)+($add))|0);
            $psize=$add15;
            break;
          }
          var $23=$p;
          var $24=$23;
          var $25=$prevsize;
          var $idx_neg=(((-$25))|0);
          var $add_ptr16=(($24+$idx_neg)|0);
          var $26=$add_ptr16;
          $prev=$26;
          var $27=$prevsize;
          var $28=$psize;
          var $add17=((($28)+($27))|0);
          $psize=$add17;
          var $29=$prev;
          $p=$29;
          var $30=$prev;
          var $31=$30;
          var $32=HEAP32[((((5267988)|0))>>2)];
          var $cmp18=(($31)>>>0) >= (($32)>>>0);
          var $conv=(($cmp18)&1);
          var $expval19=($conv);
          var $tobool20=(($expval19)|0)!=0;
          if (!($tobool20)) {
            _abort();
            throw "Reached an unreachable!"
          }
          var $33=$p;
          var $34=HEAP32[((((5267992)|0))>>2)];
          var $cmp22=(($33)|0)!=(($34)|0);
          do {
            if ($cmp22) {
              var $35=$prevsize;
              var $shr=$35 >>> 3;
              var $cmp25=(($shr)>>>0) < 32;
              if ($cmp25) {
                var $36=$p;
                var $fd=(($36+8)|0);
                var $37=HEAP32[(($fd)>>2)];
                $F=$37;
                var $38=$p;
                var $bk=(($38+12)|0);
                var $39=HEAP32[(($bk)>>2)];
                $B=$39;
                var $40=$prevsize;
                var $shr28=$40 >>> 3;
                $I=$shr28;
                var $41=$F;
                var $42=$B;
                var $cmp29=(($41)|0)==(($42)|0);
                if ($cmp29) {
                  var $43=$I;
                  var $shl=1 << $43;
                  var $neg=$shl ^ -1;
                  var $44=HEAP32[((((5267972)|0))>>2)];
                  var $and32=$44 & $neg;
                  HEAP32[((((5267972)|0))>>2)]=$and32;
                } else {
                  var $45=$F;
                  var $46=$I;
                  var $shl34=$46 << 1;
                  var $arrayidx=((((5268012)|0)+($shl34<<2))|0);
                  var $47=$arrayidx;
                  var $48=$47;
                  var $cmp35=(($45)|0)==(($48)|0);
                  do {
                    if ($cmp35) {
                      label = 111;
                    } else {
                      var $49=$F;
                      var $50=$49;
                      var $51=HEAP32[((((5267988)|0))>>2)];
                      var $cmp37=(($50)>>>0) >= (($51)>>>0);
                      if ($cmp37) {
                        label = 111;
                        break;
                      } else {
                        var $60 = 0;
                        break;
                      }
                    }
                  } while(0);
                  if (label == 111) {
                    var $52=$B;
                    var $53=$I;
                    var $shl40=$53 << 1;
                    var $arrayidx41=((((5268012)|0)+($shl40<<2))|0);
                    var $54=$arrayidx41;
                    var $55=$54;
                    var $cmp42=(($52)|0)==(($55)|0);
                    if ($cmp42) {
                      var $59 = 1;
                    } else {
                      var $56=$B;
                      var $57=$56;
                      var $58=HEAP32[((((5267988)|0))>>2)];
                      var $cmp44=(($57)>>>0) >= (($58)>>>0);
                      var $59 = $cmp44;
                    }
                    var $59;
                    var $60 = $59;
                  }
                  var $60;
                  var $land_ext47=(($60)&1);
                  var $expval48=($land_ext47);
                  var $tobool49=(($expval48)|0)!=0;
                  if (!($tobool49)) {
                    _abort();
                    throw "Reached an unreachable!"
                  }
                  var $61=$B;
                  var $62=$F;
                  var $bk51=(($62+12)|0);
                  HEAP32[(($bk51)>>2)]=$61;
                  var $63=$F;
                  var $64=$B;
                  var $fd52=(($64+8)|0);
                  HEAP32[(($fd52)>>2)]=$63;
                }
              } else {
                var $65=$p;
                var $66=$65;
                $TP=$66;
                var $67=$TP;
                var $parent=(($67+24)|0);
                var $68=HEAP32[(($parent)>>2)];
                $XP=$68;
                var $69=$TP;
                var $bk56=(($69+12)|0);
                var $70=HEAP32[(($bk56)>>2)];
                var $71=$TP;
                var $cmp57=(($70)|0)!=(($71)|0);
                if ($cmp57) {
                  var $72=$TP;
                  var $fd61=(($72+8)|0);
                  var $73=HEAP32[(($fd61)>>2)];
                  $F60=$73;
                  var $74=$TP;
                  var $bk62=(($74+12)|0);
                  var $75=HEAP32[(($bk62)>>2)];
                  $R=$75;
                  var $76=$F60;
                  var $77=$76;
                  var $78=HEAP32[((((5267988)|0))>>2)];
                  var $cmp63=(($77)>>>0) >= (($78)>>>0);
                  var $conv64=(($cmp63)&1);
                  var $expval65=($conv64);
                  var $tobool66=(($expval65)|0)!=0;
                  if (!($tobool66)) {
                    _abort();
                    throw "Reached an unreachable!"
                  }
                  var $79=$R;
                  var $80=$F60;
                  var $bk68=(($80+12)|0);
                  HEAP32[(($bk68)>>2)]=$79;
                  var $81=$F60;
                  var $82=$R;
                  var $fd69=(($82+8)|0);
                  HEAP32[(($fd69)>>2)]=$81;
                } else {
                  var $83=$TP;
                  var $child=(($83+16)|0);
                  var $arrayidx73=(($child+4)|0);
                  $RP=$arrayidx73;
                  var $84=HEAP32[(($arrayidx73)>>2)];
                  $R=$84;
                  var $cmp74=(($84)|0)!=0;
                  do {
                    if ($cmp74) {
                      label = 126;
                    } else {
                      var $85=$TP;
                      var $child77=(($85+16)|0);
                      var $arrayidx78=(($child77)|0);
                      $RP=$arrayidx78;
                      var $86=HEAP32[(($arrayidx78)>>2)];
                      $R=$86;
                      var $cmp79=(($86)|0)!=0;
                      if ($cmp79) {
                        label = 126;
                        break;
                      } else {
                        break;
                      }
                    }
                  } while(0);
                  if (label == 126) {
                    while(1) {
                      var $87=$R;
                      var $child82=(($87+16)|0);
                      var $arrayidx83=(($child82+4)|0);
                      $CP=$arrayidx83;
                      var $88=HEAP32[(($arrayidx83)>>2)];
                      var $cmp84=(($88)|0)!=0;
                      if ($cmp84) {
                        var $91 = 1;
                      } else {
                        var $89=$R;
                        var $child87=(($89+16)|0);
                        var $arrayidx88=(($child87)|0);
                        $CP=$arrayidx88;
                        var $90=HEAP32[(($arrayidx88)>>2)];
                        var $cmp89=(($90)|0)!=0;
                        var $91 = $cmp89;
                      }
                      var $91;
                      if (!($91)) {
                        break;
                      }
                      var $92=$CP;
                      $RP=$92;
                      var $93=HEAP32[(($92)>>2)];
                      $R=$93;
                    }
                    var $94=$RP;
                    var $95=$94;
                    var $96=HEAP32[((((5267988)|0))>>2)];
                    var $cmp92=(($95)>>>0) >= (($96)>>>0);
                    var $conv93=(($cmp92)&1);
                    var $expval94=($conv93);
                    var $tobool95=(($expval94)|0)!=0;
                    if (!($tobool95)) {
                      _abort();
                      throw "Reached an unreachable!"
                    }
                    var $97=$RP;
                    HEAP32[(($97)>>2)]=0;
                  }
                }
                var $98=$XP;
                var $cmp101=(($98)|0)!=0;
                if ($cmp101) {
                  var $99=$TP;
                  var $index=(($99+28)|0);
                  var $100=HEAP32[(($index)>>2)];
                  var $arrayidx104=((((5268276)|0)+($100<<2))|0);
                  $H=$arrayidx104;
                  var $101=$TP;
                  var $102=$H;
                  var $103=HEAP32[(($102)>>2)];
                  var $cmp105=(($101)|0)==(($103)|0);
                  if ($cmp105) {
                    var $104=$R;
                    var $105=$H;
                    HEAP32[(($105)>>2)]=$104;
                    var $cmp108=(($104)|0)==0;
                    if ($cmp108) {
                      var $106=$TP;
                      var $index111=(($106+28)|0);
                      var $107=HEAP32[(($index111)>>2)];
                      var $shl112=1 << $107;
                      var $neg113=$shl112 ^ -1;
                      var $108=HEAP32[((((5267976)|0))>>2)];
                      var $and114=$108 & $neg113;
                      HEAP32[((((5267976)|0))>>2)]=$and114;
                    }
                  } else {
                    var $109=$XP;
                    var $110=$109;
                    var $111=HEAP32[((((5267988)|0))>>2)];
                    var $cmp117=(($110)>>>0) >= (($111)>>>0);
                    var $conv118=(($cmp117)&1);
                    var $expval119=($conv118);
                    var $tobool120=(($expval119)|0)!=0;
                    if (!($tobool120)) {
                      _abort();
                      throw "Reached an unreachable!"
                    }
                    var $112=$XP;
                    var $child122=(($112+16)|0);
                    var $arrayidx123=(($child122)|0);
                    var $113=HEAP32[(($arrayidx123)>>2)];
                    var $114=$TP;
                    var $cmp124=(($113)|0)==(($114)|0);
                    if ($cmp124) {
                      var $115=$R;
                      var $116=$XP;
                      var $child127=(($116+16)|0);
                      var $arrayidx128=(($child127)|0);
                      HEAP32[(($arrayidx128)>>2)]=$115;
                    } else {
                      var $117=$R;
                      var $118=$XP;
                      var $child130=(($118+16)|0);
                      var $arrayidx131=(($child130+4)|0);
                      HEAP32[(($arrayidx131)>>2)]=$117;
                    }
                  }
                  var $119=$R;
                  var $cmp136=(($119)|0)!=0;
                  if ($cmp136) {
                    var $120=$R;
                    var $121=$120;
                    var $122=HEAP32[((((5267988)|0))>>2)];
                    var $cmp139=(($121)>>>0) >= (($122)>>>0);
                    var $conv140=(($cmp139)&1);
                    var $expval141=($conv140);
                    var $tobool142=(($expval141)|0)!=0;
                    if (!($tobool142)) {
                      _abort();
                      throw "Reached an unreachable!"
                    }
                    var $123=$XP;
                    var $124=$R;
                    var $parent144=(($124+24)|0);
                    HEAP32[(($parent144)>>2)]=$123;
                    var $125=$TP;
                    var $child145=(($125+16)|0);
                    var $arrayidx146=(($child145)|0);
                    var $126=HEAP32[(($arrayidx146)>>2)];
                    $C0=$126;
                    var $cmp147=(($126)|0)!=0;
                    if ($cmp147) {
                      var $127=$C0;
                      var $128=$127;
                      var $129=HEAP32[((((5267988)|0))>>2)];
                      var $cmp150=(($128)>>>0) >= (($129)>>>0);
                      var $conv151=(($cmp150)&1);
                      var $expval152=($conv151);
                      var $tobool153=(($expval152)|0)!=0;
                      if (!($tobool153)) {
                        _abort();
                        throw "Reached an unreachable!"
                      }
                      var $130=$C0;
                      var $131=$R;
                      var $child155=(($131+16)|0);
                      var $arrayidx156=(($child155)|0);
                      HEAP32[(($arrayidx156)>>2)]=$130;
                      var $132=$R;
                      var $133=$C0;
                      var $parent157=(($133+24)|0);
                      HEAP32[(($parent157)>>2)]=$132;
                    }
                    var $134=$TP;
                    var $child161=(($134+16)|0);
                    var $arrayidx162=(($child161+4)|0);
                    var $135=HEAP32[(($arrayidx162)>>2)];
                    $C1=$135;
                    var $cmp163=(($135)|0)!=0;
                    if ($cmp163) {
                      var $136=$C1;
                      var $137=$136;
                      var $138=HEAP32[((((5267988)|0))>>2)];
                      var $cmp166=(($137)>>>0) >= (($138)>>>0);
                      var $conv167=(($cmp166)&1);
                      var $expval168=($conv167);
                      var $tobool169=(($expval168)|0)!=0;
                      if (!($tobool169)) {
                        _abort();
                        throw "Reached an unreachable!"
                      }
                      var $139=$C1;
                      var $140=$R;
                      var $child171=(($140+16)|0);
                      var $arrayidx172=(($child171+4)|0);
                      HEAP32[(($arrayidx172)>>2)]=$139;
                      var $141=$R;
                      var $142=$C1;
                      var $parent173=(($142+24)|0);
                      HEAP32[(($parent173)>>2)]=$141;
                    }
                  }
                }
              }
            } else {
              var $143=$next;
              var $head183=(($143+4)|0);
              var $144=HEAP32[(($head183)>>2)];
              var $and184=$144 & 3;
              var $cmp185=(($and184)|0)==3;
              if ($cmp185) {
                var $145=$psize;
                HEAP32[((((5267980)|0))>>2)]=$145;
                var $146=$next;
                var $head188=(($146+4)|0);
                var $147=HEAP32[(($head188)>>2)];
                var $and189=$147 & -2;
                HEAP32[(($head188)>>2)]=$and189;
                var $148=$psize;
                var $or=$148 | 1;
                var $149=$p;
                var $head190=(($149+4)|0);
                HEAP32[(($head190)>>2)]=$or;
                var $150=$psize;
                var $151=$p;
                var $152=$151;
                var $153=$psize;
                var $add_ptr191=(($152+$153)|0);
                var $154=$add_ptr191;
                var $prev_foot192=(($154)|0);
                HEAP32[(($prev_foot192)>>2)]=$150;
                break L139;
              } else {
                break;
              }
            }
          } while(0);
          label = 173;
          break;
        }
      } while(0);
      do {
        if (label == 173) {
          var $155=$p;
          var $156=$155;
          var $157=$next;
          var $158=$157;
          var $cmp199=(($156)>>>0) < (($158)>>>0);
          if ($cmp199) {
            var $159=$next;
            var $head202=(($159+4)|0);
            var $160=HEAP32[(($head202)>>2)];
            var $and203=$160 & 1;
            var $tobool204=(($and203)|0)!=0;
            var $161 = $tobool204;
          } else {
            var $161 = 0;
          }
          var $161;
          var $land_ext206=(($161)&1);
          var $expval207=($land_ext206);
          var $tobool208=(($expval207)|0)!=0;
          if (!($tobool208)) {
            break L137;
          }
          var $162=$next;
          var $head210=(($162+4)|0);
          var $163=HEAP32[(($head210)>>2)];
          var $and211=$163 & 2;
          var $tobool212=(($and211)|0)!=0;
          if ($tobool212) {
            var $309=$next;
            var $head436=(($309+4)|0);
            var $310=HEAP32[(($head436)>>2)];
            var $and437=$310 & -2;
            HEAP32[(($head436)>>2)]=$and437;
            var $311=$psize;
            var $or438=$311 | 1;
            var $312=$p;
            var $head439=(($312+4)|0);
            HEAP32[(($head439)>>2)]=$or438;
            var $313=$psize;
            var $314=$p;
            var $315=$314;
            var $316=$psize;
            var $add_ptr440=(($315+$316)|0);
            var $317=$add_ptr440;
            var $prev_foot441=(($317)|0);
            HEAP32[(($prev_foot441)>>2)]=$313;
          } else {
            var $164=$next;
            var $165=HEAP32[((((5267996)|0))>>2)];
            var $cmp214=(($164)|0)==(($165)|0);
            if ($cmp214) {
              var $166=$psize;
              var $167=HEAP32[((((5267984)|0))>>2)];
              var $add217=((($167)+($166))|0);
              HEAP32[((((5267984)|0))>>2)]=$add217;
              $tsize=$add217;
              var $168=$p;
              HEAP32[((((5267996)|0))>>2)]=$168;
              var $169=$tsize;
              var $or218=$169 | 1;
              var $170=$p;
              var $head219=(($170+4)|0);
              HEAP32[(($head219)>>2)]=$or218;
              var $171=$p;
              var $172=HEAP32[((((5267992)|0))>>2)];
              var $cmp220=(($171)|0)==(($172)|0);
              if ($cmp220) {
                HEAP32[((((5267992)|0))>>2)]=0;
                HEAP32[((((5267980)|0))>>2)]=0;
              }
              var $173=$tsize;
              var $174=HEAP32[((((5268000)|0))>>2)];
              var $cmp224=(($173)>>>0) > (($174)>>>0);
              if ($cmp224) {
                var $call=_sys_trim(5267972, 0);
              }
              break;
            }
            var $175=$next;
            var $176=HEAP32[((((5267992)|0))>>2)];
            var $cmp229=(($175)|0)==(($176)|0);
            if ($cmp229) {
              var $177=$psize;
              var $178=HEAP32[((((5267980)|0))>>2)];
              var $add232=((($178)+($177))|0);
              HEAP32[((((5267980)|0))>>2)]=$add232;
              $dsize=$add232;
              var $179=$p;
              HEAP32[((((5267992)|0))>>2)]=$179;
              var $180=$dsize;
              var $or233=$180 | 1;
              var $181=$p;
              var $head234=(($181+4)|0);
              HEAP32[(($head234)>>2)]=$or233;
              var $182=$dsize;
              var $183=$p;
              var $184=$183;
              var $185=$dsize;
              var $add_ptr235=(($184+$185)|0);
              var $186=$add_ptr235;
              var $prev_foot236=(($186)|0);
              HEAP32[(($prev_foot236)>>2)]=$182;
              break;
            }
            var $187=$next;
            var $head238=(($187+4)|0);
            var $188=HEAP32[(($head238)>>2)];
            var $and239=$188 & -8;
            $nsize=$and239;
            var $189=$nsize;
            var $190=$psize;
            var $add240=((($190)+($189))|0);
            $psize=$add240;
            var $191=$nsize;
            var $shr241=$191 >>> 3;
            var $cmp242=(($shr241)>>>0) < 32;
            if ($cmp242) {
              var $192=$next;
              var $fd246=(($192+8)|0);
              var $193=HEAP32[(($fd246)>>2)];
              $F245=$193;
              var $194=$next;
              var $bk248=(($194+12)|0);
              var $195=HEAP32[(($bk248)>>2)];
              $B247=$195;
              var $196=$nsize;
              var $shr250=$196 >>> 3;
              $I249=$shr250;
              var $197=$F245;
              var $198=$B247;
              var $cmp251=(($197)|0)==(($198)|0);
              if ($cmp251) {
                var $199=$I249;
                var $shl254=1 << $199;
                var $neg255=$shl254 ^ -1;
                var $200=HEAP32[((((5267972)|0))>>2)];
                var $and256=$200 & $neg255;
                HEAP32[((((5267972)|0))>>2)]=$and256;
              } else {
                var $201=$F245;
                var $202=$I249;
                var $shl258=$202 << 1;
                var $arrayidx259=((((5268012)|0)+($shl258<<2))|0);
                var $203=$arrayidx259;
                var $204=$203;
                var $cmp260=(($201)|0)==(($204)|0);
                do {
                  if ($cmp260) {
                    label = 190;
                  } else {
                    var $205=$F245;
                    var $206=$205;
                    var $207=HEAP32[((((5267988)|0))>>2)];
                    var $cmp263=(($206)>>>0) >= (($207)>>>0);
                    if ($cmp263) {
                      label = 190;
                      break;
                    } else {
                      var $216 = 0;
                      break;
                    }
                  }
                } while(0);
                if (label == 190) {
                  var $208=$B247;
                  var $209=$I249;
                  var $shl266=$209 << 1;
                  var $arrayidx267=((((5268012)|0)+($shl266<<2))|0);
                  var $210=$arrayidx267;
                  var $211=$210;
                  var $cmp268=(($208)|0)==(($211)|0);
                  if ($cmp268) {
                    var $215 = 1;
                  } else {
                    var $212=$B247;
                    var $213=$212;
                    var $214=HEAP32[((((5267988)|0))>>2)];
                    var $cmp271=(($213)>>>0) >= (($214)>>>0);
                    var $215 = $cmp271;
                  }
                  var $215;
                  var $216 = $215;
                }
                var $216;
                var $land_ext275=(($216)&1);
                var $expval276=($land_ext275);
                var $tobool277=(($expval276)|0)!=0;
                if (!($tobool277)) {
                  _abort();
                  throw "Reached an unreachable!"
                }
                var $217=$B247;
                var $218=$F245;
                var $bk279=(($218+12)|0);
                HEAP32[(($bk279)>>2)]=$217;
                var $219=$F245;
                var $220=$B247;
                var $fd280=(($220+8)|0);
                HEAP32[(($fd280)>>2)]=$219;
              }
            } else {
              var $221=$next;
              var $222=$221;
              $TP285=$222;
              var $223=$TP285;
              var $parent287=(($223+24)|0);
              var $224=HEAP32[(($parent287)>>2)];
              $XP286=$224;
              var $225=$TP285;
              var $bk289=(($225+12)|0);
              var $226=HEAP32[(($bk289)>>2)];
              var $227=$TP285;
              var $cmp290=(($226)|0)!=(($227)|0);
              if ($cmp290) {
                var $228=$TP285;
                var $fd294=(($228+8)|0);
                var $229=HEAP32[(($fd294)>>2)];
                $F293=$229;
                var $230=$TP285;
                var $bk295=(($230+12)|0);
                var $231=HEAP32[(($bk295)>>2)];
                $R288=$231;
                var $232=$F293;
                var $233=$232;
                var $234=HEAP32[((((5267988)|0))>>2)];
                var $cmp296=(($233)>>>0) >= (($234)>>>0);
                var $conv297=(($cmp296)&1);
                var $expval298=($conv297);
                var $tobool299=(($expval298)|0)!=0;
                if (!($tobool299)) {
                  _abort();
                  throw "Reached an unreachable!"
                }
                var $235=$R288;
                var $236=$F293;
                var $bk301=(($236+12)|0);
                HEAP32[(($bk301)>>2)]=$235;
                var $237=$F293;
                var $238=$R288;
                var $fd302=(($238+8)|0);
                HEAP32[(($fd302)>>2)]=$237;
              } else {
                var $239=$TP285;
                var $child307=(($239+16)|0);
                var $arrayidx308=(($child307+4)|0);
                $RP306=$arrayidx308;
                var $240=HEAP32[(($arrayidx308)>>2)];
                $R288=$240;
                var $cmp309=(($240)|0)!=0;
                do {
                  if ($cmp309) {
                    label = 205;
                  } else {
                    var $241=$TP285;
                    var $child312=(($241+16)|0);
                    var $arrayidx313=(($child312)|0);
                    $RP306=$arrayidx313;
                    var $242=HEAP32[(($arrayidx313)>>2)];
                    $R288=$242;
                    var $cmp314=(($242)|0)!=0;
                    if ($cmp314) {
                      label = 205;
                      break;
                    } else {
                      break;
                    }
                  }
                } while(0);
                if (label == 205) {
                  while(1) {
                    var $243=$R288;
                    var $child319=(($243+16)|0);
                    var $arrayidx320=(($child319+4)|0);
                    $CP317=$arrayidx320;
                    var $244=HEAP32[(($arrayidx320)>>2)];
                    var $cmp321=(($244)|0)!=0;
                    if ($cmp321) {
                      var $247 = 1;
                    } else {
                      var $245=$R288;
                      var $child324=(($245+16)|0);
                      var $arrayidx325=(($child324)|0);
                      $CP317=$arrayidx325;
                      var $246=HEAP32[(($arrayidx325)>>2)];
                      var $cmp326=(($246)|0)!=0;
                      var $247 = $cmp326;
                    }
                    var $247;
                    if (!($247)) {
                      break;
                    }
                    var $248=$CP317;
                    $RP306=$248;
                    var $249=HEAP32[(($248)>>2)];
                    $R288=$249;
                  }
                  var $250=$RP306;
                  var $251=$250;
                  var $252=HEAP32[((((5267988)|0))>>2)];
                  var $cmp331=(($251)>>>0) >= (($252)>>>0);
                  var $conv332=(($cmp331)&1);
                  var $expval333=($conv332);
                  var $tobool334=(($expval333)|0)!=0;
                  if (!($tobool334)) {
                    _abort();
                    throw "Reached an unreachable!"
                  }
                  var $253=$RP306;
                  HEAP32[(($253)>>2)]=0;
                }
              }
              var $254=$XP286;
              var $cmp340=(($254)|0)!=0;
              if ($cmp340) {
                var $255=$TP285;
                var $index344=(($255+28)|0);
                var $256=HEAP32[(($index344)>>2)];
                var $arrayidx345=((((5268276)|0)+($256<<2))|0);
                $H343=$arrayidx345;
                var $257=$TP285;
                var $258=$H343;
                var $259=HEAP32[(($258)>>2)];
                var $cmp346=(($257)|0)==(($259)|0);
                if ($cmp346) {
                  var $260=$R288;
                  var $261=$H343;
                  HEAP32[(($261)>>2)]=$260;
                  var $cmp349=(($260)|0)==0;
                  if ($cmp349) {
                    var $262=$TP285;
                    var $index352=(($262+28)|0);
                    var $263=HEAP32[(($index352)>>2)];
                    var $shl353=1 << $263;
                    var $neg354=$shl353 ^ -1;
                    var $264=HEAP32[((((5267976)|0))>>2)];
                    var $and355=$264 & $neg354;
                    HEAP32[((((5267976)|0))>>2)]=$and355;
                  }
                } else {
                  var $265=$XP286;
                  var $266=$265;
                  var $267=HEAP32[((((5267988)|0))>>2)];
                  var $cmp358=(($266)>>>0) >= (($267)>>>0);
                  var $conv359=(($cmp358)&1);
                  var $expval360=($conv359);
                  var $tobool361=(($expval360)|0)!=0;
                  if (!($tobool361)) {
                    _abort();
                    throw "Reached an unreachable!"
                  }
                  var $268=$XP286;
                  var $child363=(($268+16)|0);
                  var $arrayidx364=(($child363)|0);
                  var $269=HEAP32[(($arrayidx364)>>2)];
                  var $270=$TP285;
                  var $cmp365=(($269)|0)==(($270)|0);
                  if ($cmp365) {
                    var $271=$R288;
                    var $272=$XP286;
                    var $child368=(($272+16)|0);
                    var $arrayidx369=(($child368)|0);
                    HEAP32[(($arrayidx369)>>2)]=$271;
                  } else {
                    var $273=$R288;
                    var $274=$XP286;
                    var $child371=(($274+16)|0);
                    var $arrayidx372=(($child371+4)|0);
                    HEAP32[(($arrayidx372)>>2)]=$273;
                  }
                }
                var $275=$R288;
                var $cmp377=(($275)|0)!=0;
                if ($cmp377) {
                  var $276=$R288;
                  var $277=$276;
                  var $278=HEAP32[((((5267988)|0))>>2)];
                  var $cmp380=(($277)>>>0) >= (($278)>>>0);
                  var $conv381=(($cmp380)&1);
                  var $expval382=($conv381);
                  var $tobool383=(($expval382)|0)!=0;
                  if (!($tobool383)) {
                    _abort();
                    throw "Reached an unreachable!"
                  }
                  var $279=$XP286;
                  var $280=$R288;
                  var $parent387=(($280+24)|0);
                  HEAP32[(($parent387)>>2)]=$279;
                  var $281=$TP285;
                  var $child388=(($281+16)|0);
                  var $arrayidx389=(($child388)|0);
                  var $282=HEAP32[(($arrayidx389)>>2)];
                  $C0385=$282;
                  var $cmp390=(($282)|0)!=0;
                  if ($cmp390) {
                    var $283=$C0385;
                    var $284=$283;
                    var $285=HEAP32[((((5267988)|0))>>2)];
                    var $cmp393=(($284)>>>0) >= (($285)>>>0);
                    var $conv394=(($cmp393)&1);
                    var $expval395=($conv394);
                    var $tobool396=(($expval395)|0)!=0;
                    if (!($tobool396)) {
                      _abort();
                      throw "Reached an unreachable!"
                    }
                    var $286=$C0385;
                    var $287=$R288;
                    var $child398=(($287+16)|0);
                    var $arrayidx399=(($child398)|0);
                    HEAP32[(($arrayidx399)>>2)]=$286;
                    var $288=$R288;
                    var $289=$C0385;
                    var $parent400=(($289+24)|0);
                    HEAP32[(($parent400)>>2)]=$288;
                  }
                  var $290=$TP285;
                  var $child404=(($290+16)|0);
                  var $arrayidx405=(($child404+4)|0);
                  var $291=HEAP32[(($arrayidx405)>>2)];
                  $C1386=$291;
                  var $cmp406=(($291)|0)!=0;
                  if ($cmp406) {
                    var $292=$C1386;
                    var $293=$292;
                    var $294=HEAP32[((((5267988)|0))>>2)];
                    var $cmp409=(($293)>>>0) >= (($294)>>>0);
                    var $conv410=(($cmp409)&1);
                    var $expval411=($conv410);
                    var $tobool412=(($expval411)|0)!=0;
                    if (!($tobool412)) {
                      _abort();
                      throw "Reached an unreachable!"
                    }
                    var $295=$C1386;
                    var $296=$R288;
                    var $child414=(($296+16)|0);
                    var $arrayidx415=(($child414+4)|0);
                    HEAP32[(($arrayidx415)>>2)]=$295;
                    var $297=$R288;
                    var $298=$C1386;
                    var $parent416=(($298+24)|0);
                    HEAP32[(($parent416)>>2)]=$297;
                  }
                }
              }
            }
            var $299=$psize;
            var $or425=$299 | 1;
            var $300=$p;
            var $head426=(($300+4)|0);
            HEAP32[(($head426)>>2)]=$or425;
            var $301=$psize;
            var $302=$p;
            var $303=$302;
            var $304=$psize;
            var $add_ptr427=(($303+$304)|0);
            var $305=$add_ptr427;
            var $prev_foot428=(($305)|0);
            HEAP32[(($prev_foot428)>>2)]=$301;
            var $306=$p;
            var $307=HEAP32[((((5267992)|0))>>2)];
            var $cmp429=(($306)|0)==(($307)|0);
            if ($cmp429) {
              var $308=$psize;
              HEAP32[((((5267980)|0))>>2)]=$308;
              break;
            }
          }
          var $318=$psize;
          var $shr443=$318 >>> 3;
          var $cmp444=(($shr443)>>>0) < 32;
          if ($cmp444) {
            var $319=$psize;
            var $shr448=$319 >>> 3;
            $I447=$shr448;
            var $320=$I447;
            var $shl450=$320 << 1;
            var $arrayidx451=((((5268012)|0)+($shl450<<2))|0);
            var $321=$arrayidx451;
            var $322=$321;
            $B449=$322;
            var $323=$B449;
            $F452=$323;
            var $324=HEAP32[((((5267972)|0))>>2)];
            var $325=$I447;
            var $shl453=1 << $325;
            var $and454=$324 & $shl453;
            var $tobool455=(($and454)|0)!=0;
            if ($tobool455) {
              var $328=$B449;
              var $fd460=(($328+8)|0);
              var $329=HEAP32[(($fd460)>>2)];
              var $330=$329;
              var $331=HEAP32[((((5267988)|0))>>2)];
              var $cmp461=(($330)>>>0) >= (($331)>>>0);
              var $conv462=(($cmp461)&1);
              var $expval463=($conv462);
              var $tobool464=(($expval463)|0)!=0;
              if (!($tobool464)) {
                _abort();
                throw "Reached an unreachable!"
              }
              var $332=$B449;
              var $fd466=(($332+8)|0);
              var $333=HEAP32[(($fd466)>>2)];
              $F452=$333;
            } else {
              var $326=$I447;
              var $shl457=1 << $326;
              var $327=HEAP32[((((5267972)|0))>>2)];
              var $or458=$327 | $shl457;
              HEAP32[((((5267972)|0))>>2)]=$or458;
            }
            var $334=$p;
            var $335=$B449;
            var $fd470=(($335+8)|0);
            HEAP32[(($fd470)>>2)]=$334;
            var $336=$p;
            var $337=$F452;
            var $bk471=(($337+12)|0);
            HEAP32[(($bk471)>>2)]=$336;
            var $338=$F452;
            var $339=$p;
            var $fd472=(($339+8)|0);
            HEAP32[(($fd472)>>2)]=$338;
            var $340=$B449;
            var $341=$p;
            var $bk473=(($341+12)|0);
            HEAP32[(($bk473)>>2)]=$340;
          } else {
            var $342=$p;
            var $343=$342;
            $tp=$343;
            var $344=$psize;
            var $shr477=$344 >>> 8;
            $X=$shr477;
            var $345=$X;
            var $cmp478=(($345)|0)==0;
            if ($cmp478) {
              $I476=0;
            } else {
              var $346=$X;
              var $cmp482=(($346)>>>0) > 65535;
              if ($cmp482) {
                $I476=31;
              } else {
                var $347=$X;
                $Y=$347;
                var $348=$Y;
                var $sub=((($348)-(256))|0);
                var $shr486=$sub >>> 16;
                var $and487=$shr486 & 8;
                $N=$and487;
                var $349=$N;
                var $350=$Y;
                var $shl488=$350 << $349;
                $Y=$shl488;
                var $sub489=((($shl488)-(4096))|0);
                var $shr490=$sub489 >>> 16;
                var $and491=$shr490 & 4;
                $K=$and491;
                var $351=$K;
                var $352=$N;
                var $add492=((($352)+($351))|0);
                $N=$add492;
                var $353=$K;
                var $354=$Y;
                var $shl493=$354 << $353;
                $Y=$shl493;
                var $sub494=((($shl493)-(16384))|0);
                var $shr495=$sub494 >>> 16;
                var $and496=$shr495 & 2;
                $K=$and496;
                var $355=$N;
                var $add497=((($355)+($and496))|0);
                $N=$add497;
                var $356=$N;
                var $sub498=(((14)-($356))|0);
                var $357=$K;
                var $358=$Y;
                var $shl499=$358 << $357;
                $Y=$shl499;
                var $shr500=$shl499 >>> 15;
                var $add501=((($sub498)+($shr500))|0);
                $K=$add501;
                var $359=$K;
                var $shl502=$359 << 1;
                var $360=$psize;
                var $361=$K;
                var $add503=((($361)+(7))|0);
                var $shr504=$360 >>> (($add503)>>>0);
                var $and505=$shr504 & 1;
                var $add506=((($shl502)+($and505))|0);
                $I476=$add506;
              }
            }
            var $362=$I476;
            var $arrayidx509=((((5268276)|0)+($362<<2))|0);
            $H475=$arrayidx509;
            var $363=$I476;
            var $364=$tp;
            var $index510=(($364+28)|0);
            HEAP32[(($index510)>>2)]=$363;
            var $365=$tp;
            var $child511=(($365+16)|0);
            var $arrayidx512=(($child511+4)|0);
            HEAP32[(($arrayidx512)>>2)]=0;
            var $366=$tp;
            var $child513=(($366+16)|0);
            var $arrayidx514=(($child513)|0);
            HEAP32[(($arrayidx514)>>2)]=0;
            var $367=HEAP32[((((5267976)|0))>>2)];
            var $368=$I476;
            var $shl515=1 << $368;
            var $and516=$367 & $shl515;
            var $tobool517=(($and516)|0)!=0;
            if ($tobool517) {
              var $379=$H475;
              var $380=HEAP32[(($379)>>2)];
              $T=$380;
              var $381=$psize;
              var $382=$I476;
              var $cmp526=(($382)|0)==31;
              if ($cmp526) {
                var $cond = 0;
              } else {
                var $383=$I476;
                var $shr528=$383 >>> 1;
                var $add529=((($shr528)+(8))|0);
                var $sub530=((($add529)-(2))|0);
                var $sub531=(((31)-($sub530))|0);
                var $cond = $sub531;
              }
              var $cond;
              var $shl532=$381 << $cond;
              $K525=$shl532;
              while(1) {
                var $384=$T;
                var $head533=(($384+4)|0);
                var $385=HEAP32[(($head533)>>2)];
                var $and534=$385 & -8;
                var $386=$psize;
                var $cmp535=(($and534)|0)!=(($386)|0);
                if (!($cmp535)) {
                  label = 277;
                  break;
                }
                var $387=$K525;
                var $shr538=$387 >>> 31;
                var $and539=$shr538 & 1;
                var $388=$T;
                var $child540=(($388+16)|0);
                var $arrayidx541=(($child540+($and539<<2))|0);
                $C=$arrayidx541;
                var $389=$K525;
                var $shl542=$389 << 1;
                $K525=$shl542;
                var $390=$C;
                var $391=HEAP32[(($390)>>2)];
                var $cmp543=(($391)|0)!=0;
                if (!($cmp543)) {
                  label = 273;
                  break;
                }
                var $392=$C;
                var $393=HEAP32[(($392)>>2)];
                $T=$393;
              }
              do {
                if (label == 273) {
                  var $394=$C;
                  var $395=$394;
                  var $396=HEAP32[((((5267988)|0))>>2)];
                  var $cmp547=(($395)>>>0) >= (($396)>>>0);
                  var $conv548=(($cmp547)&1);
                  var $expval549=($conv548);
                  var $tobool550=(($expval549)|0)!=0;
                  if ($tobool550) {
                    var $397=$tp;
                    var $398=$C;
                    HEAP32[(($398)>>2)]=$397;
                    var $399=$T;
                    var $400=$tp;
                    var $parent552=(($400+24)|0);
                    HEAP32[(($parent552)>>2)]=$399;
                    var $401=$tp;
                    var $402=$tp;
                    var $bk553=(($402+12)|0);
                    HEAP32[(($bk553)>>2)]=$401;
                    var $403=$tp;
                    var $fd554=(($403+8)|0);
                    HEAP32[(($fd554)>>2)]=$401;
                    break;
                  } else {
                    _abort();
                    throw "Reached an unreachable!"
                  }
                }
                else if (label == 277) {
                  var $404=$T;
                  var $fd559=(($404+8)|0);
                  var $405=HEAP32[(($fd559)>>2)];
                  $F558=$405;
                  var $406=$T;
                  var $407=$406;
                  var $408=HEAP32[((((5267988)|0))>>2)];
                  var $cmp560=(($407)>>>0) >= (($408)>>>0);
                  if ($cmp560) {
                    var $409=$F558;
                    var $410=$409;
                    var $411=HEAP32[((((5267988)|0))>>2)];
                    var $cmp563=(($410)>>>0) >= (($411)>>>0);
                    var $412 = $cmp563;
                  } else {
                    var $412 = 0;
                  }
                  var $412;
                  var $land_ext566=(($412)&1);
                  var $expval567=($land_ext566);
                  var $tobool568=(($expval567)|0)!=0;
                  if ($tobool568) {
                    var $413=$tp;
                    var $414=$F558;
                    var $bk570=(($414+12)|0);
                    HEAP32[(($bk570)>>2)]=$413;
                    var $415=$T;
                    var $fd571=(($415+8)|0);
                    HEAP32[(($fd571)>>2)]=$413;
                    var $416=$F558;
                    var $417=$tp;
                    var $fd572=(($417+8)|0);
                    HEAP32[(($fd572)>>2)]=$416;
                    var $418=$T;
                    var $419=$tp;
                    var $bk573=(($419+12)|0);
                    HEAP32[(($bk573)>>2)]=$418;
                    var $420=$tp;
                    var $parent574=(($420+24)|0);
                    HEAP32[(($parent574)>>2)]=0;
                    break;
                  } else {
                    _abort();
                    throw "Reached an unreachable!"
                  }
                }
              } while(0);
            } else {
              var $369=$I476;
              var $shl519=1 << $369;
              var $370=HEAP32[((((5267976)|0))>>2)];
              var $or520=$370 | $shl519;
              HEAP32[((((5267976)|0))>>2)]=$or520;
              var $371=$tp;
              var $372=$H475;
              HEAP32[(($372)>>2)]=$371;
              var $373=$H475;
              var $374=$373;
              var $375=$tp;
              var $parent521=(($375+24)|0);
              HEAP32[(($parent521)>>2)]=$374;
              var $376=$tp;
              var $377=$tp;
              var $bk522=(($377+12)|0);
              HEAP32[(($bk522)>>2)]=$376;
              var $378=$tp;
              var $fd523=(($378+8)|0);
              HEAP32[(($fd523)>>2)]=$376;
            }
            var $421=HEAP32[((((5268004)|0))>>2)];
            var $dec=((($421)-(1))|0);
            HEAP32[((((5268004)|0))>>2)]=$dec;
            var $cmp578=(($dec)|0)==0;
            if ($cmp578) {
              var $call581=_release_unused_segments(5267972);
            }
          }
        }
      } while(0);

      return;
    }
  } while(0);
  _abort();
  throw "Reached an unreachable!"
}
_free["X"]=1;

function _sys_trim($m, $pad) {
  var label = 0;

  var $m_addr;
  var $pad_addr;
  var $released;
  var $unit;
  var $extra;
  var $sp;
  var $old_br;
  var $rel_br;
  var $new_br;
  $m_addr=$m;
  $pad_addr=$pad;
  $released=0;
  var $0=HEAP32[((((5243848)|0))>>2)];
  var $cmp=(($0)|0)!=0;
  if ($cmp) {
    var $1 = 1;
  } else {
    var $call=_init_mparams();
    var $tobool=(($call)|0)!=0;
    var $1 = $tobool;
  }
  var $1;
  var $lor_ext=(($1)&1);
  var $2=$pad_addr;
  var $cmp1=(($2)>>>0) < 4294967232;
  if (!($cmp1)) {
    var $56=$released;
    var $cmp52=(($56)|0)!=0;
    var $cond=$cmp52 ? 1 : 0;

    return $cond;
  }
  var $3=$m_addr;
  var $top=(($3+24)|0);
  var $4=HEAP32[(($top)>>2)];
  var $cmp2=(($4)|0)!=0;
  if (!($cmp2)) {
    var $56=$released;
    var $cmp52=(($56)|0)!=0;
    var $cond=$cmp52 ? 1 : 0;

    return $cond;
  }
  var $5=$pad_addr;
  var $add=((($5)+(40))|0);
  $pad_addr=$add;
  var $6=$m_addr;
  var $topsize=(($6+12)|0);
  var $7=HEAP32[(($topsize)>>2)];
  var $8=$pad_addr;
  var $cmp3=(($7)>>>0) > (($8)>>>0);
  if ($cmp3) {
    var $9=HEAP32[((((5243856)|0))>>2)];
    $unit=$9;
    var $10=$m_addr;
    var $topsize5=(($10+12)|0);
    var $11=HEAP32[(($topsize5)>>2)];
    var $12=$pad_addr;
    var $sub=((($11)-($12))|0);
    var $13=$unit;
    var $sub6=((($13)-(1))|0);
    var $add7=((($sub)+($sub6))|0);
    var $14=$unit;
    var $div=Math.floor(((($add7)>>>0))/((($14)>>>0)));
    var $sub8=((($div)-(1))|0);
    var $15=$unit;
    var $mul=((($sub8)*($15))&-1);
    $extra=$mul;
    var $16=$m_addr;
    var $17=$m_addr;
    var $top9=(($17+24)|0);
    var $18=HEAP32[(($top9)>>2)];
    var $19=$18;
    var $call10=_segment_holding($16, $19);
    $sp=$call10;
    var $20=$sp;
    var $sflags=(($20+12)|0);
    var $21=HEAP32[(($sflags)>>2)];
    var $and=$21 & 8;
    var $tobool11=(($and)|0)!=0;
    if (!($tobool11)) {
      var $22=$sp;
      var $sflags13=(($22+12)|0);
      var $23=HEAP32[(($sflags13)>>2)];
      var $and14=$23 & 0;
      var $tobool15=(($and14)|0)!=0;
      if ($tobool15) {
      } else {
        var $24=$extra;
        var $cmp17=(($24)>>>0) >= 2147483647;
        if ($cmp17) {
          var $25=$unit;
          var $sub19=(((-2147483648)-($25))|0);
          $extra=$sub19;
        }
        var $call20=_sbrk(0);
        $old_br=$call20;
        var $26=$old_br;
        var $27=$sp;
        var $base=(($27)|0);
        var $28=HEAP32[(($base)>>2)];
        var $29=$sp;
        var $size=(($29+4)|0);
        var $30=HEAP32[(($size)>>2)];
        var $add_ptr=(($28+$30)|0);
        var $cmp21=(($26)|0)==(($add_ptr)|0);
        if ($cmp21) {
          var $31=$extra;
          var $sub23=(((-$31))|0);
          var $call24=_sbrk($sub23);
          $rel_br=$call24;
          var $call25=_sbrk(0);
          $new_br=$call25;
          var $32=$rel_br;
          var $cmp26=(($32)|0)!=-1;
          do {
            if ($cmp26) {
              var $33=$new_br;
              var $34=$old_br;
              var $cmp28=(($33)>>>0) < (($34)>>>0);
              if (!($cmp28)) {
                break;
              }
              var $35=$old_br;
              var $36=$new_br;
              var $sub_ptr_lhs_cast=$35;
              var $sub_ptr_rhs_cast=$36;
              var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
              $released=$sub_ptr_sub;
            }
          } while(0);
        }
      }
    }
    var $37=$released;
    var $cmp34=(($37)|0)!=0;
    if ($cmp34) {
      var $38=$released;
      var $39=$sp;
      var $size36=(($39+4)|0);
      var $40=HEAP32[(($size36)>>2)];
      var $sub37=((($40)-($38))|0);
      HEAP32[(($size36)>>2)]=$sub37;
      var $41=$released;
      var $42=$m_addr;
      var $footprint=(($42+432)|0);
      var $43=HEAP32[(($footprint)>>2)];
      var $sub38=((($43)-($41))|0);
      HEAP32[(($footprint)>>2)]=$sub38;
      var $44=$m_addr;
      var $45=$m_addr;
      var $top39=(($45+24)|0);
      var $46=HEAP32[(($top39)>>2)];
      var $47=$m_addr;
      var $topsize40=(($47+12)|0);
      var $48=HEAP32[(($topsize40)>>2)];
      var $49=$released;
      var $sub41=((($48)-($49))|0);
      _init_top($44, $46, $sub41);
    }
  }
  var $50=$released;
  var $cmp44=(($50)|0)==0;
  do {
    if ($cmp44) {
      var $51=$m_addr;
      var $topsize46=(($51+12)|0);
      var $52=HEAP32[(($topsize46)>>2)];
      var $53=$m_addr;
      var $trim_check=(($53+28)|0);
      var $54=HEAP32[(($trim_check)>>2)];
      var $cmp47=(($52)>>>0) > (($54)>>>0);
      if (!($cmp47)) {
        break;
      }
      var $55=$m_addr;
      var $trim_check49=(($55+28)|0);
      HEAP32[(($trim_check49)>>2)]=-1;
    }
  } while(0);
  var $56=$released;
  var $cmp52=(($56)|0)!=0;
  var $cond=$cmp52 ? 1 : 0;

  return $cond;
}
_sys_trim["X"]=1;

function _realloc($oldmem, $bytes) {
  var label = 0;

  var $retval;
  var $oldmem_addr;
  var $bytes_addr;
  var $m;
  $oldmem_addr=$oldmem;
  $bytes_addr=$bytes;
  var $0=$oldmem_addr;
  var $cmp=(($0)|0)==0;
  if ($cmp) {
    var $1=$bytes_addr;
    var $call=_malloc($1);
    $retval=$call;
    var $5=$retval;

    return $5;
  } else {
    $m=5267972;
    var $2=$m;
    var $3=$oldmem_addr;
    var $4=$bytes_addr;
    var $call1=_internal_realloc($2, $3, $4);
    $retval=$call1;
    var $5=$retval;

    return $5;
  }
}


function _release_unused_segments($m) {
  var label = 0;

  var $m_addr;
  var $released;
  var $nsegs;
  var $pred;
  var $sp;
  var $base;
  var $size;
  var $next3;
  var $p;
  var $psize;
  var $tp;
  var $XP;
  var $R;
  var $F;
  var $RP;
  var $CP;
  var $H;
  var $C0;
  var $C1;
  var $H147;
  var $I;
  var $X;
  var $Y;
  var $N;
  var $K;
  var $T;
  var $K197;
  var $C;
  var $F235;
  $m_addr=$m;
  $released=0;
  $nsegs=0;
  var $0=$m_addr;
  var $seg=(($0+444)|0);
  $pred=$seg;
  var $1=$pred;
  var $next=(($1+8)|0);
  var $2=HEAP32[(($next)>>2)];
  $sp=$2;
  L451: while(1) {
    var $3=$sp;
    var $cmp=(($3)|0)!=0;
    if (!($cmp)) {
      label = 417;
      break;
    }
    var $4=$sp;
    var $base1=(($4)|0);
    var $5=HEAP32[(($base1)>>2)];
    $base=$5;
    var $6=$sp;
    var $size2=(($6+4)|0);
    var $7=HEAP32[(($size2)>>2)];
    $size=$7;
    var $8=$sp;
    var $next4=(($8+8)|0);
    var $9=HEAP32[(($next4)>>2)];
    $next3=$9;
    var $10=$nsegs;
    var $inc=((($10)+(1))|0);
    $nsegs=$inc;
    var $11=$sp;
    var $sflags=(($11+12)|0);
    var $12=HEAP32[(($sflags)>>2)];
    var $and=$12 & 0;
    var $tobool=(($and)|0)!=0;
    do {
      if ($tobool) {
        var $13=$sp;
        var $sflags5=(($13+12)|0);
        var $14=HEAP32[(($sflags5)>>2)];
        var $and6=$14 & 8;
        var $tobool7=(($and6)|0)!=0;
        if ($tobool7) {
          break;
        }
        var $15=$base;
        var $16=$base;
        var $add_ptr=(($16+8)|0);
        var $17=$add_ptr;
        var $and8=$17 & 7;
        var $cmp9=(($and8)|0)==0;
        if ($cmp9) {
          var $cond = 0;
        } else {
          var $18=$base;
          var $add_ptr10=(($18+8)|0);
          var $19=$add_ptr10;
          var $and11=$19 & 7;
          var $sub=(((8)-($and11))|0);
          var $and12=$sub & 7;
          var $cond = $and12;
        }
        var $cond;
        var $add_ptr13=(($15+$cond)|0);
        var $20=$add_ptr13;
        $p=$20;
        var $21=$p;
        var $head=(($21+4)|0);
        var $22=HEAP32[(($head)>>2)];
        var $and14=$22 & -8;
        $psize=$and14;
        var $23=$p;
        var $head15=(($23+4)|0);
        var $24=HEAP32[(($head15)>>2)];
        var $and16=$24 & 3;
        var $cmp17=(($and16)|0)!=1;
        do {
          if (!($cmp17)) {
            var $25=$p;
            var $26=$25;
            var $27=$psize;
            var $add_ptr19=(($26+$27)|0);
            var $28=$base;
            var $29=$size;
            var $add_ptr20=(($28+$29)|0);
            var $add_ptr21=((($add_ptr20)-(40))|0);
            var $cmp22=(($add_ptr19)>>>0) >= (($add_ptr21)>>>0);
            if (!($cmp22)) {
              break;
            }
            var $30=$p;
            var $31=$30;
            $tp=$31;
            var $32=$p;
            var $33=$m_addr;
            var $dv=(($33+20)|0);
            var $34=HEAP32[(($dv)>>2)];
            var $cmp24=(($32)|0)==(($34)|0);
            if ($cmp24) {
              var $35=$m_addr;
              var $dv26=(($35+20)|0);
              HEAP32[(($dv26)>>2)]=0;
              var $36=$m_addr;
              var $dvsize=(($36+8)|0);
              HEAP32[(($dvsize)>>2)]=0;
            } else {
              var $37=$tp;
              var $parent=(($37+24)|0);
              var $38=HEAP32[(($parent)>>2)];
              $XP=$38;
              var $39=$tp;
              var $bk=(($39+12)|0);
              var $40=HEAP32[(($bk)>>2)];
              var $41=$tp;
              var $cmp27=(($40)|0)!=(($41)|0);
              if ($cmp27) {
                var $42=$tp;
                var $fd=(($42+8)|0);
                var $43=HEAP32[(($fd)>>2)];
                $F=$43;
                var $44=$tp;
                var $bk29=(($44+12)|0);
                var $45=HEAP32[(($bk29)>>2)];
                $R=$45;
                var $46=$F;
                var $47=$46;
                var $48=$m_addr;
                var $least_addr=(($48+16)|0);
                var $49=HEAP32[(($least_addr)>>2)];
                var $cmp30=(($47)>>>0) >= (($49)>>>0);
                var $conv=(($cmp30)&1);
                var $expval=($conv);
                var $tobool31=(($expval)|0)!=0;
                if (!($tobool31)) {
                  label = 345;
                  break L451;
                }
                var $50=$R;
                var $51=$F;
                var $bk33=(($51+12)|0);
                HEAP32[(($bk33)>>2)]=$50;
                var $52=$F;
                var $53=$R;
                var $fd34=(($53+8)|0);
                HEAP32[(($fd34)>>2)]=$52;
              } else {
                var $54=$tp;
                var $child=(($54+16)|0);
                var $arrayidx=(($child+4)|0);
                $RP=$arrayidx;
                var $55=HEAP32[(($arrayidx)>>2)];
                $R=$55;
                var $cmp37=(($55)|0)!=0;
                do {
                  if ($cmp37) {
                    label = 349;
                  } else {
                    var $56=$tp;
                    var $child39=(($56+16)|0);
                    var $arrayidx40=(($child39)|0);
                    $RP=$arrayidx40;
                    var $57=HEAP32[(($arrayidx40)>>2)];
                    $R=$57;
                    var $cmp41=(($57)|0)!=0;
                    if ($cmp41) {
                      label = 349;
                      break;
                    } else {
                      break;
                    }
                  }
                } while(0);
                if (label == 349) {
                  label = 0;
                  while(1) {
                    var $58=$R;
                    var $child45=(($58+16)|0);
                    var $arrayidx46=(($child45+4)|0);
                    $CP=$arrayidx46;
                    var $59=HEAP32[(($arrayidx46)>>2)];
                    var $cmp47=(($59)|0)!=0;
                    if ($cmp47) {
                      var $62 = 1;
                    } else {
                      var $60=$R;
                      var $child49=(($60+16)|0);
                      var $arrayidx50=(($child49)|0);
                      $CP=$arrayidx50;
                      var $61=HEAP32[(($arrayidx50)>>2)];
                      var $cmp51=(($61)|0)!=0;
                      var $62 = $cmp51;
                    }
                    var $62;
                    if (!($62)) {
                      break;
                    }
                    var $63=$CP;
                    $RP=$63;
                    var $64=HEAP32[(($63)>>2)];
                    $R=$64;
                  }
                  var $65=$RP;
                  var $66=$65;
                  var $67=$m_addr;
                  var $least_addr54=(($67+16)|0);
                  var $68=HEAP32[(($least_addr54)>>2)];
                  var $cmp55=(($66)>>>0) >= (($68)>>>0);
                  var $conv56=(($cmp55)&1);
                  var $expval57=($conv56);
                  var $tobool58=(($expval57)|0)!=0;
                  if (!($tobool58)) {
                    label = 356;
                    break L451;
                  }
                  var $69=$RP;
                  HEAP32[(($69)>>2)]=0;
                }
              }
              var $70=$XP;
              var $cmp64=(($70)|0)!=0;
              if ($cmp64) {
                var $71=$tp;
                var $index=(($71+28)|0);
                var $72=HEAP32[(($index)>>2)];
                var $73=$m_addr;
                var $treebins=(($73+304)|0);
                var $arrayidx67=(($treebins+($72<<2))|0);
                $H=$arrayidx67;
                var $74=$tp;
                var $75=$H;
                var $76=HEAP32[(($75)>>2)];
                var $cmp68=(($74)|0)==(($76)|0);
                if ($cmp68) {
                  var $77=$R;
                  var $78=$H;
                  HEAP32[(($78)>>2)]=$77;
                  var $cmp71=(($77)|0)==0;
                  if ($cmp71) {
                    var $79=$tp;
                    var $index74=(($79+28)|0);
                    var $80=HEAP32[(($index74)>>2)];
                    var $shl=1 << $80;
                    var $neg=$shl ^ -1;
                    var $81=$m_addr;
                    var $treemap=(($81+4)|0);
                    var $82=HEAP32[(($treemap)>>2)];
                    var $and75=$82 & $neg;
                    HEAP32[(($treemap)>>2)]=$and75;
                  }
                } else {
                  var $83=$XP;
                  var $84=$83;
                  var $85=$m_addr;
                  var $least_addr78=(($85+16)|0);
                  var $86=HEAP32[(($least_addr78)>>2)];
                  var $cmp79=(($84)>>>0) >= (($86)>>>0);
                  var $conv80=(($cmp79)&1);
                  var $expval81=($conv80);
                  var $tobool82=(($expval81)|0)!=0;
                  if (!($tobool82)) {
                    label = 369;
                    break L451;
                  }
                  var $87=$XP;
                  var $child84=(($87+16)|0);
                  var $arrayidx85=(($child84)|0);
                  var $88=HEAP32[(($arrayidx85)>>2)];
                  var $89=$tp;
                  var $cmp86=(($88)|0)==(($89)|0);
                  if ($cmp86) {
                    var $90=$R;
                    var $91=$XP;
                    var $child89=(($91+16)|0);
                    var $arrayidx90=(($child89)|0);
                    HEAP32[(($arrayidx90)>>2)]=$90;
                  } else {
                    var $92=$R;
                    var $93=$XP;
                    var $child92=(($93+16)|0);
                    var $arrayidx93=(($child92+4)|0);
                    HEAP32[(($arrayidx93)>>2)]=$92;
                  }
                }
                var $94=$R;
                var $cmp98=(($94)|0)!=0;
                if ($cmp98) {
                  var $95=$R;
                  var $96=$95;
                  var $97=$m_addr;
                  var $least_addr101=(($97+16)|0);
                  var $98=HEAP32[(($least_addr101)>>2)];
                  var $cmp102=(($96)>>>0) >= (($98)>>>0);
                  var $conv103=(($cmp102)&1);
                  var $expval104=($conv103);
                  var $tobool105=(($expval104)|0)!=0;
                  if (!($tobool105)) {
                    label = 384;
                    break L451;
                  }
                  var $99=$XP;
                  var $100=$R;
                  var $parent107=(($100+24)|0);
                  HEAP32[(($parent107)>>2)]=$99;
                  var $101=$tp;
                  var $child108=(($101+16)|0);
                  var $arrayidx109=(($child108)|0);
                  var $102=HEAP32[(($arrayidx109)>>2)];
                  $C0=$102;
                  var $cmp110=(($102)|0)!=0;
                  if ($cmp110) {
                    var $103=$C0;
                    var $104=$103;
                    var $105=$m_addr;
                    var $least_addr113=(($105+16)|0);
                    var $106=HEAP32[(($least_addr113)>>2)];
                    var $cmp114=(($104)>>>0) >= (($106)>>>0);
                    var $conv115=(($cmp114)&1);
                    var $expval116=($conv115);
                    var $tobool117=(($expval116)|0)!=0;
                    if (!($tobool117)) {
                      label = 376;
                      break L451;
                    }
                    var $107=$C0;
                    var $108=$R;
                    var $child119=(($108+16)|0);
                    var $arrayidx120=(($child119)|0);
                    HEAP32[(($arrayidx120)>>2)]=$107;
                    var $109=$R;
                    var $110=$C0;
                    var $parent121=(($110+24)|0);
                    HEAP32[(($parent121)>>2)]=$109;
                  }
                  var $111=$tp;
                  var $child125=(($111+16)|0);
                  var $arrayidx126=(($child125+4)|0);
                  var $112=HEAP32[(($arrayidx126)>>2)];
                  $C1=$112;
                  var $cmp127=(($112)|0)!=0;
                  if ($cmp127) {
                    var $113=$C1;
                    var $114=$113;
                    var $115=$m_addr;
                    var $least_addr130=(($115+16)|0);
                    var $116=HEAP32[(($least_addr130)>>2)];
                    var $cmp131=(($114)>>>0) >= (($116)>>>0);
                    var $conv132=(($cmp131)&1);
                    var $expval133=($conv132);
                    var $tobool134=(($expval133)|0)!=0;
                    if (!($tobool134)) {
                      label = 381;
                      break L451;
                    }
                    var $117=$C1;
                    var $118=$R;
                    var $child136=(($118+16)|0);
                    var $arrayidx137=(($child136+4)|0);
                    HEAP32[(($arrayidx137)>>2)]=$117;
                    var $119=$R;
                    var $120=$C1;
                    var $parent138=(($120+24)|0);
                    HEAP32[(($parent138)>>2)]=$119;
                  }
                }
              }
            }
            var $121=$psize;
            var $shr=$121 >>> 8;
            $X=$shr;
            var $122=$X;
            var $cmp148=(($122)|0)==0;
            if ($cmp148) {
              $I=0;
            } else {
              var $123=$X;
              var $cmp152=(($123)>>>0) > 65535;
              if ($cmp152) {
                $I=31;
              } else {
                var $124=$X;
                $Y=$124;
                var $125=$Y;
                var $sub156=((($125)-(256))|0);
                var $shr157=$sub156 >>> 16;
                var $and158=$shr157 & 8;
                $N=$and158;
                var $126=$N;
                var $127=$Y;
                var $shl159=$127 << $126;
                $Y=$shl159;
                var $sub160=((($shl159)-(4096))|0);
                var $shr161=$sub160 >>> 16;
                var $and162=$shr161 & 4;
                $K=$and162;
                var $128=$K;
                var $129=$N;
                var $add=((($129)+($128))|0);
                $N=$add;
                var $130=$K;
                var $131=$Y;
                var $shl163=$131 << $130;
                $Y=$shl163;
                var $sub164=((($shl163)-(16384))|0);
                var $shr165=$sub164 >>> 16;
                var $and166=$shr165 & 2;
                $K=$and166;
                var $132=$N;
                var $add167=((($132)+($and166))|0);
                $N=$add167;
                var $133=$N;
                var $sub168=(((14)-($133))|0);
                var $134=$K;
                var $135=$Y;
                var $shl169=$135 << $134;
                $Y=$shl169;
                var $shr170=$shl169 >>> 15;
                var $add171=((($sub168)+($shr170))|0);
                $K=$add171;
                var $136=$K;
                var $shl172=$136 << 1;
                var $137=$psize;
                var $138=$K;
                var $add173=((($138)+(7))|0);
                var $shr174=$137 >>> (($add173)>>>0);
                var $and175=$shr174 & 1;
                var $add176=((($shl172)+($and175))|0);
                $I=$add176;
              }
            }
            var $139=$I;
            var $140=$m_addr;
            var $treebins179=(($140+304)|0);
            var $arrayidx180=(($treebins179+($139<<2))|0);
            $H147=$arrayidx180;
            var $141=$I;
            var $142=$tp;
            var $index181=(($142+28)|0);
            HEAP32[(($index181)>>2)]=$141;
            var $143=$tp;
            var $child182=(($143+16)|0);
            var $arrayidx183=(($child182+4)|0);
            HEAP32[(($arrayidx183)>>2)]=0;
            var $144=$tp;
            var $child184=(($144+16)|0);
            var $arrayidx185=(($child184)|0);
            HEAP32[(($arrayidx185)>>2)]=0;
            var $145=$m_addr;
            var $treemap186=(($145+4)|0);
            var $146=HEAP32[(($treemap186)>>2)];
            var $147=$I;
            var $shl187=1 << $147;
            var $and188=$146 & $shl187;
            var $tobool189=(($and188)|0)!=0;
            if ($tobool189) {
              var $159=$H147;
              var $160=HEAP32[(($159)>>2)];
              $T=$160;
              var $161=$psize;
              var $162=$I;
              var $cmp198=(($162)|0)==31;
              if ($cmp198) {
                var $cond207 = 0;
              } else {
                var $163=$I;
                var $shr202=$163 >>> 1;
                var $add203=((($shr202)+(8))|0);
                var $sub204=((($add203)-(2))|0);
                var $sub205=(((31)-($sub204))|0);
                var $cond207 = $sub205;
              }
              var $cond207;
              var $shl208=$161 << $cond207;
              $K197=$shl208;
              while(1) {
                var $164=$T;
                var $head209=(($164+4)|0);
                var $165=HEAP32[(($head209)>>2)];
                var $and210=$165 & -8;
                var $166=$psize;
                var $cmp211=(($and210)|0)!=(($166)|0);
                if (!($cmp211)) {
                  label = 407;
                  break;
                }
                var $167=$K197;
                var $shr214=$167 >>> 31;
                var $and215=$shr214 & 1;
                var $168=$T;
                var $child216=(($168+16)|0);
                var $arrayidx217=(($child216+($and215<<2))|0);
                $C=$arrayidx217;
                var $169=$K197;
                var $shl218=$169 << 1;
                $K197=$shl218;
                var $170=$C;
                var $171=HEAP32[(($170)>>2)];
                var $cmp219=(($171)|0)!=0;
                if (!($cmp219)) {
                  label = 403;
                  break;
                }
                var $172=$C;
                var $173=HEAP32[(($172)>>2)];
                $T=$173;
              }
              if (label == 403) {
                label = 0;
                var $174=$C;
                var $175=$174;
                var $176=$m_addr;
                var $least_addr223=(($176+16)|0);
                var $177=HEAP32[(($least_addr223)>>2)];
                var $cmp224=(($175)>>>0) >= (($177)>>>0);
                var $conv225=(($cmp224)&1);
                var $expval226=($conv225);
                var $tobool227=(($expval226)|0)!=0;
                if (!($tobool227)) {
                  label = 405;
                  break L451;
                }
                var $178=$tp;
                var $179=$C;
                HEAP32[(($179)>>2)]=$178;
                var $180=$T;
                var $181=$tp;
                var $parent229=(($181+24)|0);
                HEAP32[(($parent229)>>2)]=$180;
                var $182=$tp;
                var $183=$tp;
                var $bk230=(($183+12)|0);
                HEAP32[(($bk230)>>2)]=$182;
                var $184=$tp;
                var $fd231=(($184+8)|0);
                HEAP32[(($fd231)>>2)]=$182;
              }
              else if (label == 407) {
                label = 0;
                var $185=$T;
                var $fd236=(($185+8)|0);
                var $186=HEAP32[(($fd236)>>2)];
                $F235=$186;
                var $187=$T;
                var $188=$187;
                var $189=$m_addr;
                var $least_addr237=(($189+16)|0);
                var $190=HEAP32[(($least_addr237)>>2)];
                var $cmp238=(($188)>>>0) >= (($190)>>>0);
                if ($cmp238) {
                  var $191=$F235;
                  var $192=$191;
                  var $193=$m_addr;
                  var $least_addr240=(($193+16)|0);
                  var $194=HEAP32[(($least_addr240)>>2)];
                  var $cmp241=(($192)>>>0) >= (($194)>>>0);
                  var $195 = $cmp241;
                } else {
                  var $195 = 0;
                }
                var $195;
                var $land_ext=(($195)&1);
                var $expval243=($land_ext);
                var $tobool244=(($expval243)|0)!=0;
                if (!($tobool244)) {
                  label = 411;
                  break L451;
                }
                var $196=$tp;
                var $197=$F235;
                var $bk246=(($197+12)|0);
                HEAP32[(($bk246)>>2)]=$196;
                var $198=$T;
                var $fd247=(($198+8)|0);
                HEAP32[(($fd247)>>2)]=$196;
                var $199=$F235;
                var $200=$tp;
                var $fd248=(($200+8)|0);
                HEAP32[(($fd248)>>2)]=$199;
                var $201=$T;
                var $202=$tp;
                var $bk249=(($202+12)|0);
                HEAP32[(($bk249)>>2)]=$201;
                var $203=$tp;
                var $parent250=(($203+24)|0);
                HEAP32[(($parent250)>>2)]=0;
              }
            } else {
              var $148=$I;
              var $shl191=1 << $148;
              var $149=$m_addr;
              var $treemap192=(($149+4)|0);
              var $150=HEAP32[(($treemap192)>>2)];
              var $or=$150 | $shl191;
              HEAP32[(($treemap192)>>2)]=$or;
              var $151=$tp;
              var $152=$H147;
              HEAP32[(($152)>>2)]=$151;
              var $153=$H147;
              var $154=$153;
              var $155=$tp;
              var $parent193=(($155+24)|0);
              HEAP32[(($parent193)>>2)]=$154;
              var $156=$tp;
              var $157=$tp;
              var $bk194=(($157+12)|0);
              HEAP32[(($bk194)>>2)]=$156;
              var $158=$tp;
              var $fd195=(($158+8)|0);
              HEAP32[(($fd195)>>2)]=$156;
            }
          }
        } while(0);
      }
    } while(0);
    var $204=$sp;
    $pred=$204;
    var $205=$next3;
    $sp=$205;
  }
  if (label == 369) {
    _abort();
    throw "Reached an unreachable!"
  }
  else if (label == 405) {
    _abort();
    throw "Reached an unreachable!"
  }
  else if (label == 345) {
    _abort();
    throw "Reached an unreachable!"
  }
  else if (label == 356) {
    _abort();
    throw "Reached an unreachable!"
  }
  else if (label == 411) {
    _abort();
    throw "Reached an unreachable!"
  }
  else if (label == 417) {
    var $206=$nsegs;
    var $cmp257=(($206)>>>0) > 4294967295;
    if ($cmp257) {
      var $207=$nsegs;
      var $cond262 = $207;
      var $cond262;
      var $208=$m_addr;
      var $release_checks=(($208+32)|0);
      HEAP32[(($release_checks)>>2)]=$cond262;
      var $209=$released;

      return $209;
    } else {
      var $cond262 = -1;
      var $cond262;
      var $208=$m_addr;
      var $release_checks=(($208+32)|0);
      HEAP32[(($release_checks)>>2)]=$cond262;
      var $209=$released;

      return $209;
    }
  }
  else if (label == 381) {
    _abort();
    throw "Reached an unreachable!"
  }
  else if (label == 384) {
    _abort();
    throw "Reached an unreachable!"
  }
  else if (label == 376) {
    _abort();
    throw "Reached an unreachable!"
  }
}
_release_unused_segments["X"]=1;

function _mmap_resize($m, $oldp, $nb) {
  var label = 0;

  var $retval;
  var $m_addr;
  var $oldp_addr;
  var $nb_addr;
  var $oldsize;
  var $offset;
  var $oldmmsize;
  var $newmmsize;
  var $cp;
  var $newp;
  var $psize;
  $m_addr=$m;
  $oldp_addr=$oldp;
  $nb_addr=$nb;
  var $0=$oldp_addr;
  var $head=(($0+4)|0);
  var $1=HEAP32[(($head)>>2)];
  var $and=$1 & -8;
  $oldsize=$and;
  var $2=$nb_addr;
  var $shr=$2 >>> 3;
  var $cmp=(($shr)>>>0) < 32;
  if ($cmp) {
    $retval=0;
    var $47=$retval;

    return $47;
  }
  var $3=$oldsize;
  var $4=$nb_addr;
  var $add=((($4)+(4))|0);
  var $cmp1=(($3)>>>0) >= (($add)>>>0);
  do {
    if ($cmp1) {
      var $5=$oldsize;
      var $6=$nb_addr;
      var $sub=((($5)-($6))|0);
      var $7=HEAP32[((((5243856)|0))>>2)];
      var $shl=$7 << 1;
      var $cmp2=(($sub)>>>0) <= (($shl)>>>0);
      if (!($cmp2)) {
        break;
      }
      var $8=$oldp_addr;
      $retval=$8;
      var $47=$retval;

      return $47;
    }
  } while(0);
  var $9=$oldp_addr;
  var $prev_foot=(($9)|0);
  var $10=HEAP32[(($prev_foot)>>2)];
  $offset=$10;
  var $11=$oldsize;
  var $12=$offset;
  var $add4=((($11)+($12))|0);
  var $add5=((($add4)+(16))|0);
  $oldmmsize=$add5;
  var $13=$nb_addr;
  var $add6=((($13)+(24))|0);
  var $add7=((($add6)+(7))|0);
  var $14=HEAP32[((((5243852)|0))>>2)];
  var $sub8=((($14)-(1))|0);
  var $add9=((($add7)+($sub8))|0);
  var $15=HEAP32[((((5243852)|0))>>2)];
  var $sub10=((($15)-(1))|0);
  var $neg=$sub10 ^ -1;
  var $and11=$add9 & $neg;
  $newmmsize=$and11;
  $cp=-1;
  var $16=$cp;
  var $cmp12=(($16)|0)!=-1;
  if (!($cmp12)) {
    $retval=0;
    var $47=$retval;

    return $47;
  }
  var $17=$cp;
  var $18=$offset;
  var $add_ptr=(($17+$18)|0);
  var $19=$add_ptr;
  $newp=$19;
  var $20=$newmmsize;
  var $21=$offset;
  var $sub14=((($20)-($21))|0);
  var $sub15=((($sub14)-(16))|0);
  $psize=$sub15;
  var $22=$psize;
  var $23=$newp;
  var $head16=(($23+4)|0);
  HEAP32[(($head16)>>2)]=$22;
  var $24=$newp;
  var $25=$24;
  var $26=$psize;
  var $add_ptr17=(($25+$26)|0);
  var $27=$add_ptr17;
  var $head18=(($27+4)|0);
  HEAP32[(($head18)>>2)]=7;
  var $28=$newp;
  var $29=$28;
  var $30=$psize;
  var $add19=((($30)+(4))|0);
  var $add_ptr20=(($29+$add19)|0);
  var $31=$add_ptr20;
  var $head21=(($31+4)|0);
  HEAP32[(($head21)>>2)]=0;
  var $32=$cp;
  var $33=$m_addr;
  var $least_addr=(($33+16)|0);
  var $34=HEAP32[(($least_addr)>>2)];
  var $cmp22=(($32)>>>0) < (($34)>>>0);
  if ($cmp22) {
    var $35=$cp;
    var $36=$m_addr;
    var $least_addr24=(($36+16)|0);
    HEAP32[(($least_addr24)>>2)]=$35;
  }
  var $37=$newmmsize;
  var $38=$oldmmsize;
  var $sub26=((($37)-($38))|0);
  var $39=$m_addr;
  var $footprint=(($39+432)|0);
  var $40=HEAP32[(($footprint)>>2)];
  var $add27=((($40)+($sub26))|0);
  HEAP32[(($footprint)>>2)]=$add27;
  var $41=$m_addr;
  var $max_footprint=(($41+436)|0);
  var $42=HEAP32[(($max_footprint)>>2)];
  var $cmp28=(($add27)>>>0) > (($42)>>>0);
  if ($cmp28) {
    var $43=$m_addr;
    var $footprint30=(($43+432)|0);
    var $44=HEAP32[(($footprint30)>>2)];
    var $45=$m_addr;
    var $max_footprint31=(($45+436)|0);
    HEAP32[(($max_footprint31)>>2)]=$44;
  }
  var $46=$newp;
  $retval=$46;
  var $47=$retval;

  return $47;
}
_mmap_resize["X"]=1;

function _segment_holding($m, $addr) {
  var label = 0;

  var $retval;
  var $m_addr;
  var $addr_addr;
  var $sp;
  $m_addr=$m;
  $addr_addr=$addr;
  var $0=$m_addr;
  var $seg=(($0+444)|0);
  $sp=$seg;
  while(1) {
    var $1=$addr_addr;
    var $2=$sp;
    var $base=(($2)|0);
    var $3=HEAP32[(($base)>>2)];
    var $cmp=(($1)>>>0) >= (($3)>>>0);
    if ($cmp) {
      var $4=$addr_addr;
      var $5=$sp;
      var $base1=(($5)|0);
      var $6=HEAP32[(($base1)>>2)];
      var $7=$sp;
      var $size=(($7+4)|0);
      var $8=HEAP32[(($size)>>2)];
      var $add_ptr=(($6+$8)|0);
      var $cmp2=(($4)>>>0) < (($add_ptr)>>>0);
      if ($cmp2) {
        label = 444;
        break;
      }
    }
    var $10=$sp;
    var $next=(($10+8)|0);
    var $11=HEAP32[(($next)>>2)];
    $sp=$11;
    var $cmp3=(($11)|0)==0;
    if ($cmp3) {
      label = 446;
      break;
    }
  }
  if (label == 444) {
    var $9=$sp;
    $retval=$9;
    var $12=$retval;

    return $12;
  }
  else if (label == 446) {
    $retval=0;
    var $12=$retval;

    return $12;
  }
}


function _init_top($m, $p, $psize) {
  var label = 0;

  var $m_addr;
  var $p_addr;
  var $psize_addr;
  var $offset;
  $m_addr=$m;
  $p_addr=$p;
  $psize_addr=$psize;
  var $0=$p_addr;
  var $1=$0;
  var $add_ptr=(($1+8)|0);
  var $2=$add_ptr;
  var $and=$2 & 7;
  var $cmp=(($and)|0)==0;
  if ($cmp) {
    var $cond = 0;
  } else {
    var $3=$p_addr;
    var $4=$3;
    var $add_ptr1=(($4+8)|0);
    var $5=$add_ptr1;
    var $and2=$5 & 7;
    var $sub=(((8)-($and2))|0);
    var $and3=$sub & 7;
    var $cond = $and3;
  }
  var $cond;
  $offset=$cond;
  var $6=$p_addr;
  var $7=$6;
  var $8=$offset;
  var $add_ptr4=(($7+$8)|0);
  var $9=$add_ptr4;
  $p_addr=$9;
  var $10=$offset;
  var $11=$psize_addr;
  var $sub5=((($11)-($10))|0);
  $psize_addr=$sub5;
  var $12=$p_addr;
  var $13=$m_addr;
  var $top=(($13+24)|0);
  HEAP32[(($top)>>2)]=$12;
  var $14=$psize_addr;
  var $15=$m_addr;
  var $topsize=(($15+12)|0);
  HEAP32[(($topsize)>>2)]=$14;
  var $16=$psize_addr;
  var $or=$16 | 1;
  var $17=$p_addr;
  var $head=(($17+4)|0);
  HEAP32[(($head)>>2)]=$or;
  var $18=$p_addr;
  var $19=$18;
  var $20=$psize_addr;
  var $add_ptr6=(($19+$20)|0);
  var $21=$add_ptr6;
  var $head7=(($21+4)|0);
  HEAP32[(($head7)>>2)]=40;
  var $22=HEAP32[((((5243864)|0))>>2)];
  var $23=$m_addr;
  var $trim_check=(($23+28)|0);
  HEAP32[(($trim_check)>>2)]=$22;

  return;
}
_init_top["X"]=1;

function _mmap_alloc($m, $nb) {
  var label = 0;

  var $retval;
  var $m_addr;
  var $nb_addr;
  var $mmsize;
  var $mm;
  var $offset;
  var $psize;
  var $p;
  $m_addr=$m;
  $nb_addr=$nb;
  var $0=$nb_addr;
  var $add=((($0)+(24))|0);
  var $add1=((($add)+(7))|0);
  var $1=HEAP32[((((5243852)|0))>>2)];
  var $sub=((($1)-(1))|0);
  var $add2=((($add1)+($sub))|0);
  var $2=HEAP32[((((5243852)|0))>>2)];
  var $sub3=((($2)-(1))|0);
  var $neg=$sub3 ^ -1;
  var $and=$add2 & $neg;
  $mmsize=$and;
  var $3=$mmsize;
  var $4=$nb_addr;
  var $cmp=(($3)>>>0) > (($4)>>>0);
  do {
    if ($cmp) {
      $mm=-1;
      var $5=$mm;
      var $cmp4=(($5)|0)!=-1;
      if (!($cmp4)) {
        break;
      }
      var $6=$mm;
      var $add_ptr=(($6+8)|0);
      var $7=$add_ptr;
      var $and6=$7 & 7;
      var $cmp7=(($and6)|0)==0;
      if ($cmp7) {
        var $cond = 0;
      } else {
        var $8=$mm;
        var $add_ptr8=(($8+8)|0);
        var $9=$add_ptr8;
        var $and9=$9 & 7;
        var $sub10=(((8)-($and9))|0);
        var $and11=$sub10 & 7;
        var $cond = $and11;
      }
      var $cond;
      $offset=$cond;
      var $10=$mmsize;
      var $11=$offset;
      var $sub12=((($10)-($11))|0);
      var $sub13=((($sub12)-(16))|0);
      $psize=$sub13;
      var $12=$mm;
      var $13=$offset;
      var $add_ptr14=(($12+$13)|0);
      var $14=$add_ptr14;
      $p=$14;
      var $15=$offset;
      var $16=$p;
      var $prev_foot=(($16)|0);
      HEAP32[(($prev_foot)>>2)]=$15;
      var $17=$psize;
      var $18=$p;
      var $head=(($18+4)|0);
      HEAP32[(($head)>>2)]=$17;
      var $19=$p;
      var $20=$19;
      var $21=$psize;
      var $add_ptr15=(($20+$21)|0);
      var $22=$add_ptr15;
      var $head16=(($22+4)|0);
      HEAP32[(($head16)>>2)]=7;
      var $23=$p;
      var $24=$23;
      var $25=$psize;
      var $add17=((($25)+(4))|0);
      var $add_ptr18=(($24+$add17)|0);
      var $26=$add_ptr18;
      var $head19=(($26+4)|0);
      HEAP32[(($head19)>>2)]=0;
      var $27=$m_addr;
      var $least_addr=(($27+16)|0);
      var $28=HEAP32[(($least_addr)>>2)];
      var $cmp20=(($28)|0)==0;
      do {
        if ($cmp20) {
          label = 462;
        } else {
          var $29=$mm;
          var $30=$m_addr;
          var $least_addr21=(($30+16)|0);
          var $31=HEAP32[(($least_addr21)>>2)];
          var $cmp22=(($29)>>>0) < (($31)>>>0);
          if ($cmp22) {
            label = 462;
            break;
          } else {
            break;
          }
        }
      } while(0);
      if (label == 462) {
        var $32=$mm;
        var $33=$m_addr;
        var $least_addr24=(($33+16)|0);
        HEAP32[(($least_addr24)>>2)]=$32;
      }
      var $34=$mmsize;
      var $35=$m_addr;
      var $footprint=(($35+432)|0);
      var $36=HEAP32[(($footprint)>>2)];
      var $add25=((($36)+($34))|0);
      HEAP32[(($footprint)>>2)]=$add25;
      var $37=$m_addr;
      var $max_footprint=(($37+436)|0);
      var $38=HEAP32[(($max_footprint)>>2)];
      var $cmp26=(($add25)>>>0) > (($38)>>>0);
      if ($cmp26) {
        var $39=$m_addr;
        var $footprint28=(($39+432)|0);
        var $40=HEAP32[(($footprint28)>>2)];
        var $41=$m_addr;
        var $max_footprint29=(($41+436)|0);
        HEAP32[(($max_footprint29)>>2)]=$40;
      }
      var $42=$p;
      var $43=$42;
      var $add_ptr31=(($43+8)|0);
      $retval=$add_ptr31;
      var $44=$retval;

      return $44;
    }
  } while(0);
  $retval=0;
  var $44=$retval;

  return $44;
}
_mmap_alloc["X"]=1;

function _init_bins($m) {
  var label = 0;

  var $m_addr;
  var $i;
  var $bin;
  $m_addr=$m;
  $i=0;
  while(1) {
    var $0=$i;
    var $cmp=(($0)>>>0) < 32;
    if (!($cmp)) {
      break;
    }
    var $1=$i;
    var $shl=$1 << 1;
    var $2=$m_addr;
    var $smallbins=(($2+40)|0);
    var $arrayidx=(($smallbins+($shl<<2))|0);
    var $3=$arrayidx;
    var $4=$3;
    $bin=$4;
    var $5=$bin;
    var $6=$bin;
    var $bk=(($6+12)|0);
    HEAP32[(($bk)>>2)]=$5;
    var $7=$bin;
    var $fd=(($7+8)|0);
    HEAP32[(($fd)>>2)]=$5;
    var $8=$i;
    var $inc=((($8)+(1))|0);
    $i=$inc;
  }

  return;
}


function _internal_realloc($m, $oldmem, $bytes) {
  var label = 0;

  var $retval;
  var $m_addr;
  var $oldmem_addr;
  var $bytes_addr;
  var $oldp;
  var $oldsize;
  var $next;
  var $newp;
  var $extra;
  var $nb;
  var $rsize;
  var $remainder;
  var $newsize;
  var $newtopsize;
  var $newtop;
  var $newmem;
  var $oc;
  $m_addr=$m;
  $oldmem_addr=$oldmem;
  $bytes_addr=$bytes;
  var $0=$bytes_addr;
  var $cmp=(($0)>>>0) >= 4294967232;
  if ($cmp) {
    var $call=___errno_location();
    HEAP32[(($call)>>2)]=12;
    $retval=0;
    var $107=$retval;

    return $107;
  }
  var $1=$oldmem_addr;
  var $add_ptr=((($1)-(8))|0);
  var $2=$add_ptr;
  $oldp=$2;
  var $3=$oldp;
  var $head=(($3+4)|0);
  var $4=HEAP32[(($head)>>2)];
  var $and=$4 & -8;
  $oldsize=$and;
  var $5=$oldp;
  var $6=$5;
  var $7=$oldsize;
  var $add_ptr1=(($6+$7)|0);
  var $8=$add_ptr1;
  $next=$8;
  $newp=0;
  $extra=0;
  var $9=$oldp;
  var $10=$9;
  var $11=$m_addr;
  var $least_addr=(($11+16)|0);
  var $12=HEAP32[(($least_addr)>>2)];
  var $cmp2=(($10)>>>0) >= (($12)>>>0);
  do {
    if ($cmp2) {
      var $13=$oldp;
      var $head3=(($13+4)|0);
      var $14=HEAP32[(($head3)>>2)];
      var $and4=$14 & 3;
      var $cmp5=(($and4)|0)!=1;
      if (!($cmp5)) {
        var $21 = 0;
        break;
      }
      var $15=$oldp;
      var $16=$15;
      var $17=$next;
      var $18=$17;
      var $cmp7=(($16)>>>0) < (($18)>>>0);
      if (!($cmp7)) {
        var $21 = 0;
        break;
      }
      var $19=$next;
      var $head8=(($19+4)|0);
      var $20=HEAP32[(($head8)>>2)];
      var $and9=$20 & 1;
      var $tobool=(($and9)|0)!=0;
      var $21 = $tobool;
    } else {
      var $21 = 0;
    }
  } while(0);
  var $21;
  var $land_ext=(($21)&1);
  var $expval=($land_ext);
  var $tobool10=(($expval)|0)!=0;
  if (!($tobool10)) {
    _abort();
    throw "Reached an unreachable!"
  }
  var $22=$bytes_addr;
  var $cmp12=(($22)>>>0) < 11;
  if ($cmp12) {
    var $cond = 16;
  } else {
    var $23=$bytes_addr;
    var $add=((($23)+(4))|0);
    var $add13=((($add)+(7))|0);
    var $and14=$add13 & -8;
    var $cond = $and14;
  }
  var $cond;
  $nb=$cond;
  var $24=$oldp;
  var $head15=(($24+4)|0);
  var $25=HEAP32[(($head15)>>2)];
  var $and16=$25 & 3;
  var $cmp17=(($and16)|0)==0;
  if ($cmp17) {
    var $26=$m_addr;
    var $27=$oldp;
    var $28=$nb;
    var $call19=_mmap_resize($26, $27, $28);
    $newp=$call19;
  } else {
    var $29=$oldsize;
    var $30=$nb;
    var $cmp20=(($29)>>>0) >= (($30)>>>0);
    if ($cmp20) {
      var $31=$oldsize;
      var $32=$nb;
      var $sub=((($31)-($32))|0);
      $rsize=$sub;
      var $33=$oldp;
      $newp=$33;
      var $34=$rsize;
      var $cmp22=(($34)>>>0) >= 16;
      if ($cmp22) {
        var $35=$newp;
        var $36=$35;
        var $37=$nb;
        var $add_ptr24=(($36+$37)|0);
        var $38=$add_ptr24;
        $remainder=$38;
        var $39=$newp;
        var $head25=(($39+4)|0);
        var $40=HEAP32[(($head25)>>2)];
        var $and26=$40 & 1;
        var $41=$nb;
        var $or=$and26 | $41;
        var $or27=$or | 2;
        var $42=$newp;
        var $head28=(($42+4)|0);
        HEAP32[(($head28)>>2)]=$or27;
        var $43=$newp;
        var $44=$43;
        var $45=$nb;
        var $add_ptr29=(($44+$45)|0);
        var $46=$add_ptr29;
        var $head30=(($46+4)|0);
        var $47=HEAP32[(($head30)>>2)];
        var $or31=$47 | 1;
        HEAP32[(($head30)>>2)]=$or31;
        var $48=$rsize;
        var $or32=$48 | 1;
        var $or33=$or32 | 2;
        var $49=$remainder;
        var $head34=(($49+4)|0);
        HEAP32[(($head34)>>2)]=$or33;
        var $50=$remainder;
        var $51=$50;
        var $52=$rsize;
        var $add_ptr35=(($51+$52)|0);
        var $53=$add_ptr35;
        var $head36=(($53+4)|0);
        var $54=HEAP32[(($head36)>>2)];
        var $or37=$54 | 1;
        HEAP32[(($head36)>>2)]=$or37;
        var $55=$remainder;
        var $56=$55;
        var $add_ptr38=(($56+8)|0);
        $extra=$add_ptr38;
      }
    } else {
      var $57=$next;
      var $58=$m_addr;
      var $top=(($58+24)|0);
      var $59=HEAP32[(($top)>>2)];
      var $cmp41=(($57)|0)==(($59)|0);
      do {
        if ($cmp41) {
          var $60=$oldsize;
          var $61=$m_addr;
          var $topsize=(($61+12)|0);
          var $62=HEAP32[(($topsize)>>2)];
          var $add43=((($60)+($62))|0);
          var $63=$nb;
          var $cmp44=(($add43)>>>0) > (($63)>>>0);
          if (!($cmp44)) {
            break;
          }
          var $64=$oldsize;
          var $65=$m_addr;
          var $topsize46=(($65+12)|0);
          var $66=HEAP32[(($topsize46)>>2)];
          var $add47=((($64)+($66))|0);
          $newsize=$add47;
          var $67=$newsize;
          var $68=$nb;
          var $sub48=((($67)-($68))|0);
          $newtopsize=$sub48;
          var $69=$oldp;
          var $70=$69;
          var $71=$nb;
          var $add_ptr49=(($70+$71)|0);
          var $72=$add_ptr49;
          $newtop=$72;
          var $73=$oldp;
          var $head50=(($73+4)|0);
          var $74=HEAP32[(($head50)>>2)];
          var $and51=$74 & 1;
          var $75=$nb;
          var $or52=$and51 | $75;
          var $or53=$or52 | 2;
          var $76=$oldp;
          var $head54=(($76+4)|0);
          HEAP32[(($head54)>>2)]=$or53;
          var $77=$oldp;
          var $78=$77;
          var $79=$nb;
          var $add_ptr55=(($78+$79)|0);
          var $80=$add_ptr55;
          var $head56=(($80+4)|0);
          var $81=HEAP32[(($head56)>>2)];
          var $or57=$81 | 1;
          HEAP32[(($head56)>>2)]=$or57;
          var $82=$newtopsize;
          var $or58=$82 | 1;
          var $83=$newtop;
          var $head59=(($83+4)|0);
          HEAP32[(($head59)>>2)]=$or58;
          var $84=$newtop;
          var $85=$m_addr;
          var $top60=(($85+24)|0);
          HEAP32[(($top60)>>2)]=$84;
          var $86=$newtopsize;
          var $87=$m_addr;
          var $topsize61=(($87+12)|0);
          HEAP32[(($topsize61)>>2)]=$86;
          var $88=$oldp;
          $newp=$88;
        }
      } while(0);
    }
  }
  var $89=$newp;
  var $cmp67=(($89)|0)!=0;
  if ($cmp67) {
    var $90=$extra;
    var $cmp69=(($90)|0)!=0;
    if ($cmp69) {
      var $91=$extra;
      _free($91);
    }
    var $92=$newp;
    var $93=$92;
    var $add_ptr72=(($93+8)|0);
    $retval=$add_ptr72;
    var $107=$retval;

    return $107;
  }
  var $94=$bytes_addr;
  var $call74=_malloc($94);
  $newmem=$call74;
  var $95=$newmem;
  var $cmp75=(($95)|0)!=0;
  if ($cmp75) {
    var $96=$oldsize;
    var $97=$oldp;
    var $head77=(($97+4)|0);
    var $98=HEAP32[(($head77)>>2)];
    var $and78=$98 & 3;
    var $cmp79=(($and78)|0)==0;
    var $cond80=$cmp79 ? 8 : 4;
    var $sub81=((($96)-($cond80))|0);
    $oc=$sub81;
    var $99=$newmem;
    var $100=$oldmem_addr;
    var $101=$oc;
    var $102=$bytes_addr;
    var $cmp82=(($101)>>>0) < (($102)>>>0);
    if ($cmp82) {
      var $103=$oc;
      var $cond86 = $103;
    } else {
      var $104=$bytes_addr;
      var $cond86 = $104;
    }
    var $cond86;
    assert($cond86 % 1 === 0);_memcpy($99, $100, $cond86);
    var $105=$oldmem_addr;
    _free($105);
  }
  var $106=$newmem;
  $retval=$106;
  var $107=$retval;

  return $107;
}
_internal_realloc["X"]=1;

function _init_mparams() {
  var label = 0;

  var $magic;
  var $psize;
  var $gsize;
  var $0=HEAP32[((((5243848)|0))>>2)];
  var $cmp=(($0)|0)==0;
  if (!($cmp)) {

    return 1;
  }
  var $call=_sysconf(8);
  $psize=$call;
  var $1=$psize;
  $gsize=$1;
  var $2=$gsize;
  var $3=$gsize;
  var $sub=((($3)-(1))|0);
  var $and=$2 & $sub;
  var $cmp1=(($and)|0)!=0;
  if ($cmp1) {
    _abort();
    throw "Reached an unreachable!"
  }
  var $4=$psize;
  var $5=$psize;
  var $sub2=((($5)-(1))|0);
  var $and3=$4 & $sub2;
  var $cmp4=(($and3)|0)!=0;
  if ($cmp4) {
    _abort();
    throw "Reached an unreachable!"
  }
  var $6=$gsize;
  HEAP32[((((5243856)|0))>>2)]=$6;
  var $7=$psize;
  HEAP32[((((5243852)|0))>>2)]=$7;
  HEAP32[((((5243860)|0))>>2)]=-1;
  HEAP32[((((5243864)|0))>>2)]=2097152;
  HEAP32[((((5243868)|0))>>2)]=0;
  var $8=HEAP32[((((5243868)|0))>>2)];
  HEAP32[((((5268412)|0))>>2)]=$8;
  var $call6=_time(0);
  var $xor=$call6 ^ 1431655765;
  $magic=$xor;
  var $9=$magic;
  var $or=$9 | 8;
  $magic=$or;
  var $10=$magic;
  var $and7=$10 & -8;
  $magic=$and7;
  var $11=$magic;
  HEAP32[((((5243848)|0))>>2)]=$11;

  return 1;
}


function _prepend_alloc($m, $newbase, $oldbase, $nb) {
  var label = 0;

  var $m_addr;
  var $newbase_addr;
  var $oldbase_addr;
  var $nb_addr;
  var $p;
  var $oldfirst;
  var $psize;
  var $q;
  var $qsize;
  var $tsize;
  var $dsize;
  var $nsize;
  var $F;
  var $B;
  var $I;
  var $TP;
  var $XP;
  var $R;
  var $F63;
  var $RP;
  var $CP;
  var $H;
  var $C0;
  var $C1;
  var $I203;
  var $B205;
  var $F209;
  var $TP235;
  var $H236;
  var $I237;
  var $X;
  var $Y;
  var $N;
  var $K;
  var $T;
  var $K290;
  var $C;
  var $F328;
  $m_addr=$m;
  $newbase_addr=$newbase;
  $oldbase_addr=$oldbase;
  $nb_addr=$nb;
  var $0=$newbase_addr;
  var $1=$newbase_addr;
  var $add_ptr=(($1+8)|0);
  var $2=$add_ptr;
  var $and=$2 & 7;
  var $cmp=(($and)|0)==0;
  if ($cmp) {
    var $cond = 0;
  } else {
    var $3=$newbase_addr;
    var $add_ptr1=(($3+8)|0);
    var $4=$add_ptr1;
    var $and2=$4 & 7;
    var $sub=(((8)-($and2))|0);
    var $and3=$sub & 7;
    var $cond = $and3;
  }
  var $cond;
  var $add_ptr4=(($0+$cond)|0);
  var $5=$add_ptr4;
  $p=$5;
  var $6=$oldbase_addr;
  var $7=$oldbase_addr;
  var $add_ptr5=(($7+8)|0);
  var $8=$add_ptr5;
  var $and6=$8 & 7;
  var $cmp7=(($and6)|0)==0;
  if ($cmp7) {
    var $cond15 = 0;
  } else {
    var $9=$oldbase_addr;
    var $add_ptr10=(($9+8)|0);
    var $10=$add_ptr10;
    var $and11=$10 & 7;
    var $sub12=(((8)-($and11))|0);
    var $and13=$sub12 & 7;
    var $cond15 = $and13;
  }
  var $cond15;
  var $add_ptr16=(($6+$cond15)|0);
  var $11=$add_ptr16;
  $oldfirst=$11;
  var $12=$oldfirst;
  var $13=$12;
  var $14=$p;
  var $15=$14;
  var $sub_ptr_lhs_cast=$13;
  var $sub_ptr_rhs_cast=$15;
  var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
  $psize=$sub_ptr_sub;
  var $16=$p;
  var $17=$16;
  var $18=$nb_addr;
  var $add_ptr17=(($17+$18)|0);
  var $19=$add_ptr17;
  $q=$19;
  var $20=$psize;
  var $21=$nb_addr;
  var $sub18=((($20)-($21))|0);
  $qsize=$sub18;
  var $22=$nb_addr;
  var $or=$22 | 1;
  var $or19=$or | 2;
  var $23=$p;
  var $head=(($23+4)|0);
  HEAP32[(($head)>>2)]=$or19;
  var $24=$oldfirst;
  var $25=$m_addr;
  var $top=(($25+24)|0);
  var $26=HEAP32[(($top)>>2)];
  var $cmp20=(($24)|0)==(($26)|0);
  if ($cmp20) {
    var $27=$qsize;
    var $28=$m_addr;
    var $topsize=(($28+12)|0);
    var $29=HEAP32[(($topsize)>>2)];
    var $add=((($29)+($27))|0);
    HEAP32[(($topsize)>>2)]=$add;
    $tsize=$add;
    var $30=$q;
    var $31=$m_addr;
    var $top21=(($31+24)|0);
    HEAP32[(($top21)>>2)]=$30;
    var $32=$tsize;
    var $or22=$32 | 1;
    var $33=$q;
    var $head23=(($33+4)|0);
    HEAP32[(($head23)>>2)]=$or22;
    var $302=$p;
    var $303=$302;
    var $add_ptr353=(($303+8)|0);

    return $add_ptr353;
  }
  var $34=$oldfirst;
  var $35=$m_addr;
  var $dv=(($35+20)|0);
  var $36=HEAP32[(($dv)>>2)];
  var $cmp24=(($34)|0)==(($36)|0);
  if ($cmp24) {
    var $37=$qsize;
    var $38=$m_addr;
    var $dvsize=(($38+8)|0);
    var $39=HEAP32[(($dvsize)>>2)];
    var $add26=((($39)+($37))|0);
    HEAP32[(($dvsize)>>2)]=$add26;
    $dsize=$add26;
    var $40=$q;
    var $41=$m_addr;
    var $dv27=(($41+20)|0);
    HEAP32[(($dv27)>>2)]=$40;
    var $42=$dsize;
    var $or28=$42 | 1;
    var $43=$q;
    var $head29=(($43+4)|0);
    HEAP32[(($head29)>>2)]=$or28;
    var $44=$dsize;
    var $45=$q;
    var $46=$45;
    var $47=$dsize;
    var $add_ptr30=(($46+$47)|0);
    var $48=$add_ptr30;
    var $prev_foot=(($48)|0);
    HEAP32[(($prev_foot)>>2)]=$44;
  } else {
    var $49=$oldfirst;
    var $head32=(($49+4)|0);
    var $50=HEAP32[(($head32)>>2)];
    var $and33=$50 & 3;
    var $cmp34=(($and33)|0)!=1;
    if (!($cmp34)) {
      var $51=$oldfirst;
      var $head36=(($51+4)|0);
      var $52=HEAP32[(($head36)>>2)];
      var $and37=$52 & -8;
      $nsize=$and37;
      var $53=$nsize;
      var $shr=$53 >>> 3;
      var $cmp38=(($shr)>>>0) < 32;
      if ($cmp38) {
        var $54=$oldfirst;
        var $fd=(($54+8)|0);
        var $55=HEAP32[(($fd)>>2)];
        $F=$55;
        var $56=$oldfirst;
        var $bk=(($56+12)|0);
        var $57=HEAP32[(($bk)>>2)];
        $B=$57;
        var $58=$nsize;
        var $shr40=$58 >>> 3;
        $I=$shr40;
        var $59=$F;
        var $60=$B;
        var $cmp41=(($59)|0)==(($60)|0);
        if ($cmp41) {
          var $61=$I;
          var $shl=1 << $61;
          var $neg=$shl ^ -1;
          var $62=$m_addr;
          var $smallmap=(($62)|0);
          var $63=HEAP32[(($smallmap)>>2)];
          var $and43=$63 & $neg;
          HEAP32[(($smallmap)>>2)]=$and43;
        } else {
          var $64=$F;
          var $65=$I;
          var $shl45=$65 << 1;
          var $66=$m_addr;
          var $smallbins=(($66+40)|0);
          var $arrayidx=(($smallbins+($shl45<<2))|0);
          var $67=$arrayidx;
          var $68=$67;
          var $cmp46=(($64)|0)==(($68)|0);
          do {
            if ($cmp46) {
              label = 539;
            } else {
              var $69=$F;
              var $70=$69;
              var $71=$m_addr;
              var $least_addr=(($71+16)|0);
              var $72=HEAP32[(($least_addr)>>2)];
              var $cmp47=(($70)>>>0) >= (($72)>>>0);
              if ($cmp47) {
                label = 539;
                break;
              } else {
                var $83 = 0;
                break;
              }
            }
          } while(0);
          if (label == 539) {
            var $73=$B;
            var $74=$I;
            var $shl48=$74 << 1;
            var $75=$m_addr;
            var $smallbins49=(($75+40)|0);
            var $arrayidx50=(($smallbins49+($shl48<<2))|0);
            var $76=$arrayidx50;
            var $77=$76;
            var $cmp51=(($73)|0)==(($77)|0);
            if ($cmp51) {
              var $82 = 1;
            } else {
              var $78=$B;
              var $79=$78;
              var $80=$m_addr;
              var $least_addr52=(($80+16)|0);
              var $81=HEAP32[(($least_addr52)>>2)];
              var $cmp53=(($79)>>>0) >= (($81)>>>0);
              var $82 = $cmp53;
            }
            var $82;
            var $83 = $82;
          }
          var $83;
          var $land_ext=(($83)&1);
          var $expval=($land_ext);
          var $tobool=(($expval)|0)!=0;
          if (!($tobool)) {
            _abort();
            throw "Reached an unreachable!"
          }
          var $84=$B;
          var $85=$F;
          var $bk55=(($85+12)|0);
          HEAP32[(($bk55)>>2)]=$84;
          var $86=$F;
          var $87=$B;
          var $fd56=(($87+8)|0);
          HEAP32[(($fd56)>>2)]=$86;
        }
      } else {
        var $88=$oldfirst;
        var $89=$88;
        $TP=$89;
        var $90=$TP;
        var $parent=(($90+24)|0);
        var $91=HEAP32[(($parent)>>2)];
        $XP=$91;
        var $92=$TP;
        var $bk60=(($92+12)|0);
        var $93=HEAP32[(($bk60)>>2)];
        var $94=$TP;
        var $cmp61=(($93)|0)!=(($94)|0);
        if ($cmp61) {
          var $95=$TP;
          var $fd64=(($95+8)|0);
          var $96=HEAP32[(($fd64)>>2)];
          $F63=$96;
          var $97=$TP;
          var $bk65=(($97+12)|0);
          var $98=HEAP32[(($bk65)>>2)];
          $R=$98;
          var $99=$F63;
          var $100=$99;
          var $101=$m_addr;
          var $least_addr66=(($101+16)|0);
          var $102=HEAP32[(($least_addr66)>>2)];
          var $cmp67=(($100)>>>0) >= (($102)>>>0);
          var $conv=(($cmp67)&1);
          var $expval68=($conv);
          var $tobool69=(($expval68)|0)!=0;
          if (!($tobool69)) {
            _abort();
            throw "Reached an unreachable!"
          }
          var $103=$R;
          var $104=$F63;
          var $bk71=(($104+12)|0);
          HEAP32[(($bk71)>>2)]=$103;
          var $105=$F63;
          var $106=$R;
          var $fd72=(($106+8)|0);
          HEAP32[(($fd72)>>2)]=$105;
        } else {
          var $107=$TP;
          var $child=(($107+16)|0);
          var $arrayidx76=(($child+4)|0);
          $RP=$arrayidx76;
          var $108=HEAP32[(($arrayidx76)>>2)];
          $R=$108;
          var $cmp77=(($108)|0)!=0;
          do {
            if ($cmp77) {
              label = 554;
            } else {
              var $109=$TP;
              var $child80=(($109+16)|0);
              var $arrayidx81=(($child80)|0);
              $RP=$arrayidx81;
              var $110=HEAP32[(($arrayidx81)>>2)];
              $R=$110;
              var $cmp82=(($110)|0)!=0;
              if ($cmp82) {
                label = 554;
                break;
              } else {
                break;
              }
            }
          } while(0);
          if (label == 554) {
            while(1) {
              var $111=$R;
              var $child85=(($111+16)|0);
              var $arrayidx86=(($child85+4)|0);
              $CP=$arrayidx86;
              var $112=HEAP32[(($arrayidx86)>>2)];
              var $cmp87=(($112)|0)!=0;
              if ($cmp87) {
                var $115 = 1;
              } else {
                var $113=$R;
                var $child90=(($113+16)|0);
                var $arrayidx91=(($child90)|0);
                $CP=$arrayidx91;
                var $114=HEAP32[(($arrayidx91)>>2)];
                var $cmp92=(($114)|0)!=0;
                var $115 = $cmp92;
              }
              var $115;
              if (!($115)) {
                break;
              }
              var $116=$CP;
              $RP=$116;
              var $117=HEAP32[(($116)>>2)];
              $R=$117;
            }
            var $118=$RP;
            var $119=$118;
            var $120=$m_addr;
            var $least_addr95=(($120+16)|0);
            var $121=HEAP32[(($least_addr95)>>2)];
            var $cmp96=(($119)>>>0) >= (($121)>>>0);
            var $conv97=(($cmp96)&1);
            var $expval98=($conv97);
            var $tobool99=(($expval98)|0)!=0;
            if (!($tobool99)) {
              _abort();
              throw "Reached an unreachable!"
            }
            var $122=$RP;
            HEAP32[(($122)>>2)]=0;
          }
        }
        var $123=$XP;
        var $cmp105=(($123)|0)!=0;
        if ($cmp105) {
          var $124=$TP;
          var $index=(($124+28)|0);
          var $125=HEAP32[(($index)>>2)];
          var $126=$m_addr;
          var $treebins=(($126+304)|0);
          var $arrayidx108=(($treebins+($125<<2))|0);
          $H=$arrayidx108;
          var $127=$TP;
          var $128=$H;
          var $129=HEAP32[(($128)>>2)];
          var $cmp109=(($127)|0)==(($129)|0);
          if ($cmp109) {
            var $130=$R;
            var $131=$H;
            HEAP32[(($131)>>2)]=$130;
            var $cmp112=(($130)|0)==0;
            if ($cmp112) {
              var $132=$TP;
              var $index115=(($132+28)|0);
              var $133=HEAP32[(($index115)>>2)];
              var $shl116=1 << $133;
              var $neg117=$shl116 ^ -1;
              var $134=$m_addr;
              var $treemap=(($134+4)|0);
              var $135=HEAP32[(($treemap)>>2)];
              var $and118=$135 & $neg117;
              HEAP32[(($treemap)>>2)]=$and118;
            }
          } else {
            var $136=$XP;
            var $137=$136;
            var $138=$m_addr;
            var $least_addr121=(($138+16)|0);
            var $139=HEAP32[(($least_addr121)>>2)];
            var $cmp122=(($137)>>>0) >= (($139)>>>0);
            var $conv123=(($cmp122)&1);
            var $expval124=($conv123);
            var $tobool125=(($expval124)|0)!=0;
            if (!($tobool125)) {
              _abort();
              throw "Reached an unreachable!"
            }
            var $140=$XP;
            var $child127=(($140+16)|0);
            var $arrayidx128=(($child127)|0);
            var $141=HEAP32[(($arrayidx128)>>2)];
            var $142=$TP;
            var $cmp129=(($141)|0)==(($142)|0);
            if ($cmp129) {
              var $143=$R;
              var $144=$XP;
              var $child132=(($144+16)|0);
              var $arrayidx133=(($child132)|0);
              HEAP32[(($arrayidx133)>>2)]=$143;
            } else {
              var $145=$R;
              var $146=$XP;
              var $child135=(($146+16)|0);
              var $arrayidx136=(($child135+4)|0);
              HEAP32[(($arrayidx136)>>2)]=$145;
            }
          }
          var $147=$R;
          var $cmp141=(($147)|0)!=0;
          if ($cmp141) {
            var $148=$R;
            var $149=$148;
            var $150=$m_addr;
            var $least_addr144=(($150+16)|0);
            var $151=HEAP32[(($least_addr144)>>2)];
            var $cmp145=(($149)>>>0) >= (($151)>>>0);
            var $conv146=(($cmp145)&1);
            var $expval147=($conv146);
            var $tobool148=(($expval147)|0)!=0;
            if (!($tobool148)) {
              _abort();
              throw "Reached an unreachable!"
            }
            var $152=$XP;
            var $153=$R;
            var $parent150=(($153+24)|0);
            HEAP32[(($parent150)>>2)]=$152;
            var $154=$TP;
            var $child151=(($154+16)|0);
            var $arrayidx152=(($child151)|0);
            var $155=HEAP32[(($arrayidx152)>>2)];
            $C0=$155;
            var $cmp153=(($155)|0)!=0;
            if ($cmp153) {
              var $156=$C0;
              var $157=$156;
              var $158=$m_addr;
              var $least_addr156=(($158+16)|0);
              var $159=HEAP32[(($least_addr156)>>2)];
              var $cmp157=(($157)>>>0) >= (($159)>>>0);
              var $conv158=(($cmp157)&1);
              var $expval159=($conv158);
              var $tobool160=(($expval159)|0)!=0;
              if (!($tobool160)) {
                _abort();
                throw "Reached an unreachable!"
              }
              var $160=$C0;
              var $161=$R;
              var $child162=(($161+16)|0);
              var $arrayidx163=(($child162)|0);
              HEAP32[(($arrayidx163)>>2)]=$160;
              var $162=$R;
              var $163=$C0;
              var $parent164=(($163+24)|0);
              HEAP32[(($parent164)>>2)]=$162;
            }
            var $164=$TP;
            var $child168=(($164+16)|0);
            var $arrayidx169=(($child168+4)|0);
            var $165=HEAP32[(($arrayidx169)>>2)];
            $C1=$165;
            var $cmp170=(($165)|0)!=0;
            if ($cmp170) {
              var $166=$C1;
              var $167=$166;
              var $168=$m_addr;
              var $least_addr173=(($168+16)|0);
              var $169=HEAP32[(($least_addr173)>>2)];
              var $cmp174=(($167)>>>0) >= (($169)>>>0);
              var $conv175=(($cmp174)&1);
              var $expval176=($conv175);
              var $tobool177=(($expval176)|0)!=0;
              if (!($tobool177)) {
                _abort();
                throw "Reached an unreachable!"
              }
              var $170=$C1;
              var $171=$R;
              var $child179=(($171+16)|0);
              var $arrayidx180=(($child179+4)|0);
              HEAP32[(($arrayidx180)>>2)]=$170;
              var $172=$R;
              var $173=$C1;
              var $parent181=(($173+24)|0);
              HEAP32[(($parent181)>>2)]=$172;
            }
          }
        }
      }
      var $174=$oldfirst;
      var $175=$174;
      var $176=$nsize;
      var $add_ptr190=(($175+$176)|0);
      var $177=$add_ptr190;
      $oldfirst=$177;
      var $178=$nsize;
      var $179=$qsize;
      var $add191=((($179)+($178))|0);
      $qsize=$add191;
    }
    var $180=$oldfirst;
    var $head193=(($180+4)|0);
    var $181=HEAP32[(($head193)>>2)];
    var $and194=$181 & -2;
    HEAP32[(($head193)>>2)]=$and194;
    var $182=$qsize;
    var $or195=$182 | 1;
    var $183=$q;
    var $head196=(($183+4)|0);
    HEAP32[(($head196)>>2)]=$or195;
    var $184=$qsize;
    var $185=$q;
    var $186=$185;
    var $187=$qsize;
    var $add_ptr197=(($186+$187)|0);
    var $188=$add_ptr197;
    var $prev_foot198=(($188)|0);
    HEAP32[(($prev_foot198)>>2)]=$184;
    var $189=$qsize;
    var $shr199=$189 >>> 3;
    var $cmp200=(($shr199)>>>0) < 32;
    if ($cmp200) {
      var $190=$qsize;
      var $shr204=$190 >>> 3;
      $I203=$shr204;
      var $191=$I203;
      var $shl206=$191 << 1;
      var $192=$m_addr;
      var $smallbins207=(($192+40)|0);
      var $arrayidx208=(($smallbins207+($shl206<<2))|0);
      var $193=$arrayidx208;
      var $194=$193;
      $B205=$194;
      var $195=$B205;
      $F209=$195;
      var $196=$m_addr;
      var $smallmap210=(($196)|0);
      var $197=HEAP32[(($smallmap210)>>2)];
      var $198=$I203;
      var $shl211=1 << $198;
      var $and212=$197 & $shl211;
      var $tobool213=(($and212)|0)!=0;
      if ($tobool213) {
        var $202=$B205;
        var $fd219=(($202+8)|0);
        var $203=HEAP32[(($fd219)>>2)];
        var $204=$203;
        var $205=$m_addr;
        var $least_addr220=(($205+16)|0);
        var $206=HEAP32[(($least_addr220)>>2)];
        var $cmp221=(($204)>>>0) >= (($206)>>>0);
        var $conv222=(($cmp221)&1);
        var $expval223=($conv222);
        var $tobool224=(($expval223)|0)!=0;
        if (!($tobool224)) {
          _abort();
          throw "Reached an unreachable!"
        }
        var $207=$B205;
        var $fd226=(($207+8)|0);
        var $208=HEAP32[(($fd226)>>2)];
        $F209=$208;
      } else {
        var $199=$I203;
        var $shl215=1 << $199;
        var $200=$m_addr;
        var $smallmap216=(($200)|0);
        var $201=HEAP32[(($smallmap216)>>2)];
        var $or217=$201 | $shl215;
        HEAP32[(($smallmap216)>>2)]=$or217;
      }
      var $209=$q;
      var $210=$B205;
      var $fd230=(($210+8)|0);
      HEAP32[(($fd230)>>2)]=$209;
      var $211=$q;
      var $212=$F209;
      var $bk231=(($212+12)|0);
      HEAP32[(($bk231)>>2)]=$211;
      var $213=$F209;
      var $214=$q;
      var $fd232=(($214+8)|0);
      HEAP32[(($fd232)>>2)]=$213;
      var $215=$B205;
      var $216=$q;
      var $bk233=(($216+12)|0);
      HEAP32[(($bk233)>>2)]=$215;
    } else {
      var $217=$q;
      var $218=$217;
      $TP235=$218;
      var $219=$qsize;
      var $shr238=$219 >>> 8;
      $X=$shr238;
      var $220=$X;
      var $cmp239=(($220)|0)==0;
      if ($cmp239) {
        $I237=0;
      } else {
        var $221=$X;
        var $cmp243=(($221)>>>0) > 65535;
        if ($cmp243) {
          $I237=31;
        } else {
          var $222=$X;
          $Y=$222;
          var $223=$Y;
          var $sub247=((($223)-(256))|0);
          var $shr248=$sub247 >>> 16;
          var $and249=$shr248 & 8;
          $N=$and249;
          var $224=$N;
          var $225=$Y;
          var $shl250=$225 << $224;
          $Y=$shl250;
          var $sub251=((($shl250)-(4096))|0);
          var $shr252=$sub251 >>> 16;
          var $and253=$shr252 & 4;
          $K=$and253;
          var $226=$K;
          var $227=$N;
          var $add254=((($227)+($226))|0);
          $N=$add254;
          var $228=$K;
          var $229=$Y;
          var $shl255=$229 << $228;
          $Y=$shl255;
          var $sub256=((($shl255)-(16384))|0);
          var $shr257=$sub256 >>> 16;
          var $and258=$shr257 & 2;
          $K=$and258;
          var $230=$N;
          var $add259=((($230)+($and258))|0);
          $N=$add259;
          var $231=$N;
          var $sub260=(((14)-($231))|0);
          var $232=$K;
          var $233=$Y;
          var $shl261=$233 << $232;
          $Y=$shl261;
          var $shr262=$shl261 >>> 15;
          var $add263=((($sub260)+($shr262))|0);
          $K=$add263;
          var $234=$K;
          var $shl264=$234 << 1;
          var $235=$qsize;
          var $236=$K;
          var $add265=((($236)+(7))|0);
          var $shr266=$235 >>> (($add265)>>>0);
          var $and267=$shr266 & 1;
          var $add268=((($shl264)+($and267))|0);
          $I237=$add268;
        }
      }
      var $237=$I237;
      var $238=$m_addr;
      var $treebins271=(($238+304)|0);
      var $arrayidx272=(($treebins271+($237<<2))|0);
      $H236=$arrayidx272;
      var $239=$I237;
      var $240=$TP235;
      var $index273=(($240+28)|0);
      HEAP32[(($index273)>>2)]=$239;
      var $241=$TP235;
      var $child274=(($241+16)|0);
      var $arrayidx275=(($child274+4)|0);
      HEAP32[(($arrayidx275)>>2)]=0;
      var $242=$TP235;
      var $child276=(($242+16)|0);
      var $arrayidx277=(($child276)|0);
      HEAP32[(($arrayidx277)>>2)]=0;
      var $243=$m_addr;
      var $treemap278=(($243+4)|0);
      var $244=HEAP32[(($treemap278)>>2)];
      var $245=$I237;
      var $shl279=1 << $245;
      var $and280=$244 & $shl279;
      var $tobool281=(($and280)|0)!=0;
      if ($tobool281) {
        var $257=$H236;
        var $258=HEAP32[(($257)>>2)];
        $T=$258;
        var $259=$qsize;
        var $260=$I237;
        var $cmp291=(($260)|0)==31;
        if ($cmp291) {
          var $cond300 = 0;
        } else {
          var $261=$I237;
          var $shr295=$261 >>> 1;
          var $add296=((($shr295)+(8))|0);
          var $sub297=((($add296)-(2))|0);
          var $sub298=(((31)-($sub297))|0);
          var $cond300 = $sub298;
        }
        var $cond300;
        var $shl301=$259 << $cond300;
        $K290=$shl301;
        while(1) {
          var $262=$T;
          var $head302=(($262+4)|0);
          var $263=HEAP32[(($head302)>>2)];
          var $and303=$263 & -8;
          var $264=$qsize;
          var $cmp304=(($and303)|0)!=(($264)|0);
          if (!($cmp304)) {
            label = 621;
            break;
          }
          var $265=$K290;
          var $shr307=$265 >>> 31;
          var $and308=$shr307 & 1;
          var $266=$T;
          var $child309=(($266+16)|0);
          var $arrayidx310=(($child309+($and308<<2))|0);
          $C=$arrayidx310;
          var $267=$K290;
          var $shl311=$267 << 1;
          $K290=$shl311;
          var $268=$C;
          var $269=HEAP32[(($268)>>2)];
          var $cmp312=(($269)|0)!=0;
          if (!($cmp312)) {
            label = 617;
            break;
          }
          var $270=$C;
          var $271=HEAP32[(($270)>>2)];
          $T=$271;
        }
        do {
          if (label == 617) {
            var $272=$C;
            var $273=$272;
            var $274=$m_addr;
            var $least_addr316=(($274+16)|0);
            var $275=HEAP32[(($least_addr316)>>2)];
            var $cmp317=(($273)>>>0) >= (($275)>>>0);
            var $conv318=(($cmp317)&1);
            var $expval319=($conv318);
            var $tobool320=(($expval319)|0)!=0;
            if ($tobool320) {
              var $276=$TP235;
              var $277=$C;
              HEAP32[(($277)>>2)]=$276;
              var $278=$T;
              var $279=$TP235;
              var $parent322=(($279+24)|0);
              HEAP32[(($parent322)>>2)]=$278;
              var $280=$TP235;
              var $281=$TP235;
              var $bk323=(($281+12)|0);
              HEAP32[(($bk323)>>2)]=$280;
              var $282=$TP235;
              var $fd324=(($282+8)|0);
              HEAP32[(($fd324)>>2)]=$280;
              break;
            } else {
              _abort();
              throw "Reached an unreachable!"
            }
          }
          else if (label == 621) {
            var $283=$T;
            var $fd329=(($283+8)|0);
            var $284=HEAP32[(($fd329)>>2)];
            $F328=$284;
            var $285=$T;
            var $286=$285;
            var $287=$m_addr;
            var $least_addr330=(($287+16)|0);
            var $288=HEAP32[(($least_addr330)>>2)];
            var $cmp331=(($286)>>>0) >= (($288)>>>0);
            if ($cmp331) {
              var $289=$F328;
              var $290=$289;
              var $291=$m_addr;
              var $least_addr334=(($291+16)|0);
              var $292=HEAP32[(($least_addr334)>>2)];
              var $cmp335=(($290)>>>0) >= (($292)>>>0);
              var $293 = $cmp335;
            } else {
              var $293 = 0;
            }
            var $293;
            var $land_ext338=(($293)&1);
            var $expval339=($land_ext338);
            var $tobool340=(($expval339)|0)!=0;
            if ($tobool340) {
              var $294=$TP235;
              var $295=$F328;
              var $bk342=(($295+12)|0);
              HEAP32[(($bk342)>>2)]=$294;
              var $296=$T;
              var $fd343=(($296+8)|0);
              HEAP32[(($fd343)>>2)]=$294;
              var $297=$F328;
              var $298=$TP235;
              var $fd344=(($298+8)|0);
              HEAP32[(($fd344)>>2)]=$297;
              var $299=$T;
              var $300=$TP235;
              var $bk345=(($300+12)|0);
              HEAP32[(($bk345)>>2)]=$299;
              var $301=$TP235;
              var $parent346=(($301+24)|0);
              HEAP32[(($parent346)>>2)]=0;
              break;
            } else {
              _abort();
              throw "Reached an unreachable!"
            }
          }
        } while(0);
      } else {
        var $246=$I237;
        var $shl283=1 << $246;
        var $247=$m_addr;
        var $treemap284=(($247+4)|0);
        var $248=HEAP32[(($treemap284)>>2)];
        var $or285=$248 | $shl283;
        HEAP32[(($treemap284)>>2)]=$or285;
        var $249=$TP235;
        var $250=$H236;
        HEAP32[(($250)>>2)]=$249;
        var $251=$H236;
        var $252=$251;
        var $253=$TP235;
        var $parent286=(($253+24)|0);
        HEAP32[(($parent286)>>2)]=$252;
        var $254=$TP235;
        var $255=$TP235;
        var $bk287=(($255+12)|0);
        HEAP32[(($bk287)>>2)]=$254;
        var $256=$TP235;
        var $fd288=(($256+8)|0);
        HEAP32[(($fd288)>>2)]=$254;
      }
    }
  }
  var $302=$p;
  var $303=$302;
  var $add_ptr353=(($303+8)|0);

  return $add_ptr353;
}
_prepend_alloc["X"]=1;

function _memcpy($dest, $src, $n) {
  var label = 0;

  var $dest_addr;
  var $src_addr;
  var $n_addr;
  var $d;
  var $s;
  var $wd;
  var $ws;
  $dest_addr=$dest;
  $src_addr=$src;
  $n_addr=$n;
  var $0=$dest_addr;
  $d=$0;
  var $1=$src_addr;
  $s=$1;
  var $2=$d;
  var $3=$2;
  var $and=$3 & 3;
  var $4=$s;
  var $5=$4;
  var $and1=$5 & 3;
  var $cmp=(($and)|0)!=(($and1)|0);
  if ($cmp) {
  } else {
    while(1) {
      var $6=$d;
      var $7=$6;
      var $and2=$7 & 3;
      var $tobool=(($and2)|0)!=0;
      if ($tobool) {
        var $8=$n_addr;
        var $tobool3=(($8)|0)!=0;
        var $9 = $tobool3;
      } else {
        var $9 = 0;
      }
      var $9;
      if (!($9)) {
        break;
      }
      var $10=$s;
      var $incdec_ptr=(($10+1)|0);
      $s=$incdec_ptr;
      var $11=HEAP8[($10)];
      var $12=$d;
      var $incdec_ptr4=(($12+1)|0);
      $d=$incdec_ptr4;
      HEAP8[($12)]=$11;
      var $13=$n_addr;
      var $dec=((($13)-(1))|0);
      $n_addr=$dec;
    }
    var $14=$n_addr;
    var $tobool5=(($14)|0)!=0;
    if (!($tobool5)) {
      var $33=$dest_addr;

      return $33;
    }
    var $15=$d;
    var $16=$15;
    $wd=$16;
    var $17=$s;
    var $18=$17;
    $ws=$18;
    while(1) {
      var $19=$n_addr;
      var $cmp8=(($19)>>>0) >= 4;
      if (!($cmp8)) {
        break;
      }
      var $20=$ws;
      var $incdec_ptr10=(($20+4)|0);
      $ws=$incdec_ptr10;
      var $21=HEAP32[(($20)>>2)];
      var $22=$wd;
      var $incdec_ptr11=(($22+4)|0);
      $wd=$incdec_ptr11;
      HEAP32[(($22)>>2)]=$21;
      var $23=$n_addr;
      var $sub=((($23)-(4))|0);
      $n_addr=$sub;
    }
    var $24=$wd;
    var $25=$24;
    $d=$25;
    var $26=$ws;
    var $27=$26;
    $s=$27;
  }
  while(1) {
    var $28=$n_addr;
    var $tobool15=(($28)|0)!=0;
    if (!($tobool15)) {
      break;
    }
    var $29=$s;
    var $incdec_ptr17=(($29+1)|0);
    $s=$incdec_ptr17;
    var $30=HEAP8[($29)];
    var $31=$d;
    var $incdec_ptr18=(($31+1)|0);
    $d=$incdec_ptr18;
    HEAP8[($31)]=$30;
    var $32=$n_addr;
    var $dec20=((($32)-(1))|0);
    $n_addr=$dec20;
  }
  var $33=$dest_addr;

  return $33;
}
Module["_memcpy"] = _memcpy;_memcpy["X"]=1;

function _add_segment($m, $tbase, $tsize, $mmapped) {
  var label = 0;

  var $m_addr;
  var $tbase_addr;
  var $tsize_addr;
  var $mmapped_addr;
  var $old_top;
  var $oldsp;
  var $old_end;
  var $ssize;
  var $rawsp;
  var $offset;
  var $asp;
  var $csp;
  var $sp;
  var $ss;
  var $tnext;
  var $p;
  var $nfences;
  var $nextp;
  var $q;
  var $psize;
  var $tn;
  var $I;
  var $B;
  var $F;
  var $TP;
  var $H;
  var $I57;
  var $X;
  var $Y;
  var $N;
  var $K;
  var $T;
  var $K105;
  var $C;
  var $F144;
  $m_addr=$m;
  $tbase_addr=$tbase;
  $tsize_addr=$tsize;
  $mmapped_addr=$mmapped;
  var $0=$m_addr;
  var $top=(($0+24)|0);
  var $1=HEAP32[(($top)>>2)];
  var $2=$1;
  $old_top=$2;
  var $3=$m_addr;
  var $4=$old_top;
  var $call=_segment_holding($3, $4);
  $oldsp=$call;
  var $5=$oldsp;
  var $base=(($5)|0);
  var $6=HEAP32[(($base)>>2)];
  var $7=$oldsp;
  var $size=(($7+4)|0);
  var $8=HEAP32[(($size)>>2)];
  var $add_ptr=(($6+$8)|0);
  $old_end=$add_ptr;
  $ssize=24;
  var $9=$old_end;
  var $10=$ssize;
  var $add=((($10)+(16))|0);
  var $add1=((($add)+(7))|0);
  var $idx_neg=(((-$add1))|0);
  var $add_ptr2=(($9+$idx_neg)|0);
  $rawsp=$add_ptr2;
  var $11=$rawsp;
  var $add_ptr3=(($11+8)|0);
  var $12=$add_ptr3;
  var $and=$12 & 7;
  var $cmp=(($and)|0)==0;
  if ($cmp) {
    var $cond = 0;
  } else {
    var $13=$rawsp;
    var $add_ptr4=(($13+8)|0);
    var $14=$add_ptr4;
    var $and5=$14 & 7;
    var $sub=(((8)-($and5))|0);
    var $and6=$sub & 7;
    var $cond = $and6;
  }
  var $cond;
  $offset=$cond;
  var $15=$rawsp;
  var $16=$offset;
  var $add_ptr7=(($15+$16)|0);
  $asp=$add_ptr7;
  var $17=$asp;
  var $18=$old_top;
  var $add_ptr8=(($18+16)|0);
  var $cmp9=(($17)>>>0) < (($add_ptr8)>>>0);
  if ($cmp9) {
    var $19=$old_top;
    var $cond13 = $19;
  } else {
    var $20=$asp;
    var $cond13 = $20;
  }
  var $cond13;
  $csp=$cond13;
  var $21=$csp;
  var $22=$21;
  $sp=$22;
  var $23=$sp;
  var $24=$23;
  var $add_ptr14=(($24+8)|0);
  var $25=$add_ptr14;
  $ss=$25;
  var $26=$sp;
  var $27=$26;
  var $28=$ssize;
  var $add_ptr15=(($27+$28)|0);
  var $29=$add_ptr15;
  $tnext=$29;
  var $30=$tnext;
  $p=$30;
  $nfences=0;
  var $31=$m_addr;
  var $32=$tbase_addr;
  var $33=$32;
  var $34=$tsize_addr;
  var $sub16=((($34)-(40))|0);
  _init_top($31, $33, $sub16);
  var $35=$ssize;
  var $or=$35 | 1;
  var $or17=$or | 2;
  var $36=$sp;
  var $head=(($36+4)|0);
  HEAP32[(($head)>>2)]=$or17;
  var $37=$ss;
  var $38=$m_addr;
  var $seg=(($38+444)|0);
  var $39=$37;
  var $40=$seg;
  assert(16 % 1 === 0);HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];HEAP32[((($39)+(8))>>2)]=HEAP32[((($40)+(8))>>2)];HEAP32[((($39)+(12))>>2)]=HEAP32[((($40)+(12))>>2)];
  var $41=$tbase_addr;
  var $42=$m_addr;
  var $seg18=(($42+444)|0);
  var $base19=(($seg18)|0);
  HEAP32[(($base19)>>2)]=$41;
  var $43=$tsize_addr;
  var $44=$m_addr;
  var $seg20=(($44+444)|0);
  var $size21=(($seg20+4)|0);
  HEAP32[(($size21)>>2)]=$43;
  var $45=$mmapped_addr;
  var $46=$m_addr;
  var $seg22=(($46+444)|0);
  var $sflags=(($seg22+12)|0);
  HEAP32[(($sflags)>>2)]=$45;
  var $47=$ss;
  var $48=$m_addr;
  var $seg23=(($48+444)|0);
  var $next=(($seg23+8)|0);
  HEAP32[(($next)>>2)]=$47;
  while(1) {
    var $49=$p;
    var $50=$49;
    var $add_ptr24=(($50+4)|0);
    var $51=$add_ptr24;
    $nextp=$51;
    var $52=$p;
    var $head25=(($52+4)|0);
    HEAP32[(($head25)>>2)]=7;
    var $53=$nfences;
    var $inc=((($53)+(1))|0);
    $nfences=$inc;
    var $54=$nextp;
    var $head26=(($54+4)|0);
    var $55=$head26;
    var $56=$old_end;
    var $cmp27=(($55)>>>0) < (($56)>>>0);
    if (!($cmp27)) {
      break;
    }
    var $57=$nextp;
    $p=$57;
  }
  var $58=$csp;
  var $59=$old_top;
  var $cmp28=(($58)|0)!=(($59)|0);
  if (!($cmp28)) {

    return;
  }
  var $60=$old_top;
  var $61=$60;
  $q=$61;
  var $62=$csp;
  var $63=$old_top;
  var $sub_ptr_lhs_cast=$62;
  var $sub_ptr_rhs_cast=$63;
  var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
  $psize=$sub_ptr_sub;
  var $64=$q;
  var $65=$64;
  var $66=$psize;
  var $add_ptr30=(($65+$66)|0);
  var $67=$add_ptr30;
  $tn=$67;
  var $68=$tn;
  var $head31=(($68+4)|0);
  var $69=HEAP32[(($head31)>>2)];
  var $and32=$69 & -2;
  HEAP32[(($head31)>>2)]=$and32;
  var $70=$psize;
  var $or33=$70 | 1;
  var $71=$q;
  var $head34=(($71+4)|0);
  HEAP32[(($head34)>>2)]=$or33;
  var $72=$psize;
  var $73=$q;
  var $74=$73;
  var $75=$psize;
  var $add_ptr35=(($74+$75)|0);
  var $76=$add_ptr35;
  var $prev_foot=(($76)|0);
  HEAP32[(($prev_foot)>>2)]=$72;
  var $77=$psize;
  var $shr=$77 >>> 3;
  var $cmp36=(($shr)>>>0) < 32;
  if ($cmp36) {
    var $78=$psize;
    var $shr38=$78 >>> 3;
    $I=$shr38;
    var $79=$I;
    var $shl=$79 << 1;
    var $80=$m_addr;
    var $smallbins=(($80+40)|0);
    var $arrayidx=(($smallbins+($shl<<2))|0);
    var $81=$arrayidx;
    var $82=$81;
    $B=$82;
    var $83=$B;
    $F=$83;
    var $84=$m_addr;
    var $smallmap=(($84)|0);
    var $85=HEAP32[(($smallmap)>>2)];
    var $86=$I;
    var $shl39=1 << $86;
    var $and40=$85 & $shl39;
    var $tobool=(($and40)|0)!=0;
    if ($tobool) {
      var $90=$B;
      var $fd=(($90+8)|0);
      var $91=HEAP32[(($fd)>>2)];
      var $92=$91;
      var $93=$m_addr;
      var $least_addr=(($93+16)|0);
      var $94=HEAP32[(($least_addr)>>2)];
      var $cmp46=(($92)>>>0) >= (($94)>>>0);
      var $conv=(($cmp46)&1);
      var $expval=($conv);
      var $tobool47=(($expval)|0)!=0;
      if (!($tobool47)) {
        _abort();
        throw "Reached an unreachable!"
      }
      var $95=$B;
      var $fd49=(($95+8)|0);
      var $96=HEAP32[(($fd49)>>2)];
      $F=$96;
    } else {
      var $87=$I;
      var $shl42=1 << $87;
      var $88=$m_addr;
      var $smallmap43=(($88)|0);
      var $89=HEAP32[(($smallmap43)>>2)];
      var $or44=$89 | $shl42;
      HEAP32[(($smallmap43)>>2)]=$or44;
    }
    var $97=$q;
    var $98=$B;
    var $fd53=(($98+8)|0);
    HEAP32[(($fd53)>>2)]=$97;
    var $99=$q;
    var $100=$F;
    var $bk=(($100+12)|0);
    HEAP32[(($bk)>>2)]=$99;
    var $101=$F;
    var $102=$q;
    var $fd54=(($102+8)|0);
    HEAP32[(($fd54)>>2)]=$101;
    var $103=$B;
    var $104=$q;
    var $bk55=(($104+12)|0);
    HEAP32[(($bk55)>>2)]=$103;
  } else {
    var $105=$q;
    var $106=$105;
    $TP=$106;
    var $107=$psize;
    var $shr58=$107 >>> 8;
    $X=$shr58;
    var $108=$X;
    var $cmp59=(($108)|0)==0;
    if ($cmp59) {
      $I57=0;
    } else {
      var $109=$X;
      var $cmp63=(($109)>>>0) > 65535;
      if ($cmp63) {
        $I57=31;
      } else {
        var $110=$X;
        $Y=$110;
        var $111=$Y;
        var $sub67=((($111)-(256))|0);
        var $shr68=$sub67 >>> 16;
        var $and69=$shr68 & 8;
        $N=$and69;
        var $112=$N;
        var $113=$Y;
        var $shl70=$113 << $112;
        $Y=$shl70;
        var $sub71=((($shl70)-(4096))|0);
        var $shr72=$sub71 >>> 16;
        var $and73=$shr72 & 4;
        $K=$and73;
        var $114=$K;
        var $115=$N;
        var $add74=((($115)+($114))|0);
        $N=$add74;
        var $116=$K;
        var $117=$Y;
        var $shl75=$117 << $116;
        $Y=$shl75;
        var $sub76=((($shl75)-(16384))|0);
        var $shr77=$sub76 >>> 16;
        var $and78=$shr77 & 2;
        $K=$and78;
        var $118=$N;
        var $add79=((($118)+($and78))|0);
        $N=$add79;
        var $119=$N;
        var $sub80=(((14)-($119))|0);
        var $120=$K;
        var $121=$Y;
        var $shl81=$121 << $120;
        $Y=$shl81;
        var $shr82=$shl81 >>> 15;
        var $add83=((($sub80)+($shr82))|0);
        $K=$add83;
        var $122=$K;
        var $shl84=$122 << 1;
        var $123=$psize;
        var $124=$K;
        var $add85=((($124)+(7))|0);
        var $shr86=$123 >>> (($add85)>>>0);
        var $and87=$shr86 & 1;
        var $add88=((($shl84)+($and87))|0);
        $I57=$add88;
      }
    }
    var $125=$I57;
    var $126=$m_addr;
    var $treebins=(($126+304)|0);
    var $arrayidx91=(($treebins+($125<<2))|0);
    $H=$arrayidx91;
    var $127=$I57;
    var $128=$TP;
    var $index=(($128+28)|0);
    HEAP32[(($index)>>2)]=$127;
    var $129=$TP;
    var $child=(($129+16)|0);
    var $arrayidx92=(($child+4)|0);
    HEAP32[(($arrayidx92)>>2)]=0;
    var $130=$TP;
    var $child93=(($130+16)|0);
    var $arrayidx94=(($child93)|0);
    HEAP32[(($arrayidx94)>>2)]=0;
    var $131=$m_addr;
    var $treemap=(($131+4)|0);
    var $132=HEAP32[(($treemap)>>2)];
    var $133=$I57;
    var $shl95=1 << $133;
    var $and96=$132 & $shl95;
    var $tobool97=(($and96)|0)!=0;
    if ($tobool97) {
      var $145=$H;
      var $146=HEAP32[(($145)>>2)];
      $T=$146;
      var $147=$psize;
      var $148=$I57;
      var $cmp106=(($148)|0)==31;
      if ($cmp106) {
        var $cond115 = 0;
      } else {
        var $149=$I57;
        var $shr110=$149 >>> 1;
        var $add111=((($shr110)+(8))|0);
        var $sub112=((($add111)-(2))|0);
        var $sub113=(((31)-($sub112))|0);
        var $cond115 = $sub113;
      }
      var $cond115;
      var $shl116=$147 << $cond115;
      $K105=$shl116;
      while(1) {
        var $150=$T;
        var $head118=(($150+4)|0);
        var $151=HEAP32[(($head118)>>2)];
        var $and119=$151 & -8;
        var $152=$psize;
        var $cmp120=(($and119)|0)!=(($152)|0);
        if (!($cmp120)) {
          label = 695;
          break;
        }
        var $153=$K105;
        var $shr123=$153 >>> 31;
        var $and124=$shr123 & 1;
        var $154=$T;
        var $child125=(($154+16)|0);
        var $arrayidx126=(($child125+($and124<<2))|0);
        $C=$arrayidx126;
        var $155=$K105;
        var $shl127=$155 << 1;
        $K105=$shl127;
        var $156=$C;
        var $157=HEAP32[(($156)>>2)];
        var $cmp128=(($157)|0)!=0;
        if (!($cmp128)) {
          label = 691;
          break;
        }
        var $158=$C;
        var $159=HEAP32[(($158)>>2)];
        $T=$159;
      }
      do {
        if (label == 691) {
          var $160=$C;
          var $161=$160;
          var $162=$m_addr;
          var $least_addr132=(($162+16)|0);
          var $163=HEAP32[(($least_addr132)>>2)];
          var $cmp133=(($161)>>>0) >= (($163)>>>0);
          var $conv134=(($cmp133)&1);
          var $expval135=($conv134);
          var $tobool136=(($expval135)|0)!=0;
          if ($tobool136) {
            var $164=$TP;
            var $165=$C;
            HEAP32[(($165)>>2)]=$164;
            var $166=$T;
            var $167=$TP;
            var $parent138=(($167+24)|0);
            HEAP32[(($parent138)>>2)]=$166;
            var $168=$TP;
            var $169=$TP;
            var $bk139=(($169+12)|0);
            HEAP32[(($bk139)>>2)]=$168;
            var $170=$TP;
            var $fd140=(($170+8)|0);
            HEAP32[(($fd140)>>2)]=$168;
            break;
          } else {
            _abort();
            throw "Reached an unreachable!"
          }
        }
        else if (label == 695) {
          var $171=$T;
          var $fd145=(($171+8)|0);
          var $172=HEAP32[(($fd145)>>2)];
          $F144=$172;
          var $173=$T;
          var $174=$173;
          var $175=$m_addr;
          var $least_addr146=(($175+16)|0);
          var $176=HEAP32[(($least_addr146)>>2)];
          var $cmp147=(($174)>>>0) >= (($176)>>>0);
          if ($cmp147) {
            var $177=$F144;
            var $178=$177;
            var $179=$m_addr;
            var $least_addr149=(($179+16)|0);
            var $180=HEAP32[(($least_addr149)>>2)];
            var $cmp150=(($178)>>>0) >= (($180)>>>0);
            var $181 = $cmp150;
          } else {
            var $181 = 0;
          }
          var $181;
          var $land_ext=(($181)&1);
          var $expval152=($land_ext);
          var $tobool153=(($expval152)|0)!=0;
          if ($tobool153) {
            var $182=$TP;
            var $183=$F144;
            var $bk155=(($183+12)|0);
            HEAP32[(($bk155)>>2)]=$182;
            var $184=$T;
            var $fd156=(($184+8)|0);
            HEAP32[(($fd156)>>2)]=$182;
            var $185=$F144;
            var $186=$TP;
            var $fd157=(($186+8)|0);
            HEAP32[(($fd157)>>2)]=$185;
            var $187=$T;
            var $188=$TP;
            var $bk158=(($188+12)|0);
            HEAP32[(($bk158)>>2)]=$187;
            var $189=$TP;
            var $parent159=(($189+24)|0);
            HEAP32[(($parent159)>>2)]=0;
            break;
          } else {
            _abort();
            throw "Reached an unreachable!"
          }
        }
      } while(0);
    } else {
      var $134=$I57;
      var $shl99=1 << $134;
      var $135=$m_addr;
      var $treemap100=(($135+4)|0);
      var $136=HEAP32[(($treemap100)>>2)];
      var $or101=$136 | $shl99;
      HEAP32[(($treemap100)>>2)]=$or101;
      var $137=$TP;
      var $138=$H;
      HEAP32[(($138)>>2)]=$137;
      var $139=$H;
      var $140=$139;
      var $141=$TP;
      var $parent=(($141+24)|0);
      HEAP32[(($parent)>>2)]=$140;
      var $142=$TP;
      var $143=$TP;
      var $bk102=(($143+12)|0);
      HEAP32[(($bk102)>>2)]=$142;
      var $144=$TP;
      var $fd103=(($144+8)|0);
      HEAP32[(($fd103)>>2)]=$142;
    }
  }

  return;
}
_add_segment["X"]=1;

// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);

  return Module['_main'](argc, argv, 0);
}




function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }

  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;

// {{PRE_RUN_ADDITIONS}}

(function() {


function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'bin', true, true);
Module['FS_createDataFile']('/', 'test.aux', [92, 114, 101, 108, 97, 120, 32, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 108, 111, 102, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 112, 97, 114, 116, 125, 32, 123, 92, 102, 105, 103, 117, 114, 101, 110, 97, 109, 101, 84, 111, 67, 32, 125, 123, 92, 114, 101, 108, 97, 120, 32, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 108, 111, 116, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 112, 97, 114, 116, 125, 32, 123, 92, 116, 97, 98, 108, 101, 110, 97, 109, 101, 84, 111, 67, 32, 125, 123, 92, 114, 101, 108, 97, 120, 32, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 116, 111, 99, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 112, 97, 114, 116, 125, 32, 123, 92, 99, 104, 97, 112, 116, 101, 114, 110, 97, 109, 101, 84, 111, 67, 32, 125, 123, 92, 114, 101, 108, 97, 120, 32, 125, 125, 10, 92, 99, 105, 116, 97, 116, 105, 111, 110, 123, 75, 111, 115, 105, 110, 115, 107, 105, 50, 48, 48, 57, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 116, 111, 99, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 99, 104, 97, 112, 116, 101, 114, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 92, 116, 104, 64, 67, 104, 97, 112, 116, 101, 114, 83, 116, 121, 108, 101, 32, 32, 49, 125, 92, 114, 101, 108, 97, 120, 32, 92, 102, 111, 110, 116, 115, 105, 122, 101, 32, 32, 123, 49, 48, 46, 57, 53, 125, 123, 49, 51, 46, 54, 125, 92, 115, 101, 108, 101, 99, 116, 102, 111, 110, 116, 32, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 49, 49, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 54, 92, 112, 64, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 92, 122, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 54, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 51, 46, 53, 92, 112, 64, 32, 109, 105, 110, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 108, 101, 116, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 110, 111, 114, 109, 97, 108, 102, 111, 110, 116, 32, 32, 73, 110, 116, 114, 111, 100, 117, 99, 116, 105, 111, 110, 125, 123, 49, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 108, 111, 102, 125, 123, 92, 97, 100, 100, 118, 115, 112, 97, 99, 101, 32, 123, 49, 48, 92, 112, 64, 32, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 108, 111, 116, 125, 123, 92, 97, 100, 100, 118, 115, 112, 97, 99, 101, 32, 123, 49, 48, 92, 112, 64, 32, 125, 125, 10, 92, 110, 101, 119, 108, 97, 98, 101, 108, 123, 105, 110, 116, 114, 111, 99, 104, 97, 112, 125, 123, 123, 92, 116, 104, 64, 67, 104, 97, 112, 116, 101, 114, 83, 116, 121, 108, 101, 32, 32, 49, 125, 123, 49, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 116, 111, 99, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 99, 104, 97, 112, 116, 101, 114, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 92, 116, 104, 64, 67, 104, 97, 112, 116, 101, 114, 83, 116, 121, 108, 101, 32, 32, 50, 125, 92, 114, 101, 108, 97, 120, 32, 92, 102, 111, 110, 116, 115, 105, 122, 101, 32, 32, 123, 49, 48, 46, 57, 53, 125, 123, 49, 51, 46, 54, 125, 92, 115, 101, 108, 101, 99, 116, 102, 111, 110, 116, 32, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 49, 49, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 54, 92, 112, 64, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 92, 122, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 54, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 51, 46, 53, 92, 112, 64, 32, 109, 105, 110, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 108, 101, 116, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 110, 111, 114, 109, 97, 108, 102, 111, 110, 116, 32, 32, 77, 101, 116, 104, 111, 100, 115, 125, 123, 54, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 108, 111, 102, 125, 123, 92, 97, 100, 100, 118, 115, 112, 97, 99, 101, 32, 123, 49, 48, 92, 112, 64, 32, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 108, 111, 116, 125, 123, 92, 97, 100, 100, 118, 115, 112, 97, 99, 101, 32, 123, 49, 48, 92, 112, 64, 32, 125, 125, 10, 92, 110, 101, 119, 108, 97, 98, 101, 108, 123, 109, 101, 116, 104, 111, 100, 99, 104, 97, 112, 125, 123, 123, 92, 116, 104, 64, 67, 104, 97, 112, 116, 101, 114, 83, 116, 121, 108, 101, 32, 32, 50, 125, 123, 54, 125, 125, 10, 92, 110, 101, 119, 108, 97, 98, 101, 108, 123, 100, 115, 112, 102, 105, 103, 125, 123, 123, 92, 116, 104, 64, 67, 104, 97, 112, 116, 101, 114, 83, 116, 121, 108, 101, 32, 32, 50, 125, 123, 54, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 108, 111, 102, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 102, 105, 103, 117, 114, 101, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 50, 46, 49, 125, 123, 92, 105, 103, 110, 111, 114, 101, 115, 112, 97, 99, 101, 115, 32, 68, 105, 115, 99, 114, 101, 116, 101, 32, 83, 101, 113, 117, 101, 110, 99, 101, 32, 80, 114, 111, 100, 117, 99, 116, 105, 111, 110, 125, 125, 123, 54, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 116, 111, 99, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 115, 101, 99, 116, 105, 111, 110, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 92, 116, 104, 64, 83, 101, 99, 116, 105, 111, 110, 83, 116, 121, 108, 101, 32, 32, 50, 46, 49, 125, 92, 114, 101, 108, 97, 120, 32, 92, 102, 111, 110, 116, 115, 105, 122, 101, 32, 32, 123, 49, 48, 46, 57, 53, 125, 123, 49, 51, 46, 54, 125, 92, 115, 101, 108, 101, 99, 116, 102, 111, 110, 116, 32, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 49, 49, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 54, 92, 112, 64, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 92, 122, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 54, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 51, 46, 53, 92, 112, 64, 32, 109, 105, 110, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 108, 101, 116, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 110, 111, 114, 109, 97, 108, 102, 111, 110, 116, 32, 32, 80, 105, 108, 111, 116, 125, 123, 54, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 116, 111, 99, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 115, 101, 99, 116, 105, 111, 110, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 92, 116, 104, 64, 83, 101, 99, 116, 105, 111, 110, 83, 116, 121, 108, 101, 32, 32, 50, 46, 50, 125, 92, 114, 101, 108, 97, 120, 32, 92, 102, 111, 110, 116, 115, 105, 122, 101, 32, 32, 123, 49, 48, 46, 57, 53, 125, 123, 49, 51, 46, 54, 125, 92, 115, 101, 108, 101, 99, 116, 102, 111, 110, 116, 32, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 49, 49, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 54, 92, 112, 64, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 92, 122, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 54, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 51, 46, 53, 92, 112, 64, 32, 109, 105, 110, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 108, 101, 116, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 110, 111, 114, 109, 97, 108, 102, 111, 110, 116, 32, 32, 69, 120, 112, 101, 114, 105, 109, 101, 110, 116, 115, 32, 49, 32, 92, 38, 32, 50, 125, 123, 55, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 116, 111, 99, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 115, 117, 98, 115, 101, 99, 116, 105, 111, 110, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 92, 116, 104, 64, 83, 117, 98, 83, 101, 99, 116, 105, 111, 110, 83, 116, 121, 108, 101, 32, 32, 50, 46, 50, 46, 49, 125, 92, 114, 101, 108, 97, 120, 32, 92, 102, 111, 110, 116, 115, 105, 122, 101, 32, 32, 123, 49, 48, 46, 57, 53, 125, 123, 49, 51, 46, 54, 125, 92, 115, 101, 108, 101, 99, 116, 102, 111, 110, 116, 32, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 49, 49, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 54, 92, 112, 64, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 92, 122, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 54, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 51, 46, 53, 92, 112, 64, 32, 109, 105, 110, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 108, 101, 116, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 110, 111, 114, 109, 97, 108, 102, 111, 110, 116, 32, 32, 69, 120, 112, 101, 114, 105, 109, 101, 110, 116, 32, 49, 125, 123, 56, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 116, 111, 99, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 115, 117, 98, 115, 101, 99, 116, 105, 111, 110, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 92, 116, 104, 64, 83, 117, 98, 83, 101, 99, 116, 105, 111, 110, 83, 116, 121, 108, 101, 32, 32, 50, 46, 50, 46, 50, 125, 92, 114, 101, 108, 97, 120, 32, 92, 102, 111, 110, 116, 115, 105, 122, 101, 32, 32, 123, 49, 48, 46, 57, 53, 125, 123, 49, 51, 46, 54, 125, 92, 115, 101, 108, 101, 99, 116, 102, 111, 110, 116, 32, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 49, 49, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 54, 92, 112, 64, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 92, 122, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 54, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 51, 46, 53, 92, 112, 64, 32, 109, 105, 110, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 108, 101, 116, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 110, 111, 114, 109, 97, 108, 102, 111, 110, 116, 32, 32, 69, 120, 112, 101, 114, 105, 109, 101, 110, 116, 32, 50, 125, 123, 57, 125, 125, 10, 92, 99, 105, 116, 97, 116, 105, 111, 110, 123, 75, 111, 115, 105, 110, 115, 107, 105, 50, 48, 48, 57, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 116, 111, 99, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 99, 104, 97, 112, 116, 101, 114, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 92, 116, 104, 64, 67, 104, 97, 112, 116, 101, 114, 83, 116, 121, 108, 101, 32, 32, 51, 125, 92, 114, 101, 108, 97, 120, 32, 92, 102, 111, 110, 116, 115, 105, 122, 101, 32, 32, 123, 49, 48, 46, 57, 53, 125, 123, 49, 51, 46, 54, 125, 92, 115, 101, 108, 101, 99, 116, 102, 111, 110, 116, 32, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 49, 49, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 54, 92, 112, 64, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 92, 122, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 54, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 51, 46, 53, 92, 112, 64, 32, 109, 105, 110, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 108, 101, 116, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 110, 111, 114, 109, 97, 108, 102, 111, 110, 116, 32, 32, 82, 101, 115, 117, 108, 116, 115, 125, 123, 49, 48, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 108, 111, 102, 125, 123, 92, 97, 100, 100, 118, 115, 112, 97, 99, 101, 32, 123, 49, 48, 92, 112, 64, 32, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 108, 111, 116, 125, 123, 92, 97, 100, 100, 118, 115, 112, 97, 99, 101, 32, 123, 49, 48, 92, 112, 64, 32, 125, 125, 10, 92, 110, 101, 119, 108, 97, 98, 101, 108, 123, 114, 101, 115, 117, 108, 116, 115, 99, 104, 97, 112, 125, 123, 123, 92, 116, 104, 64, 67, 104, 97, 112, 116, 101, 114, 83, 116, 121, 108, 101, 32, 32, 51, 125, 123, 49, 48, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 116, 111, 99, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 115, 101, 99, 116, 105, 111, 110, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 92, 116, 104, 64, 83, 101, 99, 116, 105, 111, 110, 83, 116, 121, 108, 101, 32, 32, 51, 46, 49, 125, 92, 114, 101, 108, 97, 120, 32, 92, 102, 111, 110, 116, 115, 105, 122, 101, 32, 32, 123, 49, 48, 46, 57, 53, 125, 123, 49, 51, 46, 54, 125, 92, 115, 101, 108, 101, 99, 116, 102, 111, 110, 116, 32, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 49, 49, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 54, 92, 112, 64, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 92, 122, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 54, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 51, 46, 53, 92, 112, 64, 32, 109, 105, 110, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 108, 101, 116, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 110, 111, 114, 109, 97, 108, 102, 111, 110, 116, 32, 32, 80, 105, 108, 111, 116, 32, 83, 116, 117, 100, 121, 125, 123, 49, 48, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 116, 111, 99, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 115, 101, 99, 116, 105, 111, 110, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 92, 116, 104, 64, 83, 101, 99, 116, 105, 111, 110, 83, 116, 121, 108, 101, 32, 32, 51, 46, 50, 125, 92, 114, 101, 108, 97, 120, 32, 92, 102, 111, 110, 116, 115, 105, 122, 101, 32, 32, 123, 49, 48, 46, 57, 53, 125, 123, 49, 51, 46, 54, 125, 92, 115, 101, 108, 101, 99, 116, 102, 111, 110, 116, 32, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 49, 49, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 54, 92, 112, 64, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 92, 122, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 54, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 51, 46, 53, 92, 112, 64, 32, 109, 105, 110, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 108, 101, 116, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 110, 111, 114, 109, 97, 108, 102, 111, 110, 116, 32, 32, 69, 120, 112, 101, 114, 105, 109, 101, 110, 116, 32, 49, 125, 123, 49, 49, 125, 125, 10, 92, 110, 101, 119, 108, 97, 98, 101, 108, 123, 112, 105, 108, 111, 116, 48, 125, 123, 123, 92, 116, 104, 64, 83, 101, 99, 116, 105, 111, 110, 83, 116, 121, 108, 101, 32, 32, 51, 46, 49, 125, 123, 49, 50, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 108, 111, 102, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 102, 105, 103, 117, 114, 101, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 51, 46, 49, 125, 123, 92, 105, 103, 110, 111, 114, 101, 115, 112, 97, 99, 101, 115, 32, 80, 105, 108, 111, 116, 125, 125, 123, 49, 50, 125, 125, 10, 92, 99, 105, 116, 97, 116, 105, 111, 110, 123, 75, 111, 115, 105, 110, 115, 107, 105, 50, 48, 48, 57, 125, 10, 92, 99, 105, 116, 97, 116, 105, 111, 110, 123, 75, 111, 115, 105, 110, 115, 107, 105, 50, 48, 48, 57, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 116, 111, 99, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 115, 117, 98, 115, 101, 99, 116, 105, 111, 110, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 92, 116, 104, 64, 83, 117, 98, 83, 101, 99, 116, 105, 111, 110, 83, 116, 121, 108, 101, 32, 32, 51, 46, 50, 46, 49, 125, 92, 114, 101, 108, 97, 120, 32, 92, 102, 111, 110, 116, 115, 105, 122, 101, 32, 32, 123, 49, 48, 46, 57, 53, 125, 123, 49, 51, 46, 54, 125, 92, 115, 101, 108, 101, 99, 116, 102, 111, 110, 116, 32, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 49, 49, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 54, 92, 112, 64, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 92, 122, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 54, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 51, 46, 53, 92, 112, 64, 32, 109, 105, 110, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 108, 101, 116, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 110, 111, 114, 109, 97, 108, 102, 111, 110, 116, 32, 32, 69, 120, 112, 101, 114, 105, 109, 101, 110, 116, 32, 49, 58, 32, 65, 110, 97, 108, 121, 115, 105, 115, 32, 111, 102, 32, 76, 101, 118, 101, 108, 115, 125, 123, 49, 52, 125, 125, 10, 92, 110, 101, 119, 108, 97, 98, 101, 108, 123, 101, 120, 112, 49, 108, 118, 108, 49, 100, 103, 114, 109, 125, 123, 123, 92, 116, 104, 64, 83, 117, 98, 83, 101, 99, 116, 105, 111, 110, 83, 116, 121, 108, 101, 32, 32, 51, 46, 50, 46, 49, 125, 123, 49, 54, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 108, 111, 102, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 102, 105, 103, 117, 114, 101, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 51, 46, 50, 125, 123, 92, 105, 103, 110, 111, 114, 101, 115, 112, 97, 99, 101, 115, 32, 67, 111, 110, 100, 105, 116, 105, 111, 110, 32, 49, 125, 125, 123, 49, 54, 125, 125, 10, 92, 110, 101, 119, 108, 97, 98, 101, 108, 123, 99, 49, 100, 49, 110, 115, 109, 101, 97, 110, 115, 125, 123, 123, 92, 116, 104, 64, 83, 117, 98, 83, 101, 99, 116, 105, 111, 110, 83, 116, 121, 108, 101, 32, 32, 51, 46, 50, 46, 49, 125, 123, 49, 55, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 108, 111, 102, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 102, 105, 103, 117, 114, 101, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 51, 46, 51, 125, 123, 92, 105, 103, 110, 111, 114, 101, 115, 112, 97, 99, 101, 115, 32, 67, 111, 110, 100, 105, 116, 105, 111, 110, 32, 49, 125, 125, 123, 49, 55, 125, 125, 10, 92, 110, 101, 119, 108, 97, 98, 101, 108, 123, 99, 49, 100, 50, 110, 115, 109, 101, 97, 110, 115, 125, 123, 123, 92, 116, 104, 64, 83, 117, 98, 83, 101, 99, 116, 105, 111, 110, 83, 116, 121, 108, 101, 32, 32, 51, 46, 50, 46, 49, 125, 123, 49, 55, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 108, 111, 102, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 102, 105, 103, 117, 114, 101, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 51, 46, 52, 125, 123, 92, 105, 103, 110, 111, 114, 101, 115, 112, 97, 99, 101, 115, 32, 67, 111, 110, 100, 105, 116, 105, 111, 110, 32, 49, 125, 125, 123, 49, 55, 125, 125, 10, 92, 98, 105, 98, 115, 116, 121, 108, 101, 123, 112, 108, 97, 105, 110, 125, 10, 92, 99, 105, 116, 97, 116, 105, 111, 110, 123, 42, 125, 10, 92, 98, 105, 98, 100, 97, 116, 97, 123, 114, 101, 102, 115, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 116, 111, 99, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 115, 101, 99, 116, 105, 111, 110, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 92, 116, 104, 64, 83, 101, 99, 116, 105, 111, 110, 83, 116, 121, 108, 101, 32, 32, 51, 46, 51, 125, 92, 114, 101, 108, 97, 120, 32, 92, 102, 111, 110, 116, 115, 105, 122, 101, 32, 32, 123, 49, 48, 46, 57, 53, 125, 123, 49, 51, 46, 54, 125, 92, 115, 101, 108, 101, 99, 116, 102, 111, 110, 116, 32, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 49, 49, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 54, 92, 112, 64, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 92, 122, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 54, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 51, 46, 53, 92, 112, 64, 32, 109, 105, 110, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 108, 101, 116, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 110, 111, 114, 109, 97, 108, 102, 111, 110, 116, 32, 32, 69, 120, 112, 101, 114, 105, 109, 101, 110, 116, 32, 50, 125, 123, 49, 56, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 116, 111, 99, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 115, 117, 98, 115, 101, 99, 116, 105, 111, 110, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 92, 116, 104, 64, 83, 117, 98, 83, 101, 99, 116, 105, 111, 110, 83, 116, 121, 108, 101, 32, 32, 51, 46, 51, 46, 49, 125, 92, 114, 101, 108, 97, 120, 32, 92, 102, 111, 110, 116, 115, 105, 122, 101, 32, 32, 123, 49, 48, 46, 57, 53, 125, 123, 49, 51, 46, 54, 125, 92, 115, 101, 108, 101, 99, 116, 102, 111, 110, 116, 32, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 49, 49, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 54, 92, 112, 64, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 92, 122, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 54, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 51, 46, 53, 92, 112, 64, 32, 109, 105, 110, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 108, 101, 116, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 110, 111, 114, 109, 97, 108, 102, 111, 110, 116, 32, 32, 76, 101, 118, 101, 108, 115, 32, 65, 110, 97, 108, 121, 115, 105, 115, 125, 123, 49, 56, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 116, 111, 99, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 115, 101, 99, 116, 105, 111, 110, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 92, 116, 104, 64, 83, 101, 99, 116, 105, 111, 110, 83, 116, 121, 108, 101, 32, 32, 51, 46, 52, 125, 92, 114, 101, 108, 97, 120, 32, 92, 102, 111, 110, 116, 115, 105, 122, 101, 32, 32, 123, 49, 48, 46, 57, 53, 125, 123, 49, 51, 46, 54, 125, 92, 115, 101, 108, 101, 99, 116, 102, 111, 110, 116, 32, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 49, 49, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 54, 92, 112, 64, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 92, 122, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 54, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 51, 46, 53, 92, 112, 64, 32, 109, 105, 110, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 108, 101, 116, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 110, 111, 114, 109, 97, 108, 102, 111, 110, 116, 32, 32, 69, 120, 112, 101, 114, 105, 109, 101, 110, 116, 32, 51, 125, 123, 49, 56, 125, 125, 10, 92, 110, 101, 119, 108, 97, 98, 101, 108, 123, 101, 120, 112, 50, 108, 118, 108, 100, 103, 114, 109, 99, 111, 110, 100, 49, 125, 123, 123, 92, 116, 104, 64, 83, 117, 98, 83, 101, 99, 116, 105, 111, 110, 83, 116, 121, 108, 101, 32, 32, 51, 46, 51, 46, 49, 125, 123, 49, 57, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 108, 111, 102, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 102, 105, 103, 117, 114, 101, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 51, 46, 53, 125, 123, 92, 105, 103, 110, 111, 114, 101, 115, 112, 97, 99, 101, 115, 32, 67, 111, 110, 100, 105, 116, 105, 111, 110, 32, 49, 125, 125, 123, 49, 57, 125, 125, 10, 92, 110, 101, 119, 108, 97, 98, 101, 108, 123, 101, 120, 112, 50, 108, 118, 108, 100, 103, 114, 109, 99, 111, 110, 100, 50, 125, 123, 123, 92, 116, 104, 64, 83, 117, 98, 83, 101, 99, 116, 105, 111, 110, 83, 116, 121, 108, 101, 32, 32, 51, 46, 51, 46, 49, 125, 123, 50, 48, 125, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 108, 111, 102, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 102, 105, 103, 117, 114, 101, 125, 123, 92, 110, 117, 109, 98, 101, 114, 108, 105, 110, 101, 32, 123, 51, 46, 54, 125, 123, 92, 105, 103, 110, 111, 114, 101, 115, 112, 97, 99, 101, 115, 32, 67, 111, 110, 100, 105, 116, 105, 111, 110, 32, 50, 125, 125, 123, 50, 48, 125, 125, 10, 92, 98, 105, 98, 99, 105, 116, 101, 123, 98, 97, 121, 108, 111, 114, 125, 123, 49, 125, 10, 92, 98, 105, 98, 99, 105, 116, 101, 123, 99, 114, 111, 119, 125, 123, 50, 125, 10, 92, 98, 105, 98, 99, 105, 116, 101, 123, 100, 111, 108, 101, 125, 123, 51, 125, 10, 92, 98, 105, 98, 99, 105, 116, 101, 123, 102, 97, 98, 110, 105, 115, 125, 123, 52, 125, 10, 92, 98, 105, 98, 99, 105, 116, 101, 123, 103, 117, 105, 108, 108, 111, 116, 125, 123, 53, 125, 10, 92, 98, 105, 98, 99, 105, 116, 101, 123, 75, 111, 115, 105, 110, 115, 107, 105, 50, 48, 48, 57, 125, 123, 54, 125, 10, 92, 98, 105, 98, 99, 105, 116, 101, 123, 108, 97, 111, 58, 116, 104, 101, 115, 105, 115, 125, 123, 55, 125, 10, 92, 98, 105, 98, 99, 105, 116, 101, 123, 108, 97, 111, 58, 112, 97, 112, 101, 114, 125, 123, 56, 125, 10, 92, 98, 105, 98, 99, 105, 116, 101, 123, 108, 97, 111, 58, 57, 55, 125, 123, 57, 125, 10, 92, 98, 105, 98, 99, 105, 116, 101, 123, 109, 117, 108, 105, 99, 107, 125, 123, 49, 48, 125, 10, 92, 98, 105, 98, 99, 105, 116, 101, 123, 109, 117, 108, 105, 99, 107, 55, 53, 125, 123, 49, 49, 125, 10, 92, 98, 105, 98, 99, 105, 116, 101, 123, 114, 105, 99, 104, 97, 114, 100, 115, 125, 123, 49, 50, 125, 10, 92, 98, 105, 98, 99, 105, 116, 101, 123, 115, 109, 105, 116, 116, 121, 125, 123, 49, 51, 125, 10, 92, 98, 105, 98, 99, 105, 116, 101, 123, 116, 97, 117, 109, 125, 123, 49, 52, 125, 10, 92, 98, 105, 98, 99, 105, 116, 101, 123, 122, 101, 100, 100, 105, 110, 105, 125, 123, 49, 53, 125, 10, 92, 64, 119, 114, 105, 116, 101, 102, 105, 108, 101, 123, 116, 111, 99, 125, 123, 92, 99, 111, 110, 116, 101, 110, 116, 115, 108, 105, 110, 101, 32, 123, 112, 97, 114, 116, 125, 123, 32, 92, 114, 101, 108, 97, 120, 32, 92, 102, 111, 110, 116, 115, 105, 122, 101, 32, 32, 123, 49, 48, 46, 57, 53, 125, 123, 49, 51, 46, 54, 125, 92, 115, 101, 108, 101, 99, 116, 102, 111, 110, 116, 32, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 49, 49, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 54, 92, 112, 64, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 92, 122, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 104, 111, 114, 116, 115, 107, 105, 112, 32, 54, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 51, 46, 53, 92, 112, 64, 32, 109, 105, 110, 117, 115, 51, 92, 112, 64, 32, 92, 98, 101, 108, 111, 119, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 97, 98, 111, 118, 101, 100, 105, 115, 112, 108, 97, 121, 115, 107, 105, 112, 32, 92, 108, 101, 116, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 32, 92, 108, 101, 102, 116, 109, 97, 114, 103, 105, 110, 105, 32, 92, 112, 97, 114, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 116, 111, 112, 115, 101, 112, 32, 57, 92, 112, 64, 32, 112, 108, 117, 115, 51, 92, 112, 64, 32, 109, 105, 110, 117, 115, 53, 92, 112, 64, 32, 92, 105, 116, 101, 109, 115, 101, 112, 32, 52, 46, 53, 92, 112, 64, 32, 112, 108, 117, 115, 50, 92, 112, 64, 32, 109, 105, 110, 117, 115, 92, 112, 64, 32, 92, 110, 111, 114, 109, 97, 108, 102, 111, 110, 116, 32, 32, 92, 98, 102, 115, 101, 114, 105, 101, 115, 32, 32, 66, 105, 98, 108, 105, 111, 103, 114, 97, 112, 104, 121, 92, 110, 111, 114, 109, 97, 108, 102, 111, 110, 116, 32, 32, 125, 123, 50, 49, 125, 125, 10], true, true);
Module['FS_createDataFile']('/', 'plain.bst', [37, 32, 66, 105, 98, 84, 101, 88, 32, 115, 116, 97, 110, 100, 97, 114, 100, 32, 98, 105, 98, 108, 105, 111, 103, 114, 97, 112, 104, 121, 32, 115, 116, 121, 108, 101, 32, 96, 112, 108, 97, 105, 110, 39, 10, 9, 37, 32, 118, 101, 114, 115, 105, 111, 110, 32, 48, 46, 57, 57, 97, 32, 102, 111, 114, 32, 66, 105, 98, 84, 101, 88, 32, 118, 101, 114, 115, 105, 111, 110, 115, 32, 48, 46, 57, 57, 97, 32, 111, 114, 32, 108, 97, 116, 101, 114, 44, 32, 76, 97, 84, 101, 88, 32, 118, 101, 114, 115, 105, 111, 110, 32, 50, 46, 48, 57, 46, 10, 9, 37, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 49, 57, 56, 53, 44, 32, 97, 108, 108, 32, 114, 105, 103, 104, 116, 115, 32, 114, 101, 115, 101, 114, 118, 101, 100, 46, 10, 9, 37, 32, 67, 111, 112, 121, 105, 110, 103, 32, 111, 102, 32, 116, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 97, 117, 116, 104, 111, 114, 105, 122, 101, 100, 32, 111, 110, 108, 121, 32, 105, 102, 32, 101, 105, 116, 104, 101, 114, 10, 9, 37, 32, 40, 49, 41, 32, 121, 111, 117, 32, 109, 97, 107, 101, 32, 97, 98, 115, 111, 108, 117, 116, 101, 108, 121, 32, 110, 111, 32, 99, 104, 97, 110, 103, 101, 115, 32, 116, 111, 32, 121, 111, 117, 114, 32, 99, 111, 112, 121, 44, 32, 105, 110, 99, 108, 117, 100, 105, 110, 103, 32, 110, 97, 109, 101, 44, 32, 111, 114, 10, 9, 37, 32, 40, 50, 41, 32, 105, 102, 32, 121, 111, 117, 32, 100, 111, 32, 109, 97, 107, 101, 32, 99, 104, 97, 110, 103, 101, 115, 44, 32, 121, 111, 117, 32, 110, 97, 109, 101, 32, 105, 116, 32, 115, 111, 109, 101, 116, 104, 105, 110, 103, 32, 111, 116, 104, 101, 114, 32, 116, 104, 97, 110, 10, 9, 37, 32, 98, 116, 120, 98, 115, 116, 46, 100, 111, 99, 44, 32, 112, 108, 97, 105, 110, 46, 98, 115, 116, 44, 32, 117, 110, 115, 114, 116, 46, 98, 115, 116, 44, 32, 97, 108, 112, 104, 97, 46, 98, 115, 116, 44, 32, 97, 110, 100, 32, 97, 98, 98, 114, 118, 46, 98, 115, 116, 46, 10, 9, 37, 32, 84, 104, 105, 115, 32, 114, 101, 115, 116, 114, 105, 99, 116, 105, 111, 110, 32, 104, 101, 108, 112, 115, 32, 101, 110, 115, 117, 114, 101, 32, 116, 104, 97, 116, 32, 97, 108, 108, 32, 115, 116, 97, 110, 100, 97, 114, 100, 32, 115, 116, 121, 108, 101, 115, 32, 97, 114, 101, 32, 105, 100, 101, 110, 116, 105, 99, 97, 108, 46, 10, 9, 37, 32, 84, 104, 101, 32, 102, 105, 108, 101, 32, 98, 116, 120, 98, 115, 116, 46, 100, 111, 99, 32, 104, 97, 115, 32, 116, 104, 101, 32, 100, 111, 99, 117, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 102, 111, 114, 32, 116, 104, 105, 115, 32, 115, 116, 121, 108, 101, 46, 10, 10, 69, 78, 84, 82, 89, 10, 32, 32, 123, 32, 97, 100, 100, 114, 101, 115, 115, 10, 32, 32, 32, 32, 97, 117, 116, 104, 111, 114, 10, 32, 32, 32, 32, 98, 111, 111, 107, 116, 105, 116, 108, 101, 10, 32, 32, 32, 32, 99, 104, 97, 112, 116, 101, 114, 10, 32, 32, 32, 32, 101, 100, 105, 116, 105, 111, 110, 10, 32, 32, 32, 32, 101, 100, 105, 116, 111, 114, 10, 32, 32, 32, 32, 104, 111, 119, 112, 117, 98, 108, 105, 115, 104, 101, 100, 10, 32, 32, 32, 32, 105, 110, 115, 116, 105, 116, 117, 116, 105, 111, 110, 10, 32, 32, 32, 32, 106, 111, 117, 114, 110, 97, 108, 10, 32, 32, 32, 32, 107, 101, 121, 10, 32, 32, 32, 32, 109, 111, 110, 116, 104, 10, 32, 32, 32, 32, 110, 111, 116, 101, 10, 32, 32, 32, 32, 110, 117, 109, 98, 101, 114, 10, 32, 32, 32, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 10, 32, 32, 32, 32, 112, 97, 103, 101, 115, 10, 32, 32, 32, 32, 112, 117, 98, 108, 105, 115, 104, 101, 114, 10, 32, 32, 32, 32, 115, 99, 104, 111, 111, 108, 10, 32, 32, 32, 32, 115, 101, 114, 105, 101, 115, 10, 32, 32, 32, 32, 116, 105, 116, 108, 101, 10, 32, 32, 32, 32, 116, 121, 112, 101, 10, 32, 32, 32, 32, 118, 111, 108, 117, 109, 101, 10, 32, 32, 32, 32, 121, 101, 97, 114, 10, 32, 32, 125, 10, 32, 32, 123, 125, 10, 32, 32, 123, 32, 108, 97, 98, 101, 108, 32, 125, 10, 10, 73, 78, 84, 69, 71, 69, 82, 83, 32, 123, 32, 111, 117, 116, 112, 117, 116, 46, 115, 116, 97, 116, 101, 32, 98, 101, 102, 111, 114, 101, 46, 97, 108, 108, 32, 109, 105, 100, 46, 115, 101, 110, 116, 101, 110, 99, 101, 32, 97, 102, 116, 101, 114, 46, 115, 101, 110, 116, 101, 110, 99, 101, 32, 97, 102, 116, 101, 114, 46, 98, 108, 111, 99, 107, 32, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 105, 110, 105, 116, 46, 115, 116, 97, 116, 101, 46, 99, 111, 110, 115, 116, 115, 125, 10, 123, 32, 35, 48, 32, 39, 98, 101, 102, 111, 114, 101, 46, 97, 108, 108, 32, 58, 61, 10, 32, 32, 35, 49, 32, 39, 109, 105, 100, 46, 115, 101, 110, 116, 101, 110, 99, 101, 32, 58, 61, 10, 32, 32, 35, 50, 32, 39, 97, 102, 116, 101, 114, 46, 115, 101, 110, 116, 101, 110, 99, 101, 32, 58, 61, 10, 32, 32, 35, 51, 32, 39, 97, 102, 116, 101, 114, 46, 98, 108, 111, 99, 107, 32, 58, 61, 10, 125, 10, 10, 83, 84, 82, 73, 78, 71, 83, 32, 123, 32, 115, 32, 116, 32, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 111, 117, 116, 112, 117, 116, 46, 110, 111, 110, 110, 117, 108, 108, 125, 10, 123, 32, 39, 115, 32, 58, 61, 10, 32, 32, 111, 117, 116, 112, 117, 116, 46, 115, 116, 97, 116, 101, 32, 109, 105, 100, 46, 115, 101, 110, 116, 101, 110, 99, 101, 32, 61, 10, 32, 32, 32, 32, 123, 32, 34, 44, 32, 34, 32, 42, 32, 119, 114, 105, 116, 101, 36, 32, 125, 10, 32, 32, 32, 32, 123, 32, 111, 117, 116, 112, 117, 116, 46, 115, 116, 97, 116, 101, 32, 97, 102, 116, 101, 114, 46, 98, 108, 111, 99, 107, 32, 61, 10, 9, 123, 32, 97, 100, 100, 46, 112, 101, 114, 105, 111, 100, 36, 32, 119, 114, 105, 116, 101, 36, 10, 9, 32, 32, 110, 101, 119, 108, 105, 110, 101, 36, 10, 9, 32, 32, 34, 92, 110, 101, 119, 98, 108, 111, 99, 107, 32, 34, 32, 119, 114, 105, 116, 101, 36, 10, 9, 125, 10, 9, 123, 32, 111, 117, 116, 112, 117, 116, 46, 115, 116, 97, 116, 101, 32, 98, 101, 102, 111, 114, 101, 46, 97, 108, 108, 32, 61, 10, 9, 32, 32, 32, 32, 39, 119, 114, 105, 116, 101, 36, 10, 9, 32, 32, 32, 32, 123, 32, 97, 100, 100, 46, 112, 101, 114, 105, 111, 100, 36, 32, 34, 32, 34, 32, 42, 32, 119, 114, 105, 116, 101, 36, 32, 125, 10, 9, 32, 32, 105, 102, 36, 10, 9, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 32, 32, 109, 105, 100, 46, 115, 101, 110, 116, 101, 110, 99, 101, 32, 39, 111, 117, 116, 112, 117, 116, 46, 115, 116, 97, 116, 101, 32, 58, 61, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 32, 32, 115, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 111, 117, 116, 112, 117, 116, 125, 10, 123, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 36, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 39, 112, 111, 112, 36, 10, 32, 32, 32, 32, 39, 111, 117, 116, 112, 117, 116, 46, 110, 111, 110, 110, 117, 108, 108, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 125, 10, 123, 32, 39, 116, 32, 58, 61, 10, 32, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 36, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 112, 111, 112, 36, 32, 34, 101, 109, 112, 116, 121, 32, 34, 32, 116, 32, 42, 32, 34, 32, 105, 110, 32, 34, 32, 42, 32, 99, 105, 116, 101, 36, 32, 42, 32, 119, 97, 114, 110, 105, 110, 103, 36, 32, 125, 10, 32, 32, 32, 32, 39, 111, 117, 116, 112, 117, 116, 46, 110, 111, 110, 110, 117, 108, 108, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 111, 117, 116, 112, 117, 116, 46, 98, 105, 98, 105, 116, 101, 109, 125, 10, 123, 32, 110, 101, 119, 108, 105, 110, 101, 36, 10, 32, 32, 34, 92, 98, 105, 98, 105, 116, 101, 109, 123, 34, 32, 119, 114, 105, 116, 101, 36, 10, 32, 32, 99, 105, 116, 101, 36, 32, 119, 114, 105, 116, 101, 36, 10, 32, 32, 34, 125, 34, 32, 119, 114, 105, 116, 101, 36, 10, 32, 32, 110, 101, 119, 108, 105, 110, 101, 36, 10, 32, 32, 34, 34, 10, 32, 32, 98, 101, 102, 111, 114, 101, 46, 97, 108, 108, 32, 39, 111, 117, 116, 112, 117, 116, 46, 115, 116, 97, 116, 101, 32, 58, 61, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 105, 110, 46, 101, 110, 116, 114, 121, 125, 10, 123, 32, 97, 100, 100, 46, 112, 101, 114, 105, 111, 100, 36, 10, 32, 32, 119, 114, 105, 116, 101, 36, 10, 32, 32, 110, 101, 119, 108, 105, 110, 101, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 110, 101, 119, 46, 98, 108, 111, 99, 107, 125, 10, 123, 32, 111, 117, 116, 112, 117, 116, 46, 115, 116, 97, 116, 101, 32, 98, 101, 102, 111, 114, 101, 46, 97, 108, 108, 32, 61, 10, 32, 32, 32, 32, 39, 115, 107, 105, 112, 36, 10, 32, 32, 32, 32, 123, 32, 97, 102, 116, 101, 114, 46, 98, 108, 111, 99, 107, 32, 39, 111, 117, 116, 112, 117, 116, 46, 115, 116, 97, 116, 101, 32, 58, 61, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 110, 101, 119, 46, 115, 101, 110, 116, 101, 110, 99, 101, 125, 10, 123, 32, 111, 117, 116, 112, 117, 116, 46, 115, 116, 97, 116, 101, 32, 97, 102, 116, 101, 114, 46, 98, 108, 111, 99, 107, 32, 61, 10, 32, 32, 32, 32, 39, 115, 107, 105, 112, 36, 10, 32, 32, 32, 32, 123, 32, 111, 117, 116, 112, 117, 116, 46, 115, 116, 97, 116, 101, 32, 98, 101, 102, 111, 114, 101, 46, 97, 108, 108, 32, 61, 10, 9, 39, 115, 107, 105, 112, 36, 10, 9, 123, 32, 97, 102, 116, 101, 114, 46, 115, 101, 110, 116, 101, 110, 99, 101, 32, 39, 111, 117, 116, 112, 117, 116, 46, 115, 116, 97, 116, 101, 32, 58, 61, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 110, 111, 116, 125, 10, 123, 32, 32, 32, 123, 32, 35, 48, 32, 125, 10, 32, 32, 32, 32, 123, 32, 35, 49, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 97, 110, 100, 125, 10, 123, 32, 32, 32, 39, 115, 107, 105, 112, 36, 10, 32, 32, 32, 32, 123, 32, 112, 111, 112, 36, 32, 35, 48, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 111, 114, 125, 10, 123, 32, 32, 32, 123, 32, 112, 111, 112, 36, 32, 35, 49, 32, 125, 10, 32, 32, 32, 32, 39, 115, 107, 105, 112, 36, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 110, 101, 119, 46, 98, 108, 111, 99, 107, 46, 99, 104, 101, 99, 107, 97, 125, 10, 123, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 39, 115, 107, 105, 112, 36, 10, 32, 32, 32, 32, 39, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 110, 101, 119, 46, 98, 108, 111, 99, 107, 46, 99, 104, 101, 99, 107, 98, 125, 10, 123, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 115, 119, 97, 112, 36, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 97, 110, 100, 10, 32, 32, 32, 32, 39, 115, 107, 105, 112, 36, 10, 32, 32, 32, 32, 39, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 110, 101, 119, 46, 115, 101, 110, 116, 101, 110, 99, 101, 46, 99, 104, 101, 99, 107, 97, 125, 10, 123, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 39, 115, 107, 105, 112, 36, 10, 32, 32, 32, 32, 39, 110, 101, 119, 46, 115, 101, 110, 116, 101, 110, 99, 101, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 110, 101, 119, 46, 115, 101, 110, 116, 101, 110, 99, 101, 46, 99, 104, 101, 99, 107, 98, 125, 10, 123, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 115, 119, 97, 112, 36, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 97, 110, 100, 10, 32, 32, 32, 32, 39, 115, 107, 105, 112, 36, 10, 32, 32, 32, 32, 39, 110, 101, 119, 46, 115, 101, 110, 116, 101, 110, 99, 101, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 105, 101, 108, 100, 46, 111, 114, 46, 110, 117, 108, 108, 125, 10, 123, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 36, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 112, 111, 112, 36, 32, 34, 34, 32, 125, 10, 32, 32, 32, 32, 39, 115, 107, 105, 112, 36, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 101, 109, 112, 104, 97, 115, 105, 122, 101, 125, 10, 123, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 36, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 112, 111, 112, 36, 32, 34, 34, 32, 125, 10, 32, 32, 32, 32, 123, 32, 34, 123, 92, 101, 109, 32, 34, 32, 115, 119, 97, 112, 36, 32, 42, 32, 34, 125, 34, 32, 42, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 73, 78, 84, 69, 71, 69, 82, 83, 32, 123, 32, 110, 97, 109, 101, 112, 116, 114, 32, 110, 97, 109, 101, 115, 108, 101, 102, 116, 32, 110, 117, 109, 110, 97, 109, 101, 115, 32, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 111, 114, 109, 97, 116, 46, 110, 97, 109, 101, 115, 125, 10, 123, 32, 39, 115, 32, 58, 61, 10, 32, 32, 35, 49, 32, 39, 110, 97, 109, 101, 112, 116, 114, 32, 58, 61, 10, 32, 32, 115, 32, 110, 117, 109, 46, 110, 97, 109, 101, 115, 36, 32, 39, 110, 117, 109, 110, 97, 109, 101, 115, 32, 58, 61, 10, 32, 32, 110, 117, 109, 110, 97, 109, 101, 115, 32, 39, 110, 97, 109, 101, 115, 108, 101, 102, 116, 32, 58, 61, 10, 32, 32, 32, 32, 123, 32, 110, 97, 109, 101, 115, 108, 101, 102, 116, 32, 35, 48, 32, 62, 32, 125, 10, 32, 32, 32, 32, 123, 32, 115, 32, 110, 97, 109, 101, 112, 116, 114, 32, 34, 123, 102, 102, 126, 125, 123, 118, 118, 126, 125, 123, 108, 108, 125, 123, 44, 32, 106, 106, 125, 34, 32, 102, 111, 114, 109, 97, 116, 46, 110, 97, 109, 101, 36, 32, 39, 116, 32, 58, 61, 10, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 112, 116, 114, 32, 35, 49, 32, 62, 10, 9, 123, 32, 110, 97, 109, 101, 115, 108, 101, 102, 116, 32, 35, 49, 32, 62, 10, 9, 32, 32, 32, 32, 123, 32, 34, 44, 32, 34, 32, 42, 32, 116, 32, 42, 32, 125, 10, 9, 32, 32, 32, 32, 123, 32, 110, 117, 109, 110, 97, 109, 101, 115, 32, 35, 50, 32, 62, 10, 9, 9, 123, 32, 34, 44, 34, 32, 42, 32, 125, 10, 9, 9, 39, 115, 107, 105, 112, 36, 10, 9, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 9, 32, 32, 32, 32, 32, 32, 116, 32, 34, 111, 116, 104, 101, 114, 115, 34, 32, 61, 10, 9, 9, 123, 32, 34, 32, 101, 116, 126, 97, 108, 46, 34, 32, 42, 32, 125, 10, 9, 9, 123, 32, 34, 32, 97, 110, 100, 32, 34, 32, 42, 32, 116, 32, 42, 32, 125, 10, 9, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 9, 32, 32, 32, 32, 125, 10, 9, 32, 32, 105, 102, 36, 10, 9, 125, 10, 9, 39, 116, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 112, 116, 114, 32, 35, 49, 32, 43, 32, 39, 110, 97, 109, 101, 112, 116, 114, 32, 58, 61, 10, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 115, 108, 101, 102, 116, 32, 35, 49, 32, 45, 32, 39, 110, 97, 109, 101, 115, 108, 101, 102, 116, 32, 58, 61, 10, 32, 32, 32, 32, 125, 10, 32, 32, 119, 104, 105, 108, 101, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 111, 114, 109, 97, 116, 46, 97, 117, 116, 104, 111, 114, 115, 125, 10, 123, 32, 97, 117, 116, 104, 111, 114, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 34, 34, 32, 125, 10, 32, 32, 32, 32, 123, 32, 97, 117, 116, 104, 111, 114, 32, 102, 111, 114, 109, 97, 116, 46, 110, 97, 109, 101, 115, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 111, 114, 109, 97, 116, 46, 101, 100, 105, 116, 111, 114, 115, 125, 10, 123, 32, 101, 100, 105, 116, 111, 114, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 34, 34, 32, 125, 10, 32, 32, 32, 32, 123, 32, 101, 100, 105, 116, 111, 114, 32, 102, 111, 114, 109, 97, 116, 46, 110, 97, 109, 101, 115, 10, 32, 32, 32, 32, 32, 32, 101, 100, 105, 116, 111, 114, 32, 110, 117, 109, 46, 110, 97, 109, 101, 115, 36, 32, 35, 49, 32, 62, 10, 9, 123, 32, 34, 44, 32, 101, 100, 105, 116, 111, 114, 115, 34, 32, 42, 32, 125, 10, 9, 123, 32, 34, 44, 32, 101, 100, 105, 116, 111, 114, 34, 32, 42, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 111, 114, 109, 97, 116, 46, 116, 105, 116, 108, 101, 125, 10, 123, 32, 116, 105, 116, 108, 101, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 34, 34, 32, 125, 10, 32, 32, 32, 32, 123, 32, 116, 105, 116, 108, 101, 32, 34, 116, 34, 32, 99, 104, 97, 110, 103, 101, 46, 99, 97, 115, 101, 36, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 110, 46, 100, 97, 115, 104, 105, 102, 121, 125, 10, 123, 32, 39, 116, 32, 58, 61, 10, 32, 32, 34, 34, 10, 32, 32, 32, 32, 123, 32, 116, 32, 101, 109, 112, 116, 121, 36, 32, 110, 111, 116, 32, 125, 10, 32, 32, 32, 32, 123, 32, 116, 32, 35, 49, 32, 35, 49, 32, 115, 117, 98, 115, 116, 114, 105, 110, 103, 36, 32, 34, 45, 34, 32, 61, 10, 9, 123, 32, 116, 32, 35, 49, 32, 35, 50, 32, 115, 117, 98, 115, 116, 114, 105, 110, 103, 36, 32, 34, 45, 45, 34, 32, 61, 32, 110, 111, 116, 10, 9, 32, 32, 32, 32, 123, 32, 34, 45, 45, 34, 32, 42, 10, 9, 32, 32, 32, 32, 32, 32, 116, 32, 35, 50, 32, 103, 108, 111, 98, 97, 108, 46, 109, 97, 120, 36, 32, 115, 117, 98, 115, 116, 114, 105, 110, 103, 36, 32, 39, 116, 32, 58, 61, 10, 9, 32, 32, 32, 32, 125, 10, 9, 32, 32, 32, 32, 123, 32, 32, 32, 123, 32, 116, 32, 35, 49, 32, 35, 49, 32, 115, 117, 98, 115, 116, 114, 105, 110, 103, 36, 32, 34, 45, 34, 32, 61, 32, 125, 10, 9, 9, 123, 32, 34, 45, 34, 32, 42, 10, 9, 9, 32, 32, 116, 32, 35, 50, 32, 103, 108, 111, 98, 97, 108, 46, 109, 97, 120, 36, 32, 115, 117, 98, 115, 116, 114, 105, 110, 103, 36, 32, 39, 116, 32, 58, 61, 10, 9, 9, 125, 10, 9, 32, 32, 32, 32, 32, 32, 119, 104, 105, 108, 101, 36, 10, 9, 32, 32, 32, 32, 125, 10, 9, 32, 32, 105, 102, 36, 10, 9, 125, 10, 9, 123, 32, 116, 32, 35, 49, 32, 35, 49, 32, 115, 117, 98, 115, 116, 114, 105, 110, 103, 36, 32, 42, 10, 9, 32, 32, 116, 32, 35, 50, 32, 103, 108, 111, 98, 97, 108, 46, 109, 97, 120, 36, 32, 115, 117, 98, 115, 116, 114, 105, 110, 103, 36, 32, 39, 116, 32, 58, 61, 10, 9, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 119, 104, 105, 108, 101, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 111, 114, 109, 97, 116, 46, 100, 97, 116, 101, 125, 10, 123, 32, 121, 101, 97, 114, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 109, 111, 110, 116, 104, 32, 101, 109, 112, 116, 121, 36, 10, 9, 123, 32, 34, 34, 32, 125, 10, 9, 123, 32, 34, 116, 104, 101, 114, 101, 39, 115, 32, 97, 32, 109, 111, 110, 116, 104, 32, 98, 117, 116, 32, 110, 111, 32, 121, 101, 97, 114, 32, 105, 110, 32, 34, 32, 99, 105, 116, 101, 36, 32, 42, 32, 119, 97, 114, 110, 105, 110, 103, 36, 10, 9, 32, 32, 109, 111, 110, 116, 104, 10, 9, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 123, 32, 109, 111, 110, 116, 104, 32, 101, 109, 112, 116, 121, 36, 10, 9, 39, 121, 101, 97, 114, 10, 9, 123, 32, 109, 111, 110, 116, 104, 32, 34, 32, 34, 32, 42, 32, 121, 101, 97, 114, 32, 42, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 111, 114, 109, 97, 116, 46, 98, 116, 105, 116, 108, 101, 125, 10, 123, 32, 116, 105, 116, 108, 101, 32, 101, 109, 112, 104, 97, 115, 105, 122, 101, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 116, 105, 101, 46, 111, 114, 46, 115, 112, 97, 99, 101, 46, 99, 111, 110, 110, 101, 99, 116, 125, 10, 123, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 36, 32, 116, 101, 120, 116, 46, 108, 101, 110, 103, 116, 104, 36, 32, 35, 51, 32, 60, 10, 32, 32, 32, 32, 123, 32, 34, 126, 34, 32, 125, 10, 32, 32, 32, 32, 123, 32, 34, 32, 34, 32, 125, 10, 32, 32, 105, 102, 36, 10, 32, 32, 115, 119, 97, 112, 36, 32, 42, 32, 42, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 101, 105, 116, 104, 101, 114, 46, 111, 114, 46, 99, 104, 101, 99, 107, 125, 10, 123, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 39, 112, 111, 112, 36, 10, 32, 32, 32, 32, 123, 32, 34, 99, 97, 110, 39, 116, 32, 117, 115, 101, 32, 98, 111, 116, 104, 32, 34, 32, 115, 119, 97, 112, 36, 32, 42, 32, 34, 32, 102, 105, 101, 108, 100, 115, 32, 105, 110, 32, 34, 32, 42, 32, 99, 105, 116, 101, 36, 32, 42, 32, 119, 97, 114, 110, 105, 110, 103, 36, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 111, 114, 109, 97, 116, 46, 98, 118, 111, 108, 117, 109, 101, 125, 10, 123, 32, 118, 111, 108, 117, 109, 101, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 34, 34, 32, 125, 10, 32, 32, 32, 32, 123, 32, 34, 118, 111, 108, 117, 109, 101, 34, 32, 118, 111, 108, 117, 109, 101, 32, 116, 105, 101, 46, 111, 114, 46, 115, 112, 97, 99, 101, 46, 99, 111, 110, 110, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 115, 101, 114, 105, 101, 115, 32, 101, 109, 112, 116, 121, 36, 10, 9, 39, 115, 107, 105, 112, 36, 10, 9, 123, 32, 34, 32, 111, 102, 32, 34, 32, 42, 32, 115, 101, 114, 105, 101, 115, 32, 101, 109, 112, 104, 97, 115, 105, 122, 101, 32, 42, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 32, 32, 34, 118, 111, 108, 117, 109, 101, 32, 97, 110, 100, 32, 110, 117, 109, 98, 101, 114, 34, 32, 110, 117, 109, 98, 101, 114, 32, 101, 105, 116, 104, 101, 114, 46, 111, 114, 46, 99, 104, 101, 99, 107, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 111, 114, 109, 97, 116, 46, 110, 117, 109, 98, 101, 114, 46, 115, 101, 114, 105, 101, 115, 125, 10, 123, 32, 118, 111, 108, 117, 109, 101, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 110, 117, 109, 98, 101, 114, 32, 101, 109, 112, 116, 121, 36, 10, 9, 123, 32, 115, 101, 114, 105, 101, 115, 32, 102, 105, 101, 108, 100, 46, 111, 114, 46, 110, 117, 108, 108, 32, 125, 10, 9, 123, 32, 111, 117, 116, 112, 117, 116, 46, 115, 116, 97, 116, 101, 32, 109, 105, 100, 46, 115, 101, 110, 116, 101, 110, 99, 101, 32, 61, 10, 9, 32, 32, 32, 32, 123, 32, 34, 110, 117, 109, 98, 101, 114, 34, 32, 125, 10, 9, 32, 32, 32, 32, 123, 32, 34, 78, 117, 109, 98, 101, 114, 34, 32, 125, 10, 9, 32, 32, 105, 102, 36, 10, 9, 32, 32, 110, 117, 109, 98, 101, 114, 32, 116, 105, 101, 46, 111, 114, 46, 115, 112, 97, 99, 101, 46, 99, 111, 110, 110, 101, 99, 116, 10, 9, 32, 32, 115, 101, 114, 105, 101, 115, 32, 101, 109, 112, 116, 121, 36, 10, 9, 32, 32, 32, 32, 123, 32, 34, 116, 104, 101, 114, 101, 39, 115, 32, 97, 32, 110, 117, 109, 98, 101, 114, 32, 98, 117, 116, 32, 110, 111, 32, 115, 101, 114, 105, 101, 115, 32, 105, 110, 32, 34, 32, 99, 105, 116, 101, 36, 32, 42, 32, 119, 97, 114, 110, 105, 110, 103, 36, 32, 125, 10, 9, 32, 32, 32, 32, 123, 32, 34, 32, 105, 110, 32, 34, 32, 42, 32, 115, 101, 114, 105, 101, 115, 32, 42, 32, 125, 10, 9, 32, 32, 105, 102, 36, 10, 9, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 123, 32, 34, 34, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 111, 114, 109, 97, 116, 46, 101, 100, 105, 116, 105, 111, 110, 125, 10, 123, 32, 101, 100, 105, 116, 105, 111, 110, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 34, 34, 32, 125, 10, 32, 32, 32, 32, 123, 32, 111, 117, 116, 112, 117, 116, 46, 115, 116, 97, 116, 101, 32, 109, 105, 100, 46, 115, 101, 110, 116, 101, 110, 99, 101, 32, 61, 10, 9, 123, 32, 101, 100, 105, 116, 105, 111, 110, 32, 34, 108, 34, 32, 99, 104, 97, 110, 103, 101, 46, 99, 97, 115, 101, 36, 32, 34, 32, 101, 100, 105, 116, 105, 111, 110, 34, 32, 42, 32, 125, 10, 9, 123, 32, 101, 100, 105, 116, 105, 111, 110, 32, 34, 116, 34, 32, 99, 104, 97, 110, 103, 101, 46, 99, 97, 115, 101, 36, 32, 34, 32, 101, 100, 105, 116, 105, 111, 110, 34, 32, 42, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 73, 78, 84, 69, 71, 69, 82, 83, 32, 123, 32, 109, 117, 108, 116, 105, 114, 101, 115, 117, 108, 116, 32, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 109, 117, 108, 116, 105, 46, 112, 97, 103, 101, 46, 99, 104, 101, 99, 107, 125, 10, 123, 32, 39, 116, 32, 58, 61, 10, 32, 32, 35, 48, 32, 39, 109, 117, 108, 116, 105, 114, 101, 115, 117, 108, 116, 32, 58, 61, 10, 32, 32, 32, 32, 123, 32, 109, 117, 108, 116, 105, 114, 101, 115, 117, 108, 116, 32, 110, 111, 116, 10, 32, 32, 32, 32, 32, 32, 116, 32, 101, 109, 112, 116, 121, 36, 32, 110, 111, 116, 10, 32, 32, 32, 32, 32, 32, 97, 110, 100, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 123, 32, 116, 32, 35, 49, 32, 35, 49, 32, 115, 117, 98, 115, 116, 114, 105, 110, 103, 36, 10, 32, 32, 32, 32, 32, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 36, 32, 34, 45, 34, 32, 61, 10, 32, 32, 32, 32, 32, 32, 115, 119, 97, 112, 36, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 36, 32, 34, 44, 34, 32, 61, 10, 32, 32, 32, 32, 32, 32, 115, 119, 97, 112, 36, 32, 34, 43, 34, 32, 61, 10, 32, 32, 32, 32, 32, 32, 111, 114, 32, 111, 114, 10, 9, 123, 32, 35, 49, 32, 39, 109, 117, 108, 116, 105, 114, 101, 115, 117, 108, 116, 32, 58, 61, 32, 125, 10, 9, 123, 32, 116, 32, 35, 50, 32, 103, 108, 111, 98, 97, 108, 46, 109, 97, 120, 36, 32, 115, 117, 98, 115, 116, 114, 105, 110, 103, 36, 32, 39, 116, 32, 58, 61, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 119, 104, 105, 108, 101, 36, 10, 32, 32, 109, 117, 108, 116, 105, 114, 101, 115, 117, 108, 116, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 111, 114, 109, 97, 116, 46, 112, 97, 103, 101, 115, 125, 10, 123, 32, 112, 97, 103, 101, 115, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 34, 34, 32, 125, 10, 32, 32, 32, 32, 123, 32, 112, 97, 103, 101, 115, 32, 109, 117, 108, 116, 105, 46, 112, 97, 103, 101, 46, 99, 104, 101, 99, 107, 10, 9, 123, 32, 34, 112, 97, 103, 101, 115, 34, 32, 112, 97, 103, 101, 115, 32, 110, 46, 100, 97, 115, 104, 105, 102, 121, 32, 116, 105, 101, 46, 111, 114, 46, 115, 112, 97, 99, 101, 46, 99, 111, 110, 110, 101, 99, 116, 32, 125, 10, 9, 123, 32, 34, 112, 97, 103, 101, 34, 32, 112, 97, 103, 101, 115, 32, 116, 105, 101, 46, 111, 114, 46, 115, 112, 97, 99, 101, 46, 99, 111, 110, 110, 101, 99, 116, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 111, 114, 109, 97, 116, 46, 118, 111, 108, 46, 110, 117, 109, 46, 112, 97, 103, 101, 115, 125, 10, 123, 32, 118, 111, 108, 117, 109, 101, 32, 102, 105, 101, 108, 100, 46, 111, 114, 46, 110, 117, 108, 108, 10, 32, 32, 110, 117, 109, 98, 101, 114, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 39, 115, 107, 105, 112, 36, 10, 32, 32, 32, 32, 123, 32, 34, 40, 34, 32, 110, 117, 109, 98, 101, 114, 32, 42, 32, 34, 41, 34, 32, 42, 32, 42, 10, 32, 32, 32, 32, 32, 32, 118, 111, 108, 117, 109, 101, 32, 101, 109, 112, 116, 121, 36, 10, 9, 123, 32, 34, 116, 104, 101, 114, 101, 39, 115, 32, 97, 32, 110, 117, 109, 98, 101, 114, 32, 98, 117, 116, 32, 110, 111, 32, 118, 111, 108, 117, 109, 101, 32, 105, 110, 32, 34, 32, 99, 105, 116, 101, 36, 32, 42, 32, 119, 97, 114, 110, 105, 110, 103, 36, 32, 125, 10, 9, 39, 115, 107, 105, 112, 36, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 32, 32, 112, 97, 103, 101, 115, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 39, 115, 107, 105, 112, 36, 10, 32, 32, 32, 32, 123, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 36, 32, 101, 109, 112, 116, 121, 36, 10, 9, 123, 32, 112, 111, 112, 36, 32, 102, 111, 114, 109, 97, 116, 46, 112, 97, 103, 101, 115, 32, 125, 10, 9, 123, 32, 34, 58, 34, 32, 42, 32, 112, 97, 103, 101, 115, 32, 110, 46, 100, 97, 115, 104, 105, 102, 121, 32, 42, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 111, 114, 109, 97, 116, 46, 99, 104, 97, 112, 116, 101, 114, 46, 112, 97, 103, 101, 115, 125, 10, 123, 32, 99, 104, 97, 112, 116, 101, 114, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 39, 102, 111, 114, 109, 97, 116, 46, 112, 97, 103, 101, 115, 10, 32, 32, 32, 32, 123, 32, 116, 121, 112, 101, 32, 101, 109, 112, 116, 121, 36, 10, 9, 123, 32, 34, 99, 104, 97, 112, 116, 101, 114, 34, 32, 125, 10, 9, 123, 32, 116, 121, 112, 101, 32, 34, 108, 34, 32, 99, 104, 97, 110, 103, 101, 46, 99, 97, 115, 101, 36, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 32, 32, 99, 104, 97, 112, 116, 101, 114, 32, 116, 105, 101, 46, 111, 114, 46, 115, 112, 97, 99, 101, 46, 99, 111, 110, 110, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 112, 97, 103, 101, 115, 32, 101, 109, 112, 116, 121, 36, 10, 9, 39, 115, 107, 105, 112, 36, 10, 9, 123, 32, 34, 44, 32, 34, 32, 42, 32, 102, 111, 114, 109, 97, 116, 46, 112, 97, 103, 101, 115, 32, 42, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 111, 114, 109, 97, 116, 46, 105, 110, 46, 101, 100, 46, 98, 111, 111, 107, 116, 105, 116, 108, 101, 125, 10, 123, 32, 98, 111, 111, 107, 116, 105, 116, 108, 101, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 34, 34, 32, 125, 10, 32, 32, 32, 32, 123, 32, 101, 100, 105, 116, 111, 114, 32, 101, 109, 112, 116, 121, 36, 10, 9, 123, 32, 34, 73, 110, 32, 34, 32, 98, 111, 111, 107, 116, 105, 116, 108, 101, 32, 101, 109, 112, 104, 97, 115, 105, 122, 101, 32, 42, 32, 125, 10, 9, 123, 32, 34, 73, 110, 32, 34, 32, 102, 111, 114, 109, 97, 116, 46, 101, 100, 105, 116, 111, 114, 115, 32, 42, 32, 34, 44, 32, 34, 32, 42, 32, 98, 111, 111, 107, 116, 105, 116, 108, 101, 32, 101, 109, 112, 104, 97, 115, 105, 122, 101, 32, 42, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 101, 109, 112, 116, 121, 46, 109, 105, 115, 99, 46, 99, 104, 101, 99, 107, 125, 10, 123, 32, 97, 117, 116, 104, 111, 114, 32, 101, 109, 112, 116, 121, 36, 32, 116, 105, 116, 108, 101, 32, 101, 109, 112, 116, 121, 36, 32, 104, 111, 119, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 109, 111, 110, 116, 104, 32, 101, 109, 112, 116, 121, 36, 32, 121, 101, 97, 114, 32, 101, 109, 112, 116, 121, 36, 32, 110, 111, 116, 101, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 97, 110, 100, 32, 97, 110, 100, 32, 97, 110, 100, 32, 97, 110, 100, 32, 97, 110, 100, 10, 32, 32, 107, 101, 121, 32, 101, 109, 112, 116, 121, 36, 32, 110, 111, 116, 32, 97, 110, 100, 10, 32, 32, 32, 32, 123, 32, 34, 97, 108, 108, 32, 114, 101, 108, 101, 118, 97, 110, 116, 32, 102, 105, 101, 108, 100, 115, 32, 97, 114, 101, 32, 101, 109, 112, 116, 121, 32, 105, 110, 32, 34, 32, 99, 105, 116, 101, 36, 32, 42, 32, 119, 97, 114, 110, 105, 110, 103, 36, 32, 125, 10, 32, 32, 32, 32, 39, 115, 107, 105, 112, 36, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 111, 114, 109, 97, 116, 46, 116, 104, 101, 115, 105, 115, 46, 116, 121, 112, 101, 125, 10, 123, 32, 116, 121, 112, 101, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 39, 115, 107, 105, 112, 36, 10, 32, 32, 32, 32, 123, 32, 112, 111, 112, 36, 10, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 34, 116, 34, 32, 99, 104, 97, 110, 103, 101, 46, 99, 97, 115, 101, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 111, 114, 109, 97, 116, 46, 116, 114, 46, 110, 117, 109, 98, 101, 114, 125, 10, 123, 32, 116, 121, 112, 101, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 34, 84, 101, 99, 104, 110, 105, 99, 97, 108, 32, 82, 101, 112, 111, 114, 116, 34, 32, 125, 10, 32, 32, 32, 32, 39, 116, 121, 112, 101, 10, 32, 32, 105, 102, 36, 10, 32, 32, 110, 117, 109, 98, 101, 114, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 34, 116, 34, 32, 99, 104, 97, 110, 103, 101, 46, 99, 97, 115, 101, 36, 32, 125, 10, 32, 32, 32, 32, 123, 32, 110, 117, 109, 98, 101, 114, 32, 116, 105, 101, 46, 111, 114, 46, 115, 112, 97, 99, 101, 46, 99, 111, 110, 110, 101, 99, 116, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 111, 114, 109, 97, 116, 46, 97, 114, 116, 105, 99, 108, 101, 46, 99, 114, 111, 115, 115, 114, 101, 102, 125, 10, 123, 32, 107, 101, 121, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 106, 111, 117, 114, 110, 97, 108, 32, 101, 109, 112, 116, 121, 36, 10, 9, 123, 32, 34, 110, 101, 101, 100, 32, 107, 101, 121, 32, 111, 114, 32, 106, 111, 117, 114, 110, 97, 108, 32, 102, 111, 114, 32, 34, 32, 99, 105, 116, 101, 36, 32, 42, 32, 34, 32, 116, 111, 32, 99, 114, 111, 115, 115, 114, 101, 102, 32, 34, 32, 42, 32, 99, 114, 111, 115, 115, 114, 101, 102, 32, 42, 10, 9, 32, 32, 119, 97, 114, 110, 105, 110, 103, 36, 10, 9, 32, 32, 34, 34, 10, 9, 125, 10, 9, 123, 32, 34, 73, 110, 32, 123, 92, 101, 109, 32, 34, 32, 106, 111, 117, 114, 110, 97, 108, 32, 42, 32, 34, 92, 47, 125, 34, 32, 42, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 123, 32, 34, 73, 110, 32, 34, 32, 107, 101, 121, 32, 42, 32, 125, 10, 32, 32, 105, 102, 36, 10, 32, 32, 34, 32, 92, 99, 105, 116, 101, 123, 34, 32, 42, 32, 99, 114, 111, 115, 115, 114, 101, 102, 32, 42, 32, 34, 125, 34, 32, 42, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 111, 114, 109, 97, 116, 46, 99, 114, 111, 115, 115, 114, 101, 102, 46, 101, 100, 105, 116, 111, 114, 125, 10, 123, 32, 101, 100, 105, 116, 111, 114, 32, 35, 49, 32, 34, 123, 118, 118, 126, 125, 123, 108, 108, 125, 34, 32, 102, 111, 114, 109, 97, 116, 46, 110, 97, 109, 101, 36, 10, 32, 32, 101, 100, 105, 116, 111, 114, 32, 110, 117, 109, 46, 110, 97, 109, 101, 115, 36, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 36, 10, 32, 32, 35, 50, 32, 62, 10, 32, 32, 32, 32, 123, 32, 112, 111, 112, 36, 32, 34, 32, 101, 116, 126, 97, 108, 46, 34, 32, 42, 32, 125, 10, 32, 32, 32, 32, 123, 32, 35, 50, 32, 60, 10, 9, 39, 115, 107, 105, 112, 36, 10, 9, 123, 32, 101, 100, 105, 116, 111, 114, 32, 35, 50, 32, 34, 123, 102, 102, 32, 125, 123, 118, 118, 32, 125, 123, 108, 108, 125, 123, 32, 106, 106, 125, 34, 32, 102, 111, 114, 109, 97, 116, 46, 110, 97, 109, 101, 36, 32, 34, 111, 116, 104, 101, 114, 115, 34, 32, 61, 10, 9, 32, 32, 32, 32, 123, 32, 34, 32, 101, 116, 126, 97, 108, 46, 34, 32, 42, 32, 125, 10, 9, 32, 32, 32, 32, 123, 32, 34, 32, 97, 110, 100, 32, 34, 32, 42, 32, 101, 100, 105, 116, 111, 114, 32, 35, 50, 32, 34, 123, 118, 118, 126, 125, 123, 108, 108, 125, 34, 32, 102, 111, 114, 109, 97, 116, 46, 110, 97, 109, 101, 36, 32, 42, 32, 125, 10, 9, 32, 32, 105, 102, 36, 10, 9, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 111, 114, 109, 97, 116, 46, 98, 111, 111, 107, 46, 99, 114, 111, 115, 115, 114, 101, 102, 125, 10, 123, 32, 118, 111, 108, 117, 109, 101, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 34, 101, 109, 112, 116, 121, 32, 118, 111, 108, 117, 109, 101, 32, 105, 110, 32, 34, 32, 99, 105, 116, 101, 36, 32, 42, 32, 34, 39, 115, 32, 99, 114, 111, 115, 115, 114, 101, 102, 32, 111, 102, 32, 34, 32, 42, 32, 99, 114, 111, 115, 115, 114, 101, 102, 32, 42, 32, 119, 97, 114, 110, 105, 110, 103, 36, 10, 32, 32, 32, 32, 32, 32, 34, 73, 110, 32, 34, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 123, 32, 34, 86, 111, 108, 117, 109, 101, 34, 32, 118, 111, 108, 117, 109, 101, 32, 116, 105, 101, 46, 111, 114, 46, 115, 112, 97, 99, 101, 46, 99, 111, 110, 110, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 34, 32, 111, 102, 32, 34, 32, 42, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 32, 32, 101, 100, 105, 116, 111, 114, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 101, 100, 105, 116, 111, 114, 32, 102, 105, 101, 108, 100, 46, 111, 114, 46, 110, 117, 108, 108, 32, 97, 117, 116, 104, 111, 114, 32, 102, 105, 101, 108, 100, 46, 111, 114, 46, 110, 117, 108, 108, 32, 61, 10, 32, 32, 111, 114, 10, 32, 32, 32, 32, 123, 32, 107, 101, 121, 32, 101, 109, 112, 116, 121, 36, 10, 9, 123, 32, 115, 101, 114, 105, 101, 115, 32, 101, 109, 112, 116, 121, 36, 10, 9, 32, 32, 32, 32, 123, 32, 34, 110, 101, 101, 100, 32, 101, 100, 105, 116, 111, 114, 44, 32, 107, 101, 121, 44, 32, 111, 114, 32, 115, 101, 114, 105, 101, 115, 32, 102, 111, 114, 32, 34, 32, 99, 105, 116, 101, 36, 32, 42, 32, 34, 32, 116, 111, 32, 99, 114, 111, 115, 115, 114, 101, 102, 32, 34, 32, 42, 10, 9, 32, 32, 32, 32, 32, 32, 99, 114, 111, 115, 115, 114, 101, 102, 32, 42, 32, 119, 97, 114, 110, 105, 110, 103, 36, 10, 9, 32, 32, 32, 32, 32, 32, 34, 34, 32, 42, 10, 9, 32, 32, 32, 32, 125, 10, 9, 32, 32, 32, 32, 123, 32, 34, 123, 92, 101, 109, 32, 34, 32, 42, 32, 115, 101, 114, 105, 101, 115, 32, 42, 32, 34, 92, 47, 125, 34, 32, 42, 32, 125, 10, 9, 32, 32, 105, 102, 36, 10, 9, 125, 10, 9, 123, 32, 107, 101, 121, 32, 42, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 123, 32, 102, 111, 114, 109, 97, 116, 46, 99, 114, 111, 115, 115, 114, 101, 102, 46, 101, 100, 105, 116, 111, 114, 32, 42, 32, 125, 10, 32, 32, 105, 102, 36, 10, 32, 32, 34, 32, 92, 99, 105, 116, 101, 123, 34, 32, 42, 32, 99, 114, 111, 115, 115, 114, 101, 102, 32, 42, 32, 34, 125, 34, 32, 42, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 102, 111, 114, 109, 97, 116, 46, 105, 110, 99, 111, 108, 108, 46, 105, 110, 112, 114, 111, 99, 46, 99, 114, 111, 115, 115, 114, 101, 102, 125, 10, 123, 32, 101, 100, 105, 116, 111, 114, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 101, 100, 105, 116, 111, 114, 32, 102, 105, 101, 108, 100, 46, 111, 114, 46, 110, 117, 108, 108, 32, 97, 117, 116, 104, 111, 114, 32, 102, 105, 101, 108, 100, 46, 111, 114, 46, 110, 117, 108, 108, 32, 61, 10, 32, 32, 111, 114, 10, 32, 32, 32, 32, 123, 32, 107, 101, 121, 32, 101, 109, 112, 116, 121, 36, 10, 9, 123, 32, 98, 111, 111, 107, 116, 105, 116, 108, 101, 32, 101, 109, 112, 116, 121, 36, 10, 9, 32, 32, 32, 32, 123, 32, 34, 110, 101, 101, 100, 32, 101, 100, 105, 116, 111, 114, 44, 32, 107, 101, 121, 44, 32, 111, 114, 32, 98, 111, 111, 107, 116, 105, 116, 108, 101, 32, 102, 111, 114, 32, 34, 32, 99, 105, 116, 101, 36, 32, 42, 32, 34, 32, 116, 111, 32, 99, 114, 111, 115, 115, 114, 101, 102, 32, 34, 32, 42, 10, 9, 32, 32, 32, 32, 32, 32, 99, 114, 111, 115, 115, 114, 101, 102, 32, 42, 32, 119, 97, 114, 110, 105, 110, 103, 36, 10, 9, 32, 32, 32, 32, 32, 32, 34, 34, 10, 9, 32, 32, 32, 32, 125, 10, 9, 32, 32, 32, 32, 123, 32, 34, 73, 110, 32, 123, 92, 101, 109, 32, 34, 32, 98, 111, 111, 107, 116, 105, 116, 108, 101, 32, 42, 32, 34, 92, 47, 125, 34, 32, 42, 32, 125, 10, 9, 32, 32, 105, 102, 36, 10, 9, 125, 10, 9, 123, 32, 34, 73, 110, 32, 34, 32, 107, 101, 121, 32, 42, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 123, 32, 34, 73, 110, 32, 34, 32, 102, 111, 114, 109, 97, 116, 46, 99, 114, 111, 115, 115, 114, 101, 102, 46, 101, 100, 105, 116, 111, 114, 32, 42, 32, 125, 10, 32, 32, 105, 102, 36, 10, 32, 32, 34, 32, 92, 99, 105, 116, 101, 123, 34, 32, 42, 32, 99, 114, 111, 115, 115, 114, 101, 102, 32, 42, 32, 34, 125, 34, 32, 42, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 97, 114, 116, 105, 99, 108, 101, 125, 10, 123, 32, 111, 117, 116, 112, 117, 116, 46, 98, 105, 98, 105, 116, 101, 109, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 97, 117, 116, 104, 111, 114, 115, 32, 34, 97, 117, 116, 104, 111, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 116, 105, 116, 108, 101, 32, 34, 116, 105, 116, 108, 101, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 99, 114, 111, 115, 115, 114, 101, 102, 32, 109, 105, 115, 115, 105, 110, 103, 36, 10, 32, 32, 32, 32, 123, 32, 106, 111, 117, 114, 110, 97, 108, 32, 101, 109, 112, 104, 97, 115, 105, 122, 101, 32, 34, 106, 111, 117, 114, 110, 97, 108, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 118, 111, 108, 46, 110, 117, 109, 46, 112, 97, 103, 101, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 100, 97, 116, 101, 32, 34, 121, 101, 97, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 123, 32, 102, 111, 114, 109, 97, 116, 46, 97, 114, 116, 105, 99, 108, 101, 46, 99, 114, 111, 115, 115, 114, 101, 102, 32, 111, 117, 116, 112, 117, 116, 46, 110, 111, 110, 110, 117, 108, 108, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 112, 97, 103, 101, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 110, 111, 116, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 105, 110, 46, 101, 110, 116, 114, 121, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 98, 111, 111, 107, 125, 10, 123, 32, 111, 117, 116, 112, 117, 116, 46, 98, 105, 98, 105, 116, 101, 109, 10, 32, 32, 97, 117, 116, 104, 111, 114, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 102, 111, 114, 109, 97, 116, 46, 101, 100, 105, 116, 111, 114, 115, 32, 34, 97, 117, 116, 104, 111, 114, 32, 97, 110, 100, 32, 101, 100, 105, 116, 111, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 32, 125, 10, 32, 32, 32, 32, 123, 32, 102, 111, 114, 109, 97, 116, 46, 97, 117, 116, 104, 111, 114, 115, 32, 111, 117, 116, 112, 117, 116, 46, 110, 111, 110, 110, 117, 108, 108, 10, 32, 32, 32, 32, 32, 32, 99, 114, 111, 115, 115, 114, 101, 102, 32, 109, 105, 115, 115, 105, 110, 103, 36, 10, 9, 123, 32, 34, 97, 117, 116, 104, 111, 114, 32, 97, 110, 100, 32, 101, 100, 105, 116, 111, 114, 34, 32, 101, 100, 105, 116, 111, 114, 32, 101, 105, 116, 104, 101, 114, 46, 111, 114, 46, 99, 104, 101, 99, 107, 32, 125, 10, 9, 39, 115, 107, 105, 112, 36, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 98, 116, 105, 116, 108, 101, 32, 34, 116, 105, 116, 108, 101, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 99, 114, 111, 115, 115, 114, 101, 102, 32, 109, 105, 115, 115, 105, 110, 103, 36, 10, 32, 32, 32, 32, 123, 32, 102, 111, 114, 109, 97, 116, 46, 98, 118, 111, 108, 117, 109, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 110, 117, 109, 98, 101, 114, 46, 115, 101, 114, 105, 101, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 32, 32, 110, 101, 119, 46, 115, 101, 110, 116, 101, 110, 99, 101, 10, 32, 32, 32, 32, 32, 32, 112, 117, 98, 108, 105, 115, 104, 101, 114, 32, 34, 112, 117, 98, 108, 105, 115, 104, 101, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 32, 32, 32, 32, 97, 100, 100, 114, 101, 115, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 123, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 98, 111, 111, 107, 46, 99, 114, 111, 115, 115, 114, 101, 102, 32, 111, 117, 116, 112, 117, 116, 46, 110, 111, 110, 110, 117, 108, 108, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 101, 100, 105, 116, 105, 111, 110, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 100, 97, 116, 101, 32, 34, 121, 101, 97, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 110, 111, 116, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 105, 110, 46, 101, 110, 116, 114, 121, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 98, 111, 111, 107, 108, 101, 116, 125, 10, 123, 32, 111, 117, 116, 112, 117, 116, 46, 98, 105, 98, 105, 116, 101, 109, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 97, 117, 116, 104, 111, 114, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 116, 105, 116, 108, 101, 32, 34, 116, 105, 116, 108, 101, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 104, 111, 119, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 97, 100, 100, 114, 101, 115, 115, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 46, 99, 104, 101, 99, 107, 98, 10, 32, 32, 104, 111, 119, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 97, 100, 100, 114, 101, 115, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 100, 97, 116, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 110, 111, 116, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 105, 110, 46, 101, 110, 116, 114, 121, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 105, 110, 98, 111, 111, 107, 125, 10, 123, 32, 111, 117, 116, 112, 117, 116, 46, 98, 105, 98, 105, 116, 101, 109, 10, 32, 32, 97, 117, 116, 104, 111, 114, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 102, 111, 114, 109, 97, 116, 46, 101, 100, 105, 116, 111, 114, 115, 32, 34, 97, 117, 116, 104, 111, 114, 32, 97, 110, 100, 32, 101, 100, 105, 116, 111, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 32, 125, 10, 32, 32, 32, 32, 123, 32, 102, 111, 114, 109, 97, 116, 46, 97, 117, 116, 104, 111, 114, 115, 32, 111, 117, 116, 112, 117, 116, 46, 110, 111, 110, 110, 117, 108, 108, 10, 32, 32, 32, 32, 32, 32, 99, 114, 111, 115, 115, 114, 101, 102, 32, 109, 105, 115, 115, 105, 110, 103, 36, 10, 9, 123, 32, 34, 97, 117, 116, 104, 111, 114, 32, 97, 110, 100, 32, 101, 100, 105, 116, 111, 114, 34, 32, 101, 100, 105, 116, 111, 114, 32, 101, 105, 116, 104, 101, 114, 46, 111, 114, 46, 99, 104, 101, 99, 107, 32, 125, 10, 9, 39, 115, 107, 105, 112, 36, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10].concat([32, 32, 105, 102, 36, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 98, 116, 105, 116, 108, 101, 32, 34, 116, 105, 116, 108, 101, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 99, 114, 111, 115, 115, 114, 101, 102, 32, 109, 105, 115, 115, 105, 110, 103, 36, 10, 32, 32, 32, 32, 123, 32, 102, 111, 114, 109, 97, 116, 46, 98, 118, 111, 108, 117, 109, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 99, 104, 97, 112, 116, 101, 114, 46, 112, 97, 103, 101, 115, 32, 34, 99, 104, 97, 112, 116, 101, 114, 32, 97, 110, 100, 32, 112, 97, 103, 101, 115, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 32, 32, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 110, 117, 109, 98, 101, 114, 46, 115, 101, 114, 105, 101, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 32, 32, 110, 101, 119, 46, 115, 101, 110, 116, 101, 110, 99, 101, 10, 32, 32, 32, 32, 32, 32, 112, 117, 98, 108, 105, 115, 104, 101, 114, 32, 34, 112, 117, 98, 108, 105, 115, 104, 101, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 32, 32, 32, 32, 97, 100, 100, 114, 101, 115, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 123, 32, 102, 111, 114, 109, 97, 116, 46, 99, 104, 97, 112, 116, 101, 114, 46, 112, 97, 103, 101, 115, 32, 34, 99, 104, 97, 112, 116, 101, 114, 32, 97, 110, 100, 32, 112, 97, 103, 101, 115, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 32, 32, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 98, 111, 111, 107, 46, 99, 114, 111, 115, 115, 114, 101, 102, 32, 111, 117, 116, 112, 117, 116, 46, 110, 111, 110, 110, 117, 108, 108, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 101, 100, 105, 116, 105, 111, 110, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 100, 97, 116, 101, 32, 34, 121, 101, 97, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 110, 111, 116, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 105, 110, 46, 101, 110, 116, 114, 121, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 105, 110, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 125, 10, 123, 32, 111, 117, 116, 112, 117, 116, 46, 98, 105, 98, 105, 116, 101, 109, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 97, 117, 116, 104, 111, 114, 115, 32, 34, 97, 117, 116, 104, 111, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 116, 105, 116, 108, 101, 32, 34, 116, 105, 116, 108, 101, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 99, 114, 111, 115, 115, 114, 101, 102, 32, 109, 105, 115, 115, 105, 110, 103, 36, 10, 32, 32, 32, 32, 123, 32, 102, 111, 114, 109, 97, 116, 46, 105, 110, 46, 101, 100, 46, 98, 111, 111, 107, 116, 105, 116, 108, 101, 32, 34, 98, 111, 111, 107, 116, 105, 116, 108, 101, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 98, 118, 111, 108, 117, 109, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 110, 117, 109, 98, 101, 114, 46, 115, 101, 114, 105, 101, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 99, 104, 97, 112, 116, 101, 114, 46, 112, 97, 103, 101, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 32, 32, 110, 101, 119, 46, 115, 101, 110, 116, 101, 110, 99, 101, 10, 32, 32, 32, 32, 32, 32, 112, 117, 98, 108, 105, 115, 104, 101, 114, 32, 34, 112, 117, 98, 108, 105, 115, 104, 101, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 32, 32, 32, 32, 97, 100, 100, 114, 101, 115, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 101, 100, 105, 116, 105, 111, 110, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 100, 97, 116, 101, 32, 34, 121, 101, 97, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 123, 32, 102, 111, 114, 109, 97, 116, 46, 105, 110, 99, 111, 108, 108, 46, 105, 110, 112, 114, 111, 99, 46, 99, 114, 111, 115, 115, 114, 101, 102, 32, 111, 117, 116, 112, 117, 116, 46, 110, 111, 110, 110, 117, 108, 108, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 99, 104, 97, 112, 116, 101, 114, 46, 112, 97, 103, 101, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 110, 111, 116, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 105, 110, 46, 101, 110, 116, 114, 121, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 105, 110, 112, 114, 111, 99, 101, 101, 100, 105, 110, 103, 115, 125, 10, 123, 32, 111, 117, 116, 112, 117, 116, 46, 98, 105, 98, 105, 116, 101, 109, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 97, 117, 116, 104, 111, 114, 115, 32, 34, 97, 117, 116, 104, 111, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 116, 105, 116, 108, 101, 32, 34, 116, 105, 116, 108, 101, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 99, 114, 111, 115, 115, 114, 101, 102, 32, 109, 105, 115, 115, 105, 110, 103, 36, 10, 32, 32, 32, 32, 123, 32, 102, 111, 114, 109, 97, 116, 46, 105, 110, 46, 101, 100, 46, 98, 111, 111, 107, 116, 105, 116, 108, 101, 32, 34, 98, 111, 111, 107, 116, 105, 116, 108, 101, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 98, 118, 111, 108, 117, 109, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 110, 117, 109, 98, 101, 114, 46, 115, 101, 114, 105, 101, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 112, 97, 103, 101, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 32, 32, 97, 100, 100, 114, 101, 115, 115, 32, 101, 109, 112, 116, 121, 36, 10, 9, 123, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 32, 112, 117, 98, 108, 105, 115, 104, 101, 114, 32, 110, 101, 119, 46, 115, 101, 110, 116, 101, 110, 99, 101, 46, 99, 104, 101, 99, 107, 98, 10, 9, 32, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 32, 111, 117, 116, 112, 117, 116, 10, 9, 32, 32, 112, 117, 98, 108, 105, 115, 104, 101, 114, 32, 111, 117, 116, 112, 117, 116, 10, 9, 32, 32, 102, 111, 114, 109, 97, 116, 46, 100, 97, 116, 101, 32, 34, 121, 101, 97, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 9, 125, 10, 9, 123, 32, 97, 100, 100, 114, 101, 115, 115, 32, 111, 117, 116, 112, 117, 116, 46, 110, 111, 110, 110, 117, 108, 108, 10, 9, 32, 32, 102, 111, 114, 109, 97, 116, 46, 100, 97, 116, 101, 32, 34, 121, 101, 97, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 9, 32, 32, 110, 101, 119, 46, 115, 101, 110, 116, 101, 110, 99, 101, 10, 9, 32, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 32, 111, 117, 116, 112, 117, 116, 10, 9, 32, 32, 112, 117, 98, 108, 105, 115, 104, 101, 114, 32, 111, 117, 116, 112, 117, 116, 10, 9, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 123, 32, 102, 111, 114, 109, 97, 116, 46, 105, 110, 99, 111, 108, 108, 46, 105, 110, 112, 114, 111, 99, 46, 99, 114, 111, 115, 115, 114, 101, 102, 32, 111, 117, 116, 112, 117, 116, 46, 110, 111, 110, 110, 117, 108, 108, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 112, 97, 103, 101, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 110, 111, 116, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 105, 110, 46, 101, 110, 116, 114, 121, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 99, 111, 110, 102, 101, 114, 101, 110, 99, 101, 125, 32, 123, 32, 105, 110, 112, 114, 111, 99, 101, 101, 100, 105, 110, 103, 115, 32, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 109, 97, 110, 117, 97, 108, 125, 10, 123, 32, 111, 117, 116, 112, 117, 116, 46, 98, 105, 98, 105, 116, 101, 109, 10, 32, 32, 97, 117, 116, 104, 111, 114, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 32, 101, 109, 112, 116, 121, 36, 10, 9, 39, 115, 107, 105, 112, 36, 10, 9, 123, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 32, 111, 117, 116, 112, 117, 116, 46, 110, 111, 110, 110, 117, 108, 108, 10, 9, 32, 32, 97, 100, 100, 114, 101, 115, 115, 32, 111, 117, 116, 112, 117, 116, 10, 9, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 123, 32, 102, 111, 114, 109, 97, 116, 46, 97, 117, 116, 104, 111, 114, 115, 32, 111, 117, 116, 112, 117, 116, 46, 110, 111, 110, 110, 117, 108, 108, 32, 125, 10, 32, 32, 105, 102, 36, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 98, 116, 105, 116, 108, 101, 32, 34, 116, 105, 116, 108, 101, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 97, 117, 116, 104, 111, 114, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 32, 101, 109, 112, 116, 121, 36, 10, 9, 123, 32, 97, 100, 100, 114, 101, 115, 115, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 46, 99, 104, 101, 99, 107, 97, 10, 9, 32, 32, 97, 100, 100, 114, 101, 115, 115, 32, 111, 117, 116, 112, 117, 116, 10, 9, 125, 10, 9, 39, 115, 107, 105, 112, 36, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 123, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 32, 97, 100, 100, 114, 101, 115, 115, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 46, 99, 104, 101, 99, 107, 98, 10, 32, 32, 32, 32, 32, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 32, 32, 97, 100, 100, 114, 101, 115, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 101, 100, 105, 116, 105, 111, 110, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 100, 97, 116, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 110, 111, 116, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 105, 110, 46, 101, 110, 116, 114, 121, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 109, 97, 115, 116, 101, 114, 115, 116, 104, 101, 115, 105, 115, 125, 10, 123, 32, 111, 117, 116, 112, 117, 116, 46, 98, 105, 98, 105, 116, 101, 109, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 97, 117, 116, 104, 111, 114, 115, 32, 34, 97, 117, 116, 104, 111, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 116, 105, 116, 108, 101, 32, 34, 116, 105, 116, 108, 101, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 34, 77, 97, 115, 116, 101, 114, 39, 115, 32, 116, 104, 101, 115, 105, 115, 34, 32, 102, 111, 114, 109, 97, 116, 46, 116, 104, 101, 115, 105, 115, 46, 116, 121, 112, 101, 32, 111, 117, 116, 112, 117, 116, 46, 110, 111, 110, 110, 117, 108, 108, 10, 32, 32, 115, 99, 104, 111, 111, 108, 32, 34, 115, 99, 104, 111, 111, 108, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 97, 100, 100, 114, 101, 115, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 100, 97, 116, 101, 32, 34, 121, 101, 97, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 110, 111, 116, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 105, 110, 46, 101, 110, 116, 114, 121, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 109, 105, 115, 99, 125, 10, 123, 32, 111, 117, 116, 112, 117, 116, 46, 98, 105, 98, 105, 116, 101, 109, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 97, 117, 116, 104, 111, 114, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 116, 105, 116, 108, 101, 32, 104, 111, 119, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 46, 99, 104, 101, 99, 107, 98, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 116, 105, 116, 108, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 104, 111, 119, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 46, 99, 104, 101, 99, 107, 97, 10, 32, 32, 104, 111, 119, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 100, 97, 116, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 110, 111, 116, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 105, 110, 46, 101, 110, 116, 114, 121, 10, 32, 32, 101, 109, 112, 116, 121, 46, 109, 105, 115, 99, 46, 99, 104, 101, 99, 107, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 112, 104, 100, 116, 104, 101, 115, 105, 115, 125, 10, 123, 32, 111, 117, 116, 112, 117, 116, 46, 98, 105, 98, 105, 116, 101, 109, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 97, 117, 116, 104, 111, 114, 115, 32, 34, 97, 117, 116, 104, 111, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 98, 116, 105, 116, 108, 101, 32, 34, 116, 105, 116, 108, 101, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 34, 80, 104, 68, 32, 116, 104, 101, 115, 105, 115, 34, 32, 102, 111, 114, 109, 97, 116, 46, 116, 104, 101, 115, 105, 115, 46, 116, 121, 112, 101, 32, 111, 117, 116, 112, 117, 116, 46, 110, 111, 110, 110, 117, 108, 108, 10, 32, 32, 115, 99, 104, 111, 111, 108, 32, 34, 115, 99, 104, 111, 111, 108, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 97, 100, 100, 114, 101, 115, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 100, 97, 116, 101, 32, 34, 121, 101, 97, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 110, 111, 116, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 105, 110, 46, 101, 110, 116, 114, 121, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 112, 114, 111, 99, 101, 101, 100, 105, 110, 103, 115, 125, 10, 123, 32, 111, 117, 116, 112, 117, 116, 46, 98, 105, 98, 105, 116, 101, 109, 10, 32, 32, 101, 100, 105, 116, 111, 114, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 32, 111, 117, 116, 112, 117, 116, 32, 125, 10, 32, 32, 32, 32, 123, 32, 102, 111, 114, 109, 97, 116, 46, 101, 100, 105, 116, 111, 114, 115, 32, 111, 117, 116, 112, 117, 116, 46, 110, 111, 110, 110, 117, 108, 108, 32, 125, 10, 32, 32, 105, 102, 36, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 98, 116, 105, 116, 108, 101, 32, 34, 116, 105, 116, 108, 101, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 98, 118, 111, 108, 117, 109, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 110, 117, 109, 98, 101, 114, 46, 115, 101, 114, 105, 101, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 97, 100, 100, 114, 101, 115, 115, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 101, 100, 105, 116, 111, 114, 32, 101, 109, 112, 116, 121, 36, 10, 9, 123, 32, 112, 117, 98, 108, 105, 115, 104, 101, 114, 32, 110, 101, 119, 46, 115, 101, 110, 116, 101, 110, 99, 101, 46, 99, 104, 101, 99, 107, 97, 32, 125, 10, 9, 123, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 32, 112, 117, 98, 108, 105, 115, 104, 101, 114, 32, 110, 101, 119, 46, 115, 101, 110, 116, 101, 110, 99, 101, 46, 99, 104, 101, 99, 107, 98, 10, 9, 32, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 32, 111, 117, 116, 112, 117, 116, 10, 9, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 32, 32, 112, 117, 98, 108, 105, 115, 104, 101, 114, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 100, 97, 116, 101, 32, 34, 121, 101, 97, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 123, 32, 97, 100, 100, 114, 101, 115, 115, 32, 111, 117, 116, 112, 117, 116, 46, 110, 111, 110, 110, 117, 108, 108, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 46, 100, 97, 116, 101, 32, 34, 121, 101, 97, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 32, 32, 32, 32, 110, 101, 119, 46, 115, 101, 110, 116, 101, 110, 99, 101, 10, 32, 32, 32, 32, 32, 32, 101, 100, 105, 116, 111, 114, 32, 101, 109, 112, 116, 121, 36, 10, 9, 39, 115, 107, 105, 112, 36, 10, 9, 123, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 32, 111, 117, 116, 112, 117, 116, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 32, 32, 112, 117, 98, 108, 105, 115, 104, 101, 114, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 110, 111, 116, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 105, 110, 46, 101, 110, 116, 114, 121, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 116, 101, 99, 104, 114, 101, 112, 111, 114, 116, 125, 10, 123, 32, 111, 117, 116, 112, 117, 116, 46, 98, 105, 98, 105, 116, 101, 109, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 97, 117, 116, 104, 111, 114, 115, 32, 34, 97, 117, 116, 104, 111, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 116, 105, 116, 108, 101, 32, 34, 116, 105, 116, 108, 101, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 116, 114, 46, 110, 117, 109, 98, 101, 114, 32, 111, 117, 116, 112, 117, 116, 46, 110, 111, 110, 110, 117, 108, 108, 10, 32, 32, 105, 110, 115, 116, 105, 116, 117, 116, 105, 111, 110, 32, 34, 105, 110, 115, 116, 105, 116, 117, 116, 105, 111, 110, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 97, 100, 100, 114, 101, 115, 115, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 100, 97, 116, 101, 32, 34, 121, 101, 97, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 110, 111, 116, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 105, 110, 46, 101, 110, 116, 114, 121, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 117, 110, 112, 117, 98, 108, 105, 115, 104, 101, 100, 125, 10, 123, 32, 111, 117, 116, 112, 117, 116, 46, 98, 105, 98, 105, 116, 101, 109, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 97, 117, 116, 104, 111, 114, 115, 32, 34, 97, 117, 116, 104, 111, 114, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 116, 105, 116, 108, 101, 32, 34, 116, 105, 116, 108, 101, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 110, 101, 119, 46, 98, 108, 111, 99, 107, 10, 32, 32, 110, 111, 116, 101, 32, 34, 110, 111, 116, 101, 34, 32, 111, 117, 116, 112, 117, 116, 46, 99, 104, 101, 99, 107, 10, 32, 32, 102, 111, 114, 109, 97, 116, 46, 100, 97, 116, 101, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 102, 105, 110, 46, 101, 110, 116, 114, 121, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 100, 101, 102, 97, 117, 108, 116, 46, 116, 121, 112, 101, 125, 32, 123, 32, 109, 105, 115, 99, 32, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 106, 97, 110, 125, 32, 123, 34, 74, 97, 110, 117, 97, 114, 121, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 102, 101, 98, 125, 32, 123, 34, 70, 101, 98, 114, 117, 97, 114, 121, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 109, 97, 114, 125, 32, 123, 34, 77, 97, 114, 99, 104, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 97, 112, 114, 125, 32, 123, 34, 65, 112, 114, 105, 108, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 109, 97, 121, 125, 32, 123, 34, 77, 97, 121, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 106, 117, 110, 125, 32, 123, 34, 74, 117, 110, 101, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 106, 117, 108, 125, 32, 123, 34, 74, 117, 108, 121, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 97, 117, 103, 125, 32, 123, 34, 65, 117, 103, 117, 115, 116, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 115, 101, 112, 125, 32, 123, 34, 83, 101, 112, 116, 101, 109, 98, 101, 114, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 111, 99, 116, 125, 32, 123, 34, 79, 99, 116, 111, 98, 101, 114, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 110, 111, 118, 125, 32, 123, 34, 78, 111, 118, 101, 109, 98, 101, 114, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 100, 101, 99, 125, 32, 123, 34, 68, 101, 99, 101, 109, 98, 101, 114, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 97, 99, 109, 99, 115, 125, 32, 123, 34, 65, 67, 77, 32, 67, 111, 109, 112, 117, 116, 105, 110, 103, 32, 83, 117, 114, 118, 101, 121, 115, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 97, 99, 116, 97, 125, 32, 123, 34, 65, 99, 116, 97, 32, 73, 110, 102, 111, 114, 109, 97, 116, 105, 99, 97, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 99, 97, 99, 109, 125, 32, 123, 34, 67, 111, 109, 109, 117, 110, 105, 99, 97, 116, 105, 111, 110, 115, 32, 111, 102, 32, 116, 104, 101, 32, 65, 67, 77, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 105, 98, 109, 106, 114, 100, 125, 32, 123, 34, 73, 66, 77, 32, 74, 111, 117, 114, 110, 97, 108, 32, 111, 102, 32, 82, 101, 115, 101, 97, 114, 99, 104, 32, 97, 110, 100, 32, 68, 101, 118, 101, 108, 111, 112, 109, 101, 110, 116, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 105, 98, 109, 115, 106, 125, 32, 123, 34, 73, 66, 77, 32, 83, 121, 115, 116, 101, 109, 115, 32, 74, 111, 117, 114, 110, 97, 108, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 105, 101, 101, 101, 115, 101, 125, 32, 123, 34, 73, 69, 69, 69, 32, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 115, 32, 111, 110, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 69, 110, 103, 105, 110, 101, 101, 114, 105, 110, 103, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 105, 101, 101, 101, 116, 99, 125, 32, 123, 34, 73, 69, 69, 69, 32, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 115, 32, 111, 110, 32, 67, 111, 109, 112, 117, 116, 101, 114, 115, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 105, 101, 101, 101, 116, 99, 97, 100, 125, 10, 32, 123, 34, 73, 69, 69, 69, 32, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 115, 32, 111, 110, 32, 67, 111, 109, 112, 117, 116, 101, 114, 45, 65, 105, 100, 101, 100, 32, 68, 101, 115, 105, 103, 110, 32, 111, 102, 32, 73, 110, 116, 101, 103, 114, 97, 116, 101, 100, 32, 67, 105, 114, 99, 117, 105, 116, 115, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 105, 112, 108, 125, 32, 123, 34, 73, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 80, 114, 111, 99, 101, 115, 115, 105, 110, 103, 32, 76, 101, 116, 116, 101, 114, 115, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 106, 97, 99, 109, 125, 32, 123, 34, 74, 111, 117, 114, 110, 97, 108, 32, 111, 102, 32, 116, 104, 101, 32, 65, 67, 77, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 106, 99, 115, 115, 125, 32, 123, 34, 74, 111, 117, 114, 110, 97, 108, 32, 111, 102, 32, 67, 111, 109, 112, 117, 116, 101, 114, 32, 97, 110, 100, 32, 83, 121, 115, 116, 101, 109, 32, 83, 99, 105, 101, 110, 99, 101, 115, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 115, 99, 112, 125, 32, 123, 34, 83, 99, 105, 101, 110, 99, 101, 32, 111, 102, 32, 67, 111, 109, 112, 117, 116, 101, 114, 32, 80, 114, 111, 103, 114, 97, 109, 109, 105, 110, 103, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 115, 105, 99, 111, 109, 112, 125, 32, 123, 34, 83, 73, 65, 77, 32, 74, 111, 117, 114, 110, 97, 108, 32, 111, 110, 32, 67, 111, 109, 112, 117, 116, 105, 110, 103, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 116, 111, 99, 115, 125, 32, 123, 34, 65, 67, 77, 32, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 115, 32, 111, 110, 32, 67, 111, 109, 112, 117, 116, 101, 114, 32, 83, 121, 115, 116, 101, 109, 115, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 116, 111, 100, 115, 125, 32, 123, 34, 65, 67, 77, 32, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 115, 32, 111, 110, 32, 68, 97, 116, 97, 98, 97, 115, 101, 32, 83, 121, 115, 116, 101, 109, 115, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 116, 111, 103, 125, 32, 123, 34, 65, 67, 77, 32, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 115, 32, 111, 110, 32, 71, 114, 97, 112, 104, 105, 99, 115, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 116, 111, 109, 115, 125, 32, 123, 34, 65, 67, 77, 32, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 115, 32, 111, 110, 32, 77, 97, 116, 104, 101, 109, 97, 116, 105, 99, 97, 108, 32, 83, 111, 102, 116, 119, 97, 114, 101, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 116, 111, 111, 105, 115, 125, 32, 123, 34, 65, 67, 77, 32, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 115, 32, 111, 110, 32, 79, 102, 102, 105, 99, 101, 32, 73, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 83, 121, 115, 116, 101, 109, 115, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 116, 111, 112, 108, 97, 115, 125, 32, 123, 34, 65, 67, 77, 32, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 115, 32, 111, 110, 32, 80, 114, 111, 103, 114, 97, 109, 109, 105, 110, 103, 32, 76, 97, 110, 103, 117, 97, 103, 101, 115, 32, 97, 110, 100, 32, 83, 121, 115, 116, 101, 109, 115, 34, 125, 10, 10, 77, 65, 67, 82, 79, 32, 123, 116, 99, 115, 125, 32, 123, 34, 84, 104, 101, 111, 114, 101, 116, 105, 99, 97, 108, 32, 67, 111, 109, 112, 117, 116, 101, 114, 32, 83, 99, 105, 101, 110, 99, 101, 34, 125, 10, 10, 82, 69, 65, 68, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 115, 111, 114, 116, 105, 102, 121, 125, 10, 123, 32, 112, 117, 114, 105, 102, 121, 36, 10, 32, 32, 34, 108, 34, 32, 99, 104, 97, 110, 103, 101, 46, 99, 97, 115, 101, 36, 10, 125, 10, 10, 73, 78, 84, 69, 71, 69, 82, 83, 32, 123, 32, 108, 101, 110, 32, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 99, 104, 111, 112, 46, 119, 111, 114, 100, 125, 10, 123, 32, 39, 115, 32, 58, 61, 10, 32, 32, 39, 108, 101, 110, 32, 58, 61, 10, 32, 32, 115, 32, 35, 49, 32, 108, 101, 110, 32, 115, 117, 98, 115, 116, 114, 105, 110, 103, 36, 32, 61, 10, 32, 32, 32, 32, 123, 32, 115, 32, 108, 101, 110, 32, 35, 49, 32, 43, 32, 103, 108, 111, 98, 97, 108, 46, 109, 97, 120, 36, 32, 115, 117, 98, 115, 116, 114, 105, 110, 103, 36, 32, 125, 10, 32, 32, 32, 32, 39, 115, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 115, 111, 114, 116, 46, 102, 111, 114, 109, 97, 116, 46, 110, 97, 109, 101, 115, 125, 10, 123, 32, 39, 115, 32, 58, 61, 10, 32, 32, 35, 49, 32, 39, 110, 97, 109, 101, 112, 116, 114, 32, 58, 61, 10, 32, 32, 34, 34, 10, 32, 32, 115, 32, 110, 117, 109, 46, 110, 97, 109, 101, 115, 36, 32, 39, 110, 117, 109, 110, 97, 109, 101, 115, 32, 58, 61, 10, 32, 32, 110, 117, 109, 110, 97, 109, 101, 115, 32, 39, 110, 97, 109, 101, 115, 108, 101, 102, 116, 32, 58, 61, 10, 32, 32, 32, 32, 123, 32, 110, 97, 109, 101, 115, 108, 101, 102, 116, 32, 35, 48, 32, 62, 32, 125, 10, 32, 32, 32, 32, 123, 32, 110, 97, 109, 101, 112, 116, 114, 32, 35, 49, 32, 62, 10, 9, 123, 32, 34, 32, 32, 32, 34, 32, 42, 32, 125, 10, 9, 39, 115, 107, 105, 112, 36, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 32, 32, 115, 32, 110, 97, 109, 101, 112, 116, 114, 32, 34, 123, 118, 118, 123, 32, 125, 32, 125, 123, 108, 108, 123, 32, 125, 125, 123, 32, 32, 102, 102, 123, 32, 125, 125, 123, 32, 32, 106, 106, 123, 32, 125, 125, 34, 32, 102, 111, 114, 109, 97, 116, 46, 110, 97, 109, 101, 36, 32, 39, 116, 32, 58, 61, 10, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 112, 116, 114, 32, 110, 117, 109, 110, 97, 109, 101, 115, 32, 61, 32, 116, 32, 34, 111, 116, 104, 101, 114, 115, 34, 32, 61, 32, 97, 110, 100, 10, 9, 123, 32, 34, 101, 116, 32, 97, 108, 34, 32, 42, 32, 125, 10, 9, 123, 32, 116, 32, 115, 111, 114, 116, 105, 102, 121, 32, 42, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 112, 116, 114, 32, 35, 49, 32, 43, 32, 39, 110, 97, 109, 101, 112, 116, 114, 32, 58, 61, 10, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 115, 108, 101, 102, 116, 32, 35, 49, 32, 45, 32, 39, 110, 97, 109, 101, 115, 108, 101, 102, 116, 32, 58, 61, 10, 32, 32, 32, 32, 125, 10, 32, 32, 119, 104, 105, 108, 101, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 115, 111, 114, 116, 46, 102, 111, 114, 109, 97, 116, 46, 116, 105, 116, 108, 101, 125, 10, 123, 32, 39, 116, 32, 58, 61, 10, 32, 32, 34, 65, 32, 34, 32, 35, 50, 10, 32, 32, 32, 32, 34, 65, 110, 32, 34, 32, 35, 51, 10, 32, 32, 32, 32, 32, 32, 34, 84, 104, 101, 32, 34, 32, 35, 52, 32, 116, 32, 99, 104, 111, 112, 46, 119, 111, 114, 100, 10, 32, 32, 32, 32, 99, 104, 111, 112, 46, 119, 111, 114, 100, 10, 32, 32, 99, 104, 111, 112, 46, 119, 111, 114, 100, 10, 32, 32, 115, 111, 114, 116, 105, 102, 121, 10, 32, 32, 35, 49, 32, 103, 108, 111, 98, 97, 108, 46, 109, 97, 120, 36, 32, 115, 117, 98, 115, 116, 114, 105, 110, 103, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 97, 117, 116, 104, 111, 114, 46, 115, 111, 114, 116, 125, 10, 123, 32, 97, 117, 116, 104, 111, 114, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 107, 101, 121, 32, 101, 109, 112, 116, 121, 36, 10, 9, 123, 32, 34, 116, 111, 32, 115, 111, 114, 116, 44, 32, 110, 101, 101, 100, 32, 97, 117, 116, 104, 111, 114, 32, 111, 114, 32, 107, 101, 121, 32, 105, 110, 32, 34, 32, 99, 105, 116, 101, 36, 32, 42, 32, 119, 97, 114, 110, 105, 110, 103, 36, 10, 9, 32, 32, 34, 34, 10, 9, 125, 10, 9, 123, 32, 107, 101, 121, 32, 115, 111, 114, 116, 105, 102, 121, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 123, 32, 97, 117, 116, 104, 111, 114, 32, 115, 111, 114, 116, 46, 102, 111, 114, 109, 97, 116, 46, 110, 97, 109, 101, 115, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 97, 117, 116, 104, 111, 114, 46, 101, 100, 105, 116, 111, 114, 46, 115, 111, 114, 116, 125, 10, 123, 32, 97, 117, 116, 104, 111, 114, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 101, 100, 105, 116, 111, 114, 32, 101, 109, 112, 116, 121, 36, 10, 9, 123, 32, 107, 101, 121, 32, 101, 109, 112, 116, 121, 36, 10, 9, 32, 32, 32, 32, 123, 32, 34, 116, 111, 32, 115, 111, 114, 116, 44, 32, 110, 101, 101, 100, 32, 97, 117, 116, 104, 111, 114, 44, 32, 101, 100, 105, 116, 111, 114, 44, 32, 111, 114, 32, 107, 101, 121, 32, 105, 110, 32, 34, 32, 99, 105, 116, 101, 36, 32, 42, 32, 119, 97, 114, 110, 105, 110, 103, 36, 10, 9, 32, 32, 32, 32, 32, 32, 34, 34, 10, 9, 32, 32, 32, 32, 125, 10, 9, 32, 32, 32, 32, 123, 32, 107, 101, 121, 32, 115, 111, 114, 116, 105, 102, 121, 32, 125, 10, 9, 32, 32, 105, 102, 36, 10, 9, 125, 10, 9, 123, 32, 101, 100, 105, 116, 111, 114, 32, 115, 111, 114, 116, 46, 102, 111, 114, 109, 97, 116, 46, 110, 97, 109, 101, 115, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 123, 32, 97, 117, 116, 104, 111, 114, 32, 115, 111, 114, 116, 46, 102, 111, 114, 109, 97, 116, 46, 110, 97, 109, 101, 115, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 97, 117, 116, 104, 111, 114, 46, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 46, 115, 111, 114, 116, 125, 10, 123, 32, 97, 117, 116, 104, 111, 114, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 32, 101, 109, 112, 116, 121, 36, 10, 9, 123, 32, 107, 101, 121, 32, 101, 109, 112, 116, 121, 36, 10, 9, 32, 32, 32, 32, 123, 32, 34, 116, 111, 32, 115, 111, 114, 116, 44, 32, 110, 101, 101, 100, 32, 97, 117, 116, 104, 111, 114, 44, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 44, 32, 111, 114, 32, 107, 101, 121, 32, 105, 110, 32, 34, 32, 99, 105, 116, 101, 36, 32, 42, 32, 119, 97, 114, 110, 105, 110, 103, 36, 10, 9, 32, 32, 32, 32, 32, 32, 34, 34, 10, 9, 32, 32, 32, 32, 125, 10, 9, 32, 32, 32, 32, 123, 32, 107, 101, 121, 32, 115, 111, 114, 116, 105, 102, 121, 32, 125, 10, 9, 32, 32, 105, 102, 36, 10, 9, 125, 10, 9, 123, 32, 34, 84, 104, 101, 32, 34, 32, 35, 52, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 32, 99, 104, 111, 112, 46, 119, 111, 114, 100, 32, 115, 111, 114, 116, 105, 102, 121, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 123, 32, 97, 117, 116, 104, 111, 114, 32, 115, 111, 114, 116, 46, 102, 111, 114, 109, 97, 116, 46, 110, 97, 109, 101, 115, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 101, 100, 105, 116, 111, 114, 46, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 46, 115, 111, 114, 116, 125, 10, 123, 32, 101, 100, 105, 116, 111, 114, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 123, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 32, 101, 109, 112, 116, 121, 36, 10, 9, 123, 32, 107, 101, 121, 32, 101, 109, 112, 116, 121, 36, 10, 9, 32, 32, 32, 32, 123, 32, 34, 116, 111, 32, 115, 111, 114, 116, 44, 32, 110, 101, 101, 100, 32, 101, 100, 105, 116, 111, 114, 44, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 44, 32, 111, 114, 32, 107, 101, 121, 32, 105, 110, 32, 34, 32, 99, 105, 116, 101, 36, 32, 42, 32, 119, 97, 114, 110, 105, 110, 103, 36, 10, 9, 32, 32, 32, 32, 32, 32, 34, 34, 10, 9, 32, 32, 32, 32, 125, 10, 9, 32, 32, 32, 32, 123, 32, 107, 101, 121, 32, 115, 111, 114, 116, 105, 102, 121, 32, 125, 10, 9, 32, 32, 105, 102, 36, 10, 9, 125, 10, 9, 123, 32, 34, 84, 104, 101, 32, 34, 32, 35, 52, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 32, 99, 104, 111, 112, 46, 119, 111, 114, 100, 32, 115, 111, 114, 116, 105, 102, 121, 32, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 123, 32, 101, 100, 105, 116, 111, 114, 32, 115, 111, 114, 116, 46, 102, 111, 114, 109, 97, 116, 46, 110, 97, 109, 101, 115, 32, 125, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 112, 114, 101, 115, 111, 114, 116, 125, 10, 123, 32, 116, 121, 112, 101, 36, 32, 34, 98, 111, 111, 107, 34, 32, 61, 10, 32, 32, 116, 121, 112, 101, 36, 32, 34, 105, 110, 98, 111, 111, 107, 34, 32, 61, 10, 32, 32, 111, 114, 10, 32, 32, 32, 32, 39, 97, 117, 116, 104, 111, 114, 46, 101, 100, 105, 116, 111, 114, 46, 115, 111, 114, 116, 10, 32, 32, 32, 32, 123, 32, 116, 121, 112, 101, 36, 32, 34, 112, 114, 111, 99, 101, 101, 100, 105, 110, 103, 115, 34, 32, 61, 10, 9, 39, 101, 100, 105, 116, 111, 114, 46, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 46, 115, 111, 114, 116, 10, 9, 123, 32, 116, 121, 112, 101, 36, 32, 34, 109, 97, 110, 117, 97, 108, 34, 32, 61, 10, 9, 32, 32, 32, 32, 39, 97, 117, 116, 104, 111, 114, 46, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 46, 115, 111, 114, 116, 10, 9, 32, 32, 32, 32, 39, 97, 117, 116, 104, 111, 114, 46, 115, 111, 114, 116, 10, 9, 32, 32, 105, 102, 36, 10, 9, 125, 10, 32, 32, 32, 32, 32, 32, 105, 102, 36, 10, 32, 32, 32, 32, 125, 10, 32, 32, 105, 102, 36, 10, 32, 32, 34, 32, 32, 32, 32, 34, 10, 32, 32, 42, 10, 32, 32, 121, 101, 97, 114, 32, 102, 105, 101, 108, 100, 46, 111, 114, 46, 110, 117, 108, 108, 32, 115, 111, 114, 116, 105, 102, 121, 10, 32, 32, 42, 10, 32, 32, 34, 32, 32, 32, 32, 34, 10, 32, 32, 42, 10, 32, 32, 116, 105, 116, 108, 101, 32, 102, 105, 101, 108, 100, 46, 111, 114, 46, 110, 117, 108, 108, 10, 32, 32, 115, 111, 114, 116, 46, 102, 111, 114, 109, 97, 116, 46, 116, 105, 116, 108, 101, 10, 32, 32, 42, 10, 32, 32, 35, 49, 32, 101, 110, 116, 114, 121, 46, 109, 97, 120, 36, 32, 115, 117, 98, 115, 116, 114, 105, 110, 103, 36, 10, 32, 32, 39, 115, 111, 114, 116, 46, 107, 101, 121, 36, 32, 58, 61, 10, 125, 10, 10, 73, 84, 69, 82, 65, 84, 69, 32, 123, 112, 114, 101, 115, 111, 114, 116, 125, 10, 10, 83, 79, 82, 84, 10, 10, 83, 84, 82, 73, 78, 71, 83, 32, 123, 32, 108, 111, 110, 103, 101, 115, 116, 46, 108, 97, 98, 101, 108, 32, 125, 10, 10, 73, 78, 84, 69, 71, 69, 82, 83, 32, 123, 32, 110, 117, 109, 98, 101, 114, 46, 108, 97, 98, 101, 108, 32, 108, 111, 110, 103, 101, 115, 116, 46, 108, 97, 98, 101, 108, 46, 119, 105, 100, 116, 104, 32, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 46, 108, 111, 110, 103, 101, 115, 116, 46, 108, 97, 98, 101, 108, 125, 10, 123, 32, 34, 34, 32, 39, 108, 111, 110, 103, 101, 115, 116, 46, 108, 97, 98, 101, 108, 32, 58, 61, 10, 32, 32, 35, 49, 32, 39, 110, 117, 109, 98, 101, 114, 46, 108, 97, 98, 101, 108, 32, 58, 61, 10, 32, 32, 35, 48, 32, 39, 108, 111, 110, 103, 101, 115, 116, 46, 108, 97, 98, 101, 108, 46, 119, 105, 100, 116, 104, 32, 58, 61, 10, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 108, 111, 110, 103, 101, 115, 116, 46, 108, 97, 98, 101, 108, 46, 112, 97, 115, 115, 125, 10, 123, 32, 110, 117, 109, 98, 101, 114, 46, 108, 97, 98, 101, 108, 32, 105, 110, 116, 46, 116, 111, 46, 115, 116, 114, 36, 32, 39, 108, 97, 98, 101, 108, 32, 58, 61, 10, 32, 32, 110, 117, 109, 98, 101, 114, 46, 108, 97, 98, 101, 108, 32, 35, 49, 32, 43, 32, 39, 110, 117, 109, 98, 101, 114, 46, 108, 97, 98, 101, 108, 32, 58, 61, 10, 32, 32, 108, 97, 98, 101, 108, 32, 119, 105, 100, 116, 104, 36, 32, 108, 111, 110, 103, 101, 115, 116, 46, 108, 97, 98, 101, 108, 46, 119, 105, 100, 116, 104, 32, 62, 10, 32, 32, 32, 32, 123, 32, 108, 97, 98, 101, 108, 32, 39, 108, 111, 110, 103, 101, 115, 116, 46, 108, 97, 98, 101, 108, 32, 58, 61, 10, 32, 32, 32, 32, 32, 32, 108, 97, 98, 101, 108, 32, 119, 105, 100, 116, 104, 36, 32, 39, 108, 111, 110, 103, 101, 115, 116, 46, 108, 97, 98, 101, 108, 46, 119, 105, 100, 116, 104, 32, 58, 61, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 39, 115, 107, 105, 112, 36, 10, 32, 32, 105, 102, 36, 10, 125, 10, 10, 69, 88, 69, 67, 85, 84, 69, 32, 123, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 46, 108, 111, 110, 103, 101, 115, 116, 46, 108, 97, 98, 101, 108, 125, 10, 10, 73, 84, 69, 82, 65, 84, 69, 32, 123, 108, 111, 110, 103, 101, 115, 116, 46, 108, 97, 98, 101, 108, 46, 112, 97, 115, 115, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 98, 101, 103, 105, 110, 46, 98, 105, 98, 125, 10, 123, 32, 112, 114, 101, 97, 109, 98, 108, 101, 36, 32, 101, 109, 112, 116, 121, 36, 10, 32, 32, 32, 32, 39, 115, 107, 105, 112, 36, 10, 32, 32, 32, 32, 123, 32, 112, 114, 101, 97, 109, 98, 108, 101, 36, 32, 119, 114, 105, 116, 101, 36, 32, 110, 101, 119, 108, 105, 110, 101, 36, 32, 125, 10, 32, 32, 105, 102, 36, 10, 32, 32, 34, 92, 98, 101, 103, 105, 110, 123, 116, 104, 101, 98, 105, 98, 108, 105, 111, 103, 114, 97, 112, 104, 121, 125, 123, 34, 32, 32, 108, 111, 110, 103, 101, 115, 116, 46, 108, 97, 98, 101, 108, 32, 32, 42, 32, 34, 125, 34, 32, 42, 32, 119, 114, 105, 116, 101, 36, 32, 110, 101, 119, 108, 105, 110, 101, 36, 10, 125, 10, 10, 69, 88, 69, 67, 85, 84, 69, 32, 123, 98, 101, 103, 105, 110, 46, 98, 105, 98, 125, 10, 10, 69, 88, 69, 67, 85, 84, 69, 32, 123, 105, 110, 105, 116, 46, 115, 116, 97, 116, 101, 46, 99, 111, 110, 115, 116, 115, 125, 10, 10, 73, 84, 69, 82, 65, 84, 69, 32, 123, 99, 97, 108, 108, 46, 116, 121, 112, 101, 36, 125, 10, 10, 70, 85, 78, 67, 84, 73, 79, 78, 32, 123, 101, 110, 100, 46, 98, 105, 98, 125, 10, 123, 32, 110, 101, 119, 108, 105, 110, 101, 36, 10, 32, 32, 34, 92, 101, 110, 100, 123, 116, 104, 101, 98, 105, 98, 108, 105, 111, 103, 114, 97, 112, 104, 121, 125, 34, 32, 119, 114, 105, 116, 101, 36, 32, 110, 101, 119, 108, 105, 110, 101, 36, 10, 125, 10, 10, 69, 88, 69, 67, 85, 84, 69, 32, 123, 101, 110, 100, 46, 98, 105, 98, 125, 10]), true, true);
Module['FS_createDataFile']('/', 'refs.bib', [64, 65, 82, 84, 73, 67, 76, 69, 123, 75, 111, 115, 105, 110, 115, 107, 105, 50, 48, 48, 57, 44, 10, 97, 117, 116, 104, 111, 114, 61, 34, 82, 111, 98, 101, 114, 116, 32, 74, 46, 32, 75, 111, 115, 105, 110, 115, 107, 105, 34, 44, 10, 116, 105, 116, 108, 101, 61, 34, 65, 32, 76, 105, 116, 101, 114, 97, 116, 117, 114, 101, 32, 82, 101, 118, 105, 101, 119, 32, 111, 110, 32, 82, 101, 97, 99, 116, 105, 111, 110, 32, 84, 105, 109, 101, 58, 32, 104, 116, 116, 112, 58, 47, 47, 103, 111, 111, 46, 103, 108, 47, 108, 89, 119, 121, 89, 34, 44, 10, 121, 101, 97, 114, 61, 34, 50, 48, 48, 56, 34, 44, 10, 106, 111, 117, 114, 110, 97, 108, 61, 34, 87, 101, 98, 34, 10, 125, 10, 10, 64, 65, 82, 84, 73, 67, 76, 69, 123, 66, 111, 83, 101, 105, 100, 108, 101, 114, 48, 57, 44, 10, 121, 101, 97, 114, 61, 123, 50, 48, 48, 57, 125, 44, 10, 97, 117, 116, 104, 111, 114, 61, 123, 66, 111, 44, 32, 74, 32, 97, 110, 100, 32, 83, 101, 105, 100, 108, 101, 114, 44, 32, 82, 32, 68, 125, 44, 10, 106, 111, 117, 114, 110, 97, 108, 61, 123, 74, 111, 117, 114, 110, 97, 108, 32, 111, 102, 32, 110, 101, 117, 114, 111, 112, 104, 121, 115, 105, 111, 108, 111, 103, 121, 125, 44, 10, 118, 111, 108, 117, 109, 101, 61, 123, 49, 48, 49, 125, 44, 10, 109, 111, 110, 116, 104, 61, 123, 74, 117, 110, 125, 44, 10, 112, 97, 103, 101, 115, 61, 123, 125, 44, 10, 117, 114, 108, 61, 123, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 110, 99, 98, 105, 46, 110, 108, 109, 46, 110, 105, 104, 46, 103, 111, 118, 47, 112, 117, 98, 109, 101, 100, 47, 49, 57, 51, 53, 55, 51, 51, 56, 125, 44, 10, 116, 105, 116, 108, 101, 61, 123, 86, 105, 115, 117, 111, 115, 112, 97, 116, 105, 97, 108, 32, 119, 111, 114, 107, 105, 110, 103, 32, 109, 101, 109, 111, 114, 121, 32, 99, 97, 112, 97, 99, 105, 116, 121, 32, 112, 114, 101, 100, 105, 99, 116, 115, 32, 116, 104, 101, 32, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 32, 111, 102, 32, 97, 99, 113, 117, 105, 114, 101, 100, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 109, 111, 116, 111, 114, 32, 115, 101, 113, 117, 101, 110, 99, 101, 115, 46, 125, 44, 10, 125, 10, 10, 64, 65, 82, 84, 73, 67, 76, 69, 123, 86, 101, 114, 115, 116, 121, 110, 101, 110, 80, 104, 105, 108, 108, 105, 112, 115, 66, 114, 97, 117, 110, 69, 116, 65, 108, 49, 50, 44, 10, 121, 101, 97, 114, 61, 123, 50, 48, 49, 50, 125, 44, 10, 97, 117, 116, 104, 111, 114, 61, 123, 86, 101, 114, 115, 116, 121, 110, 101, 110, 44, 32, 84, 105, 109, 111, 116, 104, 121, 32, 97, 110, 100, 32, 80, 104, 105, 108, 108, 105, 112, 115, 44, 32, 74, 101, 102, 102, 32, 97, 110, 100, 32, 66, 114, 97, 117, 110, 44, 32, 69, 109, 105, 108, 121, 32, 97, 110, 100, 32, 87, 111, 114, 107, 109, 97, 110, 44, 32, 66, 114, 101, 116, 116, 32, 97, 110, 100, 32, 83, 99, 104, 117, 110, 110, 44, 32, 67, 104, 114, 105, 115, 116, 105, 97, 110, 32, 97, 110, 100, 32, 83, 99, 104, 110, 101, 105, 100, 101, 114, 44, 32, 87, 97, 108, 116, 101, 114, 125, 44, 10, 106, 111, 117, 114, 110, 97, 108, 61, 123, 80, 108, 111, 83, 32, 111, 110, 101, 125, 44, 10, 118, 111, 108, 117, 109, 101, 61, 123, 55, 125, 44, 10, 109, 111, 110, 116, 104, 61, 123, 49, 48, 125, 44, 10, 112, 97, 103, 101, 115, 61, 123, 125, 44, 10, 112, 117, 98, 108, 105, 115, 104, 101, 114, 61, 123, 80, 117, 98, 108, 105, 99, 32, 76, 105, 98, 114, 97, 114, 121, 32, 111, 102, 32, 83, 99, 105, 101, 110, 99, 101, 125, 44, 10, 117, 114, 108, 61, 123, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 110, 99, 98, 105, 46, 110, 108, 109, 46, 110, 105, 104, 46, 103, 111, 118, 47, 112, 117, 98, 109, 101, 100, 47, 50, 51, 48, 53, 54, 54, 51, 48, 125, 44, 10, 116, 105, 116, 108, 101, 61, 123, 68, 121, 110, 97, 109, 105, 99, 32, 83, 101, 110, 115, 111, 114, 105, 109, 111, 116, 111, 114, 32, 80, 108, 97, 110, 110, 105, 110, 103, 32, 100, 117, 114, 105, 110, 103, 32, 76, 111, 110, 103, 45, 84, 101, 114, 109, 32, 83, 101, 113, 117, 101, 110, 99, 101, 32, 76, 101, 97, 114, 110, 105, 110, 103, 58, 32, 84, 104, 101, 32, 82, 111, 108, 101, 32, 111, 102, 32, 86, 97, 114, 105, 97, 98, 105, 108, 105, 116, 121, 44, 32, 82, 101, 115, 112, 111, 110, 115, 101, 32, 67, 104, 117, 110, 107, 105, 110, 103, 32, 97, 110, 100, 32, 80, 108, 97, 110, 110, 105, 110, 103, 32, 69, 114, 114, 111, 114, 115, 46, 125, 44, 10, 125, 10, 10, 10, 64, 65, 82, 84, 73, 67, 76, 69, 123, 83, 97, 107, 97, 105, 75, 105, 116, 97, 103, 117, 99, 104, 105, 72, 105, 107, 111, 115, 97, 107, 97, 48, 51, 44, 10, 121, 101, 97, 114, 61, 123, 50, 48, 48, 51, 125, 44, 10, 97, 117, 116, 104, 111, 114, 61, 123, 83, 97, 107, 97, 105, 44, 32, 75, 97, 116, 115, 117, 121, 117, 107, 105, 32, 97, 110, 100, 32, 75, 105, 116, 97, 103, 117, 99, 104, 105, 44, 32, 75, 97, 116, 115, 117, 121, 97, 32, 97, 110, 100, 32, 72, 105, 107, 111, 115, 97, 107, 97, 44, 32, 79, 107, 105, 104, 105, 100, 101, 125, 44, 10, 106, 111, 117, 114, 110, 97, 108, 61, 123, 69, 120, 112, 101, 114, 105, 109, 101, 110, 116, 97, 108, 32, 98, 114, 97, 105, 110, 32, 114, 101, 115, 101, 97, 114, 99, 104, 125, 44, 10, 118, 111, 108, 117, 109, 101, 61, 123, 49, 53, 50, 125, 44, 10, 109, 111, 110, 116, 104, 61, 123, 83, 101, 112, 125, 44, 10, 112, 97, 103, 101, 115, 61, 123, 125, 44, 10, 117, 114, 108, 61, 123, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 110, 99, 98, 105, 46, 110, 108, 109, 46, 110, 105, 104, 46, 103, 111, 118, 47, 112, 117, 98, 109, 101, 100, 47, 49, 50, 56, 55, 57, 49, 55, 48, 125, 44, 10, 116, 105, 116, 108, 101, 61, 123, 67, 104, 117, 110, 107, 105, 110, 103, 32, 100, 117, 114, 105, 110, 103, 32, 104, 117, 109, 97, 110, 32, 118, 105, 115, 117, 111, 109, 111, 116, 111, 114, 32, 115, 101, 113, 117, 101, 110, 99, 101, 32, 108, 101, 97, 114, 110, 105, 110, 103, 46, 125, 44, 10, 125, 10, 10, 64, 65, 82, 84, 73, 67, 76, 69, 123, 80, 97, 109, 109, 105, 77, 105, 121, 97, 112, 117, 114, 97, 109, 65, 104, 109, 101, 100, 69, 116, 65, 108, 49, 50, 44, 10, 121, 101, 97, 114, 61, 123, 50, 48, 49, 50, 125, 44, 10, 97, 117, 116, 104, 111, 114, 61, 123, 80, 97, 109, 109, 105, 44, 32, 86, 32, 83, 32, 67, 104, 97, 110, 100, 114, 97, 115, 101, 107, 104, 97, 114, 32, 97, 110, 100, 32, 77, 105, 121, 97, 112, 117, 114, 97, 109, 44, 32, 75, 32, 80, 32, 97, 110, 100, 32, 65, 104, 109, 101, 100, 44, 32, 75, 97, 122, 117, 121, 117, 107, 105, 32, 97, 110, 100, 32, 83, 97, 109, 101, 106, 105, 109, 97, 44, 32, 82, 97, 106, 117, 32, 83, 32, 97, 110, 100, 32, 66, 97, 112, 105, 44, 32, 75, 101, 110, 106, 105, 125, 44, 10, 106, 111, 117, 114, 110, 97, 108, 61, 123, 78, 101, 117, 114, 111, 73, 109, 97, 103, 101, 125, 44, 10, 118, 111, 108, 117, 109, 101, 61, 123, 53, 57, 125, 44, 10, 109, 111, 110, 116, 104, 61, 123, 74, 97, 110, 125, 44, 10, 112, 97, 103, 101, 115, 61, 123, 125, 44, 10, 117, 114, 108, 61, 123, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 110, 99, 98, 105, 46, 110, 108, 109, 46, 110, 105, 104, 46, 103, 111, 118, 47, 112, 117, 98, 109, 101, 100, 47, 50, 49, 56, 54, 55, 55, 53, 56, 125, 44, 10, 116, 105, 116, 108, 101, 61, 123, 67, 104, 97, 110, 103, 105, 110, 103, 32, 116, 104, 101, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 32, 111, 102, 32, 99, 111, 109, 112, 108, 101, 120, 32, 118, 105, 115, 117, 111, 45, 109, 111, 116, 111, 114, 32, 115, 101, 113, 117, 101, 110, 99, 101, 115, 32, 115, 101, 108, 101, 99, 116, 105, 118, 101, 108, 121, 32, 97, 99, 116, 105, 118, 97, 116, 101, 115, 32, 116, 104, 101, 32, 102, 114, 111, 110, 116, 111, 45, 112, 97, 114, 105, 101, 116, 97, 108, 32, 110, 101, 116, 119, 111, 114, 107, 46, 125, 44, 10, 125, 10, 10, 64, 65, 82, 84, 73, 67, 76, 69, 123, 75, 101, 110, 110, 101, 114, 108, 101, 121, 83, 97, 107, 97, 105, 82, 117, 115, 104, 119, 111, 114, 116, 104, 48, 52, 44, 10, 121, 101, 97, 114, 61, 123, 50, 48, 48, 52, 125, 44, 10, 97, 117, 116, 104, 111, 114, 61, 123, 75, 101, 110, 110, 101, 114, 108, 101, 121, 44, 32, 83, 116, 101, 118, 101, 32, 87, 32, 97, 110, 100, 32, 83, 97, 107, 97, 105, 44, 32, 75, 32, 97, 110, 100, 32, 82, 117, 115, 104, 119, 111, 114, 116, 104, 44, 32, 77, 32, 70, 32, 83, 125, 44, 10, 106, 111, 117, 114, 110, 97, 108, 61, 123, 74, 111, 117, 114, 110, 97, 108, 32, 111, 102, 32, 110, 101, 117, 114, 111, 112, 104, 121, 115, 105, 111, 108, 111, 103, 121, 125, 44, 10, 118, 111, 108, 117, 109, 101, 61, 123, 57, 49, 125, 44, 10, 109, 111, 110, 116, 104, 61, 123, 70, 101, 98, 125, 44, 10, 112, 97, 103, 101, 115, 61, 123, 125, 44, 10, 117, 114, 108, 61, 123, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 110, 99, 98, 105, 46, 110, 108, 109, 46, 110, 105, 104, 46, 103, 111, 118, 47, 112, 117, 98, 109, 101, 100, 47, 49, 52, 53, 55, 51, 53, 54, 48, 125, 44, 10, 116, 105, 116, 108, 101, 61, 123, 79, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 32, 111, 102, 32, 97, 99, 116, 105, 111, 110, 32, 115, 101, 113, 117, 101, 110, 99, 101, 115, 32, 97, 110, 100, 32, 116, 104, 101, 32, 114, 111, 108, 101, 32, 111, 102, 32, 116, 104, 101, 32, 112, 114, 101, 45, 83, 77, 65, 46, 125, 44, 10, 125, 10, 10, 64, 65, 82, 84, 73, 67, 76, 69, 123, 80, 101, 110, 104, 117, 110, 101, 83, 116, 101, 101, 108, 101, 49, 50, 44, 10, 121, 101, 97, 114, 61, 123, 50, 48, 49, 50, 125, 44, 10, 97, 117, 116, 104, 111, 114, 61, 123, 80, 101, 110, 104, 117, 110, 101, 44, 32, 86, 105, 114, 103, 105, 110, 105, 97, 32, 66, 32, 97, 110, 100, 32, 83, 116, 101, 101, 108, 101, 44, 32, 67, 104, 114, 105, 115, 116, 111, 112, 104, 101, 114, 32, 74, 125, 44, 10, 106, 111, 117, 114, 110, 97, 108, 61, 123, 66, 101, 104, 97, 118, 105, 111, 117, 114, 97, 108, 32, 98, 114, 97, 105, 110, 32, 114, 101, 115, 101, 97, 114, 99, 104, 125, 44, 10, 118, 111, 108, 117, 109, 101, 61, 123, 50, 50, 54, 125, 44, 10, 109, 111, 110, 116, 104, 61, 123, 74, 97, 110, 125, 44, 10, 112, 97, 103, 101, 115, 61, 123, 125, 44, 10, 117, 114, 108, 61, 123, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 110, 99, 98, 105, 46, 110, 108, 109, 46, 110, 105, 104, 46, 103, 111, 118, 47, 112, 117, 98, 109, 101, 100, 47, 50, 50, 48, 48, 52, 57, 55, 57, 125, 44, 10, 116, 105, 116, 108, 101, 61, 123, 80, 97, 114, 97, 108, 108, 101, 108, 32, 99, 111, 110, 116, 114, 105, 98, 117, 116, 105, 111, 110, 115, 32, 111, 102, 32, 99, 101, 114, 101, 98, 101, 108, 108, 97, 114, 44, 32, 115, 116, 114, 105, 97, 116, 97, 108, 32, 97, 110, 100, 32, 77, 49, 32, 109, 101, 99, 104, 97, 110, 105, 115, 109, 115, 32, 116, 111, 32, 109, 111, 116, 111, 114, 32, 115, 101, 113, 117, 101, 110, 99, 101, 32, 108, 101, 97, 114, 110, 105, 110, 103, 46, 125, 44, 10, 125, 10, 10, 64, 65, 82, 84, 73, 67, 76, 69, 123, 86, 101, 114, 119, 101, 121, 65, 98, 114, 97, 104, 97, 109, 115, 101, 49, 50, 44, 10, 110, 117, 109, 98, 101, 114, 61, 123, 51, 125, 44, 10, 121, 101, 97, 114, 61, 123, 50, 48, 49, 50, 125, 44, 10, 97, 117, 116, 104, 111, 114, 61, 123, 86, 101, 114, 119, 101, 121, 44, 32, 87, 105, 108, 108, 101, 109, 32, 66, 46, 32, 97, 110, 100, 32, 65, 98, 114, 97, 104, 97, 109, 115, 101, 44, 32, 69, 108, 103, 101, 114, 32, 76, 46, 125, 44, 10, 106, 111, 117, 114, 110, 97, 108, 61, 123, 65, 99, 116, 97, 32, 80, 115, 121, 99, 104, 111, 108, 111, 103, 105, 99, 97, 125, 44, 10, 118, 111, 108, 117, 109, 101, 61, 123, 49, 52, 48, 125, 44, 10, 109, 111, 110, 116, 104, 61, 123, 74, 117, 108, 125, 44, 10, 112, 97, 103, 101, 115, 61, 123, 50, 55, 52, 45, 50, 56, 50, 125, 44, 10, 117, 114, 108, 61, 123, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 110, 99, 98, 105, 46, 110, 108, 109, 46, 110, 105, 104, 46, 103, 111, 118, 47, 112, 117, 98, 109, 101, 100, 47, 50, 50, 55, 48, 53, 54, 51, 49, 125, 44, 10, 116, 105, 116, 108, 101, 61, 123, 68, 105, 115, 116, 105, 110, 99, 116, 32, 109, 111, 100, 101, 115, 32, 111, 102, 32, 101, 120, 101, 99, 117, 116, 105, 110, 103, 32, 109, 111, 118, 101, 109, 101, 110, 116, 32, 115, 101, 113, 117, 101, 110, 99, 101, 115, 58, 32, 82, 101, 97, 99, 116, 105, 110, 103, 44, 32, 97, 115, 115, 111, 99, 105, 97, 116, 105, 110, 103, 44, 32, 97, 110, 100, 32, 99, 104, 117, 110, 107, 105, 110, 103, 46, 125, 44, 10, 125, 10, 10, 64, 65, 82, 84, 73, 67, 76, 69, 123, 75, 114, 105, 101, 116, 101, 78, 111, 101, 108, 108, 66, 114, 97, 118, 101, 114, 69, 116, 65, 108, 73, 110, 80, 114, 101, 112, 44, 10, 97, 117, 116, 104, 111, 114, 61, 123, 75, 114, 105, 101, 116, 101, 44, 32, 84, 32, 97, 110, 100, 32, 78, 111, 101, 108, 108, 101, 44, 32, 68, 32, 97, 110, 100, 32, 66, 114, 97, 118, 101, 114, 44, 32, 84, 32, 97, 110, 100, 32, 67, 111, 104, 101, 110, 44, 32, 74, 32, 97, 110, 100, 32, 79, 39, 82, 101, 105, 108, 108, 121, 44, 32, 82, 125, 44, 10, 116, 105, 116, 108, 101, 61, 123, 73, 110, 100, 105, 114, 101, 99, 116, 105, 111, 110, 32, 97, 110, 100, 32, 71, 101, 110, 101, 114, 97, 116, 105, 118, 105, 116, 121, 32, 105, 110, 32, 116, 104, 101, 32, 80, 114, 101, 102, 114, 111, 110, 116, 97, 108, 32, 67, 111, 114, 116, 101, 120, 32, 47, 32, 66, 97, 115, 97, 108, 32, 71, 97, 110, 103, 108, 105, 97, 32, 83, 121, 115, 116, 101, 109, 125, 44, 10, 121, 101, 97, 114, 61, 123, 73, 110, 32, 80, 114, 101, 112, 125, 44, 10, 106, 111, 117, 114, 110, 97, 108, 61, 34, 73, 110, 32, 80, 114, 101, 112, 34, 10, 125, 10, 10, 64, 65, 82, 84, 73, 67, 76, 69, 123, 67, 104, 101, 107, 97, 102, 77, 97, 116, 104, 121, 73, 110, 82, 101, 118, 105, 101, 119, 44, 10, 106, 111, 117, 114, 110, 97, 108, 61, 123, 73, 110, 32, 82, 101, 118, 105, 101, 119, 125, 44, 10, 97, 117, 116, 104, 111, 114, 61, 123, 67, 104, 101, 107, 97, 102, 44, 32, 77, 46, 32, 97, 110, 100, 32, 77, 97, 116, 104, 121, 44, 32, 70, 46, 125, 44, 10, 121, 101, 97, 114, 61, 123, 50, 48, 49, 50, 125, 44, 10, 116, 105, 116, 108, 101, 61, 123, 67, 104, 117, 110, 107, 105, 110, 103, 32, 77, 101, 109, 111, 114, 121, 32, 83, 112, 97, 110, 32, 102, 111, 114, 32, 79, 98, 106, 101, 99, 116, 115, 32, 86, 97, 114, 121, 105, 110, 103, 32, 105, 110, 32, 78, 117, 109, 98, 101, 114, 44, 32, 79, 114, 100, 101, 114, 32, 97, 110, 100, 32, 67, 111, 109, 112, 114, 101, 115, 115, 105, 98, 105, 108, 105, 116, 121, 125, 44, 10, 125, 10, 10, 64, 65, 82, 84, 73, 67, 76, 69, 123, 77, 105, 108, 108, 101, 114, 53, 54, 44, 10, 97, 117, 116, 104, 111, 114, 61, 123, 71, 32, 65, 32, 77, 105, 108, 108, 101, 114, 32, 97, 110, 100, 32, 71, 32, 65, 32, 77, 105, 108, 108, 101, 114, 125, 44, 10, 117, 114, 108, 61, 123, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 110, 99, 98, 105, 46, 110, 108, 109, 46, 110, 105, 104, 46, 103, 111, 118, 47, 112, 117, 98, 109, 101, 100, 47, 56, 48, 50, 50, 57, 54, 54, 125, 44, 10, 118, 111, 108, 117, 109, 101, 61, 123, 49, 48, 49, 125, 44, 10, 112, 97, 103, 101, 115, 61, 123, 56, 49, 45, 57, 55, 125, 44, 10, 121, 101, 97, 114, 61, 123, 49, 57, 57, 52, 125, 44, 10, 116, 105, 116, 108, 101, 61, 123, 84, 104, 101, 32, 109, 97, 103, 105, 99, 97, 108, 32, 110, 117, 109, 98, 101, 114, 32, 115, 101, 118, 101, 110, 44, 32, 112, 108, 117, 115, 32, 111, 114, 32, 109, 105, 110, 117, 115, 32, 116, 119, 111, 58, 32, 115, 111, 109, 101, 32, 108, 105, 109, 105, 116, 115, 32, 111, 110, 32, 111, 117, 114, 32, 99, 97, 112, 97, 99, 105, 116, 121, 32, 102, 111, 114, 32, 112, 114, 111, 99, 101, 115, 115, 105, 110, 103, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 32, 49, 57, 53, 54, 46, 125, 44, 10, 109, 111, 110, 116, 104, 61, 123, 48, 56, 125, 44, 10, 106, 111, 117, 114, 110, 97, 108, 61, 123, 80, 115, 121, 99, 104, 111, 108, 111, 103, 105, 99, 97, 108, 32, 114, 101, 118, 105, 101, 119, 125, 44, 10, 125, 10, 10, 64, 65, 82, 84, 73, 67, 76, 69, 123, 87, 111, 104, 108, 100, 109, 97, 110, 110, 72, 101, 97, 108, 121, 66, 111, 117, 114, 110, 101, 49, 48, 44, 10, 109, 111, 110, 116, 104, 61, 123, 77, 97, 121, 125, 44, 10, 121, 101, 97, 114, 61, 123, 50, 48, 49, 48, 125, 44, 10, 97, 117, 116, 104, 111, 114, 61, 123, 87, 111, 104, 108, 100, 109, 97, 110, 110, 44, 32, 69, 114, 105, 99, 97, 32, 76, 32, 97, 110, 100, 32, 72, 101, 97, 108, 121, 44, 32, 65, 108, 105, 99, 101, 32, 70, 32, 97, 110, 100, 32, 66, 111, 117, 114, 110, 101, 44, 32, 76, 121, 108, 101, 32, 69, 125, 44, 10, 106, 111, 117, 114, 110, 97, 108, 61, 123, 65, 116, 116, 101, 110, 116, 105, 111, 110, 44, 32, 112, 101, 114, 99, 101, 112, 116, 105, 111, 110, 32, 92, 38, 32, 112, 115, 121, 99, 104, 111, 112, 104, 121, 115, 105, 99, 115, 125, 44, 10, 118, 111, 108, 117, 109, 101, 61, 123, 55, 50, 125, 44, 10, 112, 97, 103, 101, 115, 61, 123, 125, 44, 10, 117, 114, 108, 61, 123, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 110, 99, 98, 105, 46, 110, 108, 109, 46, 110, 105, 104, 46, 103, 111, 118, 47, 112, 117, 98, 109, 101, 100, 47, 50, 48, 52, 51, 54, 50, 48, 54, 125, 44, 10, 116, 105, 116, 108, 101, 61, 123, 84, 97, 115, 107, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 32, 105, 110, 32, 116, 105, 109, 101, 32, 112, 114, 111, 100, 117, 99, 116, 105, 111, 110, 46, 125, 44, 10, 125], true, true);
Module['FS_createDataFile']('/', 'texmf.cnf', [37, 32, 111, 114, 105, 103, 105, 110, 97, 108, 32, 116, 101, 120, 109, 102, 46, 99, 110, 102, 32, 45, 45, 32, 114, 117, 110, 116, 105, 109, 101, 32, 112, 97, 116, 104, 32, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 32, 102, 105, 108, 101, 32, 102, 111, 114, 32, 107, 112, 97, 116, 104, 115, 101, 97, 46, 10, 37, 32, 80, 117, 98, 108, 105, 99, 32, 100, 111, 109, 97, 105, 110, 46, 10, 37, 32, 10, 37, 32, 73, 102, 32, 121, 111, 117, 32, 109, 111, 100, 105, 102, 121, 32, 116, 104, 105, 115, 32, 111, 114, 105, 103, 105, 110, 97, 108, 32, 102, 105, 108, 101, 44, 32, 89, 79, 85, 82, 32, 67, 72, 65, 78, 71, 69, 83, 32, 87, 73, 76, 76, 32, 66, 69, 32, 76, 79, 83, 84, 32, 119, 104, 101, 110, 32, 105, 116, 32, 105, 115, 10, 37, 32, 117, 112, 100, 97, 116, 101, 100, 46, 32, 32, 73, 110, 115, 116, 101, 97, 100, 44, 32, 112, 117, 116, 32, 121, 111, 117, 114, 32, 99, 104, 97, 110, 103, 101, 115, 32, 45, 45, 32, 97, 110, 100, 32, 111, 110, 108, 121, 32, 121, 111, 117, 114, 32, 99, 104, 97, 110, 103, 101, 115, 44, 32, 110, 111, 116, 32, 97, 110, 10, 37, 32, 101, 110, 116, 105, 114, 101, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 102, 117, 108, 108, 32, 116, 101, 120, 109, 102, 46, 99, 110, 102, 33, 32, 45, 45, 32, 105, 110, 32, 46, 46, 47, 46, 46, 47, 116, 101, 120, 109, 102, 46, 99, 110, 102, 46, 32, 32, 84, 104, 97, 116, 32, 105, 115, 44, 32, 105, 102, 10, 37, 32, 116, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 105, 110, 115, 116, 97, 108, 108, 101, 100, 32, 105, 110, 32, 47, 115, 111, 109, 101, 47, 112, 97, 116, 104, 47, 116, 111, 47, 116, 101, 120, 108, 105, 118, 101, 47, 50, 48, 49, 50, 47, 116, 101, 120, 109, 102, 47, 119, 101, 98, 50, 99, 47, 116, 101, 120, 109, 102, 46, 99, 110, 102, 44, 10, 37, 32, 97, 100, 100, 32, 121, 111, 117, 114, 32, 99, 117, 115, 116, 111, 109, 32, 115, 101, 116, 116, 105, 110, 103, 115, 32, 116, 111, 32, 47, 115, 111, 109, 101, 47, 112, 97, 116, 104, 47, 116, 111, 47, 116, 101, 120, 108, 105, 118, 101, 47, 50, 48, 49, 50, 47, 116, 101, 120, 109, 102, 46, 99, 110, 102, 46, 10, 37, 32, 10, 37, 32, 87, 104, 97, 116, 32, 102, 111, 108, 108, 111, 119, 115, 32, 105, 115, 32, 97, 32, 115, 117, 112, 101, 114, 45, 115, 117, 109, 109, 97, 114, 121, 32, 111, 102, 32, 119, 104, 97, 116, 32, 116, 104, 105, 115, 32, 46, 99, 110, 102, 32, 102, 105, 108, 101, 32, 99, 97, 110, 10, 37, 32, 99, 111, 110, 116, 97, 105, 110, 46, 32, 80, 108, 101, 97, 115, 101, 32, 114, 101, 97, 100, 32, 116, 104, 101, 32, 75, 112, 97, 116, 104, 115, 101, 97, 32, 109, 97, 110, 117, 97, 108, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 10, 37, 10, 37, 32, 65, 110, 121, 32, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 32, 40, 115, 116, 105, 99, 107, 105, 110, 103, 32, 116, 111, 32, 65, 45, 90, 97, 45, 122, 95, 32, 102, 111, 114, 32, 110, 97, 109, 101, 115, 32, 105, 115, 32, 115, 97, 102, 101, 115, 116, 41, 32, 99, 97, 110, 32, 98, 101, 32, 97, 115, 115, 105, 103, 110, 101, 100, 46, 10, 37, 32, 84, 104, 101, 32, 96, 61, 39, 32, 40, 97, 110, 100, 32, 115, 117, 114, 114, 111, 117, 110, 100, 105, 110, 103, 32, 115, 112, 97, 99, 101, 115, 41, 32, 105, 115, 32, 111, 112, 116, 105, 111, 110, 97, 108, 46, 10, 37, 32, 36, 102, 111, 111, 32, 40, 111, 114, 32, 36, 123, 102, 111, 111, 125, 41, 32, 105, 110, 32, 97, 32, 118, 97, 108, 117, 101, 32, 101, 120, 112, 97, 110, 100, 115, 32, 116, 111, 32, 116, 104, 101, 32, 101, 110, 118, 118, 97, 114, 32, 111, 114, 32, 99, 110, 102, 32, 118, 97, 108, 117, 101, 32, 111, 102, 32, 102, 111, 111, 46, 10, 37, 32, 76, 111, 110, 103, 32, 108, 105, 110, 101, 115, 32, 99, 97, 110, 32, 98, 101, 32, 99, 111, 110, 116, 105, 110, 117, 101, 100, 32, 119, 105, 116, 104, 32, 97, 32, 92, 46, 10, 37, 10, 37, 32, 69, 97, 114, 108, 105, 101, 114, 32, 101, 110, 116, 114, 105, 101, 115, 32, 40, 105, 110, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 111, 114, 32, 97, 110, 111, 116, 104, 101, 114, 32, 102, 105, 108, 101, 41, 32, 111, 118, 101, 114, 114, 105, 100, 101, 32, 108, 97, 116, 101, 114, 32, 111, 110, 101, 115, 44, 32, 97, 110, 100, 10, 37, 32, 97, 110, 32, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 32, 118, 97, 114, 105, 97, 98, 108, 101, 32, 102, 111, 111, 32, 111, 118, 101, 114, 114, 105, 100, 101, 115, 32, 97, 110, 121, 32, 116, 101, 120, 109, 102, 46, 99, 110, 102, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 32, 111, 102, 32, 102, 111, 111, 46, 10, 37, 10, 37, 32, 65, 108, 108, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115, 32, 97, 114, 101, 32, 114, 101, 97, 100, 32, 98, 101, 102, 111, 114, 101, 32, 97, 110, 121, 116, 104, 105, 110, 103, 32, 105, 115, 32, 101, 120, 112, 97, 110, 100, 101, 100, 44, 32, 115, 111, 32, 121, 111, 117, 32, 99, 97, 110, 32, 117, 115, 101, 10, 37, 32, 118, 97, 114, 105, 97, 98, 108, 101, 115, 32, 98, 101, 102, 111, 114, 101, 32, 116, 104, 101, 121, 32, 97, 114, 101, 32, 100, 101, 102, 105, 110, 101, 100, 46, 10, 37, 10, 37, 32, 73, 102, 32, 97, 32, 118, 97, 114, 105, 97, 98, 108, 101, 32, 97, 115, 115, 105, 103, 110, 109, 101, 110, 116, 32, 105, 115, 32, 113, 117, 97, 108, 105, 102, 105, 101, 100, 32, 119, 105, 116, 104, 32, 96, 46, 80, 82, 79, 71, 82, 65, 77, 39, 44, 32, 105, 116, 32, 105, 115, 32, 105, 103, 110, 111, 114, 101, 100, 10, 37, 32, 117, 110, 108, 101, 115, 115, 32, 116, 104, 101, 32, 99, 117, 114, 114, 101, 110, 116, 32, 101, 120, 101, 99, 117, 116, 97, 98, 108, 101, 32, 40, 108, 97, 115, 116, 32, 102, 105, 108, 101, 110, 97, 109, 101, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 32, 111, 102, 32, 97, 114, 103, 118, 91, 48, 93, 41, 32, 105, 115, 10, 37, 32, 110, 97, 109, 101, 100, 32, 80, 82, 79, 71, 82, 65, 77, 46, 32, 32, 84, 104, 105, 115, 32, 102, 111, 111, 46, 80, 82, 79, 71, 82, 65, 77, 32, 99, 111, 110, 115, 116, 114, 117, 99, 116, 32, 105, 115, 32, 110, 111, 116, 32, 114, 101, 99, 111, 103, 110, 105, 122, 101, 100, 32, 111, 110, 32, 116, 104, 101, 10, 37, 32, 114, 105, 103, 104, 116, 45, 104, 97, 110, 100, 32, 115, 105, 100, 101, 46, 32, 70, 111, 114, 32, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 32, 118, 97, 114, 105, 97, 98, 108, 101, 115, 44, 32, 117, 115, 101, 32, 70, 79, 79, 95, 80, 82, 79, 71, 82, 65, 77, 46, 10, 37, 10, 37, 32, 87, 104, 105, 99, 104, 32, 102, 105, 108, 101, 32, 102, 111, 114, 109, 97, 116, 115, 32, 117, 115, 101, 32, 119, 104, 105, 99, 104, 32, 112, 97, 116, 104, 115, 32, 102, 111, 114, 32, 115, 101, 97, 114, 99, 104, 101, 115, 32, 105, 115, 32, 100, 101, 115, 99, 114, 105, 98, 101, 100, 32, 105, 110, 32, 116, 104, 101, 10, 37, 32, 118, 97, 114, 105, 111, 117, 115, 32, 112, 114, 111, 103, 114, 97, 109, 115, 39, 32, 97, 110, 100, 32, 116, 104, 101, 32, 75, 112, 97, 116, 104, 115, 101, 97, 32, 100, 111, 99, 117, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 40, 104, 116, 116, 112, 58, 47, 47, 116, 117, 103, 46, 111, 114, 103, 47, 107, 112, 97, 116, 104, 115, 101, 97, 41, 46, 10, 37, 10, 37, 32, 47, 47, 32, 109, 101, 97, 110, 115, 32, 116, 111, 32, 115, 101, 97, 114, 99, 104, 32, 115, 117, 98, 100, 105, 114, 101, 99, 116, 111, 114, 105, 101, 115, 32, 40, 114, 101, 99, 117, 114, 115, 105, 118, 101, 108, 121, 41, 46, 10, 37, 32, 65, 32, 108, 101, 97, 100, 105, 110, 103, 32, 33, 33, 32, 109, 101, 97, 110, 115, 32, 116, 111, 32, 108, 111, 111, 107, 32, 111, 110, 108, 121, 32, 105, 110, 32, 116, 104, 101, 32, 108, 115, 45, 82, 32, 100, 98, 44, 32, 110, 101, 118, 101, 114, 32, 111, 110, 32, 116, 104, 101, 32, 100, 105, 115, 107, 46, 10, 37, 32, 73, 110, 32, 116, 104, 105, 115, 32, 102, 105, 108, 101, 44, 32, 101, 105, 116, 104, 101, 114, 32, 59, 32, 111, 114, 32, 58, 32, 99, 97, 110, 32, 98, 101, 32, 117, 115, 101, 100, 32, 116, 111, 32, 115, 101, 112, 97, 114, 97, 116, 101, 32, 112, 97, 116, 104, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 115, 46, 10, 37, 32, 65, 32, 108, 101, 97, 100, 105, 110, 103, 47, 116, 114, 97, 105, 108, 105, 110, 103, 47, 100, 111, 117, 98, 108, 101, 100, 32, 112, 97, 116, 104, 32, 115, 101, 112, 97, 114, 97, 116, 111, 114, 32, 105, 110, 32, 116, 104, 101, 32, 112, 97, 116, 104, 115, 32, 119, 105, 108, 108, 32, 98, 101, 10, 37, 32, 32, 32, 101, 120, 112, 97, 110, 100, 101, 100, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 99, 111, 109, 112, 105, 108, 101, 45, 116, 105, 109, 101, 32, 100, 101, 102, 97, 117, 108, 116, 46, 32, 80, 114, 111, 98, 97, 98, 108, 121, 32, 110, 111, 116, 32, 119, 104, 97, 116, 32, 121, 111, 117, 32, 119, 97, 110, 116, 46, 10, 37, 10, 37, 32, 66, 114, 97, 99, 101, 32, 110, 111, 116, 97, 116, 105, 111, 110, 32, 105, 115, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 44, 32, 102, 111, 114, 32, 101, 120, 97, 109, 112, 108, 101, 58, 32, 47, 117, 115, 114, 47, 108, 111, 99, 97, 108, 47, 123, 109, 121, 116, 101, 120, 44, 111, 116, 104, 101, 114, 116, 101, 120, 125, 10, 37, 32, 101, 120, 112, 97, 110, 100, 115, 32, 116, 111, 32, 47, 117, 115, 114, 47, 108, 111, 99, 97, 108, 47, 109, 121, 116, 101, 120, 58, 47, 117, 115, 114, 47, 108, 111, 99, 97, 108, 47, 111, 116, 104, 101, 114, 116, 101, 120, 46, 32, 32, 87, 101, 32, 109, 97, 107, 101, 32, 101, 120, 116, 101, 110, 115, 105, 118, 101, 10, 37, 32, 117, 115, 101, 32, 111, 102, 32, 116, 104, 105, 115, 46, 10, 10, 10, 37, 32, 12, 32, 80, 97, 114, 116, 32, 49, 58, 32, 83, 101, 97, 114, 99, 104, 32, 112, 97, 116, 104, 115, 32, 97, 110, 100, 32, 100, 105, 114, 101, 99, 116, 111, 114, 105, 101, 115, 46, 10, 10, 37, 32, 84, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 112, 97, 114, 101, 110, 116, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 111, 102, 32, 111, 117, 114, 32, 115, 101, 118, 101, 114, 97, 108, 32, 116, 114, 101, 101, 115, 44, 32, 105, 46, 101, 46, 44, 10, 37, 32, 47, 117, 115, 114, 47, 108, 111, 99, 97, 108, 47, 116, 101, 120, 108, 105, 118, 101, 47, 89, 89, 89, 89, 32, 105, 110, 32, 116, 104, 101, 32, 111, 114, 105, 103, 105, 110, 97, 108, 32, 84, 101, 88, 32, 76, 105, 118, 101, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 46, 10, 37, 10, 37, 32, 65, 108, 108, 32, 116, 114, 101, 101, 115, 32, 109, 117, 115, 116, 32, 98, 101, 32, 111, 114, 103, 97, 110, 105, 122, 101, 100, 32, 97, 99, 99, 111, 114, 100, 105, 110, 103, 32, 116, 111, 32, 116, 104, 101, 32, 84, 101, 88, 32, 68, 105, 114, 101, 99, 116, 111, 114, 121, 32, 83, 116, 114, 117, 99, 116, 117, 114, 101, 10, 37, 32, 40, 104, 116, 116, 112, 58, 47, 47, 116, 117, 103, 46, 111, 114, 103, 47, 116, 100, 115, 41, 44, 32, 111, 114, 32, 102, 105, 108, 101, 115, 32, 109, 97, 121, 32, 110, 111, 116, 32, 98, 101, 32, 102, 111, 117, 110, 100, 46, 10, 37, 10, 37, 32, 82, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 111, 114, 115, 32, 119, 105, 108, 108, 32, 112, 114, 111, 98, 97, 98, 108, 121, 32, 119, 97, 110, 116, 32, 36, 83, 69, 76, 70, 65, 85, 84, 79, 68, 73, 82, 47, 115, 104, 97, 114, 101, 44, 32, 105, 46, 101, 46, 44, 32, 47, 117, 115, 114, 47, 115, 104, 97, 114, 101, 46, 10, 37, 32, 75, 112, 97, 116, 104, 115, 101, 97, 32, 115, 101, 116, 115, 32, 83, 69, 76, 70, 65, 85, 84, 79, 76, 79, 67, 32, 40, 116, 104, 101, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 98, 105, 110, 97, 114, 121, 41, 44, 10, 37, 32, 83, 69, 76, 70, 65, 85, 84, 79, 68, 73, 82, 32, 40, 105, 116, 115, 32, 112, 97, 114, 101, 110, 116, 41, 44, 32, 97, 110, 100, 32, 83, 69, 76, 70, 65, 85, 84, 79, 80, 65, 82, 69, 78, 84, 32, 40, 105, 116, 115, 32, 103, 114, 97, 110, 100, 112, 97, 114, 101, 110, 116, 41, 46, 10, 84, 69, 88, 77, 70, 82, 79, 79, 84, 32, 61, 32, 47, 10, 10, 37, 32, 84, 104, 101, 32, 116, 114, 101, 101, 32, 99, 111, 110, 116, 97, 105, 110, 105, 110, 103, 32, 114, 117, 110, 116, 105, 109, 101, 32, 102, 105, 108, 101, 115, 32, 114, 101, 108, 97, 116, 101, 100, 32, 116, 111, 32, 116, 104, 101, 32, 115, 112, 101, 99, 105, 102, 105, 99, 10, 37, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 32, 97, 110, 100, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 84, 69, 88, 77, 70, 77, 65, 73, 78, 32, 61, 32, 47, 116, 101, 120, 109, 102, 10, 10, 37, 32, 84, 104, 101, 32, 109, 97, 105, 110, 32, 116, 114, 101, 101, 32, 111, 102, 32, 112, 97, 99, 107, 97, 103, 101, 115, 44, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 45, 97, 103, 110, 111, 115, 116, 105, 99, 58, 10, 84, 69, 88, 77, 70, 68, 73, 83, 84, 32, 61, 32, 47, 116, 101, 120, 109, 102, 45, 100, 105, 115, 116, 10, 10, 37, 32, 76, 111, 99, 97, 108, 32, 97, 100, 100, 105, 116, 105, 111, 110, 115, 32, 116, 111, 32, 116, 104, 101, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 32, 116, 114, 101, 101, 115, 46, 10, 84, 69, 88, 77, 70, 76, 79, 67, 65, 76, 32, 61, 32, 47, 116, 101, 120, 109, 102, 45, 108, 111, 99, 97, 108, 10, 10, 37, 32, 84, 69, 88, 77, 70, 83, 89, 83, 86, 65, 82, 44, 32, 119, 104, 101, 114, 101, 32, 42, 45, 115, 121, 115, 32, 115, 116, 111, 114, 101, 32, 99, 97, 99, 104, 101, 100, 32, 114, 117, 110, 116, 105, 109, 101, 32, 100, 97, 116, 97, 46, 10, 84, 69, 88, 77, 70, 83, 89, 83, 86, 65, 82, 32, 61, 32, 47, 116, 101, 120, 109, 102, 45, 118, 97, 114, 10, 10, 37, 32, 84, 69, 88, 77, 70, 83, 89, 83, 67, 79, 78, 70, 73, 71, 44, 32, 119, 104, 101, 114, 101, 32, 42, 45, 115, 121, 115, 32, 115, 116, 111, 114, 101, 32, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 32, 100, 97, 116, 97, 46, 10, 84, 69, 88, 77, 70, 83, 89, 83, 67, 79, 78, 70, 73, 71, 32, 61, 32, 47, 116, 101, 120, 109, 102, 45, 99, 111, 110, 102, 105, 103, 10, 10, 37, 32, 80, 101, 114, 45, 117, 115, 101, 114, 32, 116, 101, 120, 109, 102, 32, 116, 114, 101, 101, 40, 115, 41, 32, 45, 45, 32, 111, 114, 103, 97, 110, 105, 122, 101, 100, 32, 112, 101, 114, 32, 116, 104, 101, 32, 84, 68, 83, 44, 32, 97, 115, 32, 117, 115, 117, 97, 108, 46, 32, 32, 84, 111, 32, 100, 101, 102, 105, 110, 101, 10, 37, 32, 109, 111, 114, 101, 32, 116, 104, 97, 110, 32, 111, 110, 101, 32, 112, 101, 114, 45, 117, 115, 101, 114, 32, 116, 114, 101, 101, 44, 32, 115, 101, 116, 32, 116, 104, 105, 115, 32, 116, 111, 32, 97, 32, 108, 105, 115, 116, 32, 111, 102, 32, 100, 105, 114, 101, 99, 116, 111, 114, 105, 101, 115, 32, 105, 110, 10, 37, 32, 98, 114, 97, 99, 101, 115, 44, 32, 97, 115, 32, 100, 101, 115, 99, 114, 105, 98, 101, 100, 32, 97, 98, 111, 118, 101, 46, 32, 32, 40, 84, 104, 105, 115, 32, 117, 115, 101, 100, 32, 116, 111, 32, 98, 101, 32, 72, 79, 77, 69, 84, 69, 88, 77, 70, 46, 41, 32, 32, 126, 32, 101, 120, 112, 97, 110, 100, 115, 10, 37, 32, 116, 111, 32, 37, 85, 83, 69, 82, 80, 82, 79, 70, 73, 76, 69, 37, 32, 111, 110, 32, 87, 105, 110, 100, 111, 119, 115, 44, 32, 36, 72, 79, 77, 69, 32, 111, 116, 104, 101, 114, 119, 105, 115, 101, 46, 10, 84, 69, 88, 77, 70, 72, 79, 77, 69, 32, 61, 32, 126, 47, 116, 101, 120, 109, 102, 10, 10, 37, 32, 84, 69, 88, 77, 70, 86, 65, 82, 44, 32, 119, 104, 101, 114, 101, 32, 116, 101, 120, 99, 111, 110, 102, 105, 103, 47, 117, 112, 100, 109, 97, 112, 47, 102, 109, 116, 117, 116, 105, 108, 32, 115, 116, 111, 114, 101, 32, 99, 97, 99, 104, 101, 100, 32, 114, 117, 110, 116, 105, 109, 101, 32, 100, 97, 116, 97, 46, 10, 84, 69, 88, 77, 70, 86, 65, 82, 32, 61, 32, 126, 47, 46, 116, 101, 120, 108, 105, 118, 101, 50, 48, 49, 50, 47, 116, 101, 120, 109, 102, 45, 118, 97, 114, 10, 10, 37, 32, 84, 69, 88, 77, 70, 67, 79, 78, 70, 73, 71, 44, 32, 119, 104, 101, 114, 101, 32, 116, 101, 120, 99, 111, 110, 102, 105, 103, 47, 117, 112, 100, 109, 97, 112, 47, 102, 109, 116, 117, 116, 105, 108, 32, 115, 116, 111, 114, 101, 32, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 32, 100, 97, 116, 97, 46, 10, 84, 69, 88, 77, 70, 67, 79, 78, 70, 73, 71, 32, 61, 32, 126, 47, 46, 116, 101, 120, 108, 105, 118, 101, 50, 48, 49, 50, 47, 116, 101, 120, 109, 102, 45, 99, 111, 110, 102, 105, 103, 10, 10, 37, 32, 76, 105, 115, 116, 32, 97, 108, 108, 32, 116, 104, 101, 32, 116, 101, 120, 109, 102, 32, 116, 114, 101, 101, 115, 46, 10, 37, 10, 37, 32, 70, 111, 114, 32, 116, 101, 120, 99, 111, 110, 102, 105, 103, 32, 116, 111, 32, 119, 111, 114, 107, 32, 112, 114, 111, 112, 101, 114, 108, 121, 44, 32, 84, 69, 88, 77, 70, 67, 79, 78, 70, 73, 71, 32, 97, 110, 100, 32, 84, 69, 88, 77, 70, 86, 65, 82, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 110, 97, 109, 101, 100, 10, 37, 32, 101, 120, 112, 108, 105, 99, 105, 116, 108, 121, 32, 97, 110, 100, 32, 98, 101, 102, 111, 114, 101, 32, 97, 108, 108, 32, 111, 116, 104, 101, 114, 32, 116, 114, 101, 101, 115, 46, 10, 37, 32, 10, 37, 32, 84, 69, 88, 77, 70, 76, 79, 67, 65, 76, 32, 102, 111, 108, 108, 111, 119, 115, 32, 84, 69, 88, 77, 70, 77, 65, 73, 78, 32, 40, 97, 110, 100, 32, 112, 114, 101, 99, 101, 100, 101, 115, 32, 84, 69, 88, 77, 70, 68, 73, 83, 84, 41, 32, 98, 101, 99, 97, 117, 115, 101, 32, 116, 104, 101, 10, 37, 32, 102, 105, 108, 101, 115, 32, 105, 110, 32, 84, 69, 88, 77, 70, 77, 65, 73, 78, 32, 97, 114, 101, 32, 116, 105, 103, 104, 116, 108, 121, 32, 99, 111, 117, 112, 108, 101, 100, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 112, 97, 114, 116, 105, 99, 117, 108, 97, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 111, 102, 10, 37, 32, 116, 104, 101, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 44, 32, 115, 117, 99, 104, 32, 97, 115, 32, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 32, 102, 105, 108, 101, 115, 46, 32, 32, 79, 118, 101, 114, 114, 105, 100, 105, 110, 103, 32, 116, 104, 101, 109, 32, 119, 111, 117, 108, 100, 10, 37, 32, 98, 101, 32, 109, 111, 114, 101, 32, 108, 105, 107, 101, 108, 121, 32, 116, 111, 32, 99, 97, 117, 115, 101, 32, 116, 114, 111, 117, 98, 108, 101, 32, 116, 104, 97, 110, 32, 104, 101, 108, 112, 46, 32, 32, 79, 110, 32, 116, 104, 101, 32, 111, 116, 104, 101, 114, 32, 104, 97, 110, 100, 44, 32, 116, 104, 101, 10, 37, 32, 98, 117, 108, 107, 32, 111, 102, 32, 112, 97, 99, 107, 97, 103, 101, 115, 32, 97, 110, 100, 32, 102, 111, 110, 116, 115, 32, 97, 114, 101, 32, 105, 110, 32, 84, 69, 88, 77, 70, 68, 73, 83, 84, 44, 32, 97, 110, 100, 32, 108, 111, 99, 97, 108, 108, 121, 45, 105, 110, 115, 116, 97, 108, 108, 101, 100, 10, 37, 32, 118, 101, 114, 115, 105, 111, 110, 115, 32, 115, 104, 111, 117, 108, 100, 32, 116, 97, 107, 101, 32, 112, 114, 101, 99, 101, 100, 101, 110, 99, 101, 32, 111, 118, 101, 114, 32, 116, 104, 111, 115, 101, 32, 45, 45, 32, 97, 108, 116, 104, 111, 117, 103, 104, 32, 105, 116, 32, 105, 115, 32, 103, 101, 110, 101, 114, 97, 108, 108, 121, 10, 37, 32, 97, 32, 115, 111, 117, 114, 99, 101, 32, 111, 102, 32, 99, 111, 110, 102, 117, 115, 105, 111, 110, 32, 116, 111, 32, 104, 97, 118, 101, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 118, 101, 114, 115, 105, 111, 110, 115, 32, 111, 102, 32, 97, 32, 112, 97, 99, 107, 97, 103, 101, 10, 37, 32, 105, 110, 115, 116, 97, 108, 108, 101, 100, 44, 32, 119, 104, 97, 116, 101, 118, 101, 114, 32, 116, 104, 101, 32, 116, 114, 101, 101, 115, 44, 32, 115, 111, 32, 116, 114, 121, 32, 116, 111, 32, 97, 118, 111, 105, 100, 32, 105, 116, 46, 10, 84, 69, 88, 77, 70, 32, 61, 32, 123, 36, 84, 69, 88, 77, 70, 67, 79, 78, 70, 73, 71, 44, 36, 84, 69, 88, 77, 70, 86, 65, 82, 44, 36, 84, 69, 88, 77, 70, 72, 79, 77, 69, 44, 33, 33, 36, 84, 69, 88, 77, 70, 83, 89, 83, 67, 79, 78, 70, 73, 71, 44, 33, 33, 36, 84, 69, 88, 77, 70, 83, 89, 83, 86, 65, 82, 44, 33, 33, 36, 84, 69, 88, 77, 70, 77, 65, 73, 78, 44, 33, 33, 36, 84, 69, 88, 77, 70, 76, 79, 67, 65, 76, 44, 33, 33, 36, 84, 69, 88, 77, 70, 68, 73, 83, 84, 125, 10, 10, 37, 32, 87, 104, 101, 114, 101, 32, 116, 111, 32, 108, 111, 111, 107, 32, 102, 111, 114, 32, 108, 115, 45, 82, 32, 102, 105, 108, 101, 115, 46, 32, 32, 84, 104, 101, 114, 101, 32, 110, 101, 101, 100, 32, 110, 111, 116, 32, 98, 101, 32, 97, 110, 32, 108, 115, 45, 82, 32, 105, 110, 32, 116, 104, 101, 10, 37, 32, 100, 105, 114, 101, 99, 116, 111, 114, 105, 101, 115, 32, 105, 110, 32, 116, 104, 105, 115, 32, 112, 97, 116, 104, 44, 32, 98, 117, 116, 32, 105, 102, 32, 116, 104, 101, 114, 101, 32, 105, 115, 32, 111, 110, 101, 44, 32, 75, 112, 97, 116, 104, 115, 101, 97, 32, 119, 105, 108, 108, 32, 117, 115, 101, 32, 105, 116, 46, 10, 37, 32, 66, 121, 32, 100, 101, 102, 97, 117, 108, 116, 44, 32, 116, 104, 105, 115, 32, 105, 115, 32, 111, 110, 108, 121, 32, 116, 104, 101, 32, 33, 33, 32, 101, 108, 101, 109, 101, 110, 116, 115, 32, 111, 102, 32, 84, 69, 88, 77, 70, 44, 32, 115, 111, 32, 116, 104, 97, 116, 32, 109, 107, 116, 101, 120, 108, 115, 114, 10, 37, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 99, 114, 101, 97, 116, 101, 32, 108, 115, 45, 82, 32, 102, 105, 108, 101, 115, 32, 105, 110, 32, 116, 104, 101, 32, 110, 111, 110, 45, 33, 33, 32, 101, 108, 101, 109, 101, 110, 116, 115, 32, 45, 45, 32, 98, 101, 99, 97, 117, 115, 101, 32, 105, 102, 32, 97, 110, 10, 37, 32, 108, 115, 45, 82, 32, 105, 115, 32, 112, 114, 101, 115, 101, 110, 116, 44, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 100, 44, 32, 97, 110, 100, 32, 116, 104, 101, 32, 100, 105, 115, 107, 32, 119, 105, 108, 108, 32, 110, 111, 116, 32, 98, 101, 32, 115, 101, 97, 114, 99, 104, 101, 100, 46, 10, 37, 32, 84, 104, 105, 115, 32, 105, 115, 32, 97, 114, 103, 117, 97, 98, 108, 121, 32, 97, 32, 98, 117, 103, 32, 105, 110, 32, 107, 112, 97, 116, 104, 115, 101, 97, 46, 10, 84, 69, 88, 77, 70, 68, 66, 83, 32, 61, 32, 123, 33, 33, 36, 84, 69, 88, 77, 70, 83, 89, 83, 67, 79, 78, 70, 73, 71, 44, 33, 33, 36, 84, 69, 88, 77, 70, 83, 89, 83, 86, 65, 82, 44, 33, 33, 36, 84, 69, 88, 77, 70, 77, 65, 73, 78, 44, 33, 33, 36, 84, 69, 88, 77, 70, 76, 79, 67, 65, 76, 44, 33, 33, 36, 84, 69, 88, 77, 70, 68, 73, 83, 84, 125, 10, 10, 37, 32, 84, 104, 101, 32, 115, 121, 115, 116, 101, 109, 32, 116, 114, 101, 101, 115, 46, 32, 32, 84, 104, 101, 115, 101, 32, 97, 114, 101, 32, 116, 104, 101, 32, 116, 114, 101, 101, 115, 32, 116, 104, 97, 116, 32, 97, 114, 101, 32, 115, 104, 97, 114, 101, 100, 32, 98, 121, 32, 97, 108, 108, 32, 117, 115, 101, 114, 115, 46, 10, 37, 32, 73, 102, 32, 97, 32, 116, 114, 101, 101, 32, 97, 112, 112, 101, 97, 114, 115, 32, 105, 110, 32, 116, 104, 105, 115, 32, 108, 105, 115, 116, 44, 32, 116, 104, 101, 32, 109, 107, 116, 101, 120, 42, 32, 115, 99, 114, 105, 112, 116, 115, 32, 119, 105, 108, 108, 32, 117, 115, 101, 10, 37, 32, 86, 65, 82, 84, 69, 88, 70, 79, 78, 84, 83, 32, 102, 111, 114, 32, 103, 101, 110, 101, 114, 97, 116, 101, 100, 32, 102, 105, 108, 101, 115, 44, 32, 105, 102, 32, 116, 104, 101, 32, 111, 114, 105, 103, 105, 110, 97, 108, 32, 116, 114, 101, 101, 32, 105, 115, 110, 39, 116, 32, 119, 114, 105, 116, 97, 98, 108, 101, 59, 10, 37, 32, 111, 116, 104, 101, 114, 119, 105, 115, 101, 32, 116, 104, 101, 32, 99, 117, 114, 114, 101, 110, 116, 32, 119, 111, 114, 107, 105, 110, 103, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 105, 115, 32, 117, 115, 101, 100, 46, 10, 83, 89, 83, 84, 69, 88, 77, 70, 32, 61, 32, 36, 84, 69, 88, 77, 70, 83, 89, 83, 86, 65, 82, 59, 36, 84, 69, 88, 77, 70, 77, 65, 73, 78, 59, 36, 84, 69, 88, 77, 70, 76, 79, 67, 65, 76, 59, 36, 84, 69, 88, 77, 70, 68, 73, 83, 84, 10, 10, 37, 32, 87, 104, 101, 114, 101, 32, 103, 101, 110, 101, 114, 97, 116, 101, 100, 32, 102, 111, 110, 116, 115, 32, 109, 97, 121, 32, 98, 101, 32, 119, 114, 105, 116, 116, 101, 110, 46, 32, 32, 84, 104, 105, 115, 32, 116, 114, 101, 101, 32, 105, 115, 32, 117, 115, 101, 100, 32, 119, 104, 101, 110, 32, 116, 104, 101, 32, 115, 111, 117, 114, 99, 101, 115, 10, 37, 32, 119, 101, 114, 101, 32, 102, 111, 117, 110, 100, 32, 105, 110, 32, 97, 32, 115, 121, 115, 116, 101, 109, 32, 116, 114, 101, 101, 32, 97, 110, 100, 32, 101, 105, 116, 104, 101, 114, 32, 116, 104, 97, 116, 32, 116, 114, 101, 101, 32, 119, 97, 115, 110, 39, 116, 32, 119, 114, 105, 116, 97, 98, 108, 101, 44, 32, 111, 114, 32, 116, 104, 101, 10, 37, 32, 118, 97, 114, 102, 111, 110, 116, 115, 32, 102, 101, 97, 116, 117, 114, 101, 32, 119, 97, 115, 32, 101, 110, 97, 98, 108, 101, 100, 32, 105, 110, 32, 77, 84, 95, 70, 69, 65, 84, 85, 82, 69, 83, 32, 105, 110, 32, 109, 107, 116, 101, 120, 46, 99, 110, 102, 46, 10, 86, 65, 82, 84, 69, 88, 70, 79, 78, 84, 83, 32, 61, 32, 47, 102, 111, 110, 116, 115, 10, 10, 37, 32, 79, 110, 32, 115, 111, 109, 101, 32, 115, 121, 115, 116, 101, 109, 115, 44, 32, 116, 104, 101, 114, 101, 32, 119, 105, 108, 108, 32, 98, 101, 32, 97, 32, 115, 121, 115, 116, 101, 109, 32, 116, 114, 101, 101, 32, 119, 104, 105, 99, 104, 32, 99, 111, 110, 116, 97, 105, 110, 115, 32, 97, 108, 108, 32, 116, 104, 101, 32, 102, 111, 110, 116, 10, 37, 32, 102, 105, 108, 101, 115, 32, 116, 104, 97, 116, 32, 109, 97, 121, 32, 98, 101, 32, 99, 114, 101, 97, 116, 101, 100, 32, 97, 115, 32, 119, 101, 108, 108, 32, 97, 115, 32, 116, 104, 101, 32, 102, 111, 114, 109, 97, 116, 115, 46, 32, 32, 70, 111, 114, 32, 101, 120, 97, 109, 112, 108, 101, 10, 37, 32, 32, 32, 84, 69, 88, 77, 70, 86, 65, 82, 32, 61, 32, 47, 118, 97, 114, 47, 108, 105, 98, 47, 116, 101, 120, 109, 102, 10, 37, 32, 105, 115, 32, 117, 115, 101, 100, 32, 105, 110, 32, 109, 97, 110, 121, 32, 100, 105, 115, 116, 114, 111, 115, 46, 32, 32, 73, 110, 32, 116, 104, 105, 115, 32, 99, 97, 115, 101, 44, 32, 115, 101, 116, 32, 86, 65, 82, 84, 69, 88, 70, 79, 78, 84, 83, 32, 108, 105, 107, 101, 32, 116, 104, 105, 115, 10, 37, 86, 65, 82, 84, 69, 88, 70, 79, 78, 84, 83, 32, 61, 32, 36, 84, 69, 88, 77, 70, 86, 65, 82, 47, 102, 111, 110, 116, 115, 10, 37, 32, 97, 110, 100, 32, 100, 111, 32, 110, 111, 116, 32, 109, 101, 110, 116, 105, 111, 110, 32, 105, 116, 32, 105, 110, 32, 84, 69, 88, 77, 70, 68, 66, 83, 32, 40, 98, 117, 116, 32, 95, 100, 111, 95, 32, 109, 101, 110, 116, 105, 111, 110, 32, 84, 69, 88, 77, 70, 86, 65, 82, 41, 46, 10, 37, 10, 37, 32, 82, 101, 109, 111, 118, 101, 32, 36, 86, 65, 82, 84, 69, 88, 70, 79, 78, 84, 83, 32, 102, 114, 111, 109, 32, 84, 69, 88, 77, 70, 68, 66, 83, 32, 105, 102, 32, 116, 104, 101, 32, 86, 65, 82, 84, 69, 88, 70, 79, 78, 84, 83, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 105, 115, 32, 98, 101, 108, 111, 119, 10, 37, 32, 111, 110, 101, 32, 111, 102, 32, 116, 104, 101, 32, 84, 69, 88, 77, 70, 32, 100, 105, 114, 101, 99, 116, 111, 114, 105, 101, 115, 32, 40, 97, 118, 111, 105, 100, 115, 32, 111, 118, 101, 114, 108, 97, 112, 112, 105, 110, 103, 32, 108, 115, 45, 82, 32, 102, 105, 108, 101, 115, 41, 46, 10, 10, 10, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 10, 37, 32, 85, 115, 117, 97, 108, 108, 121, 32, 121, 111, 117, 32, 119, 105, 108, 108, 32, 110, 111, 116, 32, 110, 101, 101, 100, 32, 116, 111, 32, 101, 100, 105, 116, 32, 97, 110, 121, 32, 111, 102, 32, 116, 104, 101, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 32, 118, 97, 114, 105, 97, 98, 108, 101, 115, 46, 10, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 10, 10, 37, 32, 87, 69, 66, 50, 67, 32, 105, 115, 32, 102, 111, 114, 32, 87, 101, 98, 50, 67, 32, 115, 112, 101, 99, 105, 102, 105, 99, 32, 102, 105, 108, 101, 115, 46, 32, 32, 84, 104, 101, 32, 99, 117, 114, 114, 101, 110, 116, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 109, 97, 121, 32, 110, 111, 116, 32, 98, 101, 10, 37, 32, 97, 32, 103, 111, 111, 100, 32, 112, 108, 97, 99, 101, 32, 116, 111, 32, 108, 111, 111, 107, 32, 102, 111, 114, 32, 116, 104, 101, 109, 46, 10, 87, 69, 66, 50, 67, 32, 61, 32, 47, 119, 101, 98, 50, 99, 10, 10, 37, 32, 84, 69, 88, 73, 78, 80, 85, 84, 83, 32, 105, 115, 32, 102, 111, 114, 32, 84, 101, 88, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 115, 32, 45, 45, 32, 105, 46, 101, 46, 44, 32, 97, 110, 121, 116, 104, 105, 110, 103, 32, 116, 111, 32, 98, 101, 32, 102, 111, 117, 110, 100, 32, 98, 121, 32, 92, 105, 110, 112, 117, 116, 10, 37, 32, 111, 114, 32, 92, 111, 112, 101, 110, 105, 110, 44, 32, 105, 110, 99, 108, 117, 100, 105, 110, 103, 32, 46, 115, 116, 121, 44, 32, 46, 101, 112, 115, 44, 32, 101, 116, 99, 46, 32, 32, 87, 101, 32, 115, 112, 101, 99, 105, 102, 121, 32, 112, 97, 116, 104, 115, 32, 102, 111, 114, 32, 97, 108, 108, 32, 107, 110, 111, 119, 110, 10, 37, 32, 102, 111, 114, 109, 97, 116, 115, 44, 32, 112, 97, 115, 116, 32, 111, 114, 32, 112, 114, 101, 115, 101, 110, 116, 46, 32, 32, 78, 111, 116, 32, 97, 108, 108, 32, 111, 102, 32, 116, 104, 101, 109, 32, 97, 114, 101, 32, 98, 117, 105, 108, 116, 32, 116, 104, 101, 115, 101, 32, 100, 97, 121, 115, 46, 10, 10, 37, 32, 80, 108, 97, 105, 110, 32, 84, 101, 88, 46, 32, 32, 72, 97, 118, 101, 32, 116, 104, 101, 32, 99, 111, 109, 109, 97, 110, 100, 32, 116, 101, 120, 32, 99, 104, 101, 99, 107, 32, 97, 108, 108, 32, 100, 105, 114, 101, 99, 116, 111, 114, 105, 101, 115, 32, 97, 115, 32, 97, 32, 108, 97, 115, 116, 10, 37, 32, 114, 101, 115, 111, 114, 116, 44, 32, 119, 101, 32, 109, 97, 121, 32, 104, 97, 118, 101, 32, 112, 108, 97, 105, 110, 45, 99, 111, 109, 112, 97, 116, 105, 98, 108, 101, 32, 115, 116, 117, 102, 102, 32, 97, 110, 121, 119, 104, 101, 114, 101, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 10, 37, 32, 70, 111, 110, 116, 105, 110, 115, 116, 32, 110, 101, 101, 100, 115, 32, 116, 111, 32, 114, 101, 97, 100, 32, 97, 102, 109, 32, 102, 105, 108, 101, 115, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 102, 111, 110, 116, 105, 110, 115, 116, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 123, 116, 101, 120, 44, 102, 111, 110, 116, 115, 47, 97, 102, 109, 125, 47, 47, 10, 10, 37, 32, 79, 116, 104, 101, 114, 32, 112, 108, 97, 105, 110, 45, 98, 97, 115, 101, 100, 32, 102, 111, 114, 109, 97, 116, 115, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 97, 109, 115, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 97, 109, 115, 116, 101, 120, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 99, 115, 112, 108, 97, 105, 110, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 99, 115, 112, 108, 97, 105, 110, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 101, 112, 108, 97, 105, 110, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 101, 112, 108, 97, 105, 110, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 102, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 102, 111, 114, 109, 97, 116, 101, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 109, 101, 120, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 109, 101, 120, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 116, 101, 120, 105, 110, 102, 111, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 116, 101, 120, 105, 110, 102, 111, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 10, 37, 32, 76, 97, 84, 101, 88, 32, 50, 101, 32, 115, 112, 101, 99, 105, 102, 105, 99, 32, 109, 97, 99, 114, 111, 115, 32, 97, 114, 101, 32, 115, 116, 111, 114, 101, 100, 32, 105, 110, 32, 108, 97, 116, 101, 120, 47, 44, 32, 109, 97, 99, 114, 111, 115, 32, 116, 104, 97, 116, 32, 99, 97, 110, 32, 111, 110, 108, 121, 32, 98, 101, 10, 37, 32, 117, 115, 101, 100, 32, 119, 105, 116, 104, 32, 50, 46, 48, 57, 32, 105, 110, 32, 108, 97, 116, 101, 120, 50, 48, 57, 47, 46, 32, 32, 73, 110, 32, 97, 100, 100, 105, 116, 105, 111, 110, 44, 32, 119, 101, 32, 108, 111, 111, 107, 32, 105, 110, 32, 116, 104, 101, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 10, 37, 32, 108, 97, 116, 101, 120, 50, 48, 57, 44, 32, 117, 115, 101, 102, 117, 108, 32, 102, 111, 114, 32, 109, 97, 99, 114, 111, 115, 32, 116, 104, 97, 116, 32, 119, 101, 114, 101, 32, 119, 114, 105, 116, 116, 101, 110, 32, 102, 111, 114, 32, 50, 46, 48, 57, 32, 97, 110, 100, 32, 100, 111, 32, 110, 111, 116, 10, 37, 32, 109, 101, 110, 116, 105, 111, 110, 32, 50, 101, 32, 97, 116, 32, 97, 108, 108, 44, 32, 98, 117, 116, 32, 99, 97, 110, 32, 98, 101, 32, 117, 115, 101, 100, 32, 119, 105, 116, 104, 32, 50, 101, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 99, 115, 108, 97, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 99, 115, 108, 97, 116, 101, 120, 44, 99, 115, 112, 108, 97, 105, 110, 44, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 108, 97, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 108, 97, 116, 101, 120, 50, 48, 57, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 108, 97, 116, 101, 120, 50, 48, 57, 44, 103, 101, 110, 101, 114, 105, 99, 44, 108, 97, 116, 101, 120, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 111, 108, 97, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 10, 37, 32, 77, 76, 84, 101, 88, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 102, 114, 108, 97, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 102, 114, 101, 110, 99, 104, 44, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 102, 114, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 102, 114, 101, 110, 99, 104, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 109, 108, 108, 97, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 109, 108, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 10, 37, 32, 101, 45, 84, 101, 88, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 101, 108, 97, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 101, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 10, 37, 32, 112, 100, 102, 84, 101, 88, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 112, 100, 102, 99, 115, 108, 97, 116, 101, 120, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 99, 115, 108, 97, 116, 101, 120, 44, 99, 115, 112, 108, 97, 105, 110, 44, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 112, 100, 102, 99, 115, 112, 108, 97, 105, 110, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 99, 115, 112, 108, 97, 105, 110, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 112, 100, 102, 108, 97, 116, 101, 120, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 112, 100, 102, 109, 101, 120, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 109, 101, 120, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 117, 116, 102, 56, 109, 101, 120, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 109, 101, 120, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 112, 100, 102, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 112, 100, 102, 116, 101, 120, 105, 110, 102, 111, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 116, 101, 120, 105, 110, 102, 111, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 112, 100, 102, 97, 109, 115, 116, 101, 120, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 97, 109, 115, 116, 101, 120, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 10, 37, 32, 112, 100, 102, 101, 84, 101, 88, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 112, 100, 102, 101, 108, 97, 116, 101, 120, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 112, 100, 102, 101, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 10, 37, 32, 112, 100, 102, 120, 84, 101, 88, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 112, 100, 102, 120, 108, 97, 116, 101, 120, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 112, 100, 102, 120, 109, 101, 120, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 109, 101, 120, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 112, 100, 102, 120, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 10, 37, 32, 76, 117, 97, 84, 101, 88, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 108, 117, 97, 108, 97, 116, 101, 120, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 108, 117, 97, 108, 97, 116, 101, 120, 44, 108, 97, 116, 101, 120, 44, 108, 117, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 108, 117, 97, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 108, 117, 97, 116, 101, 120, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 100, 118, 105, 108, 117, 97, 108, 97, 116, 101, 120, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 108, 117, 97, 108, 97, 116, 101, 120, 44, 108, 97, 116, 101, 120, 44, 108, 117, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 100, 118, 105, 108, 117, 97, 116, 101, 120, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 108, 117, 97, 116, 101, 120, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 10, 37, 32, 88, 101, 84, 101, 88, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 120, 101, 108, 97, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 120, 101, 108, 97, 116, 101, 120, 44, 108, 97, 116, 101, 120, 44, 120, 101, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 120, 101, 112, 108, 97, 105, 110, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 120, 101, 112, 108, 97, 105, 110, 44, 101, 112, 108, 97, 105, 110, 44, 112, 108, 97, 105, 110, 44, 120, 101, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 120, 101, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 120, 101, 116, 101, 120, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 10, 37, 32, 79, 109, 101, 103, 97, 32, 47, 32, 65, 108, 101, 112, 104, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 97, 108, 101, 112, 104, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 101, 108, 97, 109, 98, 100, 97, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 108, 97, 109, 98, 100, 97, 44, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 101, 111, 109, 101, 103, 97, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 108, 97, 109, 98, 100, 97, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 108, 97, 109, 98, 100, 97, 44, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 108, 97, 109, 101, 100, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 108, 97, 109, 101, 100, 44, 108, 97, 109, 98, 100, 97, 44, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 111, 109, 101, 103, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 10, 37, 32, 112, 40, 76, 97, 41, 84, 101, 88, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 112, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 112, 116, 101, 120, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 112, 108, 97, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 112, 108, 97, 116, 101, 120, 44, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 10, 37, 32, 101, 112, 84, 101, 88, 44, 32, 97, 110, 100, 32, 102, 111, 114, 32, 112, 109, 112, 111, 115, 116, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 101, 112, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 112, 116, 101, 120, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 46, 112, 109, 112, 111, 115, 116, 32, 61, 32, 101, 112, 116, 101, 120, 10, 10, 37, 32, 40, 101, 41, 117, 112, 40, 76, 97, 41, 84, 101, 88, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 117, 112, 108, 97, 116, 101, 120, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 117, 112, 108, 97, 116, 101, 120, 44, 112, 108, 97, 116, 101, 120, 44, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 117, 112, 116, 101, 120, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 117, 112, 116, 101, 120, 44, 112, 116, 101, 120, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 101, 117, 112, 116, 101, 120, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 117, 112, 116, 101, 120, 44, 112, 116, 101, 120, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 125, 47, 47, 10, 10, 37, 32, 112, 66, 105, 98, 84, 101, 88, 32, 98, 105, 98, 108, 105, 111, 103, 114, 97, 112, 104, 105, 101, 115, 32, 97, 110, 100, 32, 115, 116, 121, 108, 101, 32, 102, 105, 108, 101, 115, 46, 10, 66, 73, 66, 73, 78, 80, 85, 84, 83, 46, 112, 98, 105, 98, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 123, 112, 98, 105, 98, 116, 101, 120, 44, 98, 105, 98, 116, 101, 120, 125, 47, 98, 105, 98, 47, 47, 10, 66, 83, 84, 73, 78, 80, 85, 84, 83, 46, 112, 98, 105, 98, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 123, 112, 98, 105, 98, 116, 101, 120, 44, 98, 105, 98, 116, 101, 120, 125, 47, 98, 115, 116, 47, 47, 10, 10, 37, 32, 67, 111, 110, 84, 101, 88, 116, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 99, 111, 110, 116, 101, 120, 116, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 99, 111, 110, 116, 101, 120, 116, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 125, 47, 47, 10, 10, 37, 32, 106, 97, 100, 101, 116, 101, 120, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 106, 97, 100, 101, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 106, 97, 100, 101, 116, 101, 120, 44, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 112, 100, 102, 106, 97, 100, 101, 116, 101, 120, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 106, 97, 100, 101, 116, 101, 120, 44, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 10, 37, 32, 88, 77, 76, 84, 101, 88, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 120, 109, 108, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 120, 109, 108, 116, 101, 120, 44, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 112, 100, 102, 120, 109, 108, 116, 101, 120, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123].concat([120, 109, 108, 116, 101, 120, 44, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 10, 37, 32, 77, 105, 115, 99, 101, 108, 108, 97, 110, 121, 44, 32, 110, 111, 32, 108, 111, 110, 103, 101, 114, 32, 98, 117, 105, 108, 116, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 108, 97, 109, 115, 116, 101, 120, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 108, 97, 109, 115, 116, 101, 120, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 108, 111, 108, 108, 105, 112, 111, 112, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 108, 111, 108, 108, 105, 112, 111, 112, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 102, 114, 112, 100, 102, 108, 97, 116, 101, 120, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 102, 114, 101, 110, 99, 104, 44, 108, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 102, 114, 112, 100, 102, 116, 101, 120, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 102, 114, 101, 110, 99, 104, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 10, 37, 32, 69, 97, 114, 108, 105, 101, 114, 32, 101, 110, 116, 114, 105, 101, 115, 32, 111, 118, 101, 114, 114, 105, 100, 101, 32, 108, 97, 116, 101, 114, 32, 111, 110, 101, 115, 44, 32, 115, 111, 32, 112, 117, 116, 32, 116, 104, 105, 115, 32, 103, 101, 110, 101, 114, 105, 99, 32, 111, 110, 101, 32, 108, 97, 115, 116, 46, 10, 84, 69, 88, 73, 78, 80, 85, 84, 83, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 47, 123, 36, 112, 114, 111, 103, 110, 97, 109, 101, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 10, 37, 32, 116, 116, 102, 50, 116, 102, 109, 46, 10, 84, 84, 70, 50, 84, 70, 77, 73, 78, 80, 85, 84, 83, 32, 61, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 59, 47, 116, 116, 102, 50, 112, 107, 47, 47, 10, 10, 37, 32, 77, 101, 116, 97, 102, 111, 110, 116, 44, 32, 77, 101, 116, 97, 80, 111, 115, 116, 32, 105, 110, 112, 117, 116, 115, 46, 10, 77, 70, 73, 78, 80, 85, 84, 83, 32, 61, 32, 46, 59, 47, 109, 101, 116, 97, 102, 111, 110, 116, 47, 47, 59, 123, 36, 84, 69, 88, 77, 70, 47, 102, 111, 110, 116, 115, 44, 36, 86, 65, 82, 84, 69, 88, 70, 79, 78, 84, 83, 125, 47, 115, 111, 117, 114, 99, 101, 47, 47, 10, 77, 80, 73, 78, 80, 85, 84, 83, 32, 61, 32, 46, 59, 47, 109, 101, 116, 97, 112, 111, 115, 116, 47, 47, 10, 10, 37, 32, 68, 117, 109, 112, 32, 102, 105, 108, 101, 115, 32, 40, 102, 109, 116, 47, 98, 97, 115, 101, 47, 109, 101, 109, 41, 32, 102, 111, 114, 32, 118, 105, 114, 123, 116, 101, 120, 44, 109, 102, 44, 109, 112, 125, 32, 116, 111, 32, 114, 101, 97, 100, 46, 10, 37, 32, 87, 101, 32, 119, 97, 110, 116, 32, 116, 111, 32, 102, 105, 110, 100, 32, 116, 104, 101, 32, 101, 110, 103, 105, 110, 101, 45, 115, 112, 101, 99, 105, 102, 105, 99, 32, 102, 105, 108, 101, 44, 32, 101, 46, 103, 46, 44, 32, 99, 111, 110, 116, 45, 101, 110, 46, 102, 109, 116, 32, 99, 97, 110, 10, 37, 32, 101, 120, 105, 115, 116, 32, 117, 110, 100, 101, 114, 32, 98, 111, 116, 104, 32, 112, 100, 102, 116, 101, 120, 47, 32, 97, 110, 100, 32, 120, 101, 116, 101, 120, 47, 46, 32, 32, 66, 117, 116, 32, 106, 117, 115, 116, 32, 105, 110, 32, 99, 97, 115, 101, 32, 115, 111, 109, 101, 32, 102, 111, 114, 109, 97, 116, 115, 10, 37, 32, 101, 110, 100, 32, 117, 112, 32, 119, 105, 116, 104, 111, 117, 116, 32, 97, 110, 32, 101, 110, 103, 105, 110, 101, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 44, 32, 108, 111, 111, 107, 32, 100, 105, 114, 101, 99, 116, 108, 121, 32, 105, 110, 32, 119, 101, 98, 50, 99, 47, 32, 116, 111, 111, 46, 10, 37, 32, 87, 101, 32, 114, 101, 112, 101, 97, 116, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 32, 116, 104, 114, 101, 101, 32, 116, 105, 109, 101, 115, 32, 98, 101, 99, 97, 117, 115, 101, 32, 111, 102, 32, 116, 104, 101, 32, 119, 97, 121, 32, 102, 109, 116, 117, 116, 105, 108, 10, 37, 32, 105, 115, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 59, 32, 105, 102, 32, 119, 101, 32, 117, 115, 101, 32, 36, 123, 84, 69, 88, 70, 79, 82, 77, 65, 84, 83, 125, 44, 32, 116, 104, 101, 32, 109, 112, 111, 115, 116, 47, 109, 102, 47, 101, 116, 99, 46, 32, 102, 111, 114, 109, 97, 116, 115, 10, 37, 32, 119, 105, 108, 108, 32, 110, 111, 116, 32, 98, 101, 32, 102, 111, 117, 110, 100, 46, 10, 84, 69, 88, 70, 79, 82, 77, 65, 84, 83, 32, 61, 32, 46, 59, 47, 119, 101, 98, 50, 99, 123, 47, 36, 101, 110, 103, 105, 110, 101, 44, 125, 10, 77, 70, 66, 65, 83, 69, 83, 32, 61, 32, 46, 59, 47, 119, 101, 98, 50, 99, 123, 47, 36, 101, 110, 103, 105, 110, 101, 44, 125, 10, 77, 80, 77, 69, 77, 83, 32, 61, 32, 46, 59, 47, 119, 101, 98, 50, 99, 123, 47, 36, 101, 110, 103, 105, 110, 101, 44, 125, 10, 37, 10, 37, 32, 65, 115, 32, 111, 102, 32, 50, 48, 48, 56, 44, 32, 112, 111, 111, 108, 32, 102, 105, 108, 101, 115, 32, 100, 111, 110, 39, 116, 32, 101, 120, 105, 115, 116, 32, 97, 110, 121, 32, 109, 111, 114, 101, 32, 40, 116, 104, 101, 32, 115, 116, 114, 105, 110, 103, 115, 32, 97, 114, 101, 32, 99, 111, 109, 112, 105, 108, 101, 100, 10, 37, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 98, 105, 110, 97, 114, 105, 101, 115, 41, 44, 32, 98, 117, 116, 32, 106, 117, 115, 116, 32, 105, 110, 32, 99, 97, 115, 101, 32, 115, 111, 109, 101, 116, 104, 105, 110, 103, 32, 101, 120, 112, 101, 99, 116, 115, 32, 116, 111, 32, 102, 105, 110, 100, 32, 116, 104, 101, 115, 101, 58, 10, 84, 69, 88, 80, 79, 79, 76, 32, 61, 32, 46, 59, 47, 119, 101, 98, 50, 99, 10, 77, 70, 80, 79, 79, 76, 32, 61, 32, 36, 123, 84, 69, 88, 80, 79, 79, 76, 125, 10, 77, 80, 80, 79, 79, 76, 32, 61, 32, 36, 123, 84, 69, 88, 80, 79, 79, 76, 125, 10, 10, 37, 32, 115, 117, 112, 112, 111, 114, 116, 32, 116, 104, 101, 32, 111, 114, 105, 103, 105, 110, 97, 108, 32, 120, 100, 118, 105, 46, 32, 32, 77, 117, 115, 116, 32, 99, 111, 109, 101, 32, 98, 101, 102, 111, 114, 101, 32, 116, 104, 101, 32, 103, 101, 110, 101, 114, 105, 99, 32, 115, 101, 116, 116, 105, 110, 103, 115, 46, 10, 80, 75, 70, 79, 78, 84, 83, 46, 88, 68, 118, 105, 32, 32, 32, 61, 32, 46, 59, 47, 37, 115, 59, 36, 86, 65, 82, 84, 69, 88, 70, 79, 78, 84, 83, 47, 112, 107, 47, 123, 37, 109, 44, 109, 111, 100, 101, 108, 101, 115, 115, 125, 47, 47, 10, 86, 70, 70, 79, 78, 84, 83, 46, 88, 68, 118, 105, 32, 32, 32, 61, 32, 46, 59, 47, 37, 115, 10, 80, 83, 72, 69, 65, 68, 69, 82, 83, 46, 88, 68, 118, 105, 32, 61, 32, 46, 59, 47, 37, 113, 123, 100, 118, 105, 112, 115, 44, 102, 111, 110, 116, 115, 47, 116, 121, 112, 101, 49, 125, 47, 47, 10, 84, 69, 88, 80, 73, 67, 84, 83, 46, 88, 68, 118, 105, 32, 32, 61, 32, 46, 59, 47, 37, 113, 123, 100, 118, 105, 112, 115, 44, 116, 101, 120, 125, 47, 47, 10, 10, 37, 32, 68, 101, 118, 105, 99, 101, 45, 105, 110, 100, 101, 112, 101, 110, 100, 101, 110, 116, 32, 102, 111, 110, 116, 32, 109, 101, 116, 114, 105, 99, 32, 102, 105, 108, 101, 115, 46, 10, 86, 70, 70, 79, 78, 84, 83, 32, 61, 32, 46, 59, 47, 102, 111, 110, 116, 115, 47, 118, 102, 47, 47, 10, 84, 70, 77, 70, 79, 78, 84, 83, 32, 61, 32, 46, 59, 123, 36, 84, 69, 88, 77, 70, 47, 102, 111, 110, 116, 115, 44, 36, 86, 65, 82, 84, 69, 88, 70, 79, 78, 84, 83, 125, 47, 116, 102, 109, 47, 47, 10, 10, 37, 32, 84, 104, 101, 32, 36, 77, 65, 75, 69, 84, 69, 88, 95, 77, 79, 68, 69, 32, 98, 101, 108, 111, 119, 32, 109, 101, 97, 110, 115, 32, 116, 104, 101, 32, 100, 114, 105, 118, 101, 114, 115, 32, 119, 105, 108, 108, 32, 110, 111, 116, 32, 117, 115, 101, 32, 97, 32, 99, 120, 32, 102, 111, 110, 116, 32, 119, 104, 101, 110, 10, 37, 32, 116, 104, 101, 32, 109, 111, 100, 101, 32, 105, 115, 32, 114, 105, 99, 111, 104, 46, 32, 32, 73, 102, 32, 110, 111, 32, 109, 111, 100, 101, 32, 105, 115, 32, 101, 120, 112, 108, 105, 99, 105, 116, 108, 121, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 44, 32, 107, 112, 115, 101, 95, 112, 114, 111, 103, 95, 105, 110, 105, 116, 10, 37, 32, 115, 101, 116, 115, 32, 77, 65, 75, 69, 84, 69, 88, 95, 77, 79, 68, 69, 32, 116, 111, 32, 47, 44, 32, 115, 111, 32, 97, 108, 108, 32, 115, 117, 98, 100, 105, 114, 101, 99, 116, 111, 114, 105, 101, 115, 32, 97, 114, 101, 32, 115, 101, 97, 114, 99, 104, 101, 100, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 32, 109, 97, 110, 117, 97, 108, 46, 10, 37, 32, 84, 104, 101, 32, 109, 111, 100, 101, 108, 101, 115, 115, 32, 112, 97, 114, 116, 32, 103, 117, 97, 114, 97, 110, 116, 101, 101, 115, 32, 116, 104, 97, 116, 32, 98, 105, 116, 109, 97, 112, 115, 32, 102, 111, 114, 32, 80, 111, 115, 116, 83, 99, 114, 105, 112, 116, 32, 102, 111, 110, 116, 115, 32, 97, 114, 101, 32, 102, 111, 117, 110, 100, 46, 10, 80, 75, 70, 79, 78, 84, 83, 32, 61, 32, 46, 59, 123, 36, 84, 69, 88, 77, 70, 47, 102, 111, 110, 116, 115, 44, 36, 86, 65, 82, 84, 69, 88, 70, 79, 78, 84, 83, 125, 47, 112, 107, 47, 123, 36, 77, 65, 75, 69, 84, 69, 88, 95, 77, 79, 68, 69, 44, 109, 111, 100, 101, 108, 101, 115, 115, 125, 47, 47, 10, 10, 37, 32, 83, 105, 109, 105, 108, 97, 114, 108, 121, 32, 102, 111, 114, 32, 116, 104, 101, 32, 71, 70, 32, 102, 111, 114, 109, 97, 116, 44, 32, 119, 104, 105, 99, 104, 32, 111, 110, 108, 121, 32, 114, 101, 109, 97, 105, 110, 115, 32, 105, 110, 32, 101, 120, 105, 115, 116, 101, 110, 99, 101, 32, 98, 101, 99, 97, 117, 115, 101, 10, 37, 32, 77, 101, 116, 97, 102, 111, 110, 116, 32, 111, 117, 116, 112, 117, 116, 115, 32, 105, 116, 32, 40, 97, 110, 100, 32, 77, 70, 32, 105, 115, 110, 39, 116, 32, 103, 111, 105, 110, 103, 32, 116, 111, 32, 99, 104, 97, 110, 103, 101, 41, 46, 10, 71, 70, 70, 79, 78, 84, 83, 32, 61, 32, 46, 59, 47, 102, 111, 110, 116, 115, 47, 103, 102, 47, 36, 77, 65, 75, 69, 84, 69, 88, 95, 77, 79, 68, 69, 47, 47, 10, 10, 37, 32, 65, 32, 98, 97, 99, 107, 117, 112, 32, 102, 111, 114, 32, 80, 75, 70, 79, 78, 84, 83, 32, 97, 110, 100, 32, 71, 70, 70, 79, 78, 84, 83, 46, 32, 78, 111, 116, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 97, 110, 121, 116, 104, 105, 110, 103, 46, 10, 71, 76, 89, 80, 72, 70, 79, 78, 84, 83, 32, 61, 32, 46, 59, 47, 102, 111, 110, 116, 115, 10, 10, 37, 32, 65, 32, 112, 108, 97, 99, 101, 32, 116, 111, 32, 112, 117, 116, 104, 32, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 32, 116, 104, 97, 116, 32, 100, 111, 101, 115, 110, 39, 116, 32, 102, 105, 116, 32, 116, 104, 101, 32, 111, 116, 104, 101, 114, 32, 102, 111, 110, 116, 32, 99, 97, 116, 101, 103, 111, 114, 105, 101, 115, 46, 10, 77, 73, 83, 67, 70, 79, 78, 84, 83, 32, 61, 32, 46, 59, 47, 102, 111, 110, 116, 115, 47, 109, 105, 115, 99, 47, 47, 10, 10, 37, 32, 102, 111, 110, 116, 32, 110, 97, 109, 101, 32, 109, 97, 112, 32, 102, 105, 108, 101, 115, 46, 32, 32, 84, 104, 105, 115, 32, 105, 115, 110, 39, 116, 32, 106, 117, 115, 116, 32, 102, 111, 110, 116, 115, 47, 109, 97, 112, 47, 47, 32, 98, 101, 99, 97, 117, 115, 101, 32, 67, 111, 110, 84, 101, 88, 116, 10, 37, 32, 119, 97, 110, 116, 115, 32, 115, 117, 112, 112, 111, 114, 116, 32, 102, 111, 114, 32, 104, 97, 118, 105, 110, 103, 32, 102, 105, 108, 101, 115, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 110, 97, 109, 101, 32, 105, 110, 32, 116, 104, 101, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 10, 37, 32, 115, 117, 98, 100, 105, 114, 115, 46, 32, 32, 77, 97, 121, 98, 101, 32, 105, 102, 32, 116, 104, 101, 32, 112, 114, 111, 103, 114, 97, 109, 115, 32, 101, 118, 101, 114, 32, 103, 101, 116, 32, 117, 110, 105, 102, 105, 101, 100, 32, 116, 111, 32, 97, 99, 99, 101, 112, 116, 105, 110, 103, 32, 116, 104, 101, 32, 115, 97, 109, 101, 10, 37, 32, 109, 97, 112, 32, 102, 105, 108, 101, 32, 115, 121, 110, 116, 97, 120, 32, 116, 104, 101, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 32, 99, 97, 110, 32, 98, 101, 32, 115, 105, 109, 112, 108, 105, 102, 105, 101, 100, 32, 97, 103, 97, 105, 110, 46, 10, 84, 69, 88, 70, 79, 78, 84, 77, 65, 80, 83, 32, 61, 32, 46, 59, 47, 102, 111, 110, 116, 115, 47, 109, 97, 112, 47, 123, 36, 112, 114, 111, 103, 110, 97, 109, 101, 44, 112, 100, 102, 116, 101, 120, 44, 100, 118, 105, 112, 115, 44, 125, 47, 47, 10, 10, 37, 32, 66, 105, 98, 84, 101, 88, 32, 98, 105, 98, 108, 105, 111, 103, 114, 97, 112, 104, 105, 101, 115, 32, 97, 110, 100, 32, 115, 116, 121, 108, 101, 32, 102, 105, 108, 101, 115, 46, 32, 32, 98, 105, 98, 116, 101, 120, 56, 32, 97, 108, 115, 111, 32, 117, 115, 101, 115, 32, 116, 104, 101, 115, 101, 46, 10, 66, 73, 66, 73, 78, 80, 85, 84, 83, 32, 61, 32, 46, 59, 47, 98, 105, 98, 116, 101, 120, 47, 98, 105, 98, 47, 47, 10, 66, 83, 84, 73, 78, 80, 85, 84, 83, 32, 61, 32, 46, 59, 47, 98, 105, 98, 116, 101, 120, 47, 123, 98, 115, 116, 44, 99, 115, 102, 125, 47, 47, 10, 10, 37, 32, 77, 108, 66, 105, 98, 84, 101, 88, 46, 10, 77, 76, 66, 73, 66, 73, 78, 80, 85, 84, 83, 32, 61, 32, 46, 59, 47, 98, 105, 98, 116, 101, 120, 47, 98, 105, 98, 47, 123, 109, 108, 98, 105, 98, 44, 125, 47, 47, 10, 77, 76, 66, 83, 84, 73, 78, 80, 85, 84, 83, 32, 61, 32, 46, 59, 47, 98, 105, 98, 116, 101, 120, 47, 123, 109, 108, 98, 115, 116, 44, 98, 115, 116, 125, 47, 47, 10, 10, 37, 32, 46, 114, 105, 115, 32, 97, 110, 100, 32, 46, 98, 108, 116, 120, 109, 108, 32, 98, 105, 98, 108, 105, 111, 103, 114, 97, 112, 104, 121, 32, 102, 111, 114, 109, 97, 116, 115, 46, 10, 82, 73, 83, 73, 78, 80, 85, 84, 83, 32, 61, 32, 46, 59, 47, 98, 105, 98, 116, 101, 120, 47, 114, 105, 115, 47, 47, 10, 66, 76, 84, 88, 77, 76, 73, 78, 80, 85, 84, 83, 32, 61, 32, 46, 59, 47, 98, 105, 98, 116, 101, 120, 47, 98, 108, 116, 120, 109, 108, 47, 47, 10, 10, 37, 32, 77, 70, 84, 32, 115, 116, 121, 108, 101, 32, 102, 105, 108, 101, 115, 46, 10, 77, 70, 84, 73, 78, 80, 85, 84, 83, 32, 61, 32, 46, 59, 47, 109, 102, 116, 47, 47, 10, 10, 37, 32, 80, 111, 115, 116, 83, 99, 114, 105, 112, 116, 32, 104, 101, 97, 100, 101, 114, 115, 32, 97, 110, 100, 32, 112, 114, 111, 108, 111, 103, 117, 101, 115, 32, 40, 46, 112, 114, 111, 41, 59, 32, 117, 110, 102, 111, 114, 116, 117, 110, 97, 116, 101, 108, 121, 44, 32, 115, 111, 109, 101, 32, 112, 114, 111, 103, 114, 97, 109, 115, 10, 37, 32, 97, 108, 115, 111, 32, 117, 115, 101, 32, 116, 104, 105, 115, 32, 102, 111, 114, 32, 97, 99, 101, 115, 115, 105, 110, 103, 32, 102, 111, 110, 116, 32, 102, 105, 108, 101, 115, 32, 40, 101, 110, 99, 44, 32, 116, 121, 112, 101, 49, 44, 32, 116, 114, 117, 101, 116, 121, 112, 101, 41, 10, 84, 69, 88, 80, 83, 72, 69, 65, 68, 69, 82, 83, 32, 61, 32, 46, 59, 47, 123, 100, 118, 105, 112, 115, 44, 102, 111, 110, 116, 115, 47, 123, 101, 110, 99, 44, 116, 121, 112, 101, 49, 44, 116, 121, 112, 101, 52, 50, 44, 116, 121, 112, 101, 51, 125, 125, 47, 47, 10, 84, 69, 88, 80, 83, 72, 69, 65, 68, 69, 82, 83, 46, 103, 115, 102, 116, 111, 112, 107, 32, 61, 32, 46, 59, 47, 123, 100, 118, 105, 112, 115, 44, 102, 111, 110, 116, 115, 47, 123, 101, 110, 99, 44, 116, 121, 112, 101, 49, 44, 116, 121, 112, 101, 52, 50, 44, 116, 121, 112, 101, 51, 44, 116, 114, 117, 101, 116, 121, 112, 101, 125, 125, 47, 47, 10, 10, 37, 32, 79, 83, 70, 79, 78, 84, 68, 73, 82, 32, 105, 115, 32, 116, 111, 32, 112, 114, 111, 118, 105, 100, 101, 32, 97, 32, 99, 111, 110, 118, 101, 110, 105, 101, 110, 116, 32, 104, 111, 111, 107, 32, 102, 111, 114, 32, 97, 108, 108, 111, 119, 105, 110, 103, 32, 84, 101, 88, 32, 116, 111, 32, 102, 105, 110, 100, 10, 37, 32, 102, 111, 110, 116, 115, 32, 105, 110, 115, 116, 97, 108, 108, 101, 100, 32, 111, 110, 32, 116, 104, 101, 32, 115, 121, 115, 116, 101, 109, 32, 40, 111, 117, 116, 115, 105, 100, 101, 32, 111, 102, 32, 84, 101, 88, 41, 46, 32, 32, 65, 110, 32, 101, 109, 112, 116, 121, 32, 100, 101, 102, 97, 117, 108, 116, 10, 37, 32, 118, 97, 108, 117, 101, 32, 119, 111, 117, 108, 100, 32, 97, 100, 100, 32, 34, 47, 47, 34, 32, 116, 111, 32, 116, 104, 101, 32, 115, 101, 97, 114, 99, 104, 32, 112, 97, 116, 104, 115, 44, 32, 115, 111, 32, 119, 101, 32, 103, 105, 118, 101, 32, 105, 116, 32, 97, 32, 100, 117, 109, 109, 121, 32, 118, 97, 108, 117, 101, 46, 10, 79, 83, 70, 79, 78, 84, 68, 73, 82, 32, 61, 32, 47, 112, 108, 101, 97, 115, 101, 47, 115, 101, 116, 47, 111, 115, 102, 111, 110, 116, 100, 105, 114, 47, 105, 110, 47, 116, 104, 101, 47, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 10, 10, 37, 32, 80, 111, 115, 116, 83, 99, 114, 105, 112, 116, 32, 84, 121, 112, 101, 32, 49, 32, 111, 117, 116, 108, 105, 110, 101, 32, 102, 111, 110, 116, 115, 46, 10, 84, 49, 70, 79, 78, 84, 83, 32, 61, 32, 46, 59, 47, 102, 111, 110, 116, 115, 47, 116, 121, 112, 101, 49, 47, 47, 59, 36, 79, 83, 70, 79, 78, 84, 68, 73, 82, 47, 47, 10, 10, 37, 32, 80, 111, 115, 116, 83, 99, 114, 105, 112, 116, 32, 65, 70, 77, 32, 109, 101, 116, 114, 105, 99, 32, 102, 105, 108, 101, 115, 46, 10, 65, 70, 77, 70, 79, 78, 84, 83, 32, 61, 32, 46, 59, 47, 102, 111, 110, 116, 115, 47, 97, 102, 109, 47, 47, 59, 36, 79, 83, 70, 79, 78, 84, 68, 73, 82, 47, 47, 10, 10, 37, 32, 84, 114, 117, 101, 84, 121, 112, 101, 32, 111, 117, 116, 108, 105, 110, 101, 32, 102, 111, 110, 116, 115, 46, 10, 84, 84, 70, 79, 78, 84, 83, 32, 61, 32, 46, 59, 47, 102, 111, 110, 116, 115, 47, 123, 116, 114, 117, 101, 116, 121, 112, 101, 44, 111, 112, 101, 110, 116, 121, 112, 101, 125, 47, 47, 59, 36, 79, 83, 70, 79, 78, 84, 68, 73, 82, 47, 47, 10, 10, 37, 32, 79, 112, 101, 110, 84, 121, 112, 101, 32, 111, 117, 116, 108, 105, 110, 101, 32, 102, 111, 110, 116, 115, 46, 10, 79, 80, 69, 78, 84, 89, 80, 69, 70, 79, 78, 84, 83, 32, 61, 32, 46, 59, 47, 102, 111, 110, 116, 115, 47, 123, 111, 112, 101, 110, 116, 121, 112, 101, 44, 116, 114, 117, 101, 116, 121, 112, 101, 125, 47, 47, 59, 36, 79, 83, 70, 79, 78, 84, 68, 73, 82, 47, 47, 10, 10, 37, 32, 84, 121, 112, 101, 32, 52, 50, 32, 111, 117, 116, 108, 105, 110, 101, 32, 102, 111, 110, 116, 115, 46, 10, 84, 52, 50, 70, 79, 78, 84, 83, 32, 61, 32, 46, 59, 47, 102, 111, 110, 116, 115, 47, 116, 121, 112, 101, 52, 50, 47, 47, 10, 10, 37, 32, 76, 105, 103, 97, 116, 117, 114, 101, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 32, 102, 105, 108, 101, 115, 46, 10, 76, 73, 71, 70, 79, 78, 84, 83, 32, 61, 32, 32, 46, 59, 47, 102, 111, 110, 116, 115, 47, 108, 105, 103, 47, 47, 10, 10, 37, 32, 68, 118, 105, 112, 115, 39, 32, 99, 111, 110, 102, 105, 103, 46, 42, 32, 102, 105, 108, 101, 115, 32, 40, 116, 104, 105, 115, 32, 110, 97, 109, 101, 32, 115, 104, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 116, 97, 114, 116, 32, 119, 105, 116, 104, 32, 96, 84, 69, 88, 39, 33, 41, 46, 10, 84, 69, 88, 67, 79, 78, 70, 73, 71, 32, 61, 32, 36, 84, 69, 88, 77, 70, 47, 100, 118, 105, 112, 115, 47, 47, 10, 10, 37, 32, 77, 97, 107, 101, 105, 110, 100, 101, 120, 32, 115, 116, 121, 108, 101, 32, 40, 46, 105, 115, 116, 41, 32, 102, 105, 108, 101, 115, 46, 10, 73, 78, 68, 69, 88, 83, 84, 89, 76, 69, 32, 61, 32, 46, 59, 47, 109, 97, 107, 101, 105, 110, 100, 101, 120, 47, 47, 10, 10, 37, 32, 70, 111, 110, 116, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 102, 105, 108, 101, 115, 32, 40, 46, 101, 110, 99, 41, 46, 10, 69, 78, 67, 70, 79, 78, 84, 83, 32, 61, 32, 46, 59, 47, 102, 111, 110, 116, 115, 47, 101, 110, 99, 47, 47, 10, 10, 37, 32, 67, 77, 97, 112, 32, 102, 105, 108, 101, 115, 46, 10, 67, 77, 65, 80, 70, 79, 78, 84, 83, 32, 61, 32, 46, 59, 47, 102, 111, 110, 116, 115, 47, 99, 109, 97, 112, 47, 47, 10, 10, 37, 32, 83, 117, 98, 102, 111, 110, 116, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 32, 102, 105, 108, 101, 115, 46, 10, 83, 70, 68, 70, 79, 78, 84, 83, 32, 61, 32, 46, 59, 47, 102, 111, 110, 116, 115, 47, 115, 102, 100, 47, 47, 10, 10, 37, 32, 79, 112, 101, 110, 84, 121, 112, 101, 32, 102, 101, 97, 116, 117, 114, 101, 32, 102, 105, 108, 101, 115, 32, 40, 46, 102, 101, 97, 41, 46, 10, 70, 79, 78, 84, 70, 69, 65, 84, 85, 82, 69, 83, 61, 46, 59, 47, 102, 111, 110, 116, 115, 47, 102, 101, 97, 47, 47, 10, 10, 37, 32, 46, 99, 105, 100, 32, 97, 110, 100, 32, 46, 99, 105, 100, 109, 97, 112, 10, 70, 79, 78, 84, 67, 73, 68, 77, 65, 80, 83, 61, 46, 59, 47, 102, 111, 110, 116, 115, 47, 99, 105, 100, 47, 47, 10, 10, 37, 32, 112, 100, 102, 116, 101, 120, 32, 99, 111, 110, 102, 105, 103, 32, 102, 105, 108, 101, 115, 58, 10, 80, 68, 70, 84, 69, 88, 67, 79, 78, 70, 73, 71, 32, 61, 32, 46, 59, 47, 112, 100, 102, 116, 101, 120, 47, 123, 36, 112, 114, 111, 103, 110, 97, 109, 101, 44, 125, 47, 47, 10, 10, 37, 32, 85, 115, 101, 100, 32, 98, 121, 32, 68, 77, 80, 32, 40, 100, 105, 116, 114, 111, 102, 102, 45, 116, 111, 45, 109, 112, 120, 41, 44, 32, 99, 97, 108, 108, 101, 100, 32, 98, 121, 32, 109, 97, 107, 101, 109, 112, 120, 32, 45, 116, 114, 111, 102, 102, 46, 10, 84, 82, 70, 79, 78, 84, 83, 32, 61, 32, 47, 117, 115, 114, 123, 47, 108, 111, 99, 97, 108, 44, 125, 47, 115, 104, 97, 114, 101, 47, 103, 114, 111, 102, 102, 47, 123, 99, 117, 114, 114, 101, 110, 116, 47, 102, 111, 110, 116, 44, 115, 105, 116, 101, 45, 102, 111, 110, 116, 125, 47, 100, 101, 118, 112, 115, 10, 77, 80, 83, 85, 80, 80, 79, 82, 84, 32, 61, 32, 46, 59, 47, 109, 101, 116, 97, 112, 111, 115, 116, 47, 115, 117, 112, 112, 111, 114, 116, 10, 10, 37, 32, 70, 111, 114, 32, 120, 100, 118, 105, 32, 116, 111, 32, 102, 105, 110, 100, 32, 109, 105, 109, 101, 46, 116, 121, 112, 101, 115, 32, 97, 110, 100, 32, 46, 109, 97, 105, 108, 99, 97, 112, 44, 32, 105, 102, 32, 116, 104, 101, 121, 32, 100, 111, 32, 110, 111, 116, 32, 101, 120, 105, 115, 116, 32, 105, 110, 10, 37, 32, 126, 46, 32, 32, 84, 104, 101, 115, 101, 32, 97, 114, 101, 32, 115, 105, 110, 103, 108, 101, 32, 100, 105, 114, 101, 99, 116, 111, 114, 105, 101, 115, 44, 32, 110, 111, 116, 32, 112, 97, 116, 104, 115, 46, 10, 37, 32, 40, 66, 117, 116, 32, 116, 104, 101, 32, 100, 101, 102, 97, 117, 108, 116, 32, 109, 105, 109, 101, 46, 116, 121, 112, 101, 115, 44, 32, 97, 116, 32, 108, 101, 97, 115, 116, 44, 32, 109, 97, 121, 32, 119, 101, 108, 108, 32, 115, 117, 102, 102, 105, 99, 101, 46, 41, 10, 77, 73, 77, 69, 76, 73, 66, 68, 73, 82, 32, 61, 32, 36, 84, 69, 88, 77, 70, 82, 79, 79, 84, 47, 101, 116, 99, 10, 77, 65, 73, 76, 67, 65, 80, 76, 73, 66, 68, 73, 82, 32, 61, 32, 36, 84, 69, 88, 77, 70, 82, 79, 79, 84, 47, 101, 116, 99, 10, 10, 37, 32, 68, 101, 102, 97, 117, 108, 116, 32, 115, 101, 116, 116, 105, 110, 103, 115, 32, 102, 111, 114, 32, 116, 104, 101, 32, 102, 111, 110, 116, 99, 111, 110, 102, 105, 103, 32, 108, 105, 98, 114, 97, 114, 121, 32, 97, 115, 32, 117, 115, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 87, 105, 110, 100, 111, 119, 115, 10, 37, 32, 118, 101, 114, 115, 105, 111, 110, 115, 32, 111, 102, 32, 120, 101, 116, 101, 120, 47, 120, 100, 118, 105, 112, 100, 102, 109, 120, 46, 32, 32, 79, 110, 32, 85, 110, 105, 120, 105, 115, 104, 32, 115, 121, 115, 116, 101, 109, 115, 44, 32, 102, 111, 110, 116, 99, 111, 110, 102, 105, 103, 32, 105, 103, 110, 111, 114, 101, 115, 10, 37, 32, 116, 104, 105, 115, 46, 32, 32, 67, 111, 110, 84, 101, 88, 84, 32, 77, 107, 73, 86, 32, 40, 97, 108, 108, 32, 112, 108, 97, 116, 102, 111, 114, 109, 115, 41, 32, 97, 108, 115, 111, 32, 117, 115, 101, 32, 116, 104, 101, 115, 101, 32, 118, 97, 108, 117, 101, 115, 46, 10, 37, 32, 10, 70, 79, 78, 84, 67, 79, 78, 70, 73, 71, 95, 70, 73, 76, 69, 32, 61, 32, 102, 111, 110, 116, 115, 46, 99, 111, 110, 102, 10, 70, 79, 78, 84, 67, 79, 78, 70, 73, 71, 95, 80, 65, 84, 72, 32, 61, 32, 36, 84, 69, 88, 77, 70, 83, 89, 83, 86, 65, 82, 47, 102, 111, 110, 116, 115, 47, 99, 111, 110, 102, 10, 70, 67, 95, 67, 65, 67, 72, 69, 68, 73, 82, 32, 61, 32, 36, 84, 69, 88, 77, 70, 83, 89, 83, 86, 65, 82, 47, 102, 111, 110, 116, 115, 47, 99, 97, 99, 104, 101, 10, 10, 37, 32, 84, 101, 88, 32, 100, 111, 99, 117, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 97, 110, 100, 32, 115, 111, 117, 114, 99, 101, 32, 102, 105, 108, 101, 115, 44, 32, 102, 111, 114, 32, 117, 115, 101, 32, 119, 105, 116, 104, 32, 116, 101, 120, 100, 111, 99, 32, 97, 110, 100, 32, 107, 112, 115, 101, 119, 104, 105, 99, 104, 46, 10, 84, 69, 88, 68, 79, 67, 83, 32, 61, 32, 36, 84, 69, 88, 77, 70, 47, 100, 111, 99, 47, 47, 10, 84, 69, 88, 83, 79, 85, 82, 67, 69, 83, 32, 61, 32, 46, 59, 47, 115, 111, 117, 114, 99, 101, 47, 47, 10, 10, 37, 32, 87, 101, 98, 32, 97, 110, 100, 32, 67, 87, 101, 98, 32, 105, 110, 112, 117, 116, 32, 112, 97, 116, 104, 115, 46, 10, 87, 69, 66, 73, 78, 80, 85, 84, 83, 32, 61, 32, 46, 59, 47, 119, 101, 98, 47, 47, 10, 67, 87, 69, 66, 73, 78, 80, 85, 84, 83, 32, 61, 32, 46, 59, 47, 99, 119, 101, 98, 47, 47, 10, 10, 37, 32, 79, 109, 101, 103, 97, 45, 114, 101, 108, 97, 116, 101, 100, 32, 102, 111, 110, 116, 115, 32, 97, 110, 100, 32, 111, 116, 104, 101, 114, 32, 102, 105, 108, 101, 115, 46, 10, 79, 70, 77, 70, 79, 78, 84, 83, 32, 61, 32, 46, 59, 123, 36, 84, 69, 88, 77, 70, 47, 102, 111, 110, 116, 115, 44, 36, 86, 65, 82, 84, 69, 88, 70, 79, 78, 84, 83, 125, 47, 123, 111, 102, 109, 44, 116, 102, 109, 125, 47, 47, 10, 79, 80, 76, 70, 79, 78, 84, 83, 32, 61, 32, 46, 59, 123, 36, 84, 69, 88, 77, 70, 47, 102, 111, 110, 116, 115, 44, 36, 86, 65, 82, 84, 69, 88, 70, 79, 78, 84, 83, 125, 47, 111, 112, 108, 47, 47, 10, 79, 86, 70, 70, 79, 78, 84, 83, 32, 61, 32, 46, 59, 123, 36, 84, 69, 88, 77, 70, 47, 102, 111, 110, 116, 115, 44, 36, 86, 65, 82, 84, 69, 88, 70, 79, 78, 84, 83, 125, 47, 123, 111, 118, 102, 44, 118, 102, 125, 47, 47, 10, 79, 86, 80, 70, 79, 78, 84, 83, 32, 61, 32, 46, 59, 123, 36, 84, 69, 88, 77, 70, 47, 102, 111, 110, 116, 115, 44, 36, 86, 65, 82, 84, 69, 88, 70, 79, 78, 84, 83, 125, 47, 111, 118, 112, 47, 47, 10, 79, 84, 80, 73, 78, 80, 85, 84, 83, 32, 61, 32, 46, 59, 47, 111, 109, 101, 103, 97, 47, 111, 116, 112, 47, 47, 10, 79, 67, 80, 73, 78, 80, 85, 84, 83, 32, 61, 32, 46, 59, 47, 111, 109, 101, 103, 97, 47, 111, 99, 112, 47, 47, 10, 10, 37, 32, 83, 111, 109, 101, 32, 97, 100, 100, 105, 116, 105, 111, 110, 97, 108, 32, 105, 110, 112, 117, 116, 32, 118, 97, 114, 105, 97, 98, 108, 101, 115, 32, 102, 111, 114, 32, 115, 101, 118, 101, 114, 97, 108, 32, 112, 114, 111, 103, 114, 97, 109, 115, 46, 32, 32, 73, 102, 32, 121, 111, 117, 32, 97, 100, 100, 10, 37, 32, 97, 32, 112, 114, 111, 103, 114, 97, 109, 32, 116, 104, 97, 116, 32, 117, 115, 101, 115, 32, 116, 104, 101, 32, 96, 111, 116, 104, 101, 114, 32, 116, 101, 120, 116, 32, 102, 105, 108, 101, 115, 39, 32, 111, 114, 32, 96, 111, 116, 104, 101, 114, 32, 98, 105, 110, 97, 114, 121, 32, 102, 105, 108, 101, 115, 39, 10, 37, 32, 115, 101, 97, 114, 99, 104, 32, 102, 111, 114, 109, 97, 116, 115, 44, 32, 121, 111, 117, 39, 108, 108, 32, 119, 97, 110, 116, 32, 116, 111, 32, 97, 100, 100, 32, 116, 104, 101, 105, 114, 32, 118, 97, 114, 105, 97, 98, 108, 101, 115, 32, 104, 101, 114, 101, 32, 97, 115, 32, 119, 101, 108, 108, 46, 10, 84, 52, 72, 84, 73, 78, 80, 85, 84, 83, 32, 32, 32, 61, 32, 46, 59, 47, 116, 101, 120, 52, 104, 116, 47, 47, 10, 10, 37, 37, 32, 116, 52, 104, 116, 32, 117, 116, 105, 108, 105, 116, 121, 44, 32, 115, 104, 97, 114, 105, 110, 103, 32, 102, 105, 108, 101, 115, 32, 119, 105, 116, 104, 32, 84, 101, 88, 52, 104, 116, 10, 84, 69, 88, 52, 72, 84, 70, 79, 78, 84, 83, 69, 84, 61, 97, 108, 105, 97, 115, 44, 105, 115, 111, 56, 56, 53, 57, 44, 117, 110, 105, 99, 111, 100, 101, 10, 84, 69, 88, 52, 72, 84, 73, 78, 80, 85, 84, 83, 32, 61, 32, 46, 59, 47, 116, 101, 120, 52, 104, 116, 47, 98, 97, 115, 101, 47, 47, 59, 47, 116, 101, 120, 52, 104, 116, 47, 104, 116, 45, 102, 111, 110, 116, 115, 47, 123, 36, 84, 69, 88, 52, 72, 84, 70, 79, 78, 84, 83, 69, 84, 125, 47, 47, 10, 10, 37, 32, 84, 101, 88, 119, 111, 114, 107, 115, 32, 101, 100, 105, 116, 111, 114, 32, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 32, 97, 110, 100, 32, 115, 101, 116, 116, 105, 110, 103, 115, 10, 84, 87, 95, 76, 73, 66, 80, 65, 84, 72, 32, 61, 32, 36, 84, 69, 88, 77, 70, 67, 79, 78, 70, 73, 71, 47, 116, 101, 120, 119, 111, 114, 107, 115, 10, 84, 87, 95, 73, 78, 73, 80, 65, 84, 72, 32, 61, 32, 36, 84, 87, 95, 76, 73, 66, 80, 65, 84, 72, 10, 10, 37, 32, 70, 111, 114, 32, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 100, 111, 32, 110, 111, 116, 32, 108, 111, 111, 107, 32, 105, 110, 32, 46, 32, 102, 111, 114, 32, 100, 118, 105, 112, 100, 102, 109, 120, 46, 99, 102, 103, 44, 32, 115, 105, 110, 99, 101, 32, 116, 104, 101, 32, 68, 32, 111, 112, 116, 105, 111, 110, 10, 37, 32, 119, 111, 117, 108, 100, 32, 97, 108, 108, 111, 119, 32, 99, 111, 109, 109, 97, 110, 100, 32, 101, 120, 101, 99, 117, 116, 105, 111, 110, 46, 10, 68, 86, 73, 80, 68, 70, 77, 88, 73, 78, 80, 85, 84, 83, 32, 61, 32, 36, 84, 69, 88, 77, 70, 47, 100, 118, 105, 112, 100, 102, 109, 120, 10, 10, 37, 32, 76, 117, 97, 32, 110, 101, 101, 100, 115, 32, 116, 111, 32, 108, 111, 111, 107, 32, 105, 110, 32, 84, 69, 88, 73, 78, 80, 85, 84, 83, 32, 102, 111, 114, 32, 108, 117, 97, 32, 115, 99, 114, 105, 112, 116, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 119, 105, 116, 104, 32, 112, 97, 99, 107, 97, 103, 101, 115, 46, 10, 37, 32, 10, 37, 32, 66, 117, 116, 32, 119, 101, 32, 99, 97, 110, 39, 116, 32, 115, 105, 109, 112, 108, 121, 32, 117, 115, 101, 32, 36, 84, 69, 88, 73, 78, 80, 85, 84, 83, 44, 32, 115, 105, 110, 99, 101, 32, 116, 104, 101, 110, 32, 105, 102, 32, 84, 69, 88, 73, 78, 80, 85, 84, 83, 32, 105, 115, 32, 115, 101, 116, 32, 105, 110, 10, 37, 32, 116, 104, 101, 32, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 32, 119, 105, 116, 104, 32, 97, 32, 99, 111, 108, 111, 110, 44, 32, 115, 97, 121, 44, 32, 84, 69, 88, 73, 78, 80, 85, 84, 83, 61, 47, 115, 111, 109, 101, 47, 100, 105, 114, 58, 44, 32, 116, 104, 101, 32, 105, 110, 116, 101, 110, 100, 101, 100, 10, 37, 32, 100, 101, 102, 97, 117, 108, 116, 32, 101, 120, 112, 97, 110, 115, 105, 111, 110, 32, 111, 102, 32, 84, 69, 88, 73, 78, 80, 85, 84, 83, 32, 119, 105, 108, 108, 32, 110, 111, 116, 32, 104, 97, 112, 112, 101, 110, 32, 97, 110, 100, 32, 46, 108, 117, 97, 32, 102, 105, 108, 101, 115, 32, 117, 110, 100, 101, 114, 10, 37, 32, 116, 104, 101, 32, 47, 116, 101, 120, 47, 32, 119, 105, 108, 108, 32, 110, 111, 116, 32, 98, 101, 32, 102, 111, 117, 110, 100, 46, 10, 37, 32, 10, 37, 32, 83, 111, 44, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 116, 104, 101, 32, 84, 69, 88, 73, 78, 80, 85, 84, 83, 46, 42, 108, 117, 97, 108, 97, 116, 101, 120, 32, 118, 97, 108, 117, 101, 115, 32, 97, 115, 32, 76, 85, 65, 73, 78, 80, 85, 84, 83, 46, 42, 108, 117, 97, 108, 97, 116, 101, 120, 46, 10, 37, 32, 84, 104, 101, 32, 100, 101, 102, 97, 117, 108, 116, 32, 76, 85, 65, 73, 78, 80, 85, 84, 83, 32, 115, 117, 102, 102, 105, 99, 101, 115, 115, 32, 102, 111, 114, 32, 108, 117, 97, 116, 101, 120, 32, 97, 110, 100, 32, 100, 118, 105, 108, 117, 97, 116, 101, 120, 46, 10, 37, 10, 76, 85, 65, 73, 78, 80, 85, 84, 83, 46, 108, 117, 97, 108, 97, 116, 101, 120, 32, 61, 32, 46, 59, 47, 115, 99, 114, 105, 112, 116, 115, 47, 123, 36, 112, 114, 111, 103, 110, 97, 109, 101, 44, 36, 101, 110, 103, 105, 110, 101, 44, 125, 47, 123, 108, 117, 97, 44, 125, 47, 47, 59, 47, 116, 101, 120, 47, 123, 108, 117, 97, 108, 97, 116, 101, 120, 44, 108, 97, 116, 101, 120, 44, 108, 117, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 76, 85, 65, 73, 78, 80, 85, 84, 83, 46, 100, 118, 105, 108, 117, 97, 108, 97, 116, 101, 120, 32, 61, 32, 46, 59, 47, 115, 99, 114, 105, 112, 116, 115, 47, 123, 36, 112, 114, 111, 103, 110, 97, 109, 101, 44, 36, 101, 110, 103, 105, 110, 101, 44, 125, 47, 123, 108, 117, 97, 44, 125, 47, 47, 59, 47, 116, 101, 120, 47, 123, 108, 117, 97, 108, 97, 116, 101, 120, 44, 108, 97, 116, 101, 120, 44, 108, 117, 97, 116, 101, 120, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 76, 85, 65, 73, 78, 80, 85, 84, 83, 32, 61, 32, 46, 59, 47, 115, 99, 114, 105, 112, 116, 115, 47, 123, 36, 112, 114, 111, 103, 110, 97, 109, 101, 44, 36, 101, 110, 103, 105, 110, 101, 44, 125, 47, 123, 108, 117, 97, 44, 125, 47, 47, 59, 47, 116, 101, 120, 47, 123, 108, 117, 97, 116, 101, 120, 44, 112, 108, 97, 105, 110, 44, 103, 101, 110, 101, 114, 105, 99, 44, 125, 47, 47, 10, 10, 37, 32, 76, 117, 97, 32, 110, 101, 101, 100, 115, 32, 116, 111, 32, 108, 111, 111, 107, 32, 102, 111, 114, 32, 98, 105, 110, 97, 114, 121, 32, 108, 117, 97, 32, 108, 105, 98, 114, 97, 114, 105, 101, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 119, 105, 116, 104, 32, 112, 97, 99, 107, 97, 103, 101, 115, 46, 10, 67, 76, 85, 65, 73, 78, 80, 85, 84, 83, 32, 61, 32, 46, 59, 47, 108, 105, 98, 47, 123, 36, 112, 114, 111, 103, 110, 97, 109, 101, 44, 36, 101, 110, 103, 105, 110, 101, 44, 125, 47, 108, 117, 97, 47, 47, 10, 10, 37, 32, 65, 114, 99, 104, 105, 116, 101, 99, 116, 117, 114, 101, 32, 105, 110, 100, 101, 112, 101, 110, 100, 101, 110, 116, 32, 101, 120, 101, 99, 117, 116, 97, 98, 108, 101, 115, 46, 10, 84, 69, 88, 77, 70, 83, 67, 82, 73, 80, 84, 83, 32, 61, 32, 36, 84, 69, 88, 77, 70, 47, 115, 99, 114, 105, 112, 116, 115, 47, 123, 36, 112, 114, 111, 103, 110, 97, 109, 101, 44, 36, 101, 110, 103, 105, 110, 101, 44, 125, 47, 47, 10, 10, 37, 32, 79, 116, 104, 101, 114, 32, 108, 97, 110, 103, 117, 97, 103, 101, 115, 46, 10, 74, 65, 86, 65, 73, 78, 80, 85, 84, 83, 32, 32, 32, 61, 32, 46, 59, 47, 115, 99, 114, 105, 112, 116, 115, 47, 123, 36, 112, 114, 111, 103, 110, 97, 109, 101, 44, 36, 101, 110, 103, 105, 110, 101, 44, 125, 47, 106, 97, 118, 97, 47, 47, 10, 80, 69, 82, 76, 73, 78, 80, 85, 84, 83, 32, 32, 32, 61, 32, 46, 59, 47, 115, 99, 114, 105, 112, 116, 115, 47, 123, 36, 112, 114, 111, 103, 110, 97, 109, 101, 44, 36, 101, 110, 103, 105, 110, 101, 44, 125, 47, 112, 101, 114, 108, 47, 47, 10, 80, 89, 84, 72, 79, 78, 73, 78, 80, 85, 84, 83, 32, 61, 32, 46, 59, 47, 115, 99, 114, 105, 112, 116, 115, 47, 123, 36, 112, 114, 111, 103, 110, 97, 109, 101, 44, 36, 101, 110, 103, 105, 110, 101, 44, 125, 47, 112, 121, 116, 104, 111, 110, 47, 47, 10, 82, 85, 66, 89, 73, 78, 80, 85, 84, 83, 32, 32, 32, 61, 32, 46, 59, 47, 115, 99, 114, 105, 112, 116, 115, 47, 123, 36, 112, 114, 111, 103, 110, 97, 109, 101, 44, 36, 101, 110, 103, 105, 110, 101, 44, 125, 47, 114, 117, 98, 121, 47, 47, 10, 10, 10, 37, 37, 32, 84, 104, 101, 32, 109, 107, 116, 101, 120, 42, 32, 115, 99, 114, 105, 112, 116, 115, 32, 114, 101, 108, 121, 32, 111, 110, 32, 75, 80, 83, 69, 95, 68, 79, 84, 46, 32, 68, 111, 32, 110, 111, 116, 32, 115, 101, 116, 32, 105, 116, 32, 105, 110, 32, 116, 104, 101, 32, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 46, 10, 37, 32, 75, 80, 83, 69, 95, 68, 79, 84, 32, 61, 32, 46, 10, 10, 37, 32, 84, 104, 105, 115, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 32, 105, 115, 110, 39, 116, 32, 117, 115, 101, 100, 32, 102, 114, 111, 109, 32, 116, 104, 105, 115, 32, 46, 99, 110, 102, 32, 102, 105, 108, 101, 32, 105, 116, 115, 101, 108, 102, 32, 40, 116, 104, 97, 116, 32, 119, 111, 117, 108, 100, 32, 98, 101, 10, 37, 32, 112, 97, 114, 97, 100, 111, 120, 105, 99, 97, 108, 41, 44, 32, 98, 117, 116, 32, 116, 104, 101, 32, 99, 111, 109, 112, 105, 108, 101, 45, 116, 105, 109, 101, 32, 100, 101, 102, 97, 117, 108, 116, 32, 105, 110, 32, 112, 97, 116, 104, 115, 46, 104, 32, 105, 115, 32, 98, 117, 105, 108, 116, 32, 102, 114, 111, 109, 32, 105, 116, 46, 10, 37, 32, 84, 104, 101, 32, 83, 69, 76, 70, 65, 85, 84, 79, 42, 32, 118, 97, 114, 105, 97, 98, 108, 101, 115, 32, 97, 114, 101, 32, 115, 101, 116, 32, 97, 117, 116, 111, 109, 97, 116, 105, 99, 97, 108, 108, 121, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 108, 111, 99, 97, 116, 105, 111, 110, 32, 111, 102, 10, 37, 32, 97, 114, 103, 118, 91, 48, 93, 44, 32, 105, 110, 32, 107, 112, 115, 101, 95, 115, 101, 116, 95, 112, 114, 111, 103, 114, 97, 109, 95, 110, 97, 109, 101, 46, 10, 37, 32, 10, 37, 32, 84, 104, 105, 115, 32, 109, 97, 105, 110, 32, 116, 101, 120, 109, 102, 46, 99, 110, 102, 32, 102, 105, 108, 101, 32, 105, 115, 32, 105, 110, 115, 116, 97, 108, 108, 101, 100, 44, 32, 102, 111, 114, 32, 97, 32, 114, 101, 108, 101, 97, 115, 101, 32, 89, 89, 89, 89, 44, 32, 105, 110, 32, 97, 10, 37, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 115, 117, 99, 104, 32, 97, 115, 32, 47, 117, 115, 114, 47, 108, 111, 99, 97, 108, 47, 116, 101, 120, 108, 105, 118, 101, 47, 89, 89, 89, 89, 47, 116, 101, 120, 109, 102, 47, 119, 101, 98, 50, 99, 47, 116, 101, 120, 109, 102, 46, 99, 110, 102, 46, 10, 37, 32, 83, 105, 110, 99, 101, 32, 116, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 115, 117, 98, 106, 101, 99, 116, 32, 116, 111, 32, 102, 117, 116, 117, 114, 101, 32, 117, 112, 100, 97, 116, 101, 115, 44, 32, 116, 104, 101, 32, 84, 101, 88, 32, 76, 105, 118, 101, 32, 105, 110, 115, 116, 97, 108, 108, 101, 114, 10, 37, 32, 111, 114, 32, 104, 117, 109, 97, 110, 32, 97, 100, 109, 105, 110, 105, 115, 116, 114, 97, 116, 111, 114, 32, 109, 97, 121, 32, 97, 108, 115, 111, 32, 99, 114, 101, 97, 116, 101, 32, 97, 32, 102, 105, 108, 101, 10, 37, 32, 47, 117, 115, 114, 47, 108, 111, 99, 97, 108, 47, 116, 101, 120, 108, 105, 118, 101, 47, 89, 89, 89, 89, 47, 116, 101, 120, 109, 102, 46, 99, 110, 102, 59, 32, 97, 110, 121, 32, 115, 101, 116, 116, 105, 110, 103, 115, 32, 105, 110, 32, 116, 104, 105, 115, 32, 108, 97, 116, 116, 101, 114, 32, 102, 105, 108, 101, 10, 37, 32, 119, 105, 108, 108, 32, 116, 97, 107, 101, 32, 112, 114, 101, 99, 101, 100, 101, 110, 99, 101, 32, 111, 118, 101, 114, 32, 116, 104, 101, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 111, 110, 101, 32, 117, 110, 100, 101, 114, 32, 116, 101, 120, 109, 102, 47, 119, 101, 98, 50, 99, 46, 10, 37, 32, 10, 37, 32, 70, 111, 114, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 114, 101, 97, 115, 111, 110, 115, 44, 32, 105, 116, 32, 105, 115, 32, 98, 101, 115, 116, 32, 110, 111, 116, 32, 116, 111, 32, 105, 110, 99, 108, 117, 100, 101, 32, 46, 32, 105, 110, 32, 116, 104, 105, 115, 32, 112, 97, 116, 104, 46, 10, 37, 10, 37, 32, 84, 104, 101, 32, 105, 100, 101, 97, 32, 98, 101, 104, 105, 110, 100, 32, 116, 104, 105, 115, 32, 108, 101, 110, 103, 116, 104, 121, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 58, 32, 102, 111, 114, 32, 101, 97, 99, 104, 32, 111, 102, 10, 37, 32, 83, 69, 76, 70, 65, 85, 84, 79, 123, 76, 79, 67, 44, 68, 73, 82, 44, 65, 85, 84, 79, 125, 44, 32, 108, 111, 111, 107, 32, 105, 110, 32, 116, 104, 101, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 44, 10, 37, 32, 116, 104, 101, 110, 32, 116, 104, 101, 32, 115, 117, 98, 100, 105, 114, 101, 99, 116, 111, 114, 105, 101, 115, 32, 115, 104, 97, 114, 101, 47, 116, 101, 120, 109, 102, 45, 108, 111, 99, 97, 108, 32, 97, 110, 100, 32, 115, 104, 97, 114, 101, 47, 116, 101, 120, 109, 102, 44, 10, 37, 32, 116, 104, 101, 110, 32, 46, 47, 116, 101, 120, 109, 102, 45, 108, 111, 99, 97, 108, 32, 97, 110, 100, 32, 46, 47, 116, 101, 120, 109, 102, 46, 10, 37, 32, 10, 37, 32, 72, 111, 119, 101, 118, 101, 114, 44, 32, 119, 101, 32, 119, 97, 110, 116, 32, 116, 111, 32, 105, 110, 99, 108, 117, 100, 101, 32, 111, 110, 101, 32, 109, 111, 114, 101, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 58, 32, 116, 104, 101, 10, 37, 32, 103, 114, 101, 97, 116, 45, 103, 114, 97, 110, 100, 112, 97, 114, 101, 110, 116, 39, 115, 32, 116, 101, 120, 109, 102, 45, 108, 111, 99, 97, 108, 44, 32, 98, 101, 99, 97, 117, 115, 101, 32, 116, 104, 97, 116, 32, 105, 115, 32, 104, 111, 119, 32, 84, 76, 32, 105, 115, 32, 105, 110, 115, 116, 97, 108, 108, 101, 100, 10, 37, 32, 98, 121, 32, 100, 101, 102, 97, 117, 108, 116, 46, 32, 32, 84, 104, 97, 116, 32, 105, 115, 44, 32, 103, 105, 118, 101, 110, 32, 97, 32, 98, 105, 110, 97, 114, 121, 10, 37, 32, 47, 117, 115, 114, 47, 108, 111, 99, 97, 108, 47, 116, 101, 120, 108, 105, 118, 101, 47, 89, 89, 89, 89, 47, 98, 105, 110, 47, 80, 76, 65, 84, 70, 79, 82, 77, 47, 107, 112, 115, 101, 119, 104, 105, 99, 104, 44, 32, 105, 116, 32, 115, 104, 111, 117, 108, 100, 32, 102, 105, 110, 100, 10, 37, 32, 47, 117, 115, 114, 47, 108, 111, 99, 97, 108, 47, 116, 101, 120, 108, 105, 118, 101, 47, 116, 101, 120, 109, 102, 45, 108, 111, 99, 97, 108, 47, 119, 101, 98, 50, 99, 47, 116, 101, 120, 109, 102, 46, 99, 110, 102, 46, 32, 32, 73, 46, 101, 46, 44, 32, 110, 111, 116, 32, 117, 110, 100, 101, 114, 32, 89, 89, 89, 89, 46, 10, 37, 32, 10, 37, 32, 65, 115, 32, 97, 32, 114, 101, 115, 117, 108, 116, 44, 32, 119, 101, 32, 99, 97, 110, 110, 111, 116, 32, 117, 115, 101, 32, 97, 99, 116, 117, 97, 108, 32, 98, 114, 97, 99, 101, 32, 101, 120, 112, 97, 110, 115, 105, 111, 110, 32, 105, 110, 32, 116, 104, 101, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 44, 10, 37, 32, 115, 105, 110, 99, 101, 32, 119, 101, 32, 100, 111, 110, 39, 116, 32, 119, 97, 110, 116, 32, 116, 111, 32, 115, 99, 97, 116, 116, 101, 114, 32, 46, 46, 47, 39, 115, 32, 116, 104, 114, 111, 117, 103, 104, 111, 117, 116, 32, 116, 104, 101, 32, 118, 97, 108, 117, 101, 46, 32, 32, 72, 101, 110, 99, 101, 32, 119, 101, 10, 37, 32, 101, 120, 112, 108, 105, 99, 105, 116, 108, 121, 32, 108, 105, 115, 116, 32, 101, 118, 101, 114, 121, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 46, 32, 32, 65, 114, 103, 117, 97, 98, 108, 121, 32, 109, 111, 114, 101, 32, 117, 110, 100, 101, 114, 115, 116, 97, 110, 100, 97, 98, 108, 101, 32, 116, 104, 105, 115, 10, 37, 32, 119, 97, 121, 32, 97, 110, 121, 119, 97, 121, 46, 10, 37, 10, 84, 69, 88, 77, 70, 67, 78, 70, 32, 61, 32, 123, 92, 10, 47, 44, 92, 10, 47, 115, 104, 97, 114, 101, 47, 116, 101, 120, 109, 102, 45, 108, 111, 99, 97, 108, 47, 119, 101, 98, 50, 99, 44, 36, 83, 69, 76, 70, 65, 85, 84, 79, 76, 79, 67, 47, 115, 104, 97, 114, 101, 47, 116, 101, 120, 109, 102, 47, 119, 101, 98, 50, 99, 44, 92, 10, 47, 116, 101, 120, 109, 102, 45, 108, 111, 99, 97, 108, 47, 119, 101, 98, 50, 99, 44, 47, 116, 101, 120, 109, 102, 47, 119, 101, 98, 50, 99, 44, 92, 10, 44, 92, 10, 47, 115, 104, 97, 114, 101, 47, 116, 101, 120, 109, 102, 45, 108, 111, 99, 97, 108, 47, 119, 101, 98, 50, 99, 44, 47, 115, 104, 97, 114, 101, 47, 116, 101, 120, 109, 102, 47, 119, 101, 98, 50, 99, 44, 92, 10, 47, 116, 101, 120, 109, 102, 45, 108, 111, 99, 97, 108, 47, 119, 101, 98, 50, 99, 44, 47, 116, 101, 120, 109, 102, 47, 119, 101, 98, 50, 99, 44, 92, 10, 47, 46, 46, 47, 116, 101, 120, 109, 102, 45, 108, 111, 99, 97, 108, 47, 119, 101, 98, 50, 99, 44, 92, 10, 44, 92, 10, 47, 115, 104, 97, 114, 101, 47, 116, 101, 120, 109, 102, 45, 108, 111, 99, 97, 108, 47, 119, 101, 98, 50, 99, 44, 47, 115, 104, 97, 114, 101, 47, 116, 101, 120, 109, 102, 47, 119, 101, 98, 50, 99, 44, 92, 10, 47, 116, 101, 120, 109, 102, 45, 108, 111, 99, 97, 108, 47, 119, 101, 98, 50, 99, 44, 47, 116, 101, 120, 109, 102, 47, 119, 101, 98, 50, 99, 92, 10, 125, 10, 37, 10, 37, 32, 70, 111, 114, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 44, 32, 104, 101, 114, 101, 32, 105, 115, 32, 116, 104, 101, 32, 111, 108, 100, 32, 98, 114, 97, 99, 101, 45, 117, 115, 105, 110, 103, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 58, 10, 37, 84, 69, 88, 77, 70, 67, 78, 70, 32, 61, 32, 123, 36, 83, 69, 76, 70, 65, 85, 84, 79, 76, 79, 67, 44, 36, 83, 69, 76, 70, 65, 85, 84, 79, 68, 73, 82, 44, 36, 83, 69, 76, 70, 65, 85, 84, 79, 80, 65, 82, 69, 78, 84, 125, 123, 44, 123, 47, 115, 104, 97, 114, 101, 44, 125, 47, 116, 101, 120, 109, 102, 123, 45, 108, 111, 99, 97, 108, 44, 125, 47, 119, 101, 98, 50, 99, 125, 10, 10, 37, 32, 107, 112, 97, 116, 104, 115, 101, 97, 32, 51, 46, 53, 46, 51, 32, 97, 110, 100, 32, 108, 97, 116, 101, 114, 32, 115, 101, 116, 115, 32, 116, 104, 101, 115, 101, 32, 97, 116, 32, 114, 117, 110, 116, 105, 109, 101, 46, 32, 84, 111, 32, 97, 118, 111, 105, 100, 32, 101, 109, 112, 116, 121, 10, 37, 32, 101, 120, 112, 97, 110, 115, 105, 111, 110, 115, 32, 102, 114, 111, 109, 32, 98, 105, 110, 97, 114, 105, 101, 115, 32, 108, 105, 110, 107, 101, 100, 32, 97, 103, 97, 105, 110, 115, 116, 32, 97, 110, 32, 101, 97, 114, 108, 105, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 111, 102, 32, 116, 104, 101, 10, 37, 32, 108, 105, 98, 114, 97, 114, 121, 44, 32, 119, 101, 32, 115, 101, 116, 32, 36, 112, 114, 111, 103, 110, 97, 109, 101, 32, 97, 110, 100, 32, 36, 101, 110, 103, 105, 110, 101, 32, 116, 111, 32, 115, 111, 109, 101, 116, 104, 105, 110, 103, 32, 110, 111, 110, 45, 101, 109, 112, 116, 121, 58, 10, 112, 114, 111, 103, 110, 97, 109, 101, 32, 61, 32, 117, 110, 115, 101, 116, 112, 114, 111, 103, 110, 97, 109, 101, 10, 101, 110, 103, 105, 110, 101, 32, 61, 32, 117, 110, 115, 101, 116, 101, 110, 103, 105, 110, 101, 10, 10, 10, 37, 32, 12, 32, 80, 97, 114, 116, 32, 50, 58, 32, 79, 112, 116, 105, 111, 110, 115, 46, 10, 10, 37, 32, 73, 102, 32, 116, 104, 105, 115, 32, 111, 112, 116, 105, 111, 110, 32, 105, 115, 32, 115, 101, 116, 32, 116, 111, 32, 116, 114, 117, 101, 44, 32, 96, 116, 101, 120, 32, 97, 46, 98, 39, 32, 119, 105, 108, 108, 32, 108, 111, 111, 107, 32, 102, 105, 114, 115, 116, 32, 102, 111, 114, 32, 97, 46, 98, 46, 116, 101, 120, 10, 37, 32, 40, 119, 105, 116, 104, 105, 110, 32, 101, 97, 99, 104, 32, 112, 97, 116, 104, 32, 101, 108, 101, 109, 101, 110, 116, 41, 44, 32, 97, 110, 100, 32, 116, 104, 101, 110, 32, 102, 111, 114, 32, 97, 46, 98, 44, 32, 105, 46, 101, 46, 44, 32, 119, 101, 32, 116, 114, 121, 32, 115, 116, 97, 110, 100, 97, 114, 100, 10, 37, 32, 101, 120, 116, 101, 110, 115, 105, 111, 110, 115, 32, 102, 105, 114, 115, 116, 46, 32, 32, 73, 102, 32, 116, 104, 105, 115, 32, 105, 115, 32, 102, 97, 108, 115, 101, 44, 32, 119, 101, 32, 102, 105, 114, 115, 116, 32, 108, 111, 111, 107, 32, 102, 111, 114, 32, 97, 46, 98, 32, 97, 110, 100, 32, 116, 104, 101, 110, 10, 37, 32, 97, 46, 98, 46, 116, 101, 120, 44, 32, 105, 46, 101, 46, 44, 32, 119, 101, 32, 116, 114, 121, 32, 116, 104, 101, 32, 110, 97, 109, 101, 32, 97, 115, 45, 105, 115, 32, 102, 105, 114, 115, 116, 46, 10, 37, 10, 37, 32, 66, 111, 116, 104, 32, 110, 97, 109, 101, 115, 32, 97, 114, 101, 32, 97, 108, 119, 97, 121, 115, 32, 116, 114, 105, 101, 100, 59, 32, 116, 104, 101, 32, 100, 105, 102, 102, 101, 114, 101, 110, 99, 101, 32, 105, 115, 32, 116, 104, 101, 32, 111, 114, 100, 101, 114, 32, 105, 110, 32, 119, 104, 105, 99, 104, 32, 116, 104, 101, 121, 10, 37, 32, 97, 114, 101, 32, 116, 114, 105, 101, 100, 46, 32, 32, 84, 104, 101, 32, 115, 101, 116, 116, 105, 110, 103, 32, 97, 112, 112, 108, 105, 101, 115, 32, 116, 111, 32, 97, 108, 108, 32, 115, 101, 97, 114, 99, 104, 101, 115, 44, 32, 110, 111, 116, 32, 106, 117, 115, 116, 32, 46, 116, 101, 120, 46, 10, 37, 10, 37, 32, 84, 104, 105, 115, 32, 115, 101, 116, 116, 105, 110, 103, 32, 111, 110, 108, 121, 32, 97, 102, 102, 101, 99, 116, 115, 32, 110, 97, 109, 101, 115, 32, 98, 101, 105, 110, 103, 32, 108, 111, 111, 107, 101, 100, 32, 117, 112, 32, 119, 104, 105]).concat([99, 104, 32, 42, 97, 108, 114, 101, 97, 100, 121, 42, 32, 104, 97, 118, 101, 10, 37, 32, 97, 110, 32, 101, 120, 116, 101, 110, 115, 105, 111, 110, 46, 32, 32, 65, 32, 110, 97, 109, 101, 32, 119, 105, 116, 104, 111, 117, 116, 32, 97, 110, 32, 101, 120, 116, 101, 110, 115, 105, 111, 110, 32, 40, 101, 46, 103, 46, 44, 32, 96, 116, 101, 120, 32, 115, 116, 111, 114, 121, 39, 41, 32, 119, 105, 108, 108, 10, 37, 32, 97, 108, 119, 97, 121, 115, 32, 104, 97, 118, 101, 32, 97, 110, 32, 101, 120, 116, 101, 110, 115, 105, 111, 110, 32, 97, 100, 100, 101, 100, 32, 102, 105, 114, 115, 116, 46, 10, 37, 10, 37, 32, 84, 104, 101, 32, 100, 101, 102, 97, 117, 108, 116, 32, 105, 115, 32, 116, 114, 117, 101, 44, 32, 98, 101, 99, 97, 117, 115, 101, 32, 119, 101, 32, 97, 108, 114, 101, 97, 100, 121, 32, 97, 118, 111, 105, 100, 32, 97, 100, 100, 105, 110, 103, 32, 116, 104, 101, 32, 115, 116, 97, 110, 100, 97, 114, 100, 10, 37, 32, 101, 120, 116, 101, 110, 115, 105, 111, 110, 40, 115, 41, 32, 105, 110, 32, 116, 104, 101, 32, 117, 115, 117, 97, 108, 32, 99, 97, 115, 101, 115, 46, 32, 32, 69, 46, 103, 46, 44, 32, 98, 97, 98, 101, 108, 46, 115, 116, 121, 32, 119, 105, 108, 108, 32, 111, 110, 108, 121, 32, 108, 111, 111, 107, 32, 102, 111, 114, 10, 37, 32, 98, 97, 98, 101, 108, 46, 115, 116, 121, 44, 32, 110, 111, 116, 32, 98, 97, 98, 101, 108, 46, 115, 116, 121, 46, 116, 101, 120, 44, 32, 114, 101, 103, 97, 114, 100, 108, 101, 115, 115, 32, 111, 102, 32, 116, 104, 105, 115, 32, 115, 101, 116, 116, 105, 110, 103, 46, 10, 116, 114, 121, 95, 115, 116, 100, 95, 101, 120, 116, 101, 110, 115, 105, 111, 110, 95, 102, 105, 114, 115, 116, 32, 61, 32, 116, 10, 10, 37, 32, 69, 110, 97, 98, 108, 101, 32, 115, 121, 115, 116, 101, 109, 32, 99, 111, 109, 109, 97, 110, 100, 115, 32, 118, 105, 97, 32, 92, 119, 114, 105, 116, 101, 49, 56, 123, 46, 46, 46, 125, 46, 32, 32, 87, 104, 101, 110, 32, 101, 110, 97, 98, 108, 101, 100, 32, 102, 117, 108, 108, 121, 32, 40, 115, 101, 116, 32, 116, 111, 10, 37, 32, 116, 41, 44, 32, 111, 98, 118, 105, 111, 117, 115, 108, 121, 32, 105, 110, 115, 101, 99, 117, 114, 101, 46, 32, 32, 87, 104, 101, 110, 32, 101, 110, 97, 98, 108, 101, 100, 32, 112, 97, 114, 116, 105, 97, 108, 108, 121, 32, 40, 115, 101, 116, 32, 116, 111, 32, 112, 41, 44, 32, 111, 110, 108, 121, 32, 116, 104, 101, 10, 37, 32, 99, 111, 109, 109, 97, 110, 100, 115, 32, 108, 105, 115, 116, 101, 100, 32, 105, 110, 32, 115, 104, 101, 108, 108, 95, 101, 115, 99, 97, 112, 101, 95, 99, 111, 109, 109, 97, 110, 100, 115, 32, 97, 114, 101, 32, 97, 108, 108, 111, 119, 101, 100, 46, 32, 32, 65, 108, 116, 104, 111, 117, 103, 104, 32, 116, 104, 105, 115, 10, 37, 32, 105, 115, 32, 110, 111, 116, 32, 102, 117, 108, 108, 121, 32, 115, 101, 99, 117, 114, 101, 32, 101, 105, 116, 104, 101, 114, 44, 32, 105, 116, 32, 105, 115, 32, 109, 117, 99, 104, 32, 98, 101, 116, 116, 101, 114, 44, 32, 97, 110, 100, 32, 115, 111, 32, 117, 115, 101, 102, 117, 108, 32, 116, 104, 97, 116, 32, 119, 101, 10, 37, 32, 101, 110, 97, 98, 108, 101, 32, 105, 116, 32, 102, 111, 114, 32, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 32, 98, 117, 116, 32, 98, 97, 114, 101, 32, 116, 101, 120, 46, 10, 115, 104, 101, 108, 108, 95, 101, 115, 99, 97, 112, 101, 32, 61, 32, 112, 10, 10, 37, 32, 78, 111, 32, 115, 112, 97, 99, 101, 115, 32, 105, 110, 32, 116, 104, 105, 115, 32, 99, 111, 109, 109, 97, 110, 100, 32, 108, 105, 115, 116, 46, 10, 37, 32, 10, 37, 32, 84, 104, 101, 32, 112, 114, 111, 103, 114, 97, 109, 115, 32, 108, 105, 115, 116, 101, 100, 32, 104, 101, 114, 101, 32, 97, 114, 101, 32, 97, 115, 32, 115, 97, 102, 101, 32, 97, 115, 32, 97, 110, 121, 32, 119, 101, 32, 107, 110, 111, 119, 58, 32, 116, 104, 101, 121, 32, 101, 105, 116, 104, 101, 114, 32, 100, 111, 10, 37, 32, 110, 111, 116, 32, 119, 114, 105, 116, 101, 32, 97, 110, 121, 32, 111, 117, 116, 112, 117, 116, 32, 102, 105, 108, 101, 115, 44, 32, 114, 101, 115, 112, 101, 99, 116, 32, 111, 112, 101, 110, 111, 117, 116, 95, 97, 110, 121, 44, 32, 111, 114, 32, 104, 97, 118, 101, 32, 104, 97, 114, 100, 45, 99, 111, 100, 101, 100, 10, 37, 32, 114, 101, 115, 116, 114, 105, 99, 116, 105, 111, 110, 115, 32, 115, 105, 109, 105, 108, 97, 114, 32, 111, 114, 32, 104, 105, 103, 104, 101, 114, 32, 116, 111, 32, 111, 112, 101, 110, 111, 117, 116, 95, 97, 110, 121, 61, 112, 46, 32, 32, 84, 104, 101, 121, 32, 97, 108, 115, 111, 32, 104, 97, 118, 101, 32, 110, 111, 10, 37, 32, 102, 101, 97, 116, 117, 114, 101, 115, 32, 116, 111, 32, 105, 110, 118, 111, 107, 101, 32, 97, 114, 98, 105, 116, 114, 97, 114, 121, 32, 111, 116, 104, 101, 114, 32, 112, 114, 111, 103, 114, 97, 109, 115, 44, 32, 97, 110, 100, 32, 110, 111, 32, 107, 110, 111, 119, 110, 32, 101, 120, 112, 108, 111, 105, 116, 97, 98, 108, 101, 10, 37, 32, 98, 117, 103, 115, 46, 32, 32, 65, 108, 108, 32, 116, 111, 32, 116, 104, 101, 32, 98, 101, 115, 116, 32, 111, 102, 32, 111, 117, 114, 32, 107, 110, 111, 119, 108, 101, 100, 103, 101, 46, 32, 32, 84, 104, 101, 121, 32, 97, 108, 115, 111, 32, 104, 97, 118, 101, 32, 112, 114, 97, 99, 116, 105, 99, 97, 108, 32, 117, 115, 101, 10, 37, 32, 102, 111, 114, 32, 98, 101, 105, 110, 103, 32, 99, 97, 108, 108, 101, 100, 32, 102, 114, 111, 109, 32, 84, 101, 88, 46, 10, 37, 32, 10, 115, 104, 101, 108, 108, 95, 101, 115, 99, 97, 112, 101, 95, 99, 111, 109, 109, 97, 110, 100, 115, 32, 61, 32, 92, 10, 98, 105, 98, 116, 101, 120, 44, 98, 105, 98, 116, 101, 120, 56, 44, 92, 10, 107, 112, 115, 101, 119, 104, 105, 99, 104, 44, 92, 10, 109, 97, 107, 101, 105, 110, 100, 101, 120, 44, 92, 10, 109, 112, 111, 115, 116, 44, 92, 10, 114, 101, 112, 115, 116, 111, 112, 100, 102, 44, 92, 10, 10, 37, 32, 119, 101, 39, 100, 32, 108, 105, 107, 101, 32, 116, 111, 32, 97, 108, 108, 111, 119, 58, 10, 37, 32, 100, 118, 105, 112, 115, 32, 45, 32, 98, 117, 116, 32, 101, 120, 116, 101, 114, 110, 97, 108, 32, 99, 111, 109, 109, 97, 110, 100, 115, 32, 99, 97, 110, 32, 98, 101, 32, 101, 120, 101, 99, 117, 116, 101, 100, 44, 32, 110, 101, 101, 100, 32, 97, 116, 32, 108, 101, 97, 115, 116, 32, 45, 82, 49, 46, 10, 37, 32, 101, 112, 115, 112, 100, 102, 44, 32, 112, 115, 50, 112, 100, 102, 44, 32, 112, 115, 116, 111, 112, 100, 102, 32, 45, 32, 110, 101, 101, 100, 32, 116, 111, 32, 114, 101, 115, 112, 101, 99, 116, 32, 111, 112, 101, 110, 111, 117, 116, 95, 97, 110, 121, 44, 10, 37, 32, 32, 32, 97, 110, 100, 32, 103, 115, 32, 45, 100, 83, 65, 70, 69, 82, 32, 109, 117, 115, 116, 32, 98, 101, 32, 117, 115, 101, 100, 32, 97, 110, 100, 32, 99, 104, 101, 99, 107, 32, 102, 111, 114, 32, 115, 104, 101, 108, 108, 32, 105, 110, 106, 101, 99, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 102, 105, 108, 101, 110, 97, 109, 101, 115, 46, 10, 37, 32, 40, 105, 109, 103, 41, 99, 111, 110, 118, 101, 114, 116, 32, 40, 73, 109, 97, 103, 101, 77, 97, 103, 105, 99, 107, 41, 32, 45, 32, 100, 101, 108, 101, 103, 97, 116, 101, 115, 46, 109, 103, 107, 32, 112, 111, 115, 115, 105, 98, 108, 101, 32, 109, 105, 115, 99, 111, 110, 102, 105, 103, 44, 32, 98, 101, 115, 105, 100, 101, 115, 44, 10, 37, 32, 32, 32, 119, 105, 116, 104, 111, 117, 116, 32, 85, 110, 105, 120, 32, 99, 111, 110, 118, 101, 114, 116, 32, 105, 116, 32, 104, 97, 114, 100, 108, 121, 32, 115, 101, 101, 109, 115, 32, 119, 111, 114, 116, 104, 32, 105, 116, 44, 32, 97, 110, 100, 32, 87, 105, 110, 100, 111, 119, 115, 32, 99, 111, 110, 118, 101, 114, 116, 10, 37, 32, 32, 32, 105, 115, 32, 115, 111, 109, 101, 116, 104, 105, 110, 103, 32, 99, 111, 109, 112, 108, 101, 116, 101, 108, 121, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 116, 104, 97, 116, 32, 100, 101, 115, 116, 114, 111, 121, 115, 32, 102, 105, 108, 101, 115, 121, 115, 116, 101, 109, 115, 44, 32, 115, 111, 32, 115, 107, 105, 112, 46, 10, 37, 32, 112, 121, 103, 109, 101, 110, 116, 105, 122, 101, 32, 45, 32, 98, 117, 116, 32, 105, 115, 32, 116, 104, 101, 32, 102, 105, 108, 116, 101, 114, 32, 102, 101, 97, 116, 117, 114, 101, 32, 105, 110, 115, 101, 99, 117, 114, 101, 63, 10, 37, 32, 112, 115, 52, 112, 100, 102, 32, 45, 32, 98, 117, 116, 32, 105, 116, 32, 99, 97, 108, 108, 115, 32, 97, 110, 32, 117, 110, 114, 101, 115, 116, 114, 105, 99, 116, 101, 100, 32, 108, 97, 116, 101, 120, 46, 10, 37, 32, 114, 112, 100, 102, 99, 114, 111, 112, 32, 45, 32, 109, 97, 121, 98, 101, 32, 111, 107, 44, 32, 98, 117, 116, 32, 108, 101, 116, 39, 115, 32, 103, 101, 116, 32, 101, 120, 112, 101, 114, 105, 101, 110, 99, 101, 32, 119, 105, 116, 104, 32, 114, 101, 112, 115, 116, 111, 112, 100, 102, 32, 102, 105, 114, 115, 116, 46, 10, 37, 32, 116, 101, 120, 105, 110, 100, 121, 44, 120, 105, 110, 100, 121, 32, 45, 32, 98, 117, 116, 32, 105, 115, 32, 116, 104, 101, 32, 109, 111, 100, 117, 108, 101, 32, 102, 101, 97, 116, 117, 114, 101, 32, 105, 110, 115, 101, 99, 117, 114, 101, 63, 10, 37, 32, 117, 108, 113, 100, 97, 32, 45, 32, 98, 117, 116, 32, 114, 101, 113, 117, 105, 114, 101, 115, 32, 111, 112, 116, 105, 111, 110, 97, 108, 32, 83, 72, 65, 49, 46, 112, 109, 44, 32, 115, 111, 32, 119, 104, 121, 32, 98, 111, 116, 104, 101, 114, 46, 10, 37, 32, 116, 101, 120, 44, 32, 108, 97, 116, 101, 120, 44, 32, 101, 116, 99, 46, 32, 45, 32, 110, 101, 101, 100, 32, 116, 111, 32, 102, 111, 114, 98, 105, 100, 32, 45, 45, 115, 104, 101, 108, 108, 45, 101, 115, 99, 97, 112, 101, 44, 32, 97, 110, 100, 32, 105, 110, 104, 101, 114, 105, 116, 32, 111, 112, 101, 110, 111, 117, 116, 95, 97, 110, 121, 46, 10, 10, 37, 32, 112, 108, 97, 105, 110, 32, 84, 101, 88, 32, 115, 104, 111, 117, 108, 100, 32, 114, 101, 109, 97, 105, 110, 32, 117, 110, 101, 110, 104, 97, 110, 99, 101, 100, 46, 10, 115, 104, 101, 108, 108, 95, 101, 115, 99, 97, 112, 101, 46, 116, 101, 120, 32, 61, 32, 102, 10, 115, 104, 101, 108, 108, 95, 101, 115, 99, 97, 112, 101, 46, 105, 110, 105, 116, 101, 120, 32, 61, 32, 102, 10, 10, 37, 32, 84, 104, 105, 115, 32, 105, 115, 32, 117, 115, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 87, 105, 110, 100, 111, 119, 115, 32, 115, 99, 114, 105, 112, 116, 32, 119, 114, 97, 112, 112, 101, 114, 32, 102, 111, 114, 32, 114, 101, 115, 116, 114, 105, 99, 116, 105, 110, 103, 32, 115, 101, 97, 114, 99, 104, 105, 110, 103, 10, 37, 32, 102, 111, 114, 32, 116, 104, 101, 32, 112, 117, 114, 112, 111, 114, 116, 101, 100, 108, 121, 32, 115, 97, 102, 101, 32, 115, 104, 101, 108, 108, 95, 101, 115, 99, 97, 112, 101, 95, 99, 111, 109, 109, 97, 110, 100, 115, 32, 97, 98, 111, 118, 101, 32, 116, 111, 32, 115, 121, 115, 116, 101, 109, 10, 37, 32, 100, 105, 114, 101, 99, 116, 111, 114, 105, 101, 115, 46, 10, 84, 69, 88, 77, 70, 95, 82, 69, 83, 84, 82, 73, 67, 84, 69, 68, 95, 83, 67, 82, 73, 80, 84, 83, 32, 61, 32, 92, 10, 32, 32, 123, 33, 33, 36, 84, 69, 88, 77, 70, 77, 65, 73, 78, 44, 33, 33, 36, 84, 69, 88, 77, 70, 76, 79, 67, 65, 76, 44, 33, 33, 36, 84, 69, 88, 77, 70, 68, 73, 83, 84, 125, 47, 115, 99, 114, 105, 112, 116, 115, 47, 123, 36, 112, 114, 111, 103, 110, 97, 109, 101, 44, 36, 101, 110, 103, 105, 110, 101, 44, 125, 47, 47, 10, 10, 37, 32, 65, 108, 108, 111, 119, 32, 84, 101, 88, 32, 92, 111, 112, 101, 110, 105, 110, 44, 32, 92, 111, 112, 101, 110, 111, 117, 116, 44, 32, 111, 114, 32, 92, 105, 110, 112, 117, 116, 32, 111, 110, 32, 102, 105, 108, 101, 110, 97, 109, 101, 115, 32, 115, 116, 97, 114, 116, 105, 110, 103, 32, 119, 105, 116, 104, 32, 96, 46, 39, 10, 37, 32, 40, 101, 46, 103, 46, 44, 32, 46, 114, 104, 111, 115, 116, 115, 41, 32, 111, 114, 32, 111, 117, 116, 115, 105, 100, 101, 32, 116, 104, 101, 32, 99, 117, 114, 114, 101, 110, 116, 32, 116, 114, 101, 101, 32, 40, 101, 46, 103, 46, 44, 32, 47, 101, 116, 99, 47, 112, 97, 115, 115, 119, 100, 41, 63, 10, 37, 32, 97, 32, 40, 97, 110, 121, 41, 32, 32, 32, 32, 32, 32, 32, 32, 58, 32, 97, 110, 121, 32, 102, 105, 108, 101, 32, 99, 97, 110, 32, 98, 101, 32, 111, 112, 101, 110, 101, 100, 46, 10, 37, 32, 114, 32, 40, 114, 101, 115, 116, 114, 105, 99, 116, 101, 100, 41, 32, 58, 32, 100, 105, 115, 97, 108, 108, 111, 119, 32, 111, 112, 101, 110, 105, 110, 103, 32, 34, 100, 111, 116, 102, 105, 108, 101, 115, 34, 46, 10, 37, 32, 112, 32, 40, 112, 97, 114, 97, 110, 111, 105, 100, 41, 32, 32, 32, 58, 32, 97, 115, 32, 96, 114, 39, 32, 97, 110, 100, 32, 100, 105, 115, 97, 108, 108, 111, 119, 32, 103, 111, 105, 110, 103, 32, 116, 111, 32, 112, 97, 114, 101, 110, 116, 32, 100, 105, 114, 101, 99, 116, 111, 114, 105, 101, 115, 44, 32, 97, 110, 100, 10, 37, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 116, 114, 105, 99, 116, 32, 97, 98, 115, 111, 108, 117, 116, 101, 32, 112, 97, 116, 104, 115, 32, 116, 111, 32, 98, 101, 32, 117, 110, 100, 101, 114, 32, 36, 84, 69, 88, 77, 70, 79, 85, 84, 80, 85, 84, 46, 10, 111, 112, 101, 110, 111, 117, 116, 95, 97, 110, 121, 32, 61, 32, 112, 10, 111, 112, 101, 110, 105, 110, 95, 97, 110, 121, 32, 61, 32, 97, 10, 10, 37, 32, 87, 114, 105, 116, 101, 32, 46, 108, 111, 103, 47, 46, 100, 118, 105, 47, 101, 116, 99, 46, 32, 102, 105, 108, 101, 115, 32, 104, 101, 114, 101, 44, 32, 105, 102, 32, 116, 104, 101, 32, 99, 117, 114, 114, 101, 110, 116, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 105, 115, 32, 117, 110, 119, 114, 105, 116, 97, 98, 108, 101, 46, 10, 37, 84, 69, 88, 77, 70, 79, 85, 84, 80, 85, 84, 32, 61, 32, 47, 116, 109, 112, 10, 10, 37, 32, 73, 102, 32, 97, 32, 100, 121, 110, 97, 109, 105, 99, 32, 102, 105, 108, 101, 32, 99, 114, 101, 97, 116, 105, 111, 110, 32, 102, 97, 105, 108, 115, 44, 32, 108, 111, 103, 32, 116, 104, 101, 32, 99, 111, 109, 109, 97, 110, 100, 32, 116, 111, 32, 116, 104, 105, 115, 32, 102, 105, 108, 101, 44, 32, 105, 110, 10, 37, 32, 101, 105, 116, 104, 101, 114, 32, 116, 104, 101, 32, 99, 117, 114, 114, 101, 110, 116, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 111, 114, 32, 84, 69, 88, 77, 70, 79, 85, 84, 80, 85, 84, 46, 32, 32, 83, 101, 116, 32, 116, 111, 32, 116, 104, 101, 10, 37, 32, 101, 109, 112, 116, 121, 32, 115, 116, 114, 105, 110, 103, 32, 111, 114, 32, 32, 48, 32, 32, 116, 111, 32, 97, 118, 111, 105, 100, 32, 108, 111, 103, 103, 105, 110, 103, 46, 10, 77, 73, 83, 83, 70, 79, 78, 84, 95, 76, 79, 71, 32, 61, 32, 109, 105, 115, 115, 102, 111, 110, 116, 46, 108, 111, 103, 10, 10, 37, 32, 83, 101, 116, 32, 116, 111, 32, 97, 32, 99, 111, 108, 111, 110, 45, 115, 101, 112, 97, 114, 97, 116, 101, 100, 32, 108, 105, 115, 116, 32, 111, 102, 32, 119, 111, 114, 100, 115, 32, 115, 112, 101, 99, 105, 102, 121, 105, 110, 103, 32, 119, 97, 114, 110, 105, 110, 103, 115, 32, 116, 111, 32, 115, 117, 112, 112, 114, 101, 115, 115, 46, 10, 37, 32, 84, 111, 32, 115, 117, 112, 112, 114, 101, 115, 115, 32, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 44, 32, 117, 115, 101, 32, 84, 69, 88, 95, 72, 85, 83, 72, 32, 61, 32, 97, 108, 108, 59, 32, 116, 104, 105, 115, 32, 105, 115, 32, 99, 117, 114, 114, 101, 110, 116, 108, 121, 32, 101, 113, 117, 105, 118, 97, 108, 101, 110, 116, 32, 116, 111, 10, 37, 32, 84, 69, 88, 95, 72, 85, 83, 72, 32, 61, 32, 99, 104, 101, 99, 107, 115, 117, 109, 58, 108, 111, 115, 116, 99, 104, 97, 114, 58, 114, 101, 97, 100, 97, 98, 108, 101, 58, 115, 112, 101, 99, 105, 97, 108, 10, 37, 32, 84, 111, 32, 115, 117, 112, 112, 114, 101, 115, 115, 32, 110, 111, 116, 104, 105, 110, 103, 44, 32, 117, 115, 101, 32, 84, 69, 88, 95, 72, 85, 83, 72, 32, 61, 32, 110, 111, 110, 101, 32, 111, 114, 32, 100, 111, 32, 110, 111, 116, 32, 115, 101, 116, 32, 116, 104, 101, 32, 118, 97, 114, 105, 97, 98, 108, 101, 32, 97, 116, 32, 97, 108, 108, 46, 10, 84, 69, 88, 95, 72, 85, 83, 72, 32, 61, 32, 110, 111, 110, 101, 10, 10, 37, 32, 65, 108, 108, 111, 119, 32, 84, 101, 88, 44, 32, 97, 110, 100, 32, 77, 70, 32, 116, 111, 32, 112, 97, 114, 115, 101, 32, 116, 104, 101, 32, 102, 105, 114, 115, 116, 32, 108, 105, 110, 101, 32, 111, 102, 32, 97, 110, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 32, 102, 111, 114, 10, 37, 32, 116, 104, 101, 32, 37, 38, 102, 111, 114, 109, 97, 116, 32, 99, 111, 110, 115, 116, 114, 117, 99, 116, 46, 10, 112, 97, 114, 115, 101, 95, 102, 105, 114, 115, 116, 95, 108, 105, 110, 101, 32, 61, 32, 116, 10, 10, 37, 32, 66, 117, 116, 32, 100, 111, 110, 39, 116, 32, 112, 97, 114, 115, 101, 32, 116, 104, 101, 32, 102, 105, 114, 115, 116, 32, 108, 105, 110, 101, 32, 105, 102, 32, 105, 110, 118, 111, 107, 101, 100, 32, 97, 115, 32, 34, 116, 101, 120, 34, 44, 32, 115, 105, 110, 99, 101, 32, 119, 101, 32, 119, 97, 110, 116, 32, 116, 104, 97, 116, 10, 37, 32, 116, 111, 32, 114, 101, 109, 97, 105, 110, 32, 75, 110, 117, 116, 104, 45, 99, 111, 109, 112, 97, 116, 105, 98, 108, 101, 46, 32, 32, 84, 104, 101, 32, 115, 114, 99, 95, 115, 112, 101, 99, 105, 97, 108, 115, 32, 97, 110, 100, 10, 37, 32, 102, 105, 108, 101, 95, 108, 105, 110, 101, 95, 101, 114, 114, 111, 114, 95, 115, 116, 121, 108, 101, 32, 115, 101, 116, 116, 105, 110, 103, 115, 44, 32, 97, 115, 32, 119, 101, 108, 108, 32, 97, 115, 32, 116, 104, 101, 32, 111, 112, 116, 105, 111, 110, 115, 32, 45, 101, 110, 99, 116, 101, 120, 44, 10, 37, 32, 45, 109, 108, 116, 101, 120, 44, 32, 45, 56, 98, 105, 116, 44, 32, 101, 116, 99, 46, 44, 32, 97, 108, 115, 111, 32, 97, 102, 102, 101, 99, 116, 32, 116, 104, 105, 115, 44, 32, 98, 117, 116, 32, 116, 104, 101, 121, 32, 97, 114, 101, 32, 97, 108, 108, 32, 111, 102, 102, 32, 98, 121, 32, 100, 101, 102, 97, 117, 108, 116, 46, 10, 112, 97, 114, 115, 101, 95, 102, 105, 114, 115, 116, 95, 108, 105, 110, 101, 46, 116, 101, 120, 32, 61, 32, 102, 10, 112, 97, 114, 115, 101, 95, 102, 105, 114, 115, 116, 95, 108, 105, 110, 101, 46, 105, 110, 105, 116, 101, 120, 32, 61, 32, 102, 10, 10, 37, 32, 67, 111, 110, 116, 114, 111, 108, 32, 102, 105, 108, 101, 58, 108, 105, 110, 101, 58, 101, 114, 114, 111, 114, 32, 115, 116, 121, 108, 101, 32, 109, 101, 115, 115, 97, 103, 101, 115, 46, 10, 102, 105, 108, 101, 95, 108, 105, 110, 101, 95, 101, 114, 114, 111, 114, 95, 115, 116, 121, 108, 101, 32, 61, 32, 102, 10, 10, 37, 32, 69, 110, 97, 98, 108, 101, 32, 116, 104, 101, 32, 109, 107, 116, 101, 120, 46, 46, 46, 32, 115, 99, 114, 105, 112, 116, 115, 32, 98, 121, 32, 100, 101, 102, 97, 117, 108, 116, 63, 32, 32, 84, 104, 101, 115, 101, 32, 109, 117, 115, 116, 32, 98, 101, 32, 115, 101, 116, 32, 116, 111, 32, 48, 32, 111, 114, 32, 49, 46, 10, 37, 32, 80, 97, 114, 116, 105, 99, 117, 108, 97, 114, 32, 112, 114, 111, 103, 114, 97, 109, 115, 32, 99, 97, 110, 32, 97, 110, 100, 32, 100, 111, 32, 111, 118, 101, 114, 114, 105, 100, 101, 32, 116, 104, 101, 115, 101, 32, 115, 101, 116, 116, 105, 110, 103, 115, 44, 32, 102, 111, 114, 32, 101, 120, 97, 109, 112, 108, 101, 10, 37, 32, 100, 118, 105, 112, 115, 39, 115, 32, 45, 77, 32, 111, 112, 116, 105, 111, 110, 46, 32, 32, 89, 111, 117, 114, 32, 102, 105, 114, 115, 116, 32, 99, 104, 97, 110, 99, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 119, 104, 101, 116, 104, 101, 114, 32, 116, 104, 101, 32, 115, 99, 114, 105, 112, 116, 115, 10, 37, 32, 97, 114, 101, 32, 105, 110, 118, 111, 107, 101, 100, 32, 98, 121, 32, 100, 101, 102, 97, 117, 108, 116, 32, 105, 115, 32, 97, 116, 32, 99, 111, 110, 102, 105, 103, 117, 114, 101, 32, 116, 105, 109, 101, 46, 10, 37, 10, 37, 32, 84, 104, 101, 115, 101, 32, 118, 97, 108, 117, 101, 115, 32, 97, 114, 101, 32, 105, 103, 110, 111, 114, 101, 100, 32, 105, 102, 32, 116, 104, 101, 32, 115, 99, 114, 105, 112, 116, 32, 110, 97, 109, 101, 115, 32, 97, 114, 101, 32, 99, 104, 97, 110, 103, 101, 100, 59, 32, 101, 46, 103, 46, 44, 32, 105, 102, 32, 121, 111, 117, 10, 37, 32, 115, 101, 116, 32, 68, 86, 73, 80, 83, 77, 65, 75, 69, 80, 75, 32, 116, 111, 32, 96, 102, 111, 111, 39, 44, 32, 119, 104, 97, 116, 32, 99, 111, 117, 110, 116, 115, 32, 105, 115, 32, 116, 104, 101, 32, 118, 97, 108, 117, 101, 32, 111, 102, 32, 116, 104, 101, 32, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 10, 37, 32, 118, 97, 114, 105, 97, 98, 108, 101, 47, 99, 111, 110, 102, 105, 103, 32, 118, 97, 108, 117, 101, 32, 96, 70, 79, 79, 39, 44, 32, 110, 111, 116, 32, 116, 104, 101, 32, 96, 77, 75, 84, 69, 88, 80, 75, 39, 32, 118, 97, 108, 117, 101, 46, 10, 37, 10, 37, 77, 75, 84, 69, 88, 84, 69, 88, 32, 61, 32, 48, 10, 37, 77, 75, 84, 69, 88, 80, 75, 32, 61, 32, 48, 10, 37, 77, 75, 84, 69, 88, 77, 70, 32, 61, 32, 48, 10, 37, 77, 75, 84, 69, 88, 84, 70, 77, 32, 61, 32, 48, 10, 37, 77, 75, 84, 69, 88, 70, 77, 84, 32, 61, 32, 48, 10, 37, 77, 75, 79, 67, 80, 32, 61, 32, 48, 10, 37, 77, 75, 79, 70, 77, 32, 61, 32, 48, 10, 10, 37, 32, 85, 115, 101, 100, 32, 98, 121, 32, 109, 97, 107, 101, 109, 112, 120, 32, 116, 111, 32, 114, 117, 110, 32, 84, 101, 88, 46, 32, 32, 87, 101, 32, 117, 115, 101, 32, 34, 101, 116, 101, 120, 34, 32, 98, 101, 99, 97, 117, 115, 101, 32, 77, 101, 116, 97, 80, 111, 115, 116, 32, 105, 115, 10, 37, 32, 101, 120, 112, 101, 99, 116, 105, 110, 103, 32, 68, 86, 73, 44, 32, 97, 110, 100, 32, 110, 111, 116, 32, 34, 116, 101, 120, 34, 32, 98, 101, 99, 97, 117, 115, 101, 32, 119, 101, 32, 119, 97, 110, 116, 32, 102, 105, 114, 115, 116, 32, 108, 105, 110, 101, 32, 112, 97, 114, 115, 105, 110, 103, 46, 10, 84, 69, 88, 32, 61, 32, 101, 116, 101, 120, 10, 10, 37, 32, 84, 104, 101, 115, 101, 32, 118, 97, 114, 105, 97, 98, 108, 101, 115, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 101, 120, 116, 101, 114, 110, 97, 108, 32, 112, 114, 111, 103, 114, 97, 109, 32, 99, 97, 108, 108, 101, 100, 32, 102, 111, 114, 32, 116, 104, 101, 10, 37, 32, 105, 110, 116, 101, 114, 97, 99, 116, 105, 118, 101, 32, 96, 101, 39, 32, 111, 112, 116, 105, 111, 110, 46, 32, 32, 37, 100, 32, 105, 115, 32, 114, 101, 112, 108, 97, 99, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 108, 105, 110, 101, 32, 110, 117, 109, 98, 101, 114, 32, 97, 110, 100, 32, 37, 115, 32, 98, 121, 10, 37, 32, 116, 104, 101, 32, 99, 117, 114, 114, 101, 110, 116, 32, 102, 105, 108, 101, 110, 97, 109, 101, 46, 32, 32, 84, 104, 101, 32, 100, 101, 102, 97, 117, 108, 116, 32, 105, 115, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 97, 116, 32, 99, 111, 109, 112, 105, 108, 101, 45, 116, 105, 109, 101, 44, 32, 97, 110, 100, 10, 37, 32, 119, 101, 32, 108, 101, 116, 32, 116, 104, 97, 116, 32, 115, 116, 97, 121, 32, 105, 110, 32, 112, 108, 97, 99, 101, 32, 115, 105, 110, 99, 101, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 112, 108, 97, 116, 102, 111, 114, 109, 115, 32, 108, 105, 107, 101, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 118, 97, 108, 117, 101, 115, 46, 10, 37, 84, 69, 88, 69, 68, 73, 84, 32, 61, 32, 118, 105, 32, 43, 37, 100, 32, 39, 37, 115, 39, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 37, 32, 100, 101, 102, 97, 117, 108, 116, 32, 102, 111, 114, 32, 85, 110, 105, 120, 10, 37, 84, 69, 88, 69, 68, 73, 84, 32, 61, 32, 116, 101, 120, 119, 111, 114, 107, 115, 32, 45, 45, 112, 111, 115, 105, 116, 105, 111, 110, 61, 43, 37, 100, 32, 34, 37, 115, 34, 32, 32, 32, 37, 32, 100, 101, 102, 97, 117, 108, 116, 32, 102, 111, 114, 32, 87, 105, 110, 100, 111, 119, 115, 10, 37, 77, 70, 69, 68, 73, 84, 32, 61, 32, 36, 123, 84, 69, 88, 69, 68, 73, 84, 125, 10, 37, 77, 80, 69, 68, 73, 84, 32, 61, 32, 36, 123, 84, 69, 88, 69, 68, 73, 84, 125, 10, 10, 37, 32, 84, 104, 101, 32, 100, 101, 102, 97, 117, 108, 116, 32, 96, 99, 111, 100, 101, 112, 97, 103, 101, 32, 97, 110, 100, 32, 115, 111, 114, 116, 32, 111, 114, 100, 101, 114, 39, 32, 102, 105, 108, 101, 32, 102, 111, 114, 32, 66, 105, 98, 84, 101, 88, 56, 44, 32, 119, 104, 101, 110, 32, 110, 111, 110, 101, 32, 105, 115, 10, 37, 32, 103, 105, 118, 101, 110, 32, 97, 115, 32, 99, 111, 109, 109, 97, 110, 100, 32, 108, 105, 110, 101, 32, 111, 112, 116, 105, 111, 110, 32, 111, 114, 32, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 32, 118, 97, 114, 105, 97, 98, 108, 101, 46, 10, 66, 73, 66, 84, 69, 88, 95, 67, 83, 70, 73, 76, 69, 32, 61, 32, 56, 56, 53, 57, 49, 108, 97, 116, 46, 99, 115, 102, 10, 10, 37, 32, 84, 104, 105, 115, 32, 118, 97, 114, 105, 97, 98, 108, 101, 32, 105, 115, 32, 115, 112, 101, 99, 105, 102, 105, 99, 32, 116, 111, 32, 87, 105, 110, 100, 111, 119, 115, 46, 32, 32, 73, 116, 32, 109, 117, 115, 116, 32, 98, 101, 32, 115, 101, 116, 32, 116, 111, 32, 48, 32, 111, 114, 32, 49, 46, 32, 32, 84, 104, 101, 10, 37, 32, 100, 101, 102, 97, 117, 108, 116, 32, 105, 115, 32, 48, 46, 32, 32, 83, 101, 116, 116, 105, 110, 103, 32, 105, 116, 32, 116, 111, 32, 49, 32, 116, 101, 108, 108, 115, 32, 116, 104, 101, 32, 87, 105, 110, 100, 111, 119, 115, 32, 115, 99, 114, 105, 112, 116, 32, 119, 114, 97, 112, 112, 101, 114, 115, 32, 116, 111, 10, 37, 32, 117, 115, 101, 32, 97, 110, 32, 97, 108, 114, 101, 97, 100, 121, 32, 105, 110, 115, 116, 97, 108, 108, 101, 100, 32, 80, 101, 114, 108, 32, 105, 110, 116, 101, 114, 112, 114, 101, 116, 101, 114, 32, 105, 102, 32, 111, 110, 101, 32, 105, 115, 32, 102, 111, 117, 110, 100, 32, 111, 110, 32, 116, 104, 101, 10, 37, 32, 115, 101, 97, 114, 99, 104, 32, 112, 97, 116, 104, 44, 32, 105, 110, 32, 112, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 116, 111, 32, 116, 104, 101, 32, 80, 101, 114, 108, 32, 115, 104, 105, 112, 112, 101, 100, 32, 119, 105, 116, 104, 32, 84, 101, 88, 32, 76, 105, 118, 101, 46, 32, 32, 84, 104, 117, 115, 44, 10, 37, 32, 105, 116, 32, 109, 97, 121, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 32, 105, 102, 32, 121, 111, 117, 32, 98, 111, 116, 104, 32, 40, 97, 41, 32, 105, 110, 115, 116, 97, 108, 108, 101, 100, 32, 97, 32, 102, 117, 108, 108, 32, 80, 101, 114, 108, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 10, 37, 32, 102, 111, 114, 32, 103, 101, 110, 101, 114, 97, 108, 32, 117, 115, 101, 44, 32, 97, 110, 100, 32, 40, 98, 41, 32, 110, 101, 101, 100, 32, 116, 111, 32, 114, 117, 110, 32, 80, 101, 114, 108, 32, 112, 114, 111, 103, 114, 97, 109, 115, 32, 102, 114, 111, 109, 32, 84, 76, 32, 116, 104, 97, 116, 32, 117, 115, 101, 10, 37, 32, 97, 100, 100, 105, 116, 105, 111, 110, 97, 108, 32, 109, 111, 100, 117, 108, 101, 115, 32, 119, 101, 32, 100, 111, 110, 39, 116, 32, 112, 114, 111, 118, 105, 100, 101, 46, 32, 32, 84, 104, 101, 32, 84, 76, 32, 80, 101, 114, 108, 32, 100, 111, 101, 115, 32, 112, 114, 111, 118, 105, 100, 101, 32, 97, 108, 108, 32, 116, 104, 101, 10, 37, 32, 115, 116, 97, 110, 100, 97, 114, 100, 32, 80, 101, 114, 108, 32, 109, 111, 100, 117, 108, 101, 115, 46, 10, 37, 10, 37, 84, 69, 88, 76, 73, 86, 69, 95, 87, 73, 78, 68, 79, 87, 83, 95, 84, 82, 89, 95, 69, 88, 84, 69, 82, 78, 65, 76, 95, 80, 69, 82, 76, 32, 61, 32, 48, 10, 10, 10, 37, 32, 12, 32, 80, 97, 114, 116, 32, 51, 58, 32, 65, 114, 114, 97, 121, 32, 97, 110, 100, 32, 111, 116, 104, 101, 114, 32, 115, 105, 122, 101, 115, 32, 102, 111, 114, 32, 84, 101, 88, 32, 40, 97, 110, 100, 32, 77, 101, 116, 97, 102, 111, 110, 116, 41, 46, 10, 37, 10, 37, 32, 73, 102, 32, 121, 111, 117, 32, 119, 97, 110, 116, 32, 116, 111, 32, 99, 104, 97, 110, 103, 101, 32, 115, 111, 109, 101, 32, 111, 102, 32, 116, 104, 101, 115, 101, 32, 115, 105, 122, 101, 115, 32, 111, 110, 108, 121, 32, 102, 111, 114, 32, 97, 32, 99, 101, 114, 116, 97, 105, 110, 32, 84, 101, 88, 10, 37, 32, 118, 97, 114, 105, 97, 110, 116, 44, 32, 116, 104, 101, 32, 117, 115, 117, 97, 108, 32, 100, 111, 116, 32, 110, 111, 116, 97, 116, 105, 111, 110, 32, 119, 111, 114, 107, 115, 44, 32, 101, 46, 103, 46, 44, 10, 37, 32, 109, 97, 105, 110, 95, 109, 101, 109, 111, 114, 121, 46, 104, 117, 103, 101, 116, 101, 120, 32, 61, 32, 50, 48, 48, 48, 48, 48, 48, 48, 10, 37, 10, 37, 32, 73, 102, 32, 97, 32, 99, 104, 97, 110, 103, 101, 32, 104, 101, 114, 101, 32, 97, 112, 112, 101, 97, 114, 115, 32, 116, 111, 32, 98, 101, 32, 105, 103, 110, 111, 114, 101, 100, 44, 32, 116, 114, 121, 32, 114, 101, 100, 117, 109, 112, 105, 110, 103, 32, 116, 104, 101, 32, 102, 111, 114, 109, 97, 116, 32, 102, 105, 108, 101, 46, 10, 10, 37, 32, 77, 101, 109, 111, 114, 121, 46, 32, 77, 117, 115, 116, 32, 98, 101, 32, 108, 101, 115, 115, 32, 116, 104, 97, 110, 32, 56, 44, 48, 48, 48, 44, 48, 48, 48, 32, 116, 111, 116, 97, 108, 46, 10, 37, 10, 37, 32, 109, 97, 105, 110, 95, 109, 101, 109, 111, 114, 121, 32, 105, 115, 32, 114, 101, 108, 101, 118, 97, 110, 116, 32, 111, 110, 108, 121, 32, 116, 111, 32, 105, 110, 105, 116, 101, 120, 44, 32, 101, 120, 116, 114, 97, 95, 109, 101, 109, 95, 42, 32, 111, 110, 108, 121, 32, 116, 111, 32, 110, 111, 110, 45, 105, 110, 105, 46, 10, 37, 32, 84, 104, 117, 115, 44, 32, 104, 97, 118, 101, 32, 116, 111, 32, 114, 101, 100, 117, 109, 112, 32, 116, 104, 101, 32, 46, 102, 109, 116, 32, 102, 105, 108, 101, 32, 97, 102, 116, 101, 114, 32, 99, 104, 97, 110, 103, 105, 110, 103, 32, 109, 97, 105, 110, 95, 109, 101, 109, 111, 114, 121, 59, 32, 116, 111, 32, 97, 100, 100, 10, 37, 32, 116, 111, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 102, 109, 116, 32, 102, 105, 108, 101, 115, 44, 32, 105, 110, 99, 114, 101, 97, 115, 101, 32, 101, 120, 116, 114, 97, 95, 109, 101, 109, 95, 42, 46, 32, 32, 40, 84, 111, 32, 103, 101, 116, 32, 97, 110, 32, 105, 100, 101, 97, 32, 111, 102, 32, 104, 111, 119, 10, 37, 32, 109, 117, 99, 104, 44, 32, 116, 114, 121, 32, 92, 116, 114, 97, 99, 105, 110, 103, 115, 116, 97, 116, 115, 61, 50, 32, 105, 110, 32, 121, 111, 117, 114, 32, 84, 101, 88, 32, 115, 111, 117, 114, 99, 101, 32, 102, 105, 108, 101, 59, 10, 37, 32, 119, 101, 98, 50, 99, 47, 116, 101, 115, 116, 115, 47, 109, 101, 109, 116, 101, 115, 116, 46, 116, 101, 120, 32, 109, 105, 103, 104, 116, 32, 97, 108, 115, 111, 32, 98, 101, 32, 105, 110, 116, 101, 114, 101, 115, 116, 105, 110, 103, 46, 41, 10, 37, 10, 37, 32, 84, 111, 32, 105, 110, 99, 114, 101, 97, 115, 101, 32, 115, 112, 97, 99, 101, 32, 102, 111, 114, 32, 98, 111, 120, 101, 115, 32, 40, 97, 115, 32, 109, 105, 103, 104, 116, 32, 98, 101, 32, 110, 101, 101, 100, 101, 100, 32, 98, 121, 44, 32, 101, 46, 103, 46, 44, 32, 80, 105, 67, 84, 101, 88, 41, 44, 10, 37, 32, 105, 110, 99, 114, 101, 97, 115, 101, 32, 101, 120, 116, 114, 97, 95, 109, 101, 109, 95, 98, 111, 116, 46, 10, 37, 10, 37, 32, 70, 111, 114, 32, 115, 111, 109, 101, 32, 120, 121, 45, 112, 105, 99, 32, 115, 97, 109, 112, 108, 101, 115, 44, 32, 121, 111, 117, 32, 109, 97, 121, 32, 110, 101, 101, 100, 32, 97, 115, 32, 109, 117, 99, 104, 32, 97, 115, 32, 55, 48, 48, 48, 48, 48, 32, 119, 111, 114, 100, 115, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 46, 10, 37, 32, 70, 111, 114, 32, 116, 104, 101, 32, 118, 97, 115, 116, 32, 109, 97, 106, 111, 114, 105, 116, 121, 32, 111, 102, 32, 100, 111, 99, 117, 109, 101, 110, 116, 115, 44, 32, 54, 48, 48, 48, 48, 32, 111, 114, 32, 108, 101, 115, 115, 32, 119, 105, 108, 108, 32, 100, 111, 46, 10, 37, 10, 109, 97, 105, 110, 95, 109, 101, 109, 111, 114, 121, 32, 61, 32, 51, 48, 48, 48, 48, 48, 48, 32, 37, 32, 119, 111, 114, 100, 115, 32, 111, 102, 32, 105, 110, 105, 109, 101, 109, 111, 114, 121, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 59, 32, 97, 108, 115, 111, 32, 97, 112, 112, 108, 105, 101, 115, 32, 116, 111, 32, 105, 110, 105, 109, 102, 38, 109, 112, 10, 101, 120, 116, 114, 97, 95, 109, 101, 109, 95, 116, 111, 112, 32, 61, 32, 48, 32, 32, 32, 32, 32, 37, 32, 101, 120, 116, 114, 97, 32, 104, 105, 103, 104, 32, 109, 101, 109, 111, 114, 121, 32, 102, 111, 114, 32, 99, 104, 97, 114, 115, 44, 32, 116, 111, 107, 101, 110, 115, 44, 32, 101, 116, 99, 46, 10, 101, 120, 116, 114, 97, 95, 109, 101, 109, 95, 98, 111, 116, 32, 61, 32, 48, 32, 32, 32, 32, 32, 37, 32, 101, 120, 116, 114, 97, 32, 108, 111, 119, 32, 109, 101, 109, 111, 114, 121, 32, 102, 111, 114, 32, 98, 111, 120, 101, 115, 44, 32, 103, 108, 117, 101, 44, 32, 98, 114, 101, 97, 107, 112, 111, 105, 110, 116, 115, 44, 32, 101, 116, 99, 46, 10, 10, 37, 32, 67, 111, 110, 84, 101, 88, 116, 32, 110, 101, 101, 100, 115, 32, 108, 111, 116, 115, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 46, 10, 101, 120, 116, 114, 97, 95, 109, 101, 109, 95, 116, 111, 112, 46, 99, 111, 110, 116, 101, 120, 116, 32, 61, 32, 50, 48, 48, 48, 48, 48, 48, 10, 101, 120, 116, 114, 97, 95, 109, 101, 109, 95, 98, 111, 116, 46, 99, 111, 110, 116, 101, 120, 116, 32, 61, 32, 52, 48, 48, 48, 48, 48, 48, 10, 10, 37, 32, 87, 111, 114, 100, 115, 32, 111, 102, 32, 102, 111, 110, 116, 32, 105, 110, 102, 111, 32, 102, 111, 114, 32, 84, 101, 88, 32, 40, 116, 111, 116, 97, 108, 32, 115, 105, 122, 101, 32, 111, 102, 32, 97, 108, 108, 32, 84, 70, 77, 32, 102, 105, 108, 101, 115, 44, 32, 97, 112, 112, 114, 111, 120, 105, 109, 97, 116, 101, 108, 121, 41, 46, 10, 37, 32, 77, 117, 115, 116, 32, 98, 101, 32, 62, 61, 32, 50, 48, 48, 48, 48, 32, 97, 110, 100, 32, 60, 61, 32, 49, 52, 55, 52, 56, 51, 54, 52, 55, 32, 40, 119, 105, 116, 104, 111, 117, 116, 32, 116, 101, 120, 46, 99, 104, 32, 99, 104, 97, 110, 103, 101, 115, 41, 46, 10, 102, 111, 110, 116, 95, 109, 101, 109, 95, 115, 105, 122, 101, 32, 61, 32, 51, 48, 48, 48, 48, 48, 48, 10, 10, 37, 32, 84, 111, 116, 97, 108, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 102, 111, 110, 116, 115, 46, 32, 77, 117, 115, 116, 32, 98, 101, 32, 62, 61, 32, 53, 48, 32, 97, 110, 100, 32, 60, 61, 32, 57, 48, 48, 48, 32, 40, 119, 105, 116, 104, 111, 117, 116, 32, 116, 101, 120, 46, 99, 104, 32, 99, 104, 97, 110, 103, 101, 115, 41, 46, 10, 102, 111, 110, 116, 95, 109, 97, 120, 32, 61, 32, 57, 48, 48, 48, 10, 10, 37, 32, 69, 120, 116, 114, 97, 32, 115, 112, 97, 99, 101, 32, 102, 111, 114, 32, 116, 104, 101, 32, 104, 97, 115, 104, 32, 116, 97, 98, 108, 101, 32, 111, 102, 32, 99, 111, 110, 116, 114, 111, 108, 32, 115, 101, 113, 117, 101, 110, 99, 101, 115, 46, 10, 104, 97, 115, 104, 95, 101, 120, 116, 114, 97, 32, 61, 32, 50, 48, 48, 48, 48, 48, 10, 10, 37, 32, 77, 97, 120, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 32, 105, 110, 32, 97, 108, 108, 32, 115, 116, 114, 105, 110, 103, 115, 44, 32, 105, 110, 99, 108, 117, 100, 105, 110, 103, 32, 97, 108, 108, 32, 101, 114, 114, 111, 114, 32, 109, 101, 115, 115, 97, 103, 101, 115, 44, 10, 37, 32, 104, 101, 108, 112, 32, 116, 101, 120, 116, 115, 44, 32, 102, 111, 110, 116, 32, 110, 97, 109, 101, 115, 44, 32, 99, 111, 110, 116, 114, 111, 108, 32, 115, 101, 113, 117, 101, 110, 99, 101, 115, 46, 32, 32, 84, 104, 101, 115, 101, 32, 118, 97, 108, 117, 101, 115, 32, 97, 112, 112, 108, 121, 32, 116, 111, 32, 84, 101, 88, 46, 10, 112, 111, 111, 108, 95, 115, 105, 122, 101, 32, 61, 32, 51, 50, 53, 48, 48, 48, 48, 10, 37, 32, 77, 105, 110, 105, 109, 117, 109, 32, 112, 111, 111, 108, 32, 115, 112, 97, 99, 101, 32, 97, 102, 116, 101, 114, 32, 84, 101, 88, 39, 115, 32, 111, 119, 110, 32, 115, 116, 114, 105, 110, 103, 115, 59, 32, 109, 117, 115, 116, 32, 98, 101, 32, 97, 116, 32, 108, 101, 97, 115, 116, 10, 37, 32, 50, 53, 48, 48, 48, 32, 108, 101, 115, 115, 32, 116, 104, 97, 110, 32, 112, 111, 111, 108, 95, 115, 105, 122, 101, 44, 32, 98, 117, 116, 32, 100, 111, 101, 115, 110, 39, 116, 32, 110, 101, 101, 100, 32, 116, 111, 32, 98, 101, 32, 110, 101, 97, 114, 108, 121, 32, 116, 104, 97, 116, 32, 108, 97, 114, 103, 101, 46, 10, 115, 116, 114, 105, 110, 103, 95, 118, 97, 99, 97, 110, 99, 105, 101, 115, 32, 61, 32, 57, 48, 48, 48, 48, 10, 37, 32, 77, 97, 120, 105, 109, 117, 109, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 115, 116, 114, 105, 110, 103, 115, 46, 10, 109, 97, 120, 95, 115, 116, 114, 105, 110, 103, 115, 32, 61, 32, 53, 48, 48, 48, 48, 48, 10, 37, 32, 109, 105, 110, 32, 112, 111, 111, 108, 32, 115, 112, 97, 99, 101, 32, 108, 101, 102, 116, 32, 97, 102, 116, 101, 114, 32, 108, 111, 97, 100, 105, 110, 103, 32, 46, 102, 109, 116, 10, 112, 111, 111, 108, 95, 102, 114, 101, 101, 32, 61, 32, 52, 55, 53, 48, 48, 10, 10, 37, 32, 66, 117, 102, 102, 101, 114, 32, 115, 105, 122, 101, 46, 32, 32, 84, 101, 88, 32, 117, 115, 101, 115, 32, 116, 104, 101, 32, 98, 117, 102, 102, 101, 114, 32, 116, 111, 32, 99, 111, 110, 116, 97, 105, 110, 32, 105, 110, 112, 117, 116, 32, 108, 105, 110, 101, 115, 44, 32, 98, 117, 116, 32, 109, 97, 99, 114, 111, 10, 37, 32, 101, 120, 112, 97, 110, 115, 105, 111, 110, 32, 119, 111, 114, 107, 115, 32, 98, 121, 32, 119, 114, 105, 116, 105, 110, 103, 32, 109, 97, 116, 101, 114, 105, 97, 108, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 98, 117, 102, 102, 101, 114, 32, 97, 110, 100, 32, 114, 101, 112, 97, 114, 115, 105, 110, 103, 32, 116, 104, 101, 10, 37, 32, 108, 105, 110, 101, 46, 32, 32, 65, 115, 32, 97, 32, 99, 111, 110, 115, 101, 113, 117, 101, 110, 99, 101, 44, 32, 99, 101, 114, 116, 97, 105, 110, 32, 99, 111, 110, 115, 116, 114, 117, 99, 116, 115, 32, 114, 101, 113, 117, 105, 114, 101, 32, 116, 104, 101, 32, 98, 117, 102, 102, 101, 114, 32, 116, 111, 32, 98, 101, 10, 37, 32, 118, 101, 114, 121, 32, 108, 97, 114, 103, 101, 44, 32, 101, 118, 101, 110, 32, 116, 104, 111, 117, 103, 104, 32, 109, 111, 115, 116, 32, 100, 111, 99, 117, 109, 101, 110, 116, 115, 32, 99, 97, 110, 32, 98, 101, 32, 104, 97, 110, 100, 108, 101, 100, 32, 119, 105, 116, 104, 32, 97, 32, 115, 109, 97, 108, 108, 32, 118, 97, 108, 117, 101, 46, 10, 98, 117, 102, 95, 115, 105, 122, 101, 32, 61, 32, 50, 48, 48, 48, 48, 48, 10, 10, 37, 32, 72, 121, 112, 104, 101, 110, 97, 116, 105, 111, 110, 32, 116, 114, 105, 101, 46, 32, 32, 84, 104, 101, 32, 109, 97, 120, 105, 109, 117, 109, 32, 112, 111, 115, 115, 105, 98, 108, 101, 32, 105, 115, 32, 52, 49, 57, 52, 51, 48, 51, 32, 40, 115, 115, 117, 112, 95, 116, 114, 105, 101, 95, 115, 105, 122, 101, 32, 105, 110, 10, 37, 32, 116, 104, 101, 32, 115, 111, 117, 114, 99, 101, 115, 41, 44, 32, 98, 117, 116, 32, 119, 101, 32, 100, 111, 110, 39, 116, 32, 110, 101, 101, 100, 32, 116, 104, 97, 116, 32, 109, 117, 99, 104, 46, 32, 32, 84, 104, 101, 32, 118, 97, 108, 117, 101, 32, 104, 101, 114, 101, 32, 115, 117, 102, 102, 105, 99, 101, 115, 10, 37, 32, 102, 111, 114, 32, 97, 108, 108, 32, 107, 110, 111, 119, 110, 32, 102, 114, 101, 101, 32, 104, 121, 112, 104, 101, 110, 97, 116, 105, 111, 110, 32, 112, 97, 116, 116, 101, 114, 110, 115, 32, 116, 111, 32, 98, 101, 32, 108, 111, 97, 100, 101, 100, 32, 115, 105, 109, 117, 108, 116, 97, 110, 101, 111, 117, 115, 108, 121, 10, 37, 32, 40, 97, 115, 32, 84, 101, 88, 32, 76, 105, 118, 101, 32, 100, 111, 101, 115, 41, 46, 10, 37, 10, 116, 114, 105, 101, 95, 115, 105, 122, 101, 32, 61, 32, 49, 48, 48, 48, 48, 48, 48, 10, 10, 104, 121, 112, 104, 95, 115, 105, 122, 101, 32, 61, 32, 56, 49, 57, 49, 32, 32, 32, 32, 32, 32, 32, 32, 37, 32, 112, 114, 105, 109, 101, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 104, 121, 112, 104, 101, 110, 97, 116, 105, 111, 110, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 115, 44, 32, 62, 54, 49, 48, 44, 32, 60, 51, 50, 55, 54, 55, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 37, 32, 104, 116, 116, 112, 58, 47, 47, 112, 114, 105, 109, 101, 115, 46, 117, 116, 109, 46, 101, 100, 117, 47, 99, 117, 114, 105, 111, 115, 47, 112, 97, 103, 101, 46, 112, 104, 112, 47, 56, 49, 57, 49, 46, 104, 116, 109, 108, 10, 110, 101, 115, 116, 95, 115, 105, 122, 101, 32, 61, 32, 53, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 37, 32, 115, 105, 109, 117, 108, 116, 97, 110, 101, 111, 117, 115, 32, 115, 101, 109, 97, 110, 116, 105, 99, 32, 108, 101, 118, 101, 108, 115, 32, 40, 101, 46, 103, 46, 44, 32, 103, 114, 111, 117, 112, 115, 41, 10, 109, 97, 120, 95, 105, 110, 95, 111, 112, 101, 110, 32, 61, 32, 49, 53, 32, 32, 32, 32, 32, 32, 32, 32, 37, 32, 115, 105, 109, 117, 108, 116, 97, 110, 101, 111, 117, 115, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 115, 32, 97, 110, 100, 32, 101, 114, 114, 111, 114, 32, 105, 110, 115, 101, 114, 116, 105, 111, 110, 115, 44, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 37, 32, 97, 108, 115, 111, 32, 97, 112, 112, 108, 105, 101, 115, 32, 116, 111, 32, 77, 101, 116, 97, 80, 111, 115, 116, 10, 112, 97, 114, 97, 109, 95, 115, 105, 122, 101, 32, 61, 32, 49, 48, 48, 48, 48, 32, 32, 32, 32, 32, 32, 37, 32, 115, 105, 109, 117, 108, 116, 97, 110, 101, 111, 117, 115, 32, 109, 97, 99, 114, 111, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 44, 32, 97, 108, 115, 111, 32, 97, 112, 112, 108, 105, 101, 115, 32, 116, 111, 32, 77, 80, 10, 115, 97, 118, 101, 95, 115, 105, 122, 101, 32, 61, 32, 53, 48, 48, 48, 48, 32, 32, 32, 32, 32, 32, 32, 37, 32, 102, 111, 114, 32, 115, 97, 118, 105, 110, 103, 32, 118, 97, 108, 117, 101, 115, 32, 111, 117, 116, 115, 105, 100, 101, 32, 99, 117, 114, 114, 101, 110, 116, 32, 103, 114, 111, 117, 112, 10, 115, 116, 97, 99, 107, 95, 115, 105, 122, 101, 32, 61, 32, 53, 48, 48, 48, 32, 32, 32, 32, 32, 32, 32, 37, 32, 115, 105, 109, 117, 108, 116, 97, 110, 101, 111, 117, 115, 32, 105, 110, 112, 117, 116, 32, 115, 111, 117, 114, 99, 101, 115, 10, 10, 37, 32, 84, 104, 101, 115, 101, 32, 97, 114, 101, 32, 79, 109, 101, 103, 97, 45, 115, 112, 101, 99, 105, 102, 105, 99, 46, 10, 111, 99, 112, 95, 98, 117, 102, 95, 115, 105, 122, 101, 32, 61, 32, 53, 48, 48, 48, 48, 48, 32, 32, 32, 37, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 98, 117, 102, 102, 101, 114, 115, 32, 102, 111, 114, 32, 111, 99, 112, 32, 102, 105, 108, 116, 101, 114, 115, 46, 10, 111, 99, 112, 95, 115, 116, 97, 99, 107, 95, 115, 105, 122, 101, 32, 61, 32, 49, 48, 48, 48, 48, 32, 32, 37, 32, 115, 116, 97, 99, 107, 115, 32, 102, 111, 114, 32, 111, 99, 112, 32, 99, 111, 109, 112, 117, 116, 97, 116, 105, 111, 110, 115, 46, 10, 111, 99, 112, 95, 108, 105, 115, 116, 95, 115, 105, 122, 101, 32, 61, 32, 49, 48, 48, 48, 32, 32, 32, 32, 37, 32, 99, 111, 110, 116, 114, 111, 108, 32, 102, 111, 114, 32, 109, 117, 108, 116, 105, 112, 108, 101, 32, 111, 99, 112, 115, 46, 10, 10, 37, 32, 84, 104, 101, 115, 101, 32, 119, 111, 114, 107, 32, 98, 101, 115, 116, 32, 105, 102, 32, 116, 104, 101, 121, 32, 97, 114, 101, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 97, 115, 32, 116, 104, 101, 32, 73, 47, 79, 32, 98, 117, 102, 102, 101, 114, 32, 115, 105, 122, 101, 44, 32, 98, 117, 116, 32, 105, 116, 10, 37, 32, 100, 111, 101, 115, 110, 39, 116, 32, 109, 97, 116, 116, 101, 114, 32, 109, 117, 99, 104, 46, 32, 32, 77, 117, 115, 116, 32, 98, 101, 32, 97, 32, 109, 117, 108, 116, 105, 112, 108, 101, 32, 111, 102, 32, 56, 46, 10, 100, 118, 105, 95, 98, 117, 102, 95, 115, 105, 122, 101, 32, 61, 32, 49, 54, 51, 56, 52, 32, 37, 32, 84, 101, 88, 10, 103, 102, 95, 98, 117, 102, 95, 115, 105, 122, 101, 32, 61, 32, 49, 54, 51, 56, 52, 32, 32, 37, 32, 77, 70, 10, 10, 37, 32, 73, 116, 39, 115, 32, 112, 114, 111, 98, 97, 98, 108, 121, 32, 105, 110, 97, 100, 118, 105, 115, 97, 98, 108, 101, 32, 116, 111, 32, 99, 104, 97, 110, 103, 101, 32, 116, 104, 101, 115, 101, 46, 32, 65, 116, 32, 97, 110, 121, 32, 114, 97, 116, 101, 44, 32, 119, 101, 32, 109, 117, 115, 116, 32, 104, 97, 118, 101, 58, 10, 37, 32, 52, 53, 32, 60, 32, 101, 114, 114, 111, 114, 95, 108, 105, 110, 101, 32, 32, 32, 32, 32, 32, 60, 32, 50, 53, 53, 59, 10, 37, 32, 51, 48, 32, 60, 32, 104, 97, 108, 102, 95, 101, 114, 114, 111, 114, 95, 108, 105, 110, 101, 32, 60, 32, 101, 114, 114, 111, 114, 95, 108, 105, 110, 101, 32, 45, 32, 49, 53, 59, 10, 37, 32, 54, 48, 32, 60, 61, 32, 109, 97, 120, 95, 112, 114, 105, 110, 116, 95, 108, 105, 110, 101, 59, 10, 37, 32, 84, 104, 101, 115, 101, 32, 97, 112, 112, 108, 121, 32, 116, 111, 32, 84, 101, 88, 44, 32, 77, 101, 116, 97, 102, 111, 110, 116, 44, 32, 97, 110, 100, 32, 77, 101, 116, 97, 80, 111, 115, 116, 46, 10, 101, 114, 114, 111, 114, 95, 108, 105, 110, 101, 32, 61, 32, 55, 57, 10, 104, 97, 108, 102, 95, 101, 114, 114, 111, 114, 95, 108, 105, 110, 101, 32, 61, 32, 53, 48, 10, 109, 97, 120, 95, 112, 114, 105, 110, 116, 95, 108, 105, 110, 101, 32, 61, 32, 55, 57, 10, 10, 37, 32, 77, 101, 116, 97, 102, 111, 110, 116, 32, 111, 110, 108, 121, 46, 10, 115, 99, 114, 101, 101, 110, 95, 119, 105, 100, 116, 104, 46, 109, 102, 32, 61, 32, 49, 54, 54, 52, 10, 115, 99, 114, 101, 101, 110, 95, 100, 101, 112, 116, 104, 46, 109, 102, 32, 61, 32, 49, 50, 48, 48, 10, 10, 37, 32, 66, 105, 98, 84, 101, 88, 32, 111, 110, 108, 121, 32, 40, 109, 97, 120, 95, 115, 116, 114, 105, 110, 103, 115, 32, 97, 108, 115, 111, 32, 100, 101, 116, 101, 114, 109, 105, 110, 101, 115, 32, 104, 97, 115, 104, 95, 115, 105, 122, 101, 32, 97, 110, 100, 32, 104, 97, 115, 104, 95, 112, 114, 105, 109, 101, 41, 46, 10, 101, 110, 116, 95, 115, 116, 114, 95, 115, 105, 122, 101, 32, 61, 32, 32, 50, 53, 48, 10, 103, 108, 111, 98, 95, 115, 116, 114, 95, 115, 105, 122, 101, 32, 61, 32, 50, 48, 48, 48, 48, 10, 109, 97, 120, 95, 115, 116, 114, 105, 110, 103, 115, 46, 98, 105, 98, 116, 101, 120, 32, 61, 32, 51, 53, 51, 48, 55, 10, 109, 97, 120, 95, 115, 116, 114, 105, 110, 103, 115, 46, 98, 105, 98, 116, 101, 120, 56, 32, 61, 32, 51, 53, 51, 48, 55, 10, 109, 97, 120, 95, 115, 116, 114, 105, 110, 103, 115, 46, 98, 105, 98, 116, 101, 120, 117, 32, 61, 32, 51, 53, 51, 48, 55, 10, 109, 97, 120, 95, 115, 116, 114, 105, 110, 103, 115, 46, 112, 98, 105, 98, 116, 101, 120, 32, 61, 32, 51, 53, 51, 48, 55, 10, 10, 37, 32, 71, 70, 116, 121, 112, 101, 32, 111, 110, 108, 121, 46, 10, 108, 105, 110, 101, 95, 108, 101, 110, 103, 116, 104, 46, 103, 102, 116, 121, 112, 101, 32, 61, 32, 53, 48, 48, 10, 109, 97, 120, 95, 114, 111, 119, 115, 46, 103, 102, 116, 121, 112, 101, 32, 61, 32, 56, 49, 57, 49, 10, 109, 97, 120, 95, 99, 111, 108, 115, 46, 103, 102, 116, 121, 112, 101, 32, 61, 32, 56, 49, 57, 49, 10]), true, true);
Module['FS_createDataFile']('/bin', 'this.program', [46, 46], true, true);
Module['FS_createDataFile']('/bin', 'empty~', [35], true, true);
Module['FS_createDataFile']('/bin', 'empty', [46], true, true);
Module['FS_createDataFile']('/bin', 'this.program~', [46], true, true);


})();



if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

initRuntime();

var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

if (shouldRunNow) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}






  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_kpse_out_name_ok","_zpushlitstk","_illeglliteralconfusion","_hash_create","_zprintfnclass","_printconfusion","_xformatname","_hashciteconfusion","_mainbody","_search_list","_eatbstprint","_poptopandprint","_kpathsea_xputenv","_xequals","_zscan1white","_sys_alloc","_markerror","_bibcmdconfusion","_kpathsea_path_search","_main","_xwarning","_bsterrprintandlookforblankline","_xswap","_kpathsea_init_format","_hash_normalized","_auxbibdatacommand","_xfclose","_map_file_parse","_bstwarnprint","_kpse_find_file","_kpathsea_brace_expand","_bstsortcommand","_zoutpoolstr","_kpathsea_readable_file","_scanafieldtokenandeatwhite","_znamescanforand","_zaddbufpool","_extend_filename","_uexit","_StripFirst","_zalreadyseenfunctionprint","_vontokenfound","_sys_trim","_kpathsea_make_tex","_hash_insert","_printbibname","_computehashprime","_biberrprint","_close_file","_getbibcommandorentryandprocess","_idscanningconfusion","_bufferoverflow","_kpathsea_all_path_search","_xtextprefix","_bstreadcommand","_kpse_in_name_ok","_malloc","_macrowarnprint","_scanalpha","_zcheckfieldoverflow","_zscan2white","_printversionandexit","_open_output","_zbadcrossreferenceprint","_bstrightbraceprint","_xlessthan","_xbasename","_xcite","_zzbuildin","_xgetcwd","_zstreqbuf","_scanwhitespace","_skipstuffatspbracelevelgreaterthanone","_bibunbalancedbracesprint","_xempty","_kpathsea_all_path_search_list","_setupboundvariable","_kpathsea_filename_component","_dir_list_search","_fn_grow","_magstep","_xstrdup","_xdirname","_zprintmissingentry","_eatbibprint","_kpathsea_dir_links","_kpathsea_element_dirs","_expand_append","_elt_in_db","_kpathsea_fontmap_lookup","_zcheckbracelevel","_match","_bstiteratecommand","_str_list_concat","_str_list_uniqify","_expand_elt","_caseconversionconfusion","_ReadSymLink","_kpathsea_expand","_xgets","_target_fontmaps","_auxcitationcommand","_kpathsea_tilde_expand","_token","_kpathsea_in_name_ok","_xaddperiod","__getopt_internal","_eatbibwhitespace","_free","_kpathsea_db_search","_kpathsea_absolute_p","_unknwnliteralconfusion","_checked_dir_list_add","_bstleftbraceprint","_xpurify","_xtype","_init_path","_auxerrnorightbraceprint","_cache","_zscanidentifier","_zswap","_find_suffix","_tmalloc_large","_auxerrstuffafterrightbraceprint","_bibfieldtoolongprint","_xmissing","_kpathsea_magstep_fix","_xwidth","_bstexecutecommand","_fn_1grow","_zprintstklit","_zquicksort","_hash","_printauxname","_skipillegalstuffaftertokenprint","_bstreversecommand","_zouttoken","_printrecursionillegal","_init_maketex","_logprauxname","_printskippingwhateverremains","_kpathsea_out_name_ok_1","_nonexistentcrossreferenceerror","_bibequalssignprint","_xgreaterthan","_zaddextension","_zinputln","_zstrlookup","_zaddoutpool","_kpse_set_program_name","_fn_free","_recorder_record_name","_initialize","_str_llist_add","_auxend2errprint","_kpathsea_set_suffixes","_kpathsea_expand_kpse_dot","_fn_str_grow","_bstintegerscommand","_eatbstwhitespace","_bst2printstringsizeexceeded","_xinttostr","_init_top","_internal_realloc","_zstartname","_eoln","_xconcatenate","_read_all_maps","_str_llist_float","_scanandstorethefieldvalueandeatwhite","_expand_symlinks","_kpse_var_value","_brace_expand","_concatn_with_spaces","_kpathsea_db_search_list","_expand","_xplus","_xfopen","_parsearguments","_samwrongfilenameprint","_pooloverflow","_zprintapoolstr","_uppercasify","_xchangecase","_xchrtoint","_kpathsea_set_program_enabled","_skptokenunknownfunctionprint","_popwholestack","_auxbibstylecommand","_markfatal","_bibidprint","_dir_list_add","_zstreqstr","_zfindcitelocsforthiscitekey","_release_unused_segments","_str_list_concat_elements","_fn_shrink_to","_getopt_long_only","_search","_makestring","_target_asis_name","_kpse_fclose_trace","_zscanfndef","_concat","_kpathsea_normalize_path","_mmap_alloc","_getthetoplevelauxfilename","_my_index","_kpse_absolute_p","_zdecrbracelevel","_traceandstatprinting","_zprintwrongstklit","_getauxcommandandprocess","_set_maketex_mag","_initcommandexecution","_zbiboneoftwoprint","_remove_dots","_printanewline","_absolute_search","_scannonneginteger","_zscan3","_zscan2","_zscan1","_scaninteger","_cached","_remove_dbonly","_usage","_citekeydisappearedconfusion","_zlowercase","_kpathsea_find_file_generic","_kpathsea_set_suffixes_va_list","_kpathsea_brace_expand_element","_zcheckciteoverflow","_concatn","_kpathsea_dir_p","_zzadddatabasecite","_bststringscommand","_kpathsea_db_insert","_kpathsea_find_file","_unknwnfunctionclassconfusion","_add_segment","_concat3","_predefcertainstrings","_compressbibwhite","_zzinttoASCII","_recorder_record_output","_kpathsea_expand_default","_cmdline","_printoverflow","_read_all_cnf","_StripLast","_log_search","_kpathsea_path_search_list_generic","_auxerrprint","_auxerrwhitespaceinargumentprint","_xnumnames","_zbracesunbalancedcomplaint","_printbadinputline","_fn_init","_read_line","_checkcommandexecution","_lastcheckforauxerrors","_figureouttheformattedname","_bracelvloneletterscomplaint","_kpathsea_name_ok","_bstfunctioncommand","_auxinputcommand","_element","_bstentrycommand","_bibwarnprint","_usagehelp","_path_search","_kpathsea_cnf_get","_str_list_free","_do_subdir","_xduplicate","_bstlnnumprint","_memcpy","_zlessthan","_skiptokenprint","_zexecutefn","_expanding","_hash_print","_setupparams","_printbstname","_zenoughtextchars","_kpathsea_var_expand","_xmalloc","_open_input","_bstmildexwarnprint","_getbstcommandandprocess","_xinttochr","_samtoolongfilenameprint","_zzpoplitstk","_kpathsea_var_value","_eof","_logprbibname","_hash_insert_normalized","_recorder_start","_poptheauxstack","_addpoolbufandpush","_CopyFirst","_scanbalancedbraces","_db_build","_remove_suffix","_do_line","_bstexwarnprint","_kpathsea_selfdir","_xrealloc","_bstmacrocommand","_kpathsea_out_name_ok","_zuppercase","_xsubstring","_badargumenttoken","_outputbblline","_str_list_init","_bst1printstringsizeexceeded","_zauxerrillegalanotherprint","__getopt_initialize","_mmap_resize","_expanding_p","_kpathsea_path_element","_printatoken","_kpathsea_set_program_name","_prepend_alloc","_logprbstname","_xtextlength","_zpredefine","_xwrite","_grow","_bstcantmesswithentriesprint","_dir_list_search_list","_hash_lookup","_kpse_fopen_trace","_exchange","_kpathsea_truncate_filename","_target_suffixed_names","_init_bins","_alias_build","_zprintlit","_tmalloc_small","_xquote","_str_list_add","_kpathsea_tex_hush","_maketex","_auxend1errprint","_biblnnumprint","_markwarning","_vonnameendsandlastnamestartsstuff","_xclosedir","_xpreamble","_init_mparams","_fn_copy0","_realloc","_segment_holding","_misstex","_bstidprint","_fix_selfdir","_recorder_record_input","_xminus","_kpathsea_init_db","_ignore_dir_p"]


